{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v4.json", "dbt_version": "1.0.3", "generated_at": "2022-06-05T14:50:55.591041Z", "invocation_id": "d4a836d0-8436-4206-89a4-ef8981bdf955", "env": {}, "project_id": "e68c58fbf3eaa3378098c739f17648e9", "user_id": "221cbce4-e540-4766-bb16-eed2d6092c13", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.ethereum_models.bronze__contracts_backfill": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'contract_address'\n) }}\n\nWITH base AS (\n\n    SELECT\n        block_id,\n        block_timestamp,\n        creator_address,\n        contract_address,\n        logic_address,\n        token_convention,\n        TO_OBJECT(PARSE_JSON(contract_meta)) AS meta\n    FROM\n        {{ source(\n            'flipside_silver',\n            'ethereum_contracts_backfill'\n        ) }}\n    WHERE\n        CHECK_JSON(contract_meta) IS NULL\n)\nSELECT\n    block_id :: STRING AS block_id,\n    block_timestamp :: TIMESTAMP AS block_timestamp,\n    creator_address :: STRING AS creator_address,\n    LOWER(\n        contract_address :: STRING\n    ) AS contract_address,\n    logic_address :: STRING AS logic_address,\n    token_convention :: STRING AS token_convention,\n    meta :name :: STRING AS NAME,\n    meta :symbol :: STRING AS symbol,\n    meta :decimals :: INTEGER AS decimals,\n    meta :: OBJECT AS meta,\n    block_timestamp :: TIMESTAMP AS system_created_at\nFROM\n    base qualify(ROW_NUMBER() over(PARTITION BY LOWER(contract_address)\nORDER BY\n    block_timestamp DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.ethereum_models.flipside_silver.ethereum_contracts_backfill"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "unique_key": "contract_address", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "bronze", "fqn": ["ethereum_models", "bronze", "bronze__contracts_backfill"], "unique_id": "model.ethereum_models.bronze__contracts_backfill", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "bronze/bronze__contracts_backfill.sql", "original_file_path": "models/bronze/bronze__contracts_backfill.sql", "name": "bronze__contracts_backfill", "alias": "contracts_backfill", "checksum": {"name": "sha256", "checksum": "45207ee22c8bea8a468d522d5be02297da5309fca2342ea8617619acfcd4b84d"}, "tags": [], "refs": [], "sources": [["flipside_silver", "ethereum_contracts_backfill"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/bronze/bronze__contracts_backfill.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "contract_address"}, "created_at": 1654351201.833021, "compiled_sql": "\n\nWITH base AS (\n\n    SELECT\n        block_id,\n        block_timestamp,\n        creator_address,\n        contract_address,\n        logic_address,\n        token_convention,\n        TO_OBJECT(PARSE_JSON(contract_meta)) AS meta\n    FROM\n        flipside_prod_db.silver.ethereum_contracts_backfill\n    WHERE\n        CHECK_JSON(contract_meta) IS NULL\n)\nSELECT\n    block_id :: STRING AS block_id,\n    block_timestamp :: TIMESTAMP AS block_timestamp,\n    creator_address :: STRING AS creator_address,\n    LOWER(\n        contract_address :: STRING\n    ) AS contract_address,\n    logic_address :: STRING AS logic_address,\n    token_convention :: STRING AS token_convention,\n    meta :name :: STRING AS NAME,\n    meta :symbol :: STRING AS symbol,\n    meta :decimals :: INTEGER AS decimals,\n    meta :: OBJECT AS meta,\n    block_timestamp :: TIMESTAMP AS system_created_at\nFROM\n    base qualify(ROW_NUMBER() over(PARTITION BY LOWER(contract_address)\nORDER BY\n    block_timestamp DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.bronze.contracts_backfill"}, "model.ethereum_models.bronze__contracts": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'contract_address'\n) }}\n\nWITH base AS (\n\n    SELECT\n        *\n    FROM\n        {{ source(\n            'bronze',\n            'prod_ethereum_sink_407559501'\n        ) }}\n    WHERE\n        record_content :model :name :: STRING IN (\n            'eth_contracts_model'\n        )\n\n{% if is_incremental() %}\nAND (\n    record_metadata :CreateTime :: INT / 1000\n) :: TIMESTAMP :: DATE >= (\n    SELECT\n        DATEADD('day', -1, MAX(system_created_at :: DATE))\n    FROM\n        {{ this }}\n)\n{% endif %}\n)\nSELECT\n    (\n        record_metadata :CreateTime :: INT / 1000\n    ) :: TIMESTAMP AS system_created_at,\n    t.value :block_id :: STRING AS block_id,\n    t.value :block_timestamp :: TIMESTAMP AS block_timestamp,\n    t.value :creator_address :: STRING AS creator_address,\n    COALESCE(\n        t.value :contract_address :: STRING,\n        t.value :address :: STRING\n    ) AS contract_address,\n    t.value :logic_address :: STRING AS logic_address,\n    COALESCE(\n        t.value :contract_meta :symbol :: STRING,\n        t.value :meta :symbol :: STRING\n    ) AS symbol,\n    COALESCE(\n        t.value :contract_meta :decimals :: INTEGER,\n        t.value :meta :decimals :: INTEGER\n    ) AS decimals,\n    COALESCE(\n        t.value :contract_meta :: OBJECT,\n        t.value :meta :: OBJECT\n    ) AS meta,\n    t.value :name :: STRING AS NAME,\n    COALESCE(\n        t.value :token_convention :: STRING,\n        t.value :\"token-convention\" :: STRING\n    ) AS token_convention\nFROM\n    base,\n    LATERAL FLATTEN(\n        input => record_content :results\n    ) t\nWHERE\n    COALESCE(\n        t.value :contract_meta,\n        t.value :meta\n    ) IS NOT NULL\n    AND CASE\n        WHEN meta :decimals :: STRING IS NOT NULL\n        AND len(\n            meta :decimals :: STRING\n        ) >= 3 THEN TRUE\n        ELSE FALSE\n    END = FALSE qualify(ROW_NUMBER() over(PARTITION BY LOWER(contract_address)\nORDER BY\n    system_created_at DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.ethereum_models.bronze.prod_ethereum_sink_407559501"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "unique_key": "contract_address", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "bronze", "fqn": ["ethereum_models", "bronze", "bronze__contracts"], "unique_id": "model.ethereum_models.bronze__contracts", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "bronze/bronze__contracts.sql", "original_file_path": "models/bronze/bronze__contracts.sql", "name": "bronze__contracts", "alias": "contracts", "checksum": {"name": "sha256", "checksum": "c9951877c6ad9829728f20cd169fa6e2bc606d8da650ac4fdedfe21c924feb56"}, "tags": [], "refs": [], "sources": [["bronze", "prod_ethereum_sink_407559501"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/bronze/bronze__contracts.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "contract_address"}, "created_at": 1654351201.841515, "compiled_sql": "\n\nWITH base AS (\n\n    SELECT\n        *\n    FROM\n        flipside_prod_db.bronze.prod_ethereum_sink_407559501\n    WHERE\n        record_content :model :name :: STRING IN (\n            'eth_contracts_model'\n        )\n\n\nAND (\n    record_metadata :CreateTime :: INT / 1000\n) :: TIMESTAMP :: DATE >= (\n    SELECT\n        DATEADD('day', -1, MAX(system_created_at :: DATE))\n    FROM\n        ETHEREUM_DEV.bronze.contracts\n)\n\n)\nSELECT\n    (\n        record_metadata :CreateTime :: INT / 1000\n    ) :: TIMESTAMP AS system_created_at,\n    t.value :block_id :: STRING AS block_id,\n    t.value :block_timestamp :: TIMESTAMP AS block_timestamp,\n    t.value :creator_address :: STRING AS creator_address,\n    COALESCE(\n        t.value :contract_address :: STRING,\n        t.value :address :: STRING\n    ) AS contract_address,\n    t.value :logic_address :: STRING AS logic_address,\n    COALESCE(\n        t.value :contract_meta :symbol :: STRING,\n        t.value :meta :symbol :: STRING\n    ) AS symbol,\n    COALESCE(\n        t.value :contract_meta :decimals :: INTEGER,\n        t.value :meta :decimals :: INTEGER\n    ) AS decimals,\n    COALESCE(\n        t.value :contract_meta :: OBJECT,\n        t.value :meta :: OBJECT\n    ) AS meta,\n    t.value :name :: STRING AS NAME,\n    COALESCE(\n        t.value :token_convention :: STRING,\n        t.value :\"token-convention\" :: STRING\n    ) AS token_convention\nFROM\n    base,\n    LATERAL FLATTEN(\n        input => record_content :results\n    ) t\nWHERE\n    COALESCE(\n        t.value :contract_meta,\n        t.value :meta\n    ) IS NOT NULL\n    AND CASE\n        WHEN meta :decimals :: STRING IS NOT NULL\n        AND len(\n            meta :decimals :: STRING\n        ) >= 3 THEN TRUE\n        ELSE FALSE\n    END = FALSE qualify(ROW_NUMBER() over(PARTITION BY LOWER(contract_address)\nORDER BY\n    system_created_at DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.bronze.contracts"}, "model.ethereum_models.bronze__blocks": {"raw_sql": "{{ config (\n    materialized = 'view'\n) }}\n\nSELECT\n    record_id,\n    offset_id,\n    block_id,\n    block_timestamp,\n    network,\n    chain_id,\n    tx_count,\n    header,\n    ingested_at\nFROM\n    {{ source(\n        'prod',\n        'ethereum_blocks'\n    ) }}\n    qualify(ROW_NUMBER() over(PARTITION BY block_id\nORDER BY\n    ingested_at DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.ethereum_models.prod.ethereum_blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "bronze", "fqn": ["ethereum_models", "bronze", "bronze__blocks"], "unique_id": "model.ethereum_models.bronze__blocks", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "bronze/bronze__blocks.sql", "original_file_path": "models/bronze/bronze__blocks.sql", "name": "bronze__blocks", "alias": "blocks", "checksum": {"name": "sha256", "checksum": "2f33a66578c3f9d2d4b1ab84eea3bf42abfc95fcc98d917835ef63b764ad8179"}, "tags": [], "refs": [], "sources": [["prod", "ethereum_blocks"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/bronze/bronze__blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1654351201.850406, "compiled_sql": "\n\nSELECT\n    record_id,\n    offset_id,\n    block_id,\n    block_timestamp,\n    network,\n    chain_id,\n    tx_count,\n    header,\n    ingested_at\nFROM\n    chainwalkers.prod.ethereum_blocks\n    qualify(ROW_NUMBER() over(PARTITION BY block_id\nORDER BY\n    ingested_at DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.bronze.blocks"}, "model.ethereum_models.bronze__transactions": {"raw_sql": "{{ config (\n    materialized = 'view'\n) }}\n\nSELECT\n    record_id,\n    tx_id,\n    tx_block_index,\n    offset_id,\n    block_id,\n    block_timestamp,\n    network,\n    chain_id,\n    tx,\n    ingested_at\nFROM\n    {{ source(\n        'prod',\n        'ethereum_txs'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.ethereum_models.prod.ethereum_txs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "bronze", "fqn": ["ethereum_models", "bronze", "bronze__transactions"], "unique_id": "model.ethereum_models.bronze__transactions", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "bronze/bronze__transactions.sql", "original_file_path": "models/bronze/bronze__transactions.sql", "name": "bronze__transactions", "alias": "transactions", "checksum": {"name": "sha256", "checksum": "891aa22879fef171c80c50dbab4335b17db1b278d314cc7fb03858c76be8f878"}, "tags": [], "refs": [], "sources": [["prod", "ethereum_txs"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/bronze/bronze__transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1654351201.852439, "compiled_sql": "\n\nSELECT\n    record_id,\n    tx_id,\n    tx_block_index,\n    offset_id,\n    block_id,\n    block_timestamp,\n    network,\n    chain_id,\n    tx,\n    ingested_at\nFROM\n    chainwalkers.prod.ethereum_txs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.bronze.transactions"}, "model.ethereum_models.silver__transactions": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"tx_hash\",\n    cluster_by = ['ingested_at::DATE'],\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION\"\n) }}\n\nWITH base_table AS (\n\n    SELECT\n        block_timestamp,\n        COALESCE(\n            tx :block_number :: INTEGER,\n            tx :blockNumber :: INTEGER\n        ) AS block_number,\n        tx_id :: STRING AS tx_hash,\n        silver.js_hex_to_int(\n            tx :nonce :: STRING\n        ) AS nonce,\n        tx_block_index AS POSITION,\n        tx :from :: STRING AS from_address,\n        tx :to :: STRING AS to_address,\n        tx :value / pow(\n            10,\n            18\n        ) AS eth_value,\n        COALESCE(\n            tx :block_hash :: STRING,\n            tx :blockHash :: STRING\n        ) AS block_hash,\n        COALESCE(\n            tx :gas_price / pow(\n                10,\n                9\n            ),\n            tx :gasPrice / pow(\n                10,\n                9\n            )\n        ) AS gas_price,\n        tx :gas :: INTEGER AS gas_limit,\n        tx :input :: STRING AS DATA,\n        CASE\n            WHEN tx :receipt :status :: STRING = '0x1' THEN 'SUCCESS'\n            ELSE 'FAIL'\n        END AS status,\n        silver.js_hex_to_int(\n            tx :receipt :gasUsed :: STRING\n        ) AS gas_used,\n        silver.js_hex_to_int(\n            tx :receipt :cumulativeGasUsed :: STRING\n        ) AS cumulative_Gas_Used,\n        silver.js_hex_to_int(\n            tx :receipt :effectiveGasPrice :: STRING\n        ) AS effective_Gas_Price,\n        (\n            gas_price * silver.js_hex_to_int(\n                tx :receipt :gasUsed :: STRING\n            )\n        ) / pow(\n            10,\n            9\n        ) AS tx_fee,\n        ingested_at :: TIMESTAMP AS ingested_at,\n        OBJECT_DELETE(\n            tx,\n            'traces'\n        ) AS tx_json\n    FROM\n        {{ ref('bronze__transactions') }}\n\n{% if is_incremental() %}\nWHERE\n    ingested_at >= (\n        SELECT\n            MAX(\n                ingested_at\n            )\n        FROM\n            {{ this }}\n    )\n{% endif %}\n)\nSELECT\n    block_timestamp,\n    block_number,\n    tx_hash,\n    nonce,\n    POSITION,\n    SUBSTR(\n        DATA,\n        1,\n        10\n    ) AS origin_function_signature,\n    from_address,\n    to_address,\n    eth_value,\n    block_hash,\n    gas_price,\n    gas_limit,\n    DATA AS input_data,\n    status,\n    gas_used,\n    cumulative_Gas_Used,\n    effective_Gas_Price,\n    tx_fee,\n    ingested_at,\n    tx_json\nFROM\n    base_table qualify(ROW_NUMBER() over(PARTITION BY tx_hash\nORDER BY\n    ingested_at DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_models.bronze__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "cluster_by": ["ingested_at::DATE"], "unique_key": "tx_hash", "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION", "transaction": true, "index": null}], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "silver", "fqn": ["ethereum_models", "silver", "silver__transactions"], "unique_id": "model.ethereum_models.silver__transactions", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "silver/silver__transactions.sql", "original_file_path": "models/silver/silver__transactions.sql", "name": "silver__transactions", "alias": "transactions", "checksum": {"name": "sha256", "checksum": "23633d4ccd7326be29abed90f48d969ebbb09ff3e4edb12e3279a64ff1c14c55"}, "tags": [], "refs": [["bronze__transactions"]], "sources": [], "description": "", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NONCE": {"name": "NONCE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POSITION": {"name": "POSITION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETH_VALUE": {"name": "ETH_VALUE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HASH": {"name": "BLOCK_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_PRICE": {"name": "GAS_PRICE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_LIMIT": {"name": "GAS_LIMIT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INPUT_DATA": {"name": "INPUT_DATA", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STATUS": {"name": "STATUS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_USED": {"name": "GAS_USED", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUMULATIVE_GAS_USED": {"name": "CUMULATIVE_GAS_USED", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_FEE": {"name": "TX_FEE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EFFECTIVE_GAS_PRICE": {"name": "EFFECTIVE_GAS_PRICE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_JSON": {"name": "TX_JSON", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_models://models/silver/silver__transactions.yml", "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "tx_hash", "cluster_by": ["ingested_at::DATE"], "post-hook": ["ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION"]}, "created_at": 1654351202.721938, "compiled_sql": "\n\nWITH base_table AS (\n\n    SELECT\n        block_timestamp,\n        COALESCE(\n            tx :block_number :: INTEGER,\n            tx :blockNumber :: INTEGER\n        ) AS block_number,\n        tx_id :: STRING AS tx_hash,\n        silver.js_hex_to_int(\n            tx :nonce :: STRING\n        ) AS nonce,\n        tx_block_index AS POSITION,\n        tx :from :: STRING AS from_address,\n        tx :to :: STRING AS to_address,\n        tx :value / pow(\n            10,\n            18\n        ) AS eth_value,\n        COALESCE(\n            tx :block_hash :: STRING,\n            tx :blockHash :: STRING\n        ) AS block_hash,\n        COALESCE(\n            tx :gas_price / pow(\n                10,\n                9\n            ),\n            tx :gasPrice / pow(\n                10,\n                9\n            )\n        ) AS gas_price,\n        tx :gas :: INTEGER AS gas_limit,\n        tx :input :: STRING AS DATA,\n        CASE\n            WHEN tx :receipt :status :: STRING = '0x1' THEN 'SUCCESS'\n            ELSE 'FAIL'\n        END AS status,\n        silver.js_hex_to_int(\n            tx :receipt :gasUsed :: STRING\n        ) AS gas_used,\n        silver.js_hex_to_int(\n            tx :receipt :cumulativeGasUsed :: STRING\n        ) AS cumulative_Gas_Used,\n        silver.js_hex_to_int(\n            tx :receipt :effectiveGasPrice :: STRING\n        ) AS effective_Gas_Price,\n        (\n            gas_price * silver.js_hex_to_int(\n                tx :receipt :gasUsed :: STRING\n            )\n        ) / pow(\n            10,\n            9\n        ) AS tx_fee,\n        ingested_at :: TIMESTAMP AS ingested_at,\n        OBJECT_DELETE(\n            tx,\n            'traces'\n        ) AS tx_json\n    FROM\n        ETHEREUM_DEV.bronze.transactions\n\n\nWHERE\n    ingested_at >= (\n        SELECT\n            MAX(\n                ingested_at\n            )\n        FROM\n            ETHEREUM_DEV.silver.transactions\n    )\n\n)\nSELECT\n    block_timestamp,\n    block_number,\n    tx_hash,\n    nonce,\n    POSITION,\n    SUBSTR(\n        DATA,\n        1,\n        10\n    ) AS origin_function_signature,\n    from_address,\n    to_address,\n    eth_value,\n    block_hash,\n    gas_price,\n    gas_limit,\n    DATA AS input_data,\n    status,\n    gas_used,\n    cumulative_Gas_Used,\n    effective_Gas_Price,\n    tx_fee,\n    ingested_at,\n    tx_json\nFROM\n    base_table qualify(ROW_NUMBER() over(PARTITION BY tx_hash\nORDER BY\n    ingested_at DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.silver.transactions"}, "model.ethereum_models.silver__contracts_extended": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'contract_address'\n) }}\n\nWITH bronze AS (\n\n    SELECT\n        system_created_at,\n        block_id,\n        block_timestamp,\n        creator_address,\n        LOWER(contract_address) AS contract_address,\n        logic_address,\n        token_convention,\n        NAME,\n        symbol,\n        decimals,\n        meta,\n        'bronze' AS model\n    FROM\n        {{ ref('bronze__contracts') }}\n    WHERE\n        meta IS NOT NULL\n),\nbackfill_contracts AS (\n    SELECT\n        system_created_at,\n        block_id,\n        block_timestamp,\n        creator_address,\n        LOWER(contract_address) AS contract_address,\n        logic_address,\n        token_convention,\n        NAME,\n        symbol,\n        decimals,\n        meta,\n        'backfill' AS model\n    FROM\n        {{ ref('bronze__contracts_backfill') }}\n    WHERE\n        meta IS NOT NULL\n),\nlegacy_contracts AS (\n    SELECT\n        '2000-01-01' :: TIMESTAMP AS system_created_at,\n        NULL AS block_id,\n        NULL AS block_timestamp,\n        NULL AS creator_address,\n        LOWER(address) AS contract_address,\n        NULL AS logic_address,\n        NULL AS token_convention,\n        meta :name AS NAME,\n        meta :symbol AS symbol,\n        meta :decimals AS decimals,\n        meta,\n        'redshift' AS model\n    FROM\n        {{ source(\n            'flipside_silver',\n            'ethereum_contracts'\n        ) }}\n    WHERE\n        meta IS NOT NULL\n),\nfull_list AS (\n    SELECT\n        system_created_at,\n        block_id,\n        block_timestamp,\n        creator_address,\n        contract_address,\n        logic_address,\n        token_convention,\n        NAME,\n        symbol,\n        decimals,\n        meta,\n        model\n    FROM\n        bronze\n    UNION\n    SELECT\n        system_created_at,\n        block_id,\n        block_timestamp,\n        creator_address,\n        contract_address,\n        logic_address,\n        token_convention,\n        NAME,\n        symbol,\n        decimals,\n        meta,\n        model\n    FROM\n        backfill_contracts\n    UNION\n    SELECT\n        system_created_at,\n        block_id,\n        block_timestamp,\n        creator_address,\n        contract_address,\n        logic_address,\n        token_convention,\n        NAME,\n        symbol,\n        decimals,\n        meta,\n        model\n    FROM\n        legacy_contracts\n)\nSELECT\n    system_created_at,\n    block_id :: FLOAT AS block_number,\n    block_timestamp,\n    creator_address,\n    contract_address,\n    logic_address,\n    token_convention,\n    NAME,\n    symbol,\n    decimals :: FLOAT AS decimals,\n    meta AS contract_metadata,\n    model\nFROM\n    full_list qualify(ROW_NUMBER() over(PARTITION BY contract_address\nORDER BY\n    model ASC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.ethereum_models.flipside_silver.ethereum_contracts", "model.ethereum_models.bronze__contracts", "model.ethereum_models.bronze__contracts_backfill"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "unique_key": "contract_address", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "silver", "fqn": ["ethereum_models", "silver", "silver__contracts_extended"], "unique_id": "model.ethereum_models.silver__contracts_extended", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "silver/silver__contracts_extended.sql", "original_file_path": "models/silver/silver__contracts_extended.sql", "name": "silver__contracts_extended", "alias": "contracts_extended", "checksum": {"name": "sha256", "checksum": "b4663fd17246f36dfb7ac823deb960d6de39d656f050a28962d77bc8c2e71cbe"}, "tags": [], "refs": [["bronze__contracts"], ["bronze__contracts_backfill"]], "sources": [["flipside_silver", "ethereum_contracts"]], "description": "", "columns": {"SYSTEM_CREATED_AT": {"name": "SYSTEM_CREATED_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR_ADDRESS": {"name": "CREATOR_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOGIC_ADDRESS": {"name": "LOGIC_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_CONVENTION": {"name": "TOKEN_CONVENTION", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYMBOL": {"name": "SYMBOL", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DECIMALS": {"name": "DECIMALS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_METADATA": {"name": "CONTRACT_METADATA", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_models://models/silver/silver__contracts_extended.yml", "compiled_path": "target/compiled/ethereum_models/models/silver/silver__contracts_extended.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "contract_address"}, "created_at": 1654351202.9219258, "compiled_sql": "\n\nWITH bronze AS (\n\n    SELECT\n        system_created_at,\n        block_id,\n        block_timestamp,\n        creator_address,\n        LOWER(contract_address) AS contract_address,\n        logic_address,\n        token_convention,\n        NAME,\n        symbol,\n        decimals,\n        meta,\n        'bronze' AS model\n    FROM\n        ETHEREUM_DEV.bronze.contracts\n    WHERE\n        meta IS NOT NULL\n),\nbackfill_contracts AS (\n    SELECT\n        system_created_at,\n        block_id,\n        block_timestamp,\n        creator_address,\n        LOWER(contract_address) AS contract_address,\n        logic_address,\n        token_convention,\n        NAME,\n        symbol,\n        decimals,\n        meta,\n        'backfill' AS model\n    FROM\n        ETHEREUM_DEV.bronze.contracts_backfill\n    WHERE\n        meta IS NOT NULL\n),\nlegacy_contracts AS (\n    SELECT\n        '2000-01-01' :: TIMESTAMP AS system_created_at,\n        NULL AS block_id,\n        NULL AS block_timestamp,\n        NULL AS creator_address,\n        LOWER(address) AS contract_address,\n        NULL AS logic_address,\n        NULL AS token_convention,\n        meta :name AS NAME,\n        meta :symbol AS symbol,\n        meta :decimals AS decimals,\n        meta,\n        'redshift' AS model\n    FROM\n        flipside_prod_db.silver.ethereum_contracts\n    WHERE\n        meta IS NOT NULL\n),\nfull_list AS (\n    SELECT\n        system_created_at,\n        block_id,\n        block_timestamp,\n        creator_address,\n        contract_address,\n        logic_address,\n        token_convention,\n        NAME,\n        symbol,\n        decimals,\n        meta,\n        model\n    FROM\n        bronze\n    UNION\n    SELECT\n        system_created_at,\n        block_id,\n        block_timestamp,\n        creator_address,\n        contract_address,\n        logic_address,\n        token_convention,\n        NAME,\n        symbol,\n        decimals,\n        meta,\n        model\n    FROM\n        backfill_contracts\n    UNION\n    SELECT\n        system_created_at,\n        block_id,\n        block_timestamp,\n        creator_address,\n        contract_address,\n        logic_address,\n        token_convention,\n        NAME,\n        symbol,\n        decimals,\n        meta,\n        model\n    FROM\n        legacy_contracts\n)\nSELECT\n    system_created_at,\n    block_id :: FLOAT AS block_number,\n    block_timestamp,\n    creator_address,\n    contract_address,\n    logic_address,\n    token_convention,\n    NAME,\n    symbol,\n    decimals :: FLOAT AS decimals,\n    meta AS contract_metadata,\n    model\nFROM\n    full_list qualify(ROW_NUMBER() over(PARTITION BY contract_address\nORDER BY\n    model ASC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.silver.contracts_extended"}, "model.ethereum_models.silver__transfers": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = '_log_id',\n    cluster_by = ['ingested_at::DATE']\n) }}\n\nWITH logs AS (\n\n    SELECT\n        _log_id,\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        event_name,\n        event_index,\n        event_inputs,\n        ingested_at :: TIMESTAMP AS ingested_at\n    FROM\n        {{ ref('silver__logs') }}\n    WHERE\n        tx_status = 'SUCCESS'\n\n{% if is_incremental() %}\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        )\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\ntransfers AS (\n    SELECT\n        _log_id,\n        block_number,\n        tx_hash,\n        block_timestamp,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address :: STRING AS contract_address,\n        event_inputs :from :: STRING AS from_address,\n        event_inputs :to :: STRING AS to_address,\n        event_inputs :value :: FLOAT AS raw_amount,\n        event_index,\n        ingested_at\n    FROM\n        logs\n    WHERE\n        event_name = 'Transfer'\n        AND raw_amount IS NOT NULL\n)\nSELECT\n    _log_id,\n    block_number,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    block_timestamp,\n    contract_address,\n    from_address,\n    to_address,\n    raw_amount,\n    ingested_at,\n    event_index\nFROM\n    transfers qualify(ROW_NUMBER() over(PARTITION BY _log_id\nORDER BY\n    ingested_at DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "cluster_by": ["ingested_at::DATE"], "unique_key": "_log_id", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "silver", "fqn": ["ethereum_models", "silver", "silver__transfers"], "unique_id": "model.ethereum_models.silver__transfers", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "silver/silver__transfers.sql", "original_file_path": "models/silver/silver__transfers.sql", "name": "silver__transfers", "alias": "transfers", "checksum": {"name": "sha256", "checksum": "870b93a0baf9c3d2757c05db3017994650db9e57fe2652a26c2a14df737e66bb"}, "tags": [], "refs": [["silver__logs"]], "sources": [], "description": "", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RAW_AMOUNT": {"name": "RAW_AMOUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_LOG_ID": {"name": "_LOG_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_models://models/silver/silver__transfers.yml", "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transfers.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "_log_id", "cluster_by": ["ingested_at::DATE"]}, "created_at": 1654351202.847487, "compiled_sql": "\n\nWITH logs AS (\n\n    SELECT\n        _log_id,\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        event_name,\n        event_index,\n        event_inputs,\n        ingested_at :: TIMESTAMP AS ingested_at\n    FROM\n        ETHEREUM_DEV.silver.logs\n    WHERE\n        tx_status = 'SUCCESS'\n\n\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        )\n    FROM\n        ETHEREUM_DEV.silver.transfers\n)\n\n),\ntransfers AS (\n    SELECT\n        _log_id,\n        block_number,\n        tx_hash,\n        block_timestamp,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        contract_address :: STRING AS contract_address,\n        event_inputs :from :: STRING AS from_address,\n        event_inputs :to :: STRING AS to_address,\n        event_inputs :value :: FLOAT AS raw_amount,\n        event_index,\n        ingested_at\n    FROM\n        logs\n    WHERE\n        event_name = 'Transfer'\n        AND raw_amount IS NOT NULL\n)\nSELECT\n    _log_id,\n    block_number,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    block_timestamp,\n    contract_address,\n    from_address,\n    to_address,\n    raw_amount,\n    ingested_at,\n    event_index\nFROM\n    transfers qualify(ROW_NUMBER() over(PARTITION BY _log_id\nORDER BY\n    ingested_at DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.silver.transfers"}, "model.ethereum_models.silver__nft_metadata_api_requests": {"raw_sql": "{{ config (\n    materialized = 'view'\n) }}\n\nSELECT\n    DISTINCT lower(contract_address) as contract_address\nFROM\n    {{ ref('silver__seed_nft_metadata_upload') }}\nEXCEPT\nSELECT\n    DISTINCT lower(contract_address) as contract_address\nFROM\n    {{ source(\n        'ethereum_external',\n        'nft_metadata_api'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.ethereum_models.ethereum_external.nft_metadata_api", "seed.ethereum_models.silver__seed_nft_metadata_upload"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "silver", "fqn": ["ethereum_models", "silver", "silver__nft_metadata_api_requests"], "unique_id": "model.ethereum_models.silver__nft_metadata_api_requests", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "silver/silver__nft_metadata_api_requests.sql", "original_file_path": "models/silver/silver__nft_metadata_api_requests.sql", "name": "silver__nft_metadata_api_requests", "alias": "nft_metadata_api_requests", "checksum": {"name": "sha256", "checksum": "2540e070860592b558c80d3f1d4a0278ef3f115086a7f31195327d213429aeaf"}, "tags": [], "refs": [["silver__seed_nft_metadata_upload"]], "sources": [["ethereum_external", "nft_metadata_api"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__nft_metadata_api_requests.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1654351201.8684201, "compiled_sql": "\n\nSELECT\n    DISTINCT lower(contract_address) as contract_address\nFROM\n    ETHEREUM_DEV.silver.seed_nft_metadata_upload\nEXCEPT\nSELECT\n    DISTINCT lower(contract_address) as contract_address\nFROM\n    ETHEREUM_DEV.silver.nft_metadata_api", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.silver.nft_metadata_api_requests"}, "model.ethereum_models.silver__logs": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"_log_id\",\n    cluster_by = ['ingested_at::DATE'],\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION\"\n) }}\n\nWITH base_txs AS (\n\n    SELECT\n        record_id,\n        tx_id,\n        tx_block_index,\n        offset_id,\n        block_id,\n        block_timestamp,\n        network,\n        chain_id,\n        tx,\n        ingested_at\n    FROM\n        {{ ref('bronze__transactions') }}\n\n{% if is_incremental() %}\nWHERE\n    ingested_at >= (\n        SELECT\n            MAX(\n                ingested_at\n            )\n        FROM\n            {{ this }}\n    )\n{% endif %}\n),\nlogs_raw AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id AS tx_hash,\n        tx :receipt :logs AS full_logs,\n        ingested_at :: TIMESTAMP AS ingested_at,\n        CASE\n            WHEN tx :receipt :status :: STRING = '0x1' THEN 'SUCCESS'\n            ELSE 'FAIL'\n        END AS tx_status,\n        SUBSTR(\n            tx :input :: STRING,\n            1,\n            10\n        ) AS origin_function_signature,\n        tx :from :: STRING AS origin_from_address,\n        tx :to :: STRING AS origin_to_address\n    FROM\n        base_txs\n),\nlogs AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        tx_status,\n        ingested_at,\n        silver.js_hex_to_int(\n            VALUE :logIndex :: STRING\n        ) AS event_index,\n        VALUE :address :: STRING AS contract_address,\n        VALUE :decoded :contractName :: STRING AS contract_name,\n        VALUE :decoded :eventName :: STRING AS event_name,\n        VALUE :decoded :inputs :: OBJECT AS event_inputs,\n        VALUE :topics AS topics,\n        VALUE :data :: STRING AS DATA,\n        VALUE :removed :: STRING AS event_removed\n    FROM\n        logs_raw,\n        LATERAL FLATTEN (\n            input => full_logs\n        )\n)\nSELECT\n    concat_ws(\n        '-',\n        tx_hash,\n        event_index\n    ) AS _log_id,\n    block_id AS block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    ingested_at,\n    event_index,\n    contract_address,\n    contract_name,\n    event_name,\n    event_inputs,\n    topics,\n    DATA,\n    event_removed,\n    tx_status\nFROM\n    logs qualify(ROW_NUMBER() over(PARTITION BY _log_id\nORDER BY\n    ingested_at DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_models.bronze__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "cluster_by": ["ingested_at::DATE"], "unique_key": "_log_id", "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION", "transaction": true, "index": null}], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "silver", "fqn": ["ethereum_models", "silver", "silver__logs"], "unique_id": "model.ethereum_models.silver__logs", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "silver/silver__logs.sql", "original_file_path": "models/silver/silver__logs.sql", "name": "silver__logs", "alias": "logs", "checksum": {"name": "sha256", "checksum": "887e61aa5fc8a27666886283e10a621739b5107c009571f2aef93dc8266259ab"}, "tags": [], "refs": [["bronze__transactions"]], "sources": [], "description": "", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_INDEX": {"name": "EVENT_INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_NAME": {"name": "EVENT_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_INPUTS": {"name": "EVENT_INPUTS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOPICS": {"name": "TOPICS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DATA": {"name": "DATA", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_REMOVED": {"name": "EVENT_REMOVED", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_LOG_ID": {"name": "_LOG_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_models://models/silver/silver__logs.yml", "compiled_path": "target/compiled/ethereum_models/models/silver/silver__logs.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "_log_id", "cluster_by": ["ingested_at::DATE"], "post-hook": ["ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION"]}, "created_at": 1654351202.4597561, "compiled_sql": "\n\nWITH base_txs AS (\n\n    SELECT\n        record_id,\n        tx_id,\n        tx_block_index,\n        offset_id,\n        block_id,\n        block_timestamp,\n        network,\n        chain_id,\n        tx,\n        ingested_at\n    FROM\n        ETHEREUM_DEV.bronze.transactions\n\n\nWHERE\n    ingested_at >= (\n        SELECT\n            MAX(\n                ingested_at\n            )\n        FROM\n            ETHEREUM_DEV.silver.logs\n    )\n\n),\nlogs_raw AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_id AS tx_hash,\n        tx :receipt :logs AS full_logs,\n        ingested_at :: TIMESTAMP AS ingested_at,\n        CASE\n            WHEN tx :receipt :status :: STRING = '0x1' THEN 'SUCCESS'\n            ELSE 'FAIL'\n        END AS tx_status,\n        SUBSTR(\n            tx :input :: STRING,\n            1,\n            10\n        ) AS origin_function_signature,\n        tx :from :: STRING AS origin_from_address,\n        tx :to :: STRING AS origin_to_address\n    FROM\n        base_txs\n),\nlogs AS (\n    SELECT\n        block_id,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        tx_status,\n        ingested_at,\n        silver.js_hex_to_int(\n            VALUE :logIndex :: STRING\n        ) AS event_index,\n        VALUE :address :: STRING AS contract_address,\n        VALUE :decoded :contractName :: STRING AS contract_name,\n        VALUE :decoded :eventName :: STRING AS event_name,\n        VALUE :decoded :inputs :: OBJECT AS event_inputs,\n        VALUE :topics AS topics,\n        VALUE :data :: STRING AS DATA,\n        VALUE :removed :: STRING AS event_removed\n    FROM\n        logs_raw,\n        LATERAL FLATTEN (\n            input => full_logs\n        )\n)\nSELECT\n    concat_ws(\n        '-',\n        tx_hash,\n        event_index\n    ) AS _log_id,\n    block_id AS block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    ingested_at,\n    event_index,\n    contract_address,\n    contract_name,\n    event_name,\n    event_inputs,\n    topics,\n    DATA,\n    event_removed,\n    tx_status\nFROM\n    logs qualify(ROW_NUMBER() over(PARTITION BY _log_id\nORDER BY\n    ingested_at DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.silver.logs"}, "model.ethereum_models.silver__blocks": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = \"block_number\",\n    cluster_by = ['ingested_at::DATE']\n) }}\n\nWITH base_tables AS (\n\n    SELECT\n        record_id,\n        offset_id,\n        block_id,\n        block_timestamp,\n        network,\n        chain_id,\n        tx_count,\n        header,\n        ingested_at\n    FROM\n        {{ ref('bronze__blocks') }}\n\n{% if is_incremental() %}\nWHERE\n    ingested_at >= (\n        SELECT\n            MAX(\n                ingested_at\n            )\n        FROM\n            {{ this }}\n    )\n{% endif %}\n)\nSELECT\n    block_id :: INTEGER AS block_number,\n    block_timestamp :: TIMESTAMP AS block_timestamp,\n    network :: STRING AS network,\n    chain_id :: STRING AS blockchain,\n    tx_count :: INTEGER AS tx_count,\n    header :difficulty :: INTEGER AS difficulty,\n    COALESCE(\n        silver.js_hex_to_int(\n            header: total_difficulty :: STRING\n        ),\n        silver.js_hex_to_int(\n            header :totalDifficulty :: STRING\n        )\n    ) AS total_difficulty,\n    header: extra_data :: STRING AS extra_data,\n    COALESCE(\n        header :gas_limit :: INTEGER,\n        header :gasLimit :: INTEGER\n    ) AS gas_limit,\n    COALESCE(\n        header :gas_used :: INTEGER,\n        header :gasUsed :: INTEGER\n    ) AS gas_used,\n    header: \"hash\" :: STRING AS HASH,\n    COALESCE(\n        header: parent_hash :: STRING,\n        header: parentHash :: STRING\n    ) AS parent_hash,\n    header: miner :: STRING AS miner,\n    header: nonce :: STRING AS nonce,\n    COALESCE(\n        header: receipts_root :: STRING,\n        header: receiptsRoot :: STRING\n    ) AS receipts_root,\n    header: sha3_uncles :: STRING AS sha3_uncles,\n    header: \"size\" :: INTEGER AS SIZE,\n    CASE\n        WHEN header: uncles [1] :: STRING IS NOT NULL THEN CONCAT(\n            header: uncles [0] :: STRING,\n            ', ',\n            header: uncles [1] :: STRING\n        )\n        ELSE header: uncles [0] :: STRING\n    END AS uncle_blocks,\n    ingested_at :: TIMESTAMP AS ingested_at,\n    header :: OBJECT AS block_header_json\nFROM\n    base_tables qualify(ROW_NUMBER() over(PARTITION BY block_id\nORDER BY\n    ingested_at DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_models.bronze__blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "cluster_by": ["ingested_at::DATE"], "unique_key": "block_number", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "silver", "fqn": ["ethereum_models", "silver", "silver__blocks"], "unique_id": "model.ethereum_models.silver__blocks", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "silver/silver__blocks.sql", "original_file_path": "models/silver/silver__blocks.sql", "name": "silver__blocks", "alias": "blocks", "checksum": {"name": "sha256", "checksum": "a0768c537ef52e73dd6db365179898d98880b367323b85f67accdca92bab59f7"}, "tags": [], "refs": [["bronze__blocks"]], "sources": [], "description": "", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NETWORK": {"name": "NETWORK", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_COUNT": {"name": "TX_COUNT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIFFICULTY": {"name": "DIFFICULTY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_DIFFICULTY": {"name": "TOTAL_DIFFICULTY", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EXTRA_DATA": {"name": "EXTRA_DATA", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_LIMIT": {"name": "GAS_LIMIT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_USED": {"name": "GAS_USED", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "HASH": {"name": "HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PARENT_HASH": {"name": "PARENT_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINER": {"name": "MINER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NONCE": {"name": "NONCE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECEIPTS_ROOT": {"name": "RECEIPTS_ROOT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SHA3_UNCLES": {"name": "SHA3_UNCLES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SIZE": {"name": "SIZE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HEADER_JSON": {"name": "BLOCK_HEADER_JSON", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_models://models/silver/silver__blocks.yml", "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "block_number", "cluster_by": ["ingested_at::DATE"]}, "created_at": 1654351202.587955, "compiled_sql": "\n\nWITH base_tables AS (\n\n    SELECT\n        record_id,\n        offset_id,\n        block_id,\n        block_timestamp,\n        network,\n        chain_id,\n        tx_count,\n        header,\n        ingested_at\n    FROM\n        ETHEREUM_DEV.bronze.blocks\n\n\nWHERE\n    ingested_at >= (\n        SELECT\n            MAX(\n                ingested_at\n            )\n        FROM\n            ETHEREUM_DEV.silver.blocks\n    )\n\n)\nSELECT\n    block_id :: INTEGER AS block_number,\n    block_timestamp :: TIMESTAMP AS block_timestamp,\n    network :: STRING AS network,\n    chain_id :: STRING AS blockchain,\n    tx_count :: INTEGER AS tx_count,\n    header :difficulty :: INTEGER AS difficulty,\n    COALESCE(\n        silver.js_hex_to_int(\n            header: total_difficulty :: STRING\n        ),\n        silver.js_hex_to_int(\n            header :totalDifficulty :: STRING\n        )\n    ) AS total_difficulty,\n    header: extra_data :: STRING AS extra_data,\n    COALESCE(\n        header :gas_limit :: INTEGER,\n        header :gasLimit :: INTEGER\n    ) AS gas_limit,\n    COALESCE(\n        header :gas_used :: INTEGER,\n        header :gasUsed :: INTEGER\n    ) AS gas_used,\n    header: \"hash\" :: STRING AS HASH,\n    COALESCE(\n        header: parent_hash :: STRING,\n        header: parentHash :: STRING\n    ) AS parent_hash,\n    header: miner :: STRING AS miner,\n    header: nonce :: STRING AS nonce,\n    COALESCE(\n        header: receipts_root :: STRING,\n        header: receiptsRoot :: STRING\n    ) AS receipts_root,\n    header: sha3_uncles :: STRING AS sha3_uncles,\n    header: \"size\" :: INTEGER AS SIZE,\n    CASE\n        WHEN header: uncles [1] :: STRING IS NOT NULL THEN CONCAT(\n            header: uncles [0] :: STRING,\n            ', ',\n            header: uncles [1] :: STRING\n        )\n        ELSE header: uncles [0] :: STRING\n    END AS uncle_blocks,\n    ingested_at :: TIMESTAMP AS ingested_at,\n    header :: OBJECT AS block_header_json\nFROM\n    base_tables qualify(ROW_NUMBER() over(PARTITION BY block_id\nORDER BY\n    ingested_at DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.silver.blocks"}, "model.ethereum_models.silver__contracts": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'address'\n) }}\n\nSELECT\n    LOWER(address) :: STRING AS address,\n    meta :symbol :: STRING AS symbol,\n    meta :name :: STRING AS NAME,\n    meta :decimals :: INTEGER AS decimals,\n    meta AS contract_metadata\nFROM\n    {{ source(\n        'flipside_gold_ethereum',\n        'contracts'\n    ) }}\nWHERE\n    meta IS NOT NULL", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.ethereum_models.flipside_gold_ethereum.contracts"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "unique_key": "address", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "silver", "fqn": ["ethereum_models", "silver", "silver__contracts"], "unique_id": "model.ethereum_models.silver__contracts", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "silver/silver__contracts.sql", "original_file_path": "models/silver/silver__contracts.sql", "name": "silver__contracts", "alias": "contracts", "checksum": {"name": "sha256", "checksum": "46b0b8f4e040515a4da443a81b7f3ae28be2d2aeb39563fe8d98eedc16121b00"}, "tags": [], "refs": [], "sources": [["flipside_gold_ethereum", "contracts"]], "description": "", "columns": {"address": {"name": "address", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "contract_metadata": {"name": "contract_metadata", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_models://models/silver/silver__contracts.yml", "compiled_path": "target/compiled/ethereum_models/models/silver/silver__contracts.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "address"}, "created_at": 1654351203.08778, "compiled_sql": "\n\nSELECT\n    LOWER(address) :: STRING AS address,\n    meta :symbol :: STRING AS symbol,\n    meta :name :: STRING AS NAME,\n    meta :decimals :: INTEGER AS decimals,\n    meta AS contract_metadata\nFROM\n    flipside_prod_db.ethereum.contracts\nWHERE\n    meta IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.silver.contracts"}, "model.ethereum_models.silver__eth_transfers": {"raw_sql": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT\n    tx_hash,\n    block_number,\n    block_timestamp,\n    from_address,\n    to_address,\n    eth_value,\n    identifier,\n    _call_id,\n    ingested_at,\n    input\nFROM\n    {{ ref('silver__traces') }}\nWHERE\n    TYPE = 'CALL'\n    AND eth_value > 0\n    AND tx_status = 'SUCCESS'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.ethereum_models.silver__traces"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "silver", "fqn": ["ethereum_models", "silver", "silver__eth_transfers"], "unique_id": "model.ethereum_models.silver__eth_transfers", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "silver/silver__eth_transfers.sql", "original_file_path": "models/silver/silver__eth_transfers.sql", "name": "silver__eth_transfers", "alias": "eth_transfers", "checksum": {"name": "sha256", "checksum": "c6579617230b48b5024aa1a144cefd52f8470a8cc77f4e004a551e74749d03fe"}, "tags": [], "refs": [["silver__traces"]], "sources": [], "description": "", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETH_VALUE": {"name": "ETH_VALUE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_models://models/silver/silver__eth_transfers.yml", "compiled_path": "target/compiled/ethereum_models/models/silver/silver__eth_transfers.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1654351203.046178, "compiled_sql": "\n\nSELECT\n    tx_hash,\n    block_number,\n    block_timestamp,\n    from_address,\n    to_address,\n    eth_value,\n    identifier,\n    _call_id,\n    ingested_at,\n    input\nFROM\n    ETHEREUM_DEV.silver.traces\nWHERE\n    TYPE = 'CALL'\n    AND eth_value > 0\n    AND tx_status = 'SUCCESS'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.silver.eth_transfers"}, "model.ethereum_models.silver__nft_transfers": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = '_log_id',\n    cluster_by = ['ingested_at::DATE']\n) }}\n\nWITH transfers AS (\n\n    SELECT\n        _log_id,\n        block_number,\n        tx_hash,\n        block_timestamp,\n        event_index,\n        contract_address :: STRING AS contract_address,\n        COALESCE(\n            event_inputs :from :: STRING,\n            event_inputs :_from :: STRING\n        ) AS from_address,\n        COALESCE(\n            event_inputs :to :: STRING,\n            event_inputs :_to :: STRING\n        ) AS to_address,\n        COALESCE(\n            event_inputs :tokenId :: STRING,\n            event_inputs :_id :: STRING,\n            event_inputs :_tokenId :: STRING\n        ) AS nft_tokenid,\n        event_inputs :_value :: STRING AS erc1155_value,\n        ingested_at\n    FROM\n        {{ ref('silver__logs') }}\n    WHERE\n        event_name IN (\n            'Transfer',\n            'TransferSingle'\n        )\n        AND nft_tokenid IS NOT NULL\n        AND tx_status = 'SUCCESS'\n\n{% if is_incremental() %}\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        )\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\nlabels AS (\n    SELECT\n        address AS project_address,\n        label,\n        1 AS rnk\n    FROM\n        {{ ref('core__dim_labels') }}\n    WHERE\n        address IN (\n            SELECT\n                DISTINCT contract_address\n            FROM\n                transfers\n        )\n),\nbackup_meta AS (\n    SELECT\n        address AS project_address,\n        NAME AS label,\n        2 AS rnk\n    FROM\n        {{ source(\n            'ethereum_silver',\n            'token_meta_backup'\n        ) }}\n    WHERE\n        address IN (\n            SELECT\n                DISTINCT contract_address\n            FROM\n                transfers\n        )\n),\nmeta_union AS (\n    SELECT\n        project_address,\n        label,\n        rnk\n    FROM\n        labels\n    UNION ALL\n    SELECT\n        project_address,\n        label,\n        rnk\n    FROM\n        backup_meta\n),\nunique_meta AS (\n    SELECT\n        project_address,\n        label,\n        rnk\n    FROM\n        meta_union qualify(ROW_NUMBER() over(PARTITION BY project_address\n    ORDER BY\n        rnk ASC)) = 1\n),\ntoken_metadata AS (\n    SELECT\n        LOWER(contract_address) AS contract_address,\n        token_id,\n        token_metadata,\n        project_name\n    FROM\n        {{ source(\n            'flipside_gold_ethereum',\n            'nft_metadata'\n        ) }}\n)\nSELECT\n    _log_id,\n    block_number,\n    tx_hash,\n    block_timestamp,\n    CASE\n        WHEN from_address = '0x0000000000000000000000000000000000000000' THEN 'mint'\n        ELSE 'other'\n    END AS event_type,\n    transfers.contract_address AS contract_address,\n    COALESCE(\n        label,\n        project_name\n    ) AS project_name,\n    from_address,\n    to_address,\n    nft_tokenid AS tokenId,\n    erc1155_value,\n    token_metadata,\n    ingested_at,\n    event_index\nFROM\n    transfers\n    LEFT JOIN unique_meta\n    ON unique_meta.project_address = transfers.contract_address\n    LEFT JOIN token_metadata\n    ON token_metadata.contract_address = transfers.contract_address\n    AND transfers.nft_tokenid = token_metadata.token_id qualify(ROW_NUMBER() over(PARTITION BY _log_id\nORDER BY\n    ingested_at DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.ethereum_models.ethereum_silver.token_meta_backup", "source.ethereum_models.flipside_gold_ethereum.nft_metadata", "model.ethereum_models.silver__logs", "model.ethereum_models.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "cluster_by": ["ingested_at::DATE"], "unique_key": "_log_id", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "silver", "fqn": ["ethereum_models", "silver", "silver__nft_transfers"], "unique_id": "model.ethereum_models.silver__nft_transfers", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "silver/silver__nft_transfers.sql", "original_file_path": "models/silver/silver__nft_transfers.sql", "name": "silver__nft_transfers", "alias": "nft_transfers", "checksum": {"name": "sha256", "checksum": "da6c775cb3212d548b7bf0fd4b8400b41ebc4f4d8416868030effc689ffafff4"}, "tags": [], "refs": [["silver__logs"], ["core__dim_labels"]], "sources": [["ethereum_silver", "token_meta_backup"], ["flipside_gold_ethereum", "nft_metadata"]], "description": "", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKENID": {"name": "TOKENID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_LOG_ID": {"name": "_LOG_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_models://models/silver/silver__nft_transfers.yml", "compiled_path": "target/compiled/ethereum_models/models/silver/silver__nft_transfers.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "_log_id", "cluster_by": ["ingested_at::DATE"]}, "created_at": 1654351202.989707, "compiled_sql": "\n\nWITH transfers AS (\n\n    SELECT\n        _log_id,\n        block_number,\n        tx_hash,\n        block_timestamp,\n        event_index,\n        contract_address :: STRING AS contract_address,\n        COALESCE(\n            event_inputs :from :: STRING,\n            event_inputs :_from :: STRING\n        ) AS from_address,\n        COALESCE(\n            event_inputs :to :: STRING,\n            event_inputs :_to :: STRING\n        ) AS to_address,\n        COALESCE(\n            event_inputs :tokenId :: STRING,\n            event_inputs :_id :: STRING,\n            event_inputs :_tokenId :: STRING\n        ) AS nft_tokenid,\n        event_inputs :_value :: STRING AS erc1155_value,\n        ingested_at\n    FROM\n        ETHEREUM_DEV.silver.logs\n    WHERE\n        event_name IN (\n            'Transfer',\n            'TransferSingle'\n        )\n        AND nft_tokenid IS NOT NULL\n        AND tx_status = 'SUCCESS'\n\n\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        )\n    FROM\n        ETHEREUM_DEV.silver.nft_transfers\n)\n\n),\nlabels AS (\n    SELECT\n        address AS project_address,\n        label,\n        1 AS rnk\n    FROM\n        ETHEREUM_DEV.core.dim_labels\n    WHERE\n        address IN (\n            SELECT\n                DISTINCT contract_address\n            FROM\n                transfers\n        )\n),\nbackup_meta AS (\n    SELECT\n        address AS project_address,\n        NAME AS label,\n        2 AS rnk\n    FROM\n        ethereum.silver.token_meta_backup\n    WHERE\n        address IN (\n            SELECT\n                DISTINCT contract_address\n            FROM\n                transfers\n        )\n),\nmeta_union AS (\n    SELECT\n        project_address,\n        label,\n        rnk\n    FROM\n        labels\n    UNION ALL\n    SELECT\n        project_address,\n        label,\n        rnk\n    FROM\n        backup_meta\n),\nunique_meta AS (\n    SELECT\n        project_address,\n        label,\n        rnk\n    FROM\n        meta_union qualify(ROW_NUMBER() over(PARTITION BY project_address\n    ORDER BY\n        rnk ASC)) = 1\n),\ntoken_metadata AS (\n    SELECT\n        LOWER(contract_address) AS contract_address,\n        token_id,\n        token_metadata,\n        project_name\n    FROM\n        flipside_prod_db.ethereum.nft_metadata\n)\nSELECT\n    _log_id,\n    block_number,\n    tx_hash,\n    block_timestamp,\n    CASE\n        WHEN from_address = '0x0000000000000000000000000000000000000000' THEN 'mint'\n        ELSE 'other'\n    END AS event_type,\n    transfers.contract_address AS contract_address,\n    COALESCE(\n        label,\n        project_name\n    ) AS project_name,\n    from_address,\n    to_address,\n    nft_tokenid AS tokenId,\n    erc1155_value,\n    token_metadata,\n    ingested_at,\n    event_index\nFROM\n    transfers\n    LEFT JOIN unique_meta\n    ON unique_meta.project_address = transfers.contract_address\n    LEFT JOIN token_metadata\n    ON token_metadata.contract_address = transfers.contract_address\n    AND transfers.nft_tokenid = token_metadata.token_id qualify(ROW_NUMBER() over(PARTITION BY _log_id\nORDER BY\n    ingested_at DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.silver.nft_transfers"}, "model.ethereum_models.silver__traces": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = '_call_id',\n    cluster_by = ['ingested_at::DATE'],\n    post_hook = \"ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION\"\n) }}\n\nWITH new_blocks AS (\n\n    SELECT\n        block_id\n    FROM\n        {{ ref('bronze__blocks') }}\n    WHERE\n        tx_count > 0\n\n{% if is_incremental() %}\nAND block_id NOT IN (\n    SELECT\n        DISTINCT block_number\n    FROM\n        {{ this }}\n)\n{% endif %}\nORDER BY\n    ingested_at DESC\nLIMIT\n    500000\n), traces_txs AS (\n    SELECT\n        *\n    FROM\n        {{ ref('bronze__transactions') }}\n    WHERE\n        block_id IN (\n            SELECT\n                block_id\n            FROM\n                new_blocks\n        ) qualify(ROW_NUMBER() over(PARTITION BY tx_id\n    ORDER BY\n        ingested_at DESC)) = 1\n),\nbase_table AS (\n    SELECT\n        CASE\n            WHEN POSITION(\n                '.',\n                path :: STRING\n            ) > 0 THEN REPLACE(\n                REPLACE(\n                    path :: STRING,\n                    SUBSTR(path :: STRING, len(path :: STRING) - POSITION('.', REVERSE(path :: STRING)) + 1, POSITION('.', REVERSE(path :: STRING))),\n                    ''\n                ),\n                '.',\n                '__'\n            )\n            ELSE '__'\n        END AS id,\n        OBJECT_AGG(\n            DISTINCT key,\n            VALUE\n        ) AS DATA,\n        txs.tx_id AS tx_hash,\n        txs.block_id AS block_number,\n        txs.block_timestamp AS block_timestamp,\n        CASE\n            WHEN txs.tx :receipt :status :: STRING = '0x1' THEN 'SUCCESS'\n            ELSE 'FAIL'\n        END AS tx_status,\n        txs.ingested_at AS ingested_at\n    FROM\n        traces_txs txs,\n        TABLE(\n            FLATTEN(\n                input => PARSE_JSON(\n                    txs.tx :traces\n                ),\n                recursive => TRUE\n            )\n        ) f\n    WHERE\n        f.index IS NULL\n        AND f.key != 'calls'\n    GROUP BY\n        tx_hash,\n        id,\n        block_number,\n        block_timestamp,\n        ingested_at,\n        tx_status\n),\nflattened_traces AS (\n    SELECT\n        DATA :from :: STRING AS from_address,\n        TO_NUMBER(REPLACE(DATA :gas :: STRING, '0x', ''), 'XXXXXXX') AS gas,\n        TO_NUMBER(REPLACE(DATA :gasUsed :: STRING, '0x', ''), 'XXXXXXX') AS gas_used,\n        DATA :input :: STRING AS input,\n        DATA :output :: STRING AS output,\n        DATA :time :: STRING AS TIME,\n        DATA :to :: STRING AS to_address,\n        DATA :type :: STRING AS TYPE,\n        CASE\n            WHEN DATA :type :: STRING = 'CALL' THEN silver.js_hex_to_int(\n                DATA :value :: STRING\n            ) / pow(\n                10,\n                18\n            )\n            ELSE 0\n        END AS eth_value,\n        CASE\n            WHEN id = '__' THEN CONCAT(\n                DATA :type :: STRING,\n                '_ORIGIN'\n            )\n            ELSE CONCAT(\n                DATA :type :: STRING,\n                '_',\n                REPLACE(\n                    REPLACE(REPLACE(REPLACE(id, 'calls', ''), '[', ''), ']', ''),\n                    '__',\n                    '_'\n                )\n            )\n        END AS identifier,\n        concat_ws(\n            '-',\n            tx_hash,\n            identifier\n        ) AS _call_id,\n        SPLIT(\n            identifier,\n            '_'\n        ) AS id_split,\n        ARRAY_SLICE(id_split, 1, ARRAY_SIZE(id_split)) AS levels,\n        ARRAY_TO_STRING(\n            levels,\n            '_'\n        ) AS LEVEL,\n        CASE\n            WHEN ARRAY_SIZE(levels) = 1\n            AND levels [0] :: STRING = 'ORIGIN' THEN NULL\n            WHEN ARRAY_SIZE(levels) = 1 THEN 'ORIGIN'\n            ELSE ARRAY_TO_STRING(ARRAY_SLICE(levels, 0, ARRAY_SIZE(levels) -1), '_')END AS parent_level,\n            COUNT(parent_level) over (\n                PARTITION BY tx_hash,\n                parent_level\n            ) AS sub_traces,*\n            FROM\n                base_table\n        ),\n        group_sub_traces AS (\n            SELECT\n                tx_hash,\n                parent_level,\n                sub_traces\n            FROM\n                flattened_traces\n            GROUP BY\n                tx_hash,\n                parent_level,\n                sub_traces\n        ),\n        FINAL AS (\n            SELECT\n                flattened_traces.tx_hash AS tx_hash,\n                flattened_traces.block_number AS block_number,\n                flattened_traces.block_timestamp AS block_timestamp,\n                flattened_traces.from_address AS from_address,\n                flattened_traces.to_address AS to_address,\n                flattened_traces.eth_value AS eth_value,\n                flattened_traces.gas AS gas,\n                flattened_traces.gas_used AS gas_used,\n                flattened_traces.input AS input,\n                flattened_traces.output AS output,\n                flattened_traces.type AS TYPE,\n                flattened_traces.identifier AS identifier,\n                flattened_traces._call_id AS _call_id,\n                flattened_traces.ingested_at AS ingested_at,\n                flattened_traces.data AS DATA,\n                flattened_traces.tx_status AS tx_status,\n                group_sub_traces.sub_traces AS sub_traces\n            FROM\n                flattened_traces\n                LEFT OUTER JOIN group_sub_traces\n                ON flattened_traces.tx_hash = group_sub_traces.tx_hash\n                AND flattened_traces.level = group_sub_traces.parent_level\n        )\n    SELECT\n        tx_hash,\n        block_number,\n        block_timestamp,\n        from_address,\n        to_address,\n        eth_value,\n        gas,\n        gas_used,\n        input,\n        output,\n        TYPE,\n        identifier,\n        _call_id,\n        ingested_at,\n        DATA,\n        tx_status,\n        sub_traces\n    FROM\n        FINAL qualify(ROW_NUMBER() over(PARTITION BY _call_id\n    ORDER BY\n        ingested_at DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_models.bronze__blocks", "model.ethereum_models.bronze__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "cluster_by": ["ingested_at::DATE"], "unique_key": "_call_id", "post-hook": [{"sql": "ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION", "transaction": true, "index": null}], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "silver", "fqn": ["ethereum_models", "silver", "traces", "silver__traces"], "unique_id": "model.ethereum_models.silver__traces", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "silver/traces/silver__traces.sql", "original_file_path": "models/silver/traces/silver__traces.sql", "name": "silver__traces", "alias": "traces", "checksum": {"name": "sha256", "checksum": "ba88090203fa8d55f05ea399872cf3b8b5491ac1fc1f17057423b389e649388a"}, "tags": [], "refs": [["bronze__blocks"], ["bronze__transactions"]], "sources": [], "description": "", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_models://models/silver/traces/silver__traces.yml", "compiled_path": "target/compiled/ethereum_models/models/silver/traces/silver__traces.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "_call_id", "cluster_by": ["ingested_at::DATE"], "post-hook": ["ALTER TABLE {{ this }} ADD SEARCH OPTIMIZATION"]}, "created_at": 1654351203.09854, "compiled_sql": "\n\nWITH new_blocks AS (\n\n    SELECT\n        block_id\n    FROM\n        ETHEREUM_DEV.bronze.blocks\n    WHERE\n        tx_count > 0\n\n\nAND block_id NOT IN (\n    SELECT\n        DISTINCT block_number\n    FROM\n        ETHEREUM_DEV.silver.traces\n)\n\nORDER BY\n    ingested_at DESC\nLIMIT\n    500000\n), traces_txs AS (\n    SELECT\n        *\n    FROM\n        ETHEREUM_DEV.bronze.transactions\n    WHERE\n        block_id IN (\n            SELECT\n                block_id\n            FROM\n                new_blocks\n        ) qualify(ROW_NUMBER() over(PARTITION BY tx_id\n    ORDER BY\n        ingested_at DESC)) = 1\n),\nbase_table AS (\n    SELECT\n        CASE\n            WHEN POSITION(\n                '.',\n                path :: STRING\n            ) > 0 THEN REPLACE(\n                REPLACE(\n                    path :: STRING,\n                    SUBSTR(path :: STRING, len(path :: STRING) - POSITION('.', REVERSE(path :: STRING)) + 1, POSITION('.', REVERSE(path :: STRING))),\n                    ''\n                ),\n                '.',\n                '__'\n            )\n            ELSE '__'\n        END AS id,\n        OBJECT_AGG(\n            DISTINCT key,\n            VALUE\n        ) AS DATA,\n        txs.tx_id AS tx_hash,\n        txs.block_id AS block_number,\n        txs.block_timestamp AS block_timestamp,\n        CASE\n            WHEN txs.tx :receipt :status :: STRING = '0x1' THEN 'SUCCESS'\n            ELSE 'FAIL'\n        END AS tx_status,\n        txs.ingested_at AS ingested_at\n    FROM\n        traces_txs txs,\n        TABLE(\n            FLATTEN(\n                input => PARSE_JSON(\n                    txs.tx :traces\n                ),\n                recursive => TRUE\n            )\n        ) f\n    WHERE\n        f.index IS NULL\n        AND f.key != 'calls'\n    GROUP BY\n        tx_hash,\n        id,\n        block_number,\n        block_timestamp,\n        ingested_at,\n        tx_status\n),\nflattened_traces AS (\n    SELECT\n        DATA :from :: STRING AS from_address,\n        TO_NUMBER(REPLACE(DATA :gas :: STRING, '0x', ''), 'XXXXXXX') AS gas,\n        TO_NUMBER(REPLACE(DATA :gasUsed :: STRING, '0x', ''), 'XXXXXXX') AS gas_used,\n        DATA :input :: STRING AS input,\n        DATA :output :: STRING AS output,\n        DATA :time :: STRING AS TIME,\n        DATA :to :: STRING AS to_address,\n        DATA :type :: STRING AS TYPE,\n        CASE\n            WHEN DATA :type :: STRING = 'CALL' THEN silver.js_hex_to_int(\n                DATA :value :: STRING\n            ) / pow(\n                10,\n                18\n            )\n            ELSE 0\n        END AS eth_value,\n        CASE\n            WHEN id = '__' THEN CONCAT(\n                DATA :type :: STRING,\n                '_ORIGIN'\n            )\n            ELSE CONCAT(\n                DATA :type :: STRING,\n                '_',\n                REPLACE(\n                    REPLACE(REPLACE(REPLACE(id, 'calls', ''), '[', ''), ']', ''),\n                    '__',\n                    '_'\n                )\n            )\n        END AS identifier,\n        concat_ws(\n            '-',\n            tx_hash,\n            identifier\n        ) AS _call_id,\n        SPLIT(\n            identifier,\n            '_'\n        ) AS id_split,\n        ARRAY_SLICE(id_split, 1, ARRAY_SIZE(id_split)) AS levels,\n        ARRAY_TO_STRING(\n            levels,\n            '_'\n        ) AS LEVEL,\n        CASE\n            WHEN ARRAY_SIZE(levels) = 1\n            AND levels [0] :: STRING = 'ORIGIN' THEN NULL\n            WHEN ARRAY_SIZE(levels) = 1 THEN 'ORIGIN'\n            ELSE ARRAY_TO_STRING(ARRAY_SLICE(levels, 0, ARRAY_SIZE(levels) -1), '_')END AS parent_level,\n            COUNT(parent_level) over (\n                PARTITION BY tx_hash,\n                parent_level\n            ) AS sub_traces,*\n            FROM\n                base_table\n        ),\n        group_sub_traces AS (\n            SELECT\n                tx_hash,\n                parent_level,\n                sub_traces\n            FROM\n                flattened_traces\n            GROUP BY\n                tx_hash,\n                parent_level,\n                sub_traces\n        ),\n        FINAL AS (\n            SELECT\n                flattened_traces.tx_hash AS tx_hash,\n                flattened_traces.block_number AS block_number,\n                flattened_traces.block_timestamp AS block_timestamp,\n                flattened_traces.from_address AS from_address,\n                flattened_traces.to_address AS to_address,\n                flattened_traces.eth_value AS eth_value,\n                flattened_traces.gas AS gas,\n                flattened_traces.gas_used AS gas_used,\n                flattened_traces.input AS input,\n                flattened_traces.output AS output,\n                flattened_traces.type AS TYPE,\n                flattened_traces.identifier AS identifier,\n                flattened_traces._call_id AS _call_id,\n                flattened_traces.ingested_at AS ingested_at,\n                flattened_traces.data AS DATA,\n                flattened_traces.tx_status AS tx_status,\n                group_sub_traces.sub_traces AS sub_traces\n            FROM\n                flattened_traces\n                LEFT OUTER JOIN group_sub_traces\n                ON flattened_traces.tx_hash = group_sub_traces.tx_hash\n                AND flattened_traces.level = group_sub_traces.parent_level\n        )\n    SELECT\n        tx_hash,\n        block_number,\n        block_timestamp,\n        from_address,\n        to_address,\n        eth_value,\n        gas,\n        gas_used,\n        input,\n        output,\n        TYPE,\n        identifier,\n        _call_id,\n        ingested_at,\n        DATA,\n        tx_status,\n        sub_traces\n    FROM\n        FINAL qualify(ROW_NUMBER() over(PARTITION BY _call_id\n    ORDER BY\n        ingested_at DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.silver.traces"}, "model.ethereum_models.silver_nft__looksrare_sales": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = '_log_id',\n    cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH looksrare_sales AS (\n\n    SELECT\n        _log_id,\n        block_number,\n        block_timestamp,\n        tx_hash,\n        event_index,\n        ingested_at,\n        contract_address,\n        event_name,\n        event_inputs :amount :: INTEGER AS nft_count,\n        event_inputs :collection :: STRING AS collection_address,\n        event_inputs :currency :: STRING AS currency_address,\n        event_inputs :maker :: STRING AS maker_address,\n        event_inputs :taker :: STRING AS taker_address,\n        event_inputs :price :: INTEGER AS price,\n        event_inputs :tokenId :: STRING AS tokenId,\n        ROW_NUMBER() over(\n            PARTITION BY tx_hash\n            ORDER BY\n                event_index ASC\n        ) AS agg_id\n    FROM\n        {{ ref('silver__logs') }}\n    WHERE\n        contract_address = '0x59728544b08ab483533076417fbbb2fd0b17ce3a'\n        AND event_name IN (\n            'TakerAsk',\n            'TakerBid'\n        )\n        AND tx_status = 'SUCCESS'\n\n{% if is_incremental() %}\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\nnft_transfers AS (\n    SELECT\n        nft.tx_hash AS tx_hash,\n        nft.contract_address AS nft_address,\n        nft.project_name AS project_name,\n        nft.from_address AS from_address,\n        nft.to_address AS to_address,\n        nft.tokenid AS tokenid,\n        nft.token_metadata AS token_metadata,\n        nft.erc1155_value AS erc1155_value,\n        nft.ingested_at AS ingested_at,\n        nft._log_id AS _log_id,\n        nft.event_index AS event_index,\n        ROW_NUMBER() over(\n            PARTITION BY nft.tx_hash\n            ORDER BY\n                nft.event_index ASC\n        ) AS agg_id\n    FROM\n        {{ ref('silver__nft_transfers') }} AS nft\n    WHERE\n        nft.tx_hash IN (\n            SELECT\n                tx_hash\n            FROM\n                looksrare_sales\n        )\n\n{% if is_incremental() %}\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\nmulti_transfers AS (\n    SELECT\n        tx_hash,\n        nft_address,\n        tokenID,\n        COUNT(*)\n    FROM\n        nft_transfers\n    GROUP BY\n        tx_hash,\n        nft_address,\n        tokenID\n    HAVING\n        COUNT(*) > 1\n),\nmulti_sales AS (\n    SELECT\n        tx_hash,\n        collection_address,\n        tokenId,\n        COUNT(*)\n    FROM\n        looksrare_sales\n    GROUP BY\n        tx_hash,\n        collection_address,\n        tokenId\n    HAVING\n        COUNT(*) > 1\n),\naggregator_txs AS (\n    SELECT\n        *\n    FROM\n        multi_transfers\n    WHERE\n        tx_hash NOT IN (\n            SELECT\n                tx_hash\n            FROM\n                multi_sales\n        )\n),\naddress_logic AS (\n    SELECT\n        *,\n        LAST_VALUE(to_address) over (\n            PARTITION BY tx_hash,\n            nft_address,\n            tokenId\n            ORDER BY\n                event_index ASC\n        ) AS buyer,\n        FIRST_VALUE(from_address) over (\n            PARTITION BY tx_hash,\n            nft_address,\n            tokenId\n            ORDER BY\n                event_index ASC\n        ) AS seller\n    FROM\n        nft_transfers\n    WHERE\n        tx_hash IN (\n            SELECT\n                tx_hash\n            FROM\n                aggregator_txs\n        )\n),\nagg_buyer_seller AS (\n    SELECT\n        DISTINCT tx_hash,\n        nft_address,\n        tokenId,\n        buyer,\n        seller\n    FROM\n        address_logic\n),\ncreator_fees AS (\n    SELECT\n        _log_id,\n        block_number,\n        block_timestamp,\n        tx_hash,\n        event_index,\n        ingested_at,\n        contract_address,\n        event_name,\n        event_inputs :amount :: INTEGER AS creator_fee_unadj,\n        event_inputs :collection :: STRING AS collection_address,\n        event_inputs :currency :: STRING AS currency_address,\n        event_inputs :royaltyRecipient :: STRING AS royalty_recipient,\n        event_inputs :tokenId :: STRING AS tokenID,\n        ROW_NUMBER() over(\n            PARTITION BY tx_hash\n            ORDER BY\n                event_index ASC\n        ) AS agg_id\n    FROM\n        {{ ref('silver__logs') }}\n    WHERE\n        event_name = 'RoyaltyPayment'\n        AND tx_hash IN (\n            SELECT\n                DISTINCT tx_hash\n            FROM\n                looksrare_sales\n        )\n\n{% if is_incremental() %}\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\nfee_sharing AS (\n    SELECT\n        tx_hash,\n        contract_address AS currency_address,\n        to_address,\n        from_address,\n        raw_amount AS fee_share_unadj,\n        event_index,\n        ROW_NUMBER() over(\n            PARTITION BY tx_hash\n            ORDER BY\n                event_index ASC\n        ) AS agg_id\n    FROM\n        {{ ref('silver__transfers') }}\n    WHERE\n        tx_hash IN (\n            SELECT\n                tx_hash\n            FROM\n                looksrare_sales\n        )\n        AND to_address IN (\n            '0x5924a28caaf1cc016617874a2f0c3710d881f3c1',\n            '0xc43eb2d8bc29da90253b8006f0f38e29bfc1369b'\n        )\n\n{% if is_incremental() %}\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\ndecimals AS (\n    SELECT\n        address,\n        symbol,\n        decimals\n    FROM\n        {{ ref('silver__contracts') }}\n    WHERE\n        address IN (\n            SELECT\n                DISTINCT LOWER(currency_address)\n            FROM\n                looksrare_sales\n        )\n),\ntoken_prices AS (\n    SELECT\n        HOUR,\n        CASE\n            WHEN LOWER(token_address) IS NULL THEN 'ETH'\n            ELSE LOWER(token_address)\n        END AS token_address,\n        AVG(price) AS token_price\n    FROM\n        {{ ref('core__fact_hourly_token_prices') }}\n    WHERE\n        (\n            token_address IN (\n                SELECT\n                    DISTINCT LOWER(currency_address)\n                FROM\n                    looksrare_sales\n            )\n            OR (\n                token_address IS NULL\n                AND symbol IS NULL\n            )\n        )\n        AND HOUR :: DATE IN (\n            SELECT\n                DISTINCT block_timestamp :: DATE\n            FROM\n                looksrare_sales\n        )\n    GROUP BY\n        HOUR,\n        token_address\n),\neth_sales AS (\n    SELECT\n        tx_hash,\n        'ETH' AS currency_address\n    FROM\n        looksrare_sales\n    WHERE\n        tx_hash NOT IN (\n            SELECT\n                tx_hash\n            FROM\n                fee_sharing\n        )\n),\ntrade_currency AS (\n    SELECT\n        tx_hash,\n        currency_address\n    FROM\n        fee_sharing\n    UNION ALL\n    SELECT\n        tx_hash,\n        currency_address\n    FROM\n        eth_sales\n),\ntx_currency AS (\n    SELECT\n        DISTINCT tx_hash,\n        currency_address\n    FROM\n        trade_currency\n),\ntx_data AS (\n    SELECT\n        tx_hash,\n        block_timestamp,\n        block_number,\n        to_address,\n        from_address,\n        eth_value,\n        tx_fee,\n        origin_function_signature,\n        CASE\n            WHEN to_address = '0x59728544b08ab483533076417fbbb2fd0b17ce3a' THEN 'DIRECT'\n            ELSE 'INDIRECT'\n        END AS interaction_type,\n        ingested_at\n    FROM\n        {{ ref('silver__transactions') }}\n    WHERE\n        tx_hash IN (\n            SELECT\n                tx_hash\n            FROM\n                looksrare_sales\n        )\n\n{% if is_incremental() %}\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\neth_prices AS (\n    SELECT\n        HOUR,\n        token_address,\n        token_price AS eth_price\n    FROM\n        token_prices\n    WHERE\n        token_address = 'ETH'\n),\nFINAL AS (\n    SELECT\n        looksrare_sales._log_id AS _log_id,\n        looksrare_sales.block_number AS block_number,\n        looksrare_sales.block_timestamp AS block_timestamp,\n        looksrare_sales.tx_hash AS tx_hash,\n        looksrare_sales.ingested_at AS ingested_at,\n        looksrare_sales.contract_address AS platform_address,\n        CASE\n            WHEN looksrare_sales.maker_address = nft_transfers.to_address THEN 'bid_won'\n            ELSE 'sale'\n        END AS event_type,\n        'looksrare' AS platform_name,\n        looksrare_sales.event_name AS event_name,\n        looksrare_sales.nft_count AS nft_count,\n        looksrare_sales.collection_address AS nft_address,\n        looksrare_sales.currency_address AS currency_address,\n        looksrare_sales.maker_address AS maker_address,\n        looksrare_sales.taker_address AS taker_address,\n        looksrare_sales.price AS unadj_price,\n        looksrare_sales.tokenId AS tokenId,\n        CASE\n            WHEN looksrare_sales.tx_hash IN (\n                SELECT\n                    tx_hash\n                FROM\n                    agg_buyer_seller\n            ) THEN agg_buyer_seller.seller\n            ELSE nft_transfers.from_address\n        END AS nft_from_address,\n        CASE\n            WHEN looksrare_sales.tx_hash IN (\n                SELECT\n                    tx_hash\n                FROM\n                    agg_buyer_seller\n            ) THEN agg_buyer_seller.buyer\n            ELSE nft_transfers.to_address\n        END AS nft_to_address,\n        nft_transfers.erc1155_value AS erc1155_value,\n        nft_transfers.project_name AS project_name,\n        tx_data.tx_fee AS tx_fee,\n        ROUND(\n            tx_fee * eth_price,\n            2\n        ) AS tx_fee_usd,\n        CASE\n            WHEN tx_currency.currency_address = 'ETH' THEN 'ETH'\n            ELSE symbol\n        END AS currency_symbol,\n        CASE\n            WHEN tx_currency.currency_address = 'ETH' THEN 18\n            ELSE decimals\n        END AS token_decimals,\n        creator_fee_unadj,\n        fee_share_unadj,\n        COALESCE(unadj_price / nft_count / pow(10, token_decimals), unadj_price) AS adj_price,\n        COALESCE(\n            creator_fee_unadj / nft_count / pow(\n                10,\n                token_decimals\n            ),\n            creator_fee_unadj,\n            0\n        ) AS creator_fee,\n        COALESCE(\n            fee_share_unadj / nft_count / pow(\n                10,\n                token_decimals\n            ),\n            fee_share_unadj,\n            0\n        ) AS platform_fee,\n        creator_fee + platform_fee AS total_fees,\n        CASE\n            WHEN token_decimals IS NULL THEN NULL\n            ELSE ROUND(\n                adj_price * token_price,\n                2\n            )\n        END AS price_usd,\n        CASE\n            WHEN token_decimals IS NULL THEN NULL\n            ELSE ROUND(\n                total_fees * token_price,\n                2\n            )\n        END AS total_fees_usd,\n        CASE\n            WHEN token_decimals IS NULL THEN NULL\n            ELSE ROUND(\n                platform_fee * token_price,\n                2\n            )\n        END AS platform_fee_usd,\n        CASE\n            WHEN token_decimals IS NULL THEN NULL\n            ELSE ROUND(\n                creator_fee * token_price,\n                2\n            )\n        END AS creator_fee_usd,\n        tx_data.to_address AS origin_to_address,\n        tx_data.from_address AS origin_from_address,\n        tx_data.origin_function_signature AS origin_function_signature,\n        nft_transfers.token_metadata AS token_metadata\n    FROM\n        looksrare_sales\n        LEFT JOIN nft_transfers\n        ON looksrare_sales.tx_hash = nft_transfers.tx_hash\n        AND (\n            (\n                looksrare_sales.maker_address = nft_transfers.from_address\n                AND looksrare_sales.taker_address = nft_transfers.to_address\n            )\n            OR (\n                looksrare_sales.maker_address = nft_transfers.to_address\n                AND looksrare_sales.taker_address = nft_transfers.from_address\n            )\n            OR (\n                looksrare_sales.taker_address = nft_transfers.to_address\n            )\n        )\n        AND looksrare_sales.tokenId = nft_transfers.tokenId\n        LEFT JOIN creator_fees\n        ON creator_fees.tx_hash = looksrare_sales.tx_hash\n        AND creator_fees.agg_id = looksrare_sales.agg_id\n        LEFT JOIN fee_sharing\n        ON fee_sharing.tx_hash = looksrare_sales.tx_hash\n        AND fee_sharing.agg_id = looksrare_sales.agg_id\n        LEFT JOIN tx_currency\n        ON tx_currency.tx_hash = looksrare_sales.tx_hash\n        LEFT JOIN token_prices\n        ON token_prices.hour = DATE_TRUNC(\n            'HOUR',\n            looksrare_sales.block_timestamp\n        )\n        AND tx_currency.currency_address = token_prices.token_address\n        LEFT JOIN tx_data\n        ON tx_data.tx_hash = looksrare_sales.tx_hash\n        LEFT JOIN eth_prices\n        ON eth_prices.hour = DATE_TRUNC(\n            'HOUR',\n            looksrare_sales.block_timestamp\n        )\n        LEFT JOIN decimals\n        ON tx_currency.currency_address = decimals.address\n        LEFT JOIN agg_buyer_seller\n        ON agg_buyer_seller.tx_hash = looksrare_sales.tx_hash\n        AND agg_buyer_seller.tokenId = looksrare_sales.tokenId\n)\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_to_address,\n    origin_from_address,\n    origin_function_signature,\n    event_type,\n    platform_address,\n    platform_name,\n    nft_from_address,\n    nft_to_address,\n    nft_address,\n    project_name,\n    erc1155_value,\n    tokenId,\n    token_metadata,\n    currency_symbol,\n    currency_address,\n    adj_price AS price,\n    price_usd,\n    total_fees,\n    platform_fee,\n    creator_fee,\n    total_fees_usd,\n    platform_fee_usd,\n    creator_fee_usd,\n    tx_fee,\n    tx_fee_usd,\n    _log_id,\n    ingested_at\nFROM\n    FINAL\nWHERE\n    nft_from_address IS NOT NULL qualify(ROW_NUMBER() over(PARTITION BY _log_id\nORDER BY\n    ingested_at DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_models.silver__logs", "model.ethereum_models.silver__nft_transfers", "model.ethereum_models.silver__logs", "model.ethereum_models.silver__transfers", "model.ethereum_models.silver__contracts", "model.ethereum_models.core__fact_hourly_token_prices", "model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "cluster_by": ["block_timestamp::DATE"], "unique_key": "_log_id", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "silver_nft", "fqn": ["ethereum_models", "silver", "nft", "silver_nft__looksrare_sales"], "unique_id": "model.ethereum_models.silver_nft__looksrare_sales", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "silver/nft/silver_nft__looksrare_sales.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.sql", "name": "silver_nft__looksrare_sales", "alias": "looksrare_sales", "checksum": {"name": "sha256", "checksum": "2eba1d363496bff1fdeab3cb8d9206bd4de12fa307172be1c5b8487a98974c34"}, "tags": [], "refs": [["silver__logs"], ["silver__nft_transfers"], ["silver__logs"], ["silver__transfers"], ["silver__contracts"], ["core__fact_hourly_token_prices"], ["silver__transactions"]], "sources": [], "description": "", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM_ADDRESS": {"name": "PLATFORM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM_NAME": {"name": "PLATFORM_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_FROM_ADDRESS": {"name": "NFT_FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_TO_ADDRESS": {"name": "NFT_TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_ADDRESS": {"name": "NFT_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKENID": {"name": "TOKENID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CURRENCY_ADDRESS": {"name": "CURRENCY_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRICE": {"name": "PRICE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRICE_USD": {"name": "PRICE_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_FEES": {"name": "TOTAL_FEES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM_FEE": {"name": "PLATFORM_FEE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR_FEE": {"name": "CREATOR_FEE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_FEES_USD": {"name": "TOTAL_FEES_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM_FEE_USD": {"name": "PLATFORM_FEE_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR_FEE_USD": {"name": "CREATOR_FEE_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_FEE": {"name": "TX_FEE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_FEE_USD": {"name": "TX_FEE_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_LOG_ID": {"name": "_LOG_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_TYPE": {"name": "EVENT_TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_models://models/silver/nft/silver_nft__looksrare_sales.yml", "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "_log_id", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1654351203.3173811, "compiled_sql": "\n\nWITH looksrare_sales AS (\n\n    SELECT\n        _log_id,\n        block_number,\n        block_timestamp,\n        tx_hash,\n        event_index,\n        ingested_at,\n        contract_address,\n        event_name,\n        event_inputs :amount :: INTEGER AS nft_count,\n        event_inputs :collection :: STRING AS collection_address,\n        event_inputs :currency :: STRING AS currency_address,\n        event_inputs :maker :: STRING AS maker_address,\n        event_inputs :taker :: STRING AS taker_address,\n        event_inputs :price :: INTEGER AS price,\n        event_inputs :tokenId :: STRING AS tokenId,\n        ROW_NUMBER() over(\n            PARTITION BY tx_hash\n            ORDER BY\n                event_index ASC\n        ) AS agg_id\n    FROM\n        ETHEREUM_DEV.silver.logs\n    WHERE\n        contract_address = '0x59728544b08ab483533076417fbbb2fd0b17ce3a'\n        AND event_name IN (\n            'TakerAsk',\n            'TakerBid'\n        )\n        AND tx_status = 'SUCCESS'\n\n\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        ETHEREUM_DEV.silver_nft.looksrare_sales\n)\n\n),\nnft_transfers AS (\n    SELECT\n        nft.tx_hash AS tx_hash,\n        nft.contract_address AS nft_address,\n        nft.project_name AS project_name,\n        nft.from_address AS from_address,\n        nft.to_address AS to_address,\n        nft.tokenid AS tokenid,\n        nft.token_metadata AS token_metadata,\n        nft.erc1155_value AS erc1155_value,\n        nft.ingested_at AS ingested_at,\n        nft._log_id AS _log_id,\n        nft.event_index AS event_index,\n        ROW_NUMBER() over(\n            PARTITION BY nft.tx_hash\n            ORDER BY\n                nft.event_index ASC\n        ) AS agg_id\n    FROM\n        ETHEREUM_DEV.silver.nft_transfers AS nft\n    WHERE\n        nft.tx_hash IN (\n            SELECT\n                tx_hash\n            FROM\n                looksrare_sales\n        )\n\n\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        ETHEREUM_DEV.silver_nft.looksrare_sales\n)\n\n),\nmulti_transfers AS (\n    SELECT\n        tx_hash,\n        nft_address,\n        tokenID,\n        COUNT(*)\n    FROM\n        nft_transfers\n    GROUP BY\n        tx_hash,\n        nft_address,\n        tokenID\n    HAVING\n        COUNT(*) > 1\n),\nmulti_sales AS (\n    SELECT\n        tx_hash,\n        collection_address,\n        tokenId,\n        COUNT(*)\n    FROM\n        looksrare_sales\n    GROUP BY\n        tx_hash,\n        collection_address,\n        tokenId\n    HAVING\n        COUNT(*) > 1\n),\naggregator_txs AS (\n    SELECT\n        *\n    FROM\n        multi_transfers\n    WHERE\n        tx_hash NOT IN (\n            SELECT\n                tx_hash\n            FROM\n                multi_sales\n        )\n),\naddress_logic AS (\n    SELECT\n        *,\n        LAST_VALUE(to_address) over (\n            PARTITION BY tx_hash,\n            nft_address,\n            tokenId\n            ORDER BY\n                event_index ASC\n        ) AS buyer,\n        FIRST_VALUE(from_address) over (\n            PARTITION BY tx_hash,\n            nft_address,\n            tokenId\n            ORDER BY\n                event_index ASC\n        ) AS seller\n    FROM\n        nft_transfers\n    WHERE\n        tx_hash IN (\n            SELECT\n                tx_hash\n            FROM\n                aggregator_txs\n        )\n),\nagg_buyer_seller AS (\n    SELECT\n        DISTINCT tx_hash,\n        nft_address,\n        tokenId,\n        buyer,\n        seller\n    FROM\n        address_logic\n),\ncreator_fees AS (\n    SELECT\n        _log_id,\n        block_number,\n        block_timestamp,\n        tx_hash,\n        event_index,\n        ingested_at,\n        contract_address,\n        event_name,\n        event_inputs :amount :: INTEGER AS creator_fee_unadj,\n        event_inputs :collection :: STRING AS collection_address,\n        event_inputs :currency :: STRING AS currency_address,\n        event_inputs :royaltyRecipient :: STRING AS royalty_recipient,\n        event_inputs :tokenId :: STRING AS tokenID,\n        ROW_NUMBER() over(\n            PARTITION BY tx_hash\n            ORDER BY\n                event_index ASC\n        ) AS agg_id\n    FROM\n        ETHEREUM_DEV.silver.logs\n    WHERE\n        event_name = 'RoyaltyPayment'\n        AND tx_hash IN (\n            SELECT\n                DISTINCT tx_hash\n            FROM\n                looksrare_sales\n        )\n\n\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        ETHEREUM_DEV.silver_nft.looksrare_sales\n)\n\n),\nfee_sharing AS (\n    SELECT\n        tx_hash,\n        contract_address AS currency_address,\n        to_address,\n        from_address,\n        raw_amount AS fee_share_unadj,\n        event_index,\n        ROW_NUMBER() over(\n            PARTITION BY tx_hash\n            ORDER BY\n                event_index ASC\n        ) AS agg_id\n    FROM\n        ETHEREUM_DEV.silver.transfers\n    WHERE\n        tx_hash IN (\n            SELECT\n                tx_hash\n            FROM\n                looksrare_sales\n        )\n        AND to_address IN (\n            '0x5924a28caaf1cc016617874a2f0c3710d881f3c1',\n            '0xc43eb2d8bc29da90253b8006f0f38e29bfc1369b'\n        )\n\n\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        ETHEREUM_DEV.silver_nft.looksrare_sales\n)\n\n),\ndecimals AS (\n    SELECT\n        address,\n        symbol,\n        decimals\n    FROM\n        ETHEREUM_DEV.silver.contracts\n    WHERE\n        address IN (\n            SELECT\n                DISTINCT LOWER(currency_address)\n            FROM\n                looksrare_sales\n        )\n),\ntoken_prices AS (\n    SELECT\n        HOUR,\n        CASE\n            WHEN LOWER(token_address) IS NULL THEN 'ETH'\n            ELSE LOWER(token_address)\n        END AS token_address,\n        AVG(price) AS token_price\n    FROM\n        ETHEREUM_DEV.core.fact_hourly_token_prices\n    WHERE\n        (\n            token_address IN (\n                SELECT\n                    DISTINCT LOWER(currency_address)\n                FROM\n                    looksrare_sales\n            )\n            OR (\n                token_address IS NULL\n                AND symbol IS NULL\n            )\n        )\n        AND HOUR :: DATE IN (\n            SELECT\n                DISTINCT block_timestamp :: DATE\n            FROM\n                looksrare_sales\n        )\n    GROUP BY\n        HOUR,\n        token_address\n),\neth_sales AS (\n    SELECT\n        tx_hash,\n        'ETH' AS currency_address\n    FROM\n        looksrare_sales\n    WHERE\n        tx_hash NOT IN (\n            SELECT\n                tx_hash\n            FROM\n                fee_sharing\n        )\n),\ntrade_currency AS (\n    SELECT\n        tx_hash,\n        currency_address\n    FROM\n        fee_sharing\n    UNION ALL\n    SELECT\n        tx_hash,\n        currency_address\n    FROM\n        eth_sales\n),\ntx_currency AS (\n    SELECT\n        DISTINCT tx_hash,\n        currency_address\n    FROM\n        trade_currency\n),\ntx_data AS (\n    SELECT\n        tx_hash,\n        block_timestamp,\n        block_number,\n        to_address,\n        from_address,\n        eth_value,\n        tx_fee,\n        origin_function_signature,\n        CASE\n            WHEN to_address = '0x59728544b08ab483533076417fbbb2fd0b17ce3a' THEN 'DIRECT'\n            ELSE 'INDIRECT'\n        END AS interaction_type,\n        ingested_at\n    FROM\n        ETHEREUM_DEV.silver.transactions\n    WHERE\n        tx_hash IN (\n            SELECT\n                tx_hash\n            FROM\n                looksrare_sales\n        )\n\n\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        ETHEREUM_DEV.silver_nft.looksrare_sales\n)\n\n),\neth_prices AS (\n    SELECT\n        HOUR,\n        token_address,\n        token_price AS eth_price\n    FROM\n        token_prices\n    WHERE\n        token_address = 'ETH'\n),\nFINAL AS (\n    SELECT\n        looksrare_sales._log_id AS _log_id,\n        looksrare_sales.block_number AS block_number,\n        looksrare_sales.block_timestamp AS block_timestamp,\n        looksrare_sales.tx_hash AS tx_hash,\n        looksrare_sales.ingested_at AS ingested_at,\n        looksrare_sales.contract_address AS platform_address,\n        CASE\n            WHEN looksrare_sales.maker_address = nft_transfers.to_address THEN 'bid_won'\n            ELSE 'sale'\n        END AS event_type,\n        'looksrare' AS platform_name,\n        looksrare_sales.event_name AS event_name,\n        looksrare_sales.nft_count AS nft_count,\n        looksrare_sales.collection_address AS nft_address,\n        looksrare_sales.currency_address AS currency_address,\n        looksrare_sales.maker_address AS maker_address,\n        looksrare_sales.taker_address AS taker_address,\n        looksrare_sales.price AS unadj_price,\n        looksrare_sales.tokenId AS tokenId,\n        CASE\n            WHEN looksrare_sales.tx_hash IN (\n                SELECT\n                    tx_hash\n                FROM\n                    agg_buyer_seller\n            ) THEN agg_buyer_seller.seller\n            ELSE nft_transfers.from_address\n        END AS nft_from_address,\n        CASE\n            WHEN looksrare_sales.tx_hash IN (\n                SELECT\n                    tx_hash\n                FROM\n                    agg_buyer_seller\n            ) THEN agg_buyer_seller.buyer\n            ELSE nft_transfers.to_address\n        END AS nft_to_address,\n        nft_transfers.erc1155_value AS erc1155_value,\n        nft_transfers.project_name AS project_name,\n        tx_data.tx_fee AS tx_fee,\n        ROUND(\n            tx_fee * eth_price,\n            2\n        ) AS tx_fee_usd,\n        CASE\n            WHEN tx_currency.currency_address = 'ETH' THEN 'ETH'\n            ELSE symbol\n        END AS currency_symbol,\n        CASE\n            WHEN tx_currency.currency_address = 'ETH' THEN 18\n            ELSE decimals\n        END AS token_decimals,\n        creator_fee_unadj,\n        fee_share_unadj,\n        COALESCE(unadj_price / nft_count / pow(10, token_decimals), unadj_price) AS adj_price,\n        COALESCE(\n            creator_fee_unadj / nft_count / pow(\n                10,\n                token_decimals\n            ),\n            creator_fee_unadj,\n            0\n        ) AS creator_fee,\n        COALESCE(\n            fee_share_unadj / nft_count / pow(\n                10,\n                token_decimals\n            ),\n            fee_share_unadj,\n            0\n        ) AS platform_fee,\n        creator_fee + platform_fee AS total_fees,\n        CASE\n            WHEN token_decimals IS NULL THEN NULL\n            ELSE ROUND(\n                adj_price * token_price,\n                2\n            )\n        END AS price_usd,\n        CASE\n            WHEN token_decimals IS NULL THEN NULL\n            ELSE ROUND(\n                total_fees * token_price,\n                2\n            )\n        END AS total_fees_usd,\n        CASE\n            WHEN token_decimals IS NULL THEN NULL\n            ELSE ROUND(\n                platform_fee * token_price,\n                2\n            )\n        END AS platform_fee_usd,\n        CASE\n            WHEN token_decimals IS NULL THEN NULL\n            ELSE ROUND(\n                creator_fee * token_price,\n                2\n            )\n        END AS creator_fee_usd,\n        tx_data.to_address AS origin_to_address,\n        tx_data.from_address AS origin_from_address,\n        tx_data.origin_function_signature AS origin_function_signature,\n        nft_transfers.token_metadata AS token_metadata\n    FROM\n        looksrare_sales\n        LEFT JOIN nft_transfers\n        ON looksrare_sales.tx_hash = nft_transfers.tx_hash\n        AND (\n            (\n                looksrare_sales.maker_address = nft_transfers.from_address\n                AND looksrare_sales.taker_address = nft_transfers.to_address\n            )\n            OR (\n                looksrare_sales.maker_address = nft_transfers.to_address\n                AND looksrare_sales.taker_address = nft_transfers.from_address\n            )\n            OR (\n                looksrare_sales.taker_address = nft_transfers.to_address\n            )\n        )\n        AND looksrare_sales.tokenId = nft_transfers.tokenId\n        LEFT JOIN creator_fees\n        ON creator_fees.tx_hash = looksrare_sales.tx_hash\n        AND creator_fees.agg_id = looksrare_sales.agg_id\n        LEFT JOIN fee_sharing\n        ON fee_sharing.tx_hash = looksrare_sales.tx_hash\n        AND fee_sharing.agg_id = looksrare_sales.agg_id\n        LEFT JOIN tx_currency\n        ON tx_currency.tx_hash = looksrare_sales.tx_hash\n        LEFT JOIN token_prices\n        ON token_prices.hour = DATE_TRUNC(\n            'HOUR',\n            looksrare_sales.block_timestamp\n        )\n        AND tx_currency.currency_address = token_prices.token_address\n        LEFT JOIN tx_data\n        ON tx_data.tx_hash = looksrare_sales.tx_hash\n        LEFT JOIN eth_prices\n        ON eth_prices.hour = DATE_TRUNC(\n            'HOUR',\n            looksrare_sales.block_timestamp\n        )\n        LEFT JOIN decimals\n        ON tx_currency.currency_address = decimals.address\n        LEFT JOIN agg_buyer_seller\n        ON agg_buyer_seller.tx_hash = looksrare_sales.tx_hash\n        AND agg_buyer_seller.tokenId = looksrare_sales.tokenId\n)\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_to_address,\n    origin_from_address,\n    origin_function_signature,\n    event_type,\n    platform_address,\n    platform_name,\n    nft_from_address,\n    nft_to_address,\n    nft_address,\n    project_name,\n    erc1155_value,\n    tokenId,\n    token_metadata,\n    currency_symbol,\n    currency_address,\n    adj_price AS price,\n    price_usd,\n    total_fees,\n    platform_fee,\n    creator_fee,\n    total_fees_usd,\n    platform_fee_usd,\n    creator_fee_usd,\n    tx_fee,\n    tx_fee_usd,\n    _log_id,\n    ingested_at\nFROM\n    FINAL\nWHERE\n    nft_from_address IS NOT NULL qualify(ROW_NUMBER() over(PARTITION BY _log_id\nORDER BY\n    ingested_at DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.silver_nft.looksrare_sales"}, "model.ethereum_models.silver_nft__rarible_sales": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = 'nft_uni_id',\n    cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH rarible_sales AS (\n\n    SELECT\n        _log_id,\n        block_number,\n        block_timestamp,\n        tx_hash,\n        event_index,\n        ingested_at,\n        contract_address,\n        CONCAT('0x', SUBSTR(DATA, 91, 40)) AS from_address,\n        CONCAT('0x', SUBSTR(DATA, 155, 40)) AS to_address,\n        CASE\n            WHEN CONCAT('0x', RIGHT(DATA, 40)) = '0x0000000000000000000000000000000000000000' THEN 'ETH'\n            ELSE CONCAT('0x', RIGHT(DATA, 40))\n        END AS currency_address,\n        CASE\n            WHEN SUBSTR(\n                DATA,\n                195,\n                10\n            ) = '1a0388dd00' THEN 'sale'\n            ELSE 'bid_won'\n        END AS trade_direction,\n        silver.js_hex_to_int(SUBSTR(DATA, 433, 18)) / pow(\n            10,\n            18\n        ) AS eth_value,\n        ROW_NUMBER() over(\n            PARTITION BY tx_hash\n            ORDER BY\n                event_index ASC\n        ) AS nft_log_id\n    FROM\n        {{ ref('silver__logs') }}\n    WHERE\n        contract_address = LOWER('0x9757F2d2b135150BBeb65308D4a91804107cd8D6')\n        AND topics [0] :: STRING = '0xcae9d16f553e92058883de29cb3135dbc0c1e31fd7eace79fef1d80577fe482e'\n        AND eth_value >.000000001\n        AND tx_status = 'SUCCESS'\n\n{% if is_incremental() %}\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\nnft_transfers AS (\n    SELECT\n        *,\n        ROW_NUMBER() over(\n            PARTITION BY tx_hash\n            ORDER BY\n                event_index ASC\n        ) AS agg_id\n    FROM\n        {{ ref('silver__nft_transfers') }}\n    WHERE\n        tx_hash IN (\n            SELECT\n                DISTINCT tx_hash\n            FROM\n                rarible_sales\n        )\n        AND from_address IN (\n            SELECT\n                DISTINCT to_address\n            FROM\n                rarible_sales\n        )\n\n{% if is_incremental() %}\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\nnft_sellers AS (\n    SELECT\n        DISTINCT tx_hash,\n        from_address\n    FROM\n        nft_transfers\n),\npayment_type AS (\n    SELECT\n        b.*,\n        CASE\n            WHEN b.to_address = LOWER('0x1cf0dF2A5A20Cd61d68d4489eEBbf85b8d39e18a') THEN 'platform_fee'\n            WHEN nft_sellers.from_address IS NOT NULL THEN 'to_seller'\n            ELSE 'creator_fee'\n        END AS TYPE,CASE\n            WHEN TYPE = 'to_seller' THEN CEIL(\n                nft_log_id / 3\n            )\n            WHEN TYPE = 'creator_fee' THEN CEIL(\n                nft_log_id / 3\n            )\n            WHEN TYPE = 'platform_fee' THEN CEIL(\n                nft_log_id / 3\n            )\n        END AS joinid,\n        CASE\n            WHEN TYPE = 'to_seller' THEN CEIL(\n                nft_log_id / 4\n            )\n            WHEN TYPE = 'creator_fee' THEN CEIL(\n                nft_log_id / 4\n            )\n            WHEN TYPE = 'platform_fee' THEN CEIL(\n                nft_log_id / 4\n            )\n        END AS joinid2,\n        CASE\n            WHEN TYPE = 'to_seller' THEN CEIL(\n                nft_log_id / 2\n            )\n            WHEN TYPE = 'creator_fee' THEN CEIL(\n                nft_log_id / 2\n            )\n            WHEN TYPE = 'platform_fee' THEN CEIL(\n                nft_log_id / 2\n            )\n        END AS joinid3\n    FROM\n        rarible_sales b\n        LEFT JOIN nft_sellers\n        ON nft_sellers.tx_hash = b.tx_hash\n        AND nft_sellers.from_address = b.to_address\n),\nmulti_sales AS (\n    SELECT\n        tx_hash,\n        COUNT(*)\n    FROM\n        nft_transfers\n    GROUP BY\n        tx_hash\n    HAVING\n        COUNT(*) > 1\n),\nsale_amount_basic AS (\n    SELECT\n        tx_hash,\n        currency_address,\n        trade_direction,\n        SUM(eth_value) AS sale_amount\n    FROM\n        payment_type\n    WHERE\n        tx_hash NOT IN (\n            SELECT\n                tx_hash\n            FROM\n                multi_sales\n        )\n    GROUP BY\n        tx_hash,\n        currency_address,\n        trade_direction\n),\nplatform_amount_basic AS (\n    SELECT\n        tx_hash,\n        SUM(eth_value) AS platform_fee\n    FROM\n        payment_type\n    WHERE\n        tx_hash NOT IN (\n            SELECT\n                tx_hash\n            FROM\n                multi_sales\n        )\n        AND TYPE = 'platform_fee'\n    GROUP BY\n        tx_hash\n),\ncreator_amount_basic AS (\n    SELECT\n        tx_hash,\n        SUM(eth_value) AS creator_fee\n    FROM\n        payment_type\n    WHERE\n        tx_hash NOT IN (\n            SELECT\n                tx_hash\n            FROM\n                multi_sales\n        )\n        AND TYPE = 'creator_fee'\n    GROUP BY\n        tx_hash\n),\nbasic_join AS (\n    SELECT\n        b.block_number,\n        b.tx_hash,\n        b.block_timestamp,\n        b.contract_address,\n        b.project_name,\n        b.from_address AS seller_address,\n        b.to_address AS buyer_address,\n        b.tokenid,\n        b.erc1155_value,\n        b.token_metadata AS token_metadata,\n        currency_address,\n        trade_direction,\n        sale_amount,\n        platform_fee,\n        creator_fee\n    FROM\n        nft_transfers b\n        INNER JOIN sale_amount_basic\n        ON b.tx_hash = sale_amount_basic.tx_hash\n        LEFT JOIN platform_amount_basic\n        ON b.tx_hash = platform_amount_basic.tx_hash\n        LEFT JOIN creator_amount_basic\n        ON b.tx_hash = creator_amount_basic.tx_hash\n),\nmulti_sales_types AS (\n    SELECT\n        tx_hash,\n        SUM(\n            CASE\n                WHEN TYPE = 'platform_fee' THEN 1\n            END\n        ) AS platform_fee,\n        SUM(\n            CASE\n                WHEN TYPE = 'to_seller' THEN 1\n            END\n        ) AS to_seller,\n        SUM(\n            CASE\n                WHEN TYPE = 'creator_fee' THEN 1\n            END\n        ) AS creator_fee,\n        CASE\n            WHEN platform_fee = to_seller\n            AND to_seller = creator_fee THEN 'joinid'\n            WHEN (\n                to_seller * 2\n            ) = platform_fee\n            AND to_seller = creator_fee THEN 'joinid2'\n            WHEN (\n                platform_fee * 2\n            ) = to_seller\n            AND creator_fee IS NULL THEN 'joinid'\n            WHEN to_seller = creator_fee\n            AND platform_fee IS NULL THEN 'joinid'\n            WHEN to_seller IS NOT NULL\n            AND platform_fee IS NULL\n            AND creator_fee IS NULL THEN 'nft_log_id'\n            WHEN platform_fee = to_seller\n            AND creator_fee IS NULL THEN 'joinid3'\n            WHEN (\n                to_seller * 2\n            ) = platform_fee\n            AND creator_fee IS NULL THEN 'joinid'\n        END AS join_type\n    FROM\n        payment_type\n    WHERE\n        tx_hash IN (\n            SELECT\n                tx_hash\n            FROM\n                multi_sales\n        )\n    GROUP BY\n        tx_hash\n),\nfinal_group_ids AS (\n    SELECT\n        b.*,\n        join_type,\n        CASE\n            WHEN join_type = 'joinid' THEN joinid\n            WHEN join_type = 'joinid2' THEN joinid2\n            WHEN join_type = 'joinid3' THEN joinid3\n            WHEN join_type = 'nft_log_id' THEN nft_log_id\n        END AS final_join_id\n    FROM\n        payment_type b\n        LEFT JOIN multi_sales_types\n        ON b.tx_hash = multi_sales_types.tx_hash\n    WHERE\n        b.tx_hash IN (\n            SELECT\n                tx_hash\n            FROM\n                multi_sales\n        )\n),\nsale_amount_multi AS (\n    SELECT\n        tx_hash,\n        final_join_id,\n        currency_address,\n        SUM(eth_value) AS sale_amount\n    FROM\n        final_group_ids\n    GROUP BY\n        tx_hash,\n        final_join_id,\n        currency_address\n),\nplatform_amount_multi AS (\n    SELECT\n        tx_hash,\n        final_join_id,\n        trade_direction,\n        SUM(eth_value) AS platform_fee\n    FROM\n        final_group_ids\n    WHERE\n        TYPE = 'platform_fee'\n    GROUP BY\n        tx_hash,\n        final_join_id,\n        trade_direction\n),\ncreator_amount_multi AS (\n    SELECT\n        tx_hash,\n        final_join_id,\n        SUM(eth_value) AS creator_fee\n    FROM\n        final_group_ids\n    WHERE\n        TYPE = 'creator_fee'\n    GROUP BY\n        tx_hash,\n        final_join_id\n),\nmulti_sales_final AS (\n    SELECT\n        b.block_number AS block_number,\n        b.tx_hash AS tx_hash,\n        b.block_timestamp AS block_timestamp,\n        b.contract_address AS contract_address,\n        b.project_name AS project_name,\n        b.from_address AS seller_address,\n        b.to_address AS buyer_address,\n        b.tokenid AS tokenid,\n        b.erc1155_value AS erc1155_value,\n        b.token_metadata AS token_metadata,\n        currency_address,\n        trade_direction,\n        sale_amount AS sale_amount,\n        platform_fee AS platform_fee,\n        creator_fee AS creator_fee\n    FROM\n        nft_transfers b\n        INNER JOIN sale_amount_multi\n        ON b.tx_hash = sale_amount_multi.tx_hash\n        AND b.agg_id = sale_amount_multi.final_join_id\n        LEFT JOIN platform_amount_multi\n        ON b.tx_hash = platform_amount_multi.tx_hash\n        AND b.agg_id = platform_amount_multi.final_join_id\n        LEFT JOIN creator_amount_multi\n        ON b.tx_hash = creator_amount_multi.tx_hash\n        AND b.agg_id = creator_amount_multi.final_join_id\n    WHERE\n        b.tx_hash IN (\n            SELECT\n                tx_hash\n            FROM\n                multi_sales\n        )\n),\nlegacy_exchange_txs AS (\n    SELECT\n        tx_hash,\n        CASE\n            WHEN event_inputs :buyValue :: FLOAT > event_inputs :sellValue :: FLOAT THEN 'bid_won'\n            ELSE 'sale'\n        END AS trade_direction\n    FROM\n        {{ ref('silver__logs') }}\n    WHERE\n        contract_address = LOWER('0xcd4EC7b66fbc029C116BA9Ffb3e59351c20B5B06')\n        AND event_name = 'Buy'\n        AND tx_status = 'SUCCESS'\n        AND block_number < 14000000\n\n{% if is_incremental() %}\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\nlegacy_nft_transfers AS (\n    SELECT\n        *\n    FROM\n        {{ ref('silver__nft_transfers') }}\n    WHERE\n        tx_hash IN (\n            SELECT\n                DISTINCT tx_hash\n            FROM\n                legacy_exchange_txs\n        )\n        AND block_number < 14000000\n\n{% if is_incremental() %}\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\nlegacy_token_transfers AS (\n    SELECT\n        tx_hash,\n        from_address,\n        to_address,\n        contract_address,\n        symbol,\n        amount\n    FROM\n        {{ ref('core__ez_token_transfers') }}\n    WHERE\n        tx_hash IN (\n            SELECT\n                DISTINCT tx_hash\n            FROM\n                legacy_exchange_txs\n        )\n),\nlegacy_traces AS (\n    SELECT\n        tx_hash,\n        from_address,\n        to_address,\n        'ETH' AS contract_address,\n        'ETH' AS symbol,\n        eth_value AS amount\n    FROM\n        {{ ref('silver__eth_transfers') }}\n    WHERE\n        tx_hash IN (\n            SELECT\n                DISTINCT tx_hash\n            FROM\n                legacy_exchange_txs\n        )\n        AND identifier <> 'CALL_ORIGIN'\n\n{% if is_incremental() %}\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\nall_legacy_sales AS (\n    SELECT\n        tx_hash,\n        from_address,\n        to_address,\n        contract_address,\n        symbol,\n        amount\n    FROM\n        legacy_token_transfers\n    UNION ALL\n    SELECT\n        tx_hash,\n        from_address,\n        to_address,\n        contract_address,\n        symbol,\n        amount\n    FROM\n        legacy_traces\n),\nlegacy_sales_amount AS (\n    SELECT\n        tx_hash,\n        contract_address AS currency_address,\n        symbol,\n        SUM(amount) AS sale_amount\n    FROM\n        all_legacy_sales\n    GROUP BY\n        tx_hash,\n        contract_address,\n        symbol\n),\nlegacy_platform_fees AS (\n    SELECT\n        tx_hash,\n        contract_address AS currency_address,\n        symbol,\n        SUM(amount) AS platform_fee\n    FROM\n        all_legacy_sales\n    WHERE\n        to_address = LOWER('0xe627243104A101Ca59a2c629AdbCd63a782E837f')\n    GROUP BY\n        tx_hash,\n        contract_address,\n        symbol\n),\nlegacy_creator_fees AS (\n    SELECT\n        tx_hash,\n        contract_address AS currency_address,\n        symbol,\n        SUM(amount) AS creator_fee\n    FROM\n        all_legacy_sales\n    WHERE\n        to_address <> LOWER('0xe627243104A101Ca59a2c629AdbCd63a782E837f')\n        AND to_address NOT IN (\n            SELECT\n                DISTINCT from_address\n            FROM\n                legacy_nft_transfers\n        )\n    GROUP BY\n        tx_hash,\n        contract_address,\n        symbol\n),\nfinal_legacy_table AS (\n    SELECT\n        b.block_number AS block_number,\n        b.tx_hash AS tx_hash,\n        b.block_timestamp AS block_timestamp,\n        b.contract_address AS contract_address,\n        b.project_name AS project_name,\n        b.from_address AS seller_address,\n        b.to_address AS buyer_address,\n        b.tokenid AS tokenid,\n        b.erc1155_value AS erc1155_value,\n        s.currency_address AS currency_address,\n        b.token_metadata AS token_metadata,\n        trade_direction,\n        sale_amount AS sale_amount,\n        platform_fee AS platform_fee,\n        creator_fee AS creator_fee\n    FROM\n        legacy_nft_transfers b\n        LEFT JOIN legacy_sales_amount s\n        ON b.tx_hash = s.tx_hash\n        LEFT JOIN legacy_platform_fees\n        ON b.tx_hash = legacy_platform_fees.tx_hash\n        LEFT JOIN legacy_creator_fees\n        ON b.tx_hash = legacy_creator_fees.tx_hash\n        LEFT JOIN legacy_exchange_txs\n        ON legacy_exchange_txs.tx_hash = b.tx_hash\n),\nall_sales AS (\n    SELECT\n        block_number,\n        tx_hash,\n        block_timestamp,\n        contract_address,\n        project_name,\n        LOWER('0x9757F2d2b135150BBeb65308D4a91804107cd8D6') AS platform_address,\n        seller_address,\n        buyer_address,\n        tokenid,\n        token_metadata,\n        erc1155_value,\n        currency_address,\n        trade_direction,\n        sale_amount,\n        platform_fee,\n        creator_fee\n    FROM\n        basic_join\n    UNION ALL\n    SELECT\n        block_number,\n        tx_hash,\n        block_timestamp,\n        contract_address,\n        project_name,\n        LOWER('0x9757F2d2b135150BBeb65308D4a91804107cd8D6') AS platform_address,\n        seller_address,\n        buyer_address,\n        tokenid,\n        token_metadata,\n        erc1155_value,\n        currency_address,\n        trade_direction,\n        sale_amount,\n        platform_fee,\n        creator_fee\n    FROM\n        multi_sales_final\n    UNION ALL\n    SELECT\n        block_number,\n        tx_hash,\n        block_timestamp,\n        contract_address,\n        project_name,\n        LOWER('0xcd4EC7b66fbc029C116BA9Ffb3e59351c20B5B06') AS platform_address,\n        seller_address,\n        buyer_address,\n        tokenid,\n        token_metadata,\n        erc1155_value,\n        currency_address,\n        trade_direction,\n        sale_amount,\n        platform_fee,\n        creator_fee\n    FROM\n        final_legacy_table\n),\ntx_data AS (\n    SELECT\n        tx_hash,\n        to_address,\n        from_address,\n        tx_fee,\n        origin_function_signature,\n        ingested_at\n    FROM\n        {{ ref('silver__transactions') }}\n    WHERE\n        block_number > 10000000\n        AND tx_hash IN (\n            SELECT\n                DISTINCT tx_hash\n            FROM\n                all_sales\n        )\n\n{% if is_incremental() %}\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\ntoken_prices AS (\n    SELECT\n        HOUR,\n        symbol,\n        CASE\n            WHEN LOWER(token_address) IS NULL THEN 'ETH'\n            ELSE LOWER(token_address)\n        END AS token_address,\n        AVG(price) AS price\n    FROM\n        {{ ref('core__fact_hourly_token_prices') }}\n    WHERE\n        (\n            token_address IN (\n                SELECT\n                    DISTINCT LOWER(currency_address)\n                FROM\n                    all_sales\n            )\n            OR (\n                token_address IS NULL\n                AND symbol IS NULL\n            )\n        )\n        AND HOUR :: DATE IN (\n            SELECT\n                DISTINCT block_timestamp :: DATE\n            FROM\n                all_sales\n        )\n    GROUP BY\n        HOUR,\n        symbol,\n        token_address\n),\nsymbols AS (\n    SELECT\n        DISTINCT token_address,\n        symbol\n    FROM\n        token_prices\n),\neth_prices AS (\n    SELECT\n        HOUR,\n        token_address,\n        price AS eth_price\n    FROM\n        token_prices\n    WHERE\n        token_address = 'ETH'\n),\nfinal_join AS (\n    SELECT\n        A.block_number AS block_number,\n        A.tx_hash AS tx_hash,\n        A.block_timestamp AS block_timestamp,\n        A.contract_address AS nft_address,\n        A.project_name AS project_name,\n        A.seller_address AS seller_address,\n        A.buyer_address AS buyer_address,\n        A.tokenid AS tokenId,\n        A.token_metadata AS token_metadata,\n        A.erc1155_value AS erc1155_value,\n        A.currency_address AS currency_address,\n        A.trade_direction AS event_type,\n        A.sale_amount AS price,\n        A.sale_amount * p.price AS price_usd,\n        COALESCE(\n            A.platform_fee,\n            0\n        ) AS platform_fee,\n        COALESCE(\n            A.creator_fee,\n            0\n        ) AS creator_fee,\n        (\n            COALESCE(\n                A.platform_fee,\n                0\n            ) + COALESCE(\n                A.creator_fee,\n                0\n            )\n        ) AS total_fees,\n        (\n            total_fees * p.price\n        ) AS total_fees_usd,\n        t.origin_function_signature AS origin_function_signature,\n        t.to_address AS origin_to_address,\n        t.from_address AS origin_from_address,\n        t.tx_fee AS tx_fee,\n        (\n            tx_fee * eth_price\n        ) AS tx_fee_usd,\n        (\n            platform_fee * p.price\n        ) AS platform_fee_usd,\n        (\n            creator_fee * p.price\n        ) AS creator_fee_usd,\n        t.ingested_at AS ingested_at,\n        'rarible' AS platform_name,\n        platform_address,\n        CASE\n            WHEN currency_address = 'ETH' THEN 'ETH'\n            ELSE symbols.symbol\n        END AS currency_symbol,\n        CONCAT(\n            A.tx_hash,\n            '-',\n            tokenId,\n            '-',\n            COALESCE(\n                A.erc1155_value,\n                0\n            )\n        ) AS nft_uni_id\n    FROM\n        all_sales A\n        LEFT JOIN token_prices p\n        ON p.hour = DATE_TRUNC(\n            'hour',\n            A.block_timestamp\n        )\n        AND A.currency_address = p.token_address\n        LEFT JOIN tx_data t\n        ON t.tx_hash = A.tx_hash\n        LEFT JOIN symbols\n        ON symbols.token_address = A.currency_address\n        LEFT JOIN eth_prices\n        ON eth_prices.hour = DATE_TRUNC(\n            'hour',\n            A.block_timestamp\n        )\n)\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    event_type,\n    platform_address,\n    platform_name,\n    seller_address,\n    buyer_address,\n    nft_address,\n    project_name,\n    erc1155_value,\n    tokenId,\n    token_metadata,\n    currency_symbol,\n    currency_address,\n    price,\n    price_usd,\n    total_fees,\n    platform_fee,\n    creator_fee,\n    total_fees_usd,\n    platform_fee_usd,\n    creator_fee_usd,\n    tx_fee,\n    tx_fee_usd,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    nft_uni_id,\n    ingested_at\nFROM\n    final_join qualify(ROW_NUMBER() over(PARTITION BY nft_uni_id\nORDER BY\n    price_usd DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_models.silver__logs", "model.ethereum_models.silver__nft_transfers", "model.ethereum_models.silver__logs", "model.ethereum_models.silver__nft_transfers", "model.ethereum_models.core__ez_token_transfers", "model.ethereum_models.silver__eth_transfers", "model.ethereum_models.silver__transactions", "model.ethereum_models.core__fact_hourly_token_prices"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "cluster_by": ["block_timestamp::DATE"], "unique_key": "nft_uni_id", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "silver_nft", "fqn": ["ethereum_models", "silver", "nft", "silver_nft__rarible_sales"], "unique_id": "model.ethereum_models.silver_nft__rarible_sales", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "silver/nft/silver_nft__rarible_sales.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.sql", "name": "silver_nft__rarible_sales", "alias": "rarible_sales", "checksum": {"name": "sha256", "checksum": "ee93431c3518198e9657980053c0e5b82f63d7e5d260fd84539becaa57443688"}, "tags": [], "refs": [["silver__logs"], ["silver__nft_transfers"], ["silver__logs"], ["silver__nft_transfers"], ["core__ez_token_transfers"], ["silver__eth_transfers"], ["silver__transactions"], ["core__fact_hourly_token_prices"]], "sources": [], "description": "", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM_ADDRESS": {"name": "PLATFORM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM_NAME": {"name": "PLATFORM_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SELLER_ADDRESS": {"name": "SELLER_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BUYER_ADDRESS": {"name": "BUYER_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_ADDRESS": {"name": "NFT_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKENID": {"name": "TOKENID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CURRENCY_ADDRESS": {"name": "CURRENCY_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRICE": {"name": "PRICE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRICE_USD": {"name": "PRICE_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_FEES": {"name": "TOTAL_FEES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM_FEE": {"name": "PLATFORM_FEE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR_FEE": {"name": "CREATOR_FEE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_FEES_USD": {"name": "TOTAL_FEES_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM_FEE_USD": {"name": "PLATFORM_FEE_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR_FEE_USD": {"name": "CREATOR_FEE_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_FEE": {"name": "TX_FEE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_FEE_USD": {"name": "TX_FEE_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "nft_uni_id": {"name": "nft_uni_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_models://models/silver/nft/silver_nft__rarible_sales.yml", "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "nft_uni_id", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1654351203.150219, "compiled_sql": "\n\nWITH rarible_sales AS (\n\n    SELECT\n        _log_id,\n        block_number,\n        block_timestamp,\n        tx_hash,\n        event_index,\n        ingested_at,\n        contract_address,\n        CONCAT('0x', SUBSTR(DATA, 91, 40)) AS from_address,\n        CONCAT('0x', SUBSTR(DATA, 155, 40)) AS to_address,\n        CASE\n            WHEN CONCAT('0x', RIGHT(DATA, 40)) = '0x0000000000000000000000000000000000000000' THEN 'ETH'\n            ELSE CONCAT('0x', RIGHT(DATA, 40))\n        END AS currency_address,\n        CASE\n            WHEN SUBSTR(\n                DATA,\n                195,\n                10\n            ) = '1a0388dd00' THEN 'sale'\n            ELSE 'bid_won'\n        END AS trade_direction,\n        silver.js_hex_to_int(SUBSTR(DATA, 433, 18)) / pow(\n            10,\n            18\n        ) AS eth_value,\n        ROW_NUMBER() over(\n            PARTITION BY tx_hash\n            ORDER BY\n                event_index ASC\n        ) AS nft_log_id\n    FROM\n        ETHEREUM_DEV.silver.logs\n    WHERE\n        contract_address = LOWER('0x9757F2d2b135150BBeb65308D4a91804107cd8D6')\n        AND topics [0] :: STRING = '0xcae9d16f553e92058883de29cb3135dbc0c1e31fd7eace79fef1d80577fe482e'\n        AND eth_value >.000000001\n        AND tx_status = 'SUCCESS'\n\n\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        ETHEREUM_DEV.silver_nft.rarible_sales\n)\n\n),\nnft_transfers AS (\n    SELECT\n        *,\n        ROW_NUMBER() over(\n            PARTITION BY tx_hash\n            ORDER BY\n                event_index ASC\n        ) AS agg_id\n    FROM\n        ETHEREUM_DEV.silver.nft_transfers\n    WHERE\n        tx_hash IN (\n            SELECT\n                DISTINCT tx_hash\n            FROM\n                rarible_sales\n        )\n        AND from_address IN (\n            SELECT\n                DISTINCT to_address\n            FROM\n                rarible_sales\n        )\n\n\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        ETHEREUM_DEV.silver_nft.rarible_sales\n)\n\n),\nnft_sellers AS (\n    SELECT\n        DISTINCT tx_hash,\n        from_address\n    FROM\n        nft_transfers\n),\npayment_type AS (\n    SELECT\n        b.*,\n        CASE\n            WHEN b.to_address = LOWER('0x1cf0dF2A5A20Cd61d68d4489eEBbf85b8d39e18a') THEN 'platform_fee'\n            WHEN nft_sellers.from_address IS NOT NULL THEN 'to_seller'\n            ELSE 'creator_fee'\n        END AS TYPE,CASE\n            WHEN TYPE = 'to_seller' THEN CEIL(\n                nft_log_id / 3\n            )\n            WHEN TYPE = 'creator_fee' THEN CEIL(\n                nft_log_id / 3\n            )\n            WHEN TYPE = 'platform_fee' THEN CEIL(\n                nft_log_id / 3\n            )\n        END AS joinid,\n        CASE\n            WHEN TYPE = 'to_seller' THEN CEIL(\n                nft_log_id / 4\n            )\n            WHEN TYPE = 'creator_fee' THEN CEIL(\n                nft_log_id / 4\n            )\n            WHEN TYPE = 'platform_fee' THEN CEIL(\n                nft_log_id / 4\n            )\n        END AS joinid2,\n        CASE\n            WHEN TYPE = 'to_seller' THEN CEIL(\n                nft_log_id / 2\n            )\n            WHEN TYPE = 'creator_fee' THEN CEIL(\n                nft_log_id / 2\n            )\n            WHEN TYPE = 'platform_fee' THEN CEIL(\n                nft_log_id / 2\n            )\n        END AS joinid3\n    FROM\n        rarible_sales b\n        LEFT JOIN nft_sellers\n        ON nft_sellers.tx_hash = b.tx_hash\n        AND nft_sellers.from_address = b.to_address\n),\nmulti_sales AS (\n    SELECT\n        tx_hash,\n        COUNT(*)\n    FROM\n        nft_transfers\n    GROUP BY\n        tx_hash\n    HAVING\n        COUNT(*) > 1\n),\nsale_amount_basic AS (\n    SELECT\n        tx_hash,\n        currency_address,\n        trade_direction,\n        SUM(eth_value) AS sale_amount\n    FROM\n        payment_type\n    WHERE\n        tx_hash NOT IN (\n            SELECT\n                tx_hash\n            FROM\n                multi_sales\n        )\n    GROUP BY\n        tx_hash,\n        currency_address,\n        trade_direction\n),\nplatform_amount_basic AS (\n    SELECT\n        tx_hash,\n        SUM(eth_value) AS platform_fee\n    FROM\n        payment_type\n    WHERE\n        tx_hash NOT IN (\n            SELECT\n                tx_hash\n            FROM\n                multi_sales\n        )\n        AND TYPE = 'platform_fee'\n    GROUP BY\n        tx_hash\n),\ncreator_amount_basic AS (\n    SELECT\n        tx_hash,\n        SUM(eth_value) AS creator_fee\n    FROM\n        payment_type\n    WHERE\n        tx_hash NOT IN (\n            SELECT\n                tx_hash\n            FROM\n                multi_sales\n        )\n        AND TYPE = 'creator_fee'\n    GROUP BY\n        tx_hash\n),\nbasic_join AS (\n    SELECT\n        b.block_number,\n        b.tx_hash,\n        b.block_timestamp,\n        b.contract_address,\n        b.project_name,\n        b.from_address AS seller_address,\n        b.to_address AS buyer_address,\n        b.tokenid,\n        b.erc1155_value,\n        b.token_metadata AS token_metadata,\n        currency_address,\n        trade_direction,\n        sale_amount,\n        platform_fee,\n        creator_fee\n    FROM\n        nft_transfers b\n        INNER JOIN sale_amount_basic\n        ON b.tx_hash = sale_amount_basic.tx_hash\n        LEFT JOIN platform_amount_basic\n        ON b.tx_hash = platform_amount_basic.tx_hash\n        LEFT JOIN creator_amount_basic\n        ON b.tx_hash = creator_amount_basic.tx_hash\n),\nmulti_sales_types AS (\n    SELECT\n        tx_hash,\n        SUM(\n            CASE\n                WHEN TYPE = 'platform_fee' THEN 1\n            END\n        ) AS platform_fee,\n        SUM(\n            CASE\n                WHEN TYPE = 'to_seller' THEN 1\n            END\n        ) AS to_seller,\n        SUM(\n            CASE\n                WHEN TYPE = 'creator_fee' THEN 1\n            END\n        ) AS creator_fee,\n        CASE\n            WHEN platform_fee = to_seller\n            AND to_seller = creator_fee THEN 'joinid'\n            WHEN (\n                to_seller * 2\n            ) = platform_fee\n            AND to_seller = creator_fee THEN 'joinid2'\n            WHEN (\n                platform_fee * 2\n            ) = to_seller\n            AND creator_fee IS NULL THEN 'joinid'\n            WHEN to_seller = creator_fee\n            AND platform_fee IS NULL THEN 'joinid'\n            WHEN to_seller IS NOT NULL\n            AND platform_fee IS NULL\n            AND creator_fee IS NULL THEN 'nft_log_id'\n            WHEN platform_fee = to_seller\n            AND creator_fee IS NULL THEN 'joinid3'\n            WHEN (\n                to_seller * 2\n            ) = platform_fee\n            AND creator_fee IS NULL THEN 'joinid'\n        END AS join_type\n    FROM\n        payment_type\n    WHERE\n        tx_hash IN (\n            SELECT\n                tx_hash\n            FROM\n                multi_sales\n        )\n    GROUP BY\n        tx_hash\n),\nfinal_group_ids AS (\n    SELECT\n        b.*,\n        join_type,\n        CASE\n            WHEN join_type = 'joinid' THEN joinid\n            WHEN join_type = 'joinid2' THEN joinid2\n            WHEN join_type = 'joinid3' THEN joinid3\n            WHEN join_type = 'nft_log_id' THEN nft_log_id\n        END AS final_join_id\n    FROM\n        payment_type b\n        LEFT JOIN multi_sales_types\n        ON b.tx_hash = multi_sales_types.tx_hash\n    WHERE\n        b.tx_hash IN (\n            SELECT\n                tx_hash\n            FROM\n                multi_sales\n        )\n),\nsale_amount_multi AS (\n    SELECT\n        tx_hash,\n        final_join_id,\n        currency_address,\n        SUM(eth_value) AS sale_amount\n    FROM\n        final_group_ids\n    GROUP BY\n        tx_hash,\n        final_join_id,\n        currency_address\n),\nplatform_amount_multi AS (\n    SELECT\n        tx_hash,\n        final_join_id,\n        trade_direction,\n        SUM(eth_value) AS platform_fee\n    FROM\n        final_group_ids\n    WHERE\n        TYPE = 'platform_fee'\n    GROUP BY\n        tx_hash,\n        final_join_id,\n        trade_direction\n),\ncreator_amount_multi AS (\n    SELECT\n        tx_hash,\n        final_join_id,\n        SUM(eth_value) AS creator_fee\n    FROM\n        final_group_ids\n    WHERE\n        TYPE = 'creator_fee'\n    GROUP BY\n        tx_hash,\n        final_join_id\n),\nmulti_sales_final AS (\n    SELECT\n        b.block_number AS block_number,\n        b.tx_hash AS tx_hash,\n        b.block_timestamp AS block_timestamp,\n        b.contract_address AS contract_address,\n        b.project_name AS project_name,\n        b.from_address AS seller_address,\n        b.to_address AS buyer_address,\n        b.tokenid AS tokenid,\n        b.erc1155_value AS erc1155_value,\n        b.token_metadata AS token_metadata,\n        currency_address,\n        trade_direction,\n        sale_amount AS sale_amount,\n        platform_fee AS platform_fee,\n        creator_fee AS creator_fee\n    FROM\n        nft_transfers b\n        INNER JOIN sale_amount_multi\n        ON b.tx_hash = sale_amount_multi.tx_hash\n        AND b.agg_id = sale_amount_multi.final_join_id\n        LEFT JOIN platform_amount_multi\n        ON b.tx_hash = platform_amount_multi.tx_hash\n        AND b.agg_id = platform_amount_multi.final_join_id\n        LEFT JOIN creator_amount_multi\n        ON b.tx_hash = creator_amount_multi.tx_hash\n        AND b.agg_id = creator_amount_multi.final_join_id\n    WHERE\n        b.tx_hash IN (\n            SELECT\n                tx_hash\n            FROM\n                multi_sales\n        )\n),\nlegacy_exchange_txs AS (\n    SELECT\n        tx_hash,\n        CASE\n            WHEN event_inputs :buyValue :: FLOAT > event_inputs :sellValue :: FLOAT THEN 'bid_won'\n            ELSE 'sale'\n        END AS trade_direction\n    FROM\n        ETHEREUM_DEV.silver.logs\n    WHERE\n        contract_address = LOWER('0xcd4EC7b66fbc029C116BA9Ffb3e59351c20B5B06')\n        AND event_name = 'Buy'\n        AND tx_status = 'SUCCESS'\n        AND block_number < 14000000\n\n\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        ETHEREUM_DEV.silver_nft.rarible_sales\n)\n\n),\nlegacy_nft_transfers AS (\n    SELECT\n        *\n    FROM\n        ETHEREUM_DEV.silver.nft_transfers\n    WHERE\n        tx_hash IN (\n            SELECT\n                DISTINCT tx_hash\n            FROM\n                legacy_exchange_txs\n        )\n        AND block_number < 14000000\n\n\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        ETHEREUM_DEV.silver_nft.rarible_sales\n)\n\n),\nlegacy_token_transfers AS (\n    SELECT\n        tx_hash,\n        from_address,\n        to_address,\n        contract_address,\n        symbol,\n        amount\n    FROM\n        ETHEREUM_DEV.core.ez_token_transfers\n    WHERE\n        tx_hash IN (\n            SELECT\n                DISTINCT tx_hash\n            FROM\n                legacy_exchange_txs\n        )\n),\nlegacy_traces AS (\n    SELECT\n        tx_hash,\n        from_address,\n        to_address,\n        'ETH' AS contract_address,\n        'ETH' AS symbol,\n        eth_value AS amount\n    FROM\n        ETHEREUM_DEV.silver.eth_transfers\n    WHERE\n        tx_hash IN (\n            SELECT\n                DISTINCT tx_hash\n            FROM\n                legacy_exchange_txs\n        )\n        AND identifier <> 'CALL_ORIGIN'\n\n\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        ETHEREUM_DEV.silver_nft.rarible_sales\n)\n\n),\nall_legacy_sales AS (\n    SELECT\n        tx_hash,\n        from_address,\n        to_address,\n        contract_address,\n        symbol,\n        amount\n    FROM\n        legacy_token_transfers\n    UNION ALL\n    SELECT\n        tx_hash,\n        from_address,\n        to_address,\n        contract_address,\n        symbol,\n        amount\n    FROM\n        legacy_traces\n),\nlegacy_sales_amount AS (\n    SELECT\n        tx_hash,\n        contract_address AS currency_address,\n        symbol,\n        SUM(amount) AS sale_amount\n    FROM\n        all_legacy_sales\n    GROUP BY\n        tx_hash,\n        contract_address,\n        symbol\n),\nlegacy_platform_fees AS (\n    SELECT\n        tx_hash,\n        contract_address AS currency_address,\n        symbol,\n        SUM(amount) AS platform_fee\n    FROM\n        all_legacy_sales\n    WHERE\n        to_address = LOWER('0xe627243104A101Ca59a2c629AdbCd63a782E837f')\n    GROUP BY\n        tx_hash,\n        contract_address,\n        symbol\n),\nlegacy_creator_fees AS (\n    SELECT\n        tx_hash,\n        contract_address AS currency_address,\n        symbol,\n        SUM(amount) AS creator_fee\n    FROM\n        all_legacy_sales\n    WHERE\n        to_address <> LOWER('0xe627243104A101Ca59a2c629AdbCd63a782E837f')\n        AND to_address NOT IN (\n            SELECT\n                DISTINCT from_address\n            FROM\n                legacy_nft_transfers\n        )\n    GROUP BY\n        tx_hash,\n        contract_address,\n        symbol\n),\nfinal_legacy_table AS (\n    SELECT\n        b.block_number AS block_number,\n        b.tx_hash AS tx_hash,\n        b.block_timestamp AS block_timestamp,\n        b.contract_address AS contract_address,\n        b.project_name AS project_name,\n        b.from_address AS seller_address,\n        b.to_address AS buyer_address,\n        b.tokenid AS tokenid,\n        b.erc1155_value AS erc1155_value,\n        s.currency_address AS currency_address,\n        b.token_metadata AS token_metadata,\n        trade_direction,\n        sale_amount AS sale_amount,\n        platform_fee AS platform_fee,\n        creator_fee AS creator_fee\n    FROM\n        legacy_nft_transfers b\n        LEFT JOIN legacy_sales_amount s\n        ON b.tx_hash = s.tx_hash\n        LEFT JOIN legacy_platform_fees\n        ON b.tx_hash = legacy_platform_fees.tx_hash\n        LEFT JOIN legacy_creator_fees\n        ON b.tx_hash = legacy_creator_fees.tx_hash\n        LEFT JOIN legacy_exchange_txs\n        ON legacy_exchange_txs.tx_hash = b.tx_hash\n),\nall_sales AS (\n    SELECT\n        block_number,\n        tx_hash,\n        block_timestamp,\n        contract_address,\n        project_name,\n        LOWER('0x9757F2d2b135150BBeb65308D4a91804107cd8D6') AS platform_address,\n        seller_address,\n        buyer_address,\n        tokenid,\n        token_metadata,\n        erc1155_value,\n        currency_address,\n        trade_direction,\n        sale_amount,\n        platform_fee,\n        creator_fee\n    FROM\n        basic_join\n    UNION ALL\n    SELECT\n        block_number,\n        tx_hash,\n        block_timestamp,\n        contract_address,\n        project_name,\n        LOWER('0x9757F2d2b135150BBeb65308D4a91804107cd8D6') AS platform_address,\n        seller_address,\n        buyer_address,\n        tokenid,\n        token_metadata,\n        erc1155_value,\n        currency_address,\n        trade_direction,\n        sale_amount,\n        platform_fee,\n        creator_fee\n    FROM\n        multi_sales_final\n    UNION ALL\n    SELECT\n        block_number,\n        tx_hash,\n        block_timestamp,\n        contract_address,\n        project_name,\n        LOWER('0xcd4EC7b66fbc029C116BA9Ffb3e59351c20B5B06') AS platform_address,\n        seller_address,\n        buyer_address,\n        tokenid,\n        token_metadata,\n        erc1155_value,\n        currency_address,\n        trade_direction,\n        sale_amount,\n        platform_fee,\n        creator_fee\n    FROM\n        final_legacy_table\n),\ntx_data AS (\n    SELECT\n        tx_hash,\n        to_address,\n        from_address,\n        tx_fee,\n        origin_function_signature,\n        ingested_at\n    FROM\n        ETHEREUM_DEV.silver.transactions\n    WHERE\n        block_number > 10000000\n        AND tx_hash IN (\n            SELECT\n                DISTINCT tx_hash\n            FROM\n                all_sales\n        )\n\n\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        ETHEREUM_DEV.silver_nft.rarible_sales\n)\n\n),\ntoken_prices AS (\n    SELECT\n        HOUR,\n        symbol,\n        CASE\n            WHEN LOWER(token_address) IS NULL THEN 'ETH'\n            ELSE LOWER(token_address)\n        END AS token_address,\n        AVG(price) AS price\n    FROM\n        ETHEREUM_DEV.core.fact_hourly_token_prices\n    WHERE\n        (\n            token_address IN (\n                SELECT\n                    DISTINCT LOWER(currency_address)\n                FROM\n                    all_sales\n            )\n            OR (\n                token_address IS NULL\n                AND symbol IS NULL\n            )\n        )\n        AND HOUR :: DATE IN (\n            SELECT\n                DISTINCT block_timestamp :: DATE\n            FROM\n                all_sales\n        )\n    GROUP BY\n        HOUR,\n        symbol,\n        token_address\n),\nsymbols AS (\n    SELECT\n        DISTINCT token_address,\n        symbol\n    FROM\n        token_prices\n),\neth_prices AS (\n    SELECT\n        HOUR,\n        token_address,\n        price AS eth_price\n    FROM\n        token_prices\n    WHERE\n        token_address = 'ETH'\n),\nfinal_join AS (\n    SELECT\n        A.block_number AS block_number,\n        A.tx_hash AS tx_hash,\n        A.block_timestamp AS block_timestamp,\n        A.contract_address AS nft_address,\n        A.project_name AS project_name,\n        A.seller_address AS seller_address,\n        A.buyer_address AS buyer_address,\n        A.tokenid AS tokenId,\n        A.token_metadata AS token_metadata,\n        A.erc1155_value AS erc1155_value,\n        A.currency_address AS currency_address,\n        A.trade_direction AS event_type,\n        A.sale_amount AS price,\n        A.sale_amount * p.price AS price_usd,\n        COALESCE(\n            A.platform_fee,\n            0\n        ) AS platform_fee,\n        COALESCE(\n            A.creator_fee,\n            0\n        ) AS creator_fee,\n        (\n            COALESCE(\n                A.platform_fee,\n                0\n            ) + COALESCE(\n                A.creator_fee,\n                0\n            )\n        ) AS total_fees,\n        (\n            total_fees * p.price\n        ) AS total_fees_usd,\n        t.origin_function_signature AS origin_function_signature,\n        t.to_address AS origin_to_address,\n        t.from_address AS origin_from_address,\n        t.tx_fee AS tx_fee,\n        (\n            tx_fee * eth_price\n        ) AS tx_fee_usd,\n        (\n            platform_fee * p.price\n        ) AS platform_fee_usd,\n        (\n            creator_fee * p.price\n        ) AS creator_fee_usd,\n        t.ingested_at AS ingested_at,\n        'rarible' AS platform_name,\n        platform_address,\n        CASE\n            WHEN currency_address = 'ETH' THEN 'ETH'\n            ELSE symbols.symbol\n        END AS currency_symbol,\n        CONCAT(\n            A.tx_hash,\n            '-',\n            tokenId,\n            '-',\n            COALESCE(\n                A.erc1155_value,\n                0\n            )\n        ) AS nft_uni_id\n    FROM\n        all_sales A\n        LEFT JOIN token_prices p\n        ON p.hour = DATE_TRUNC(\n            'hour',\n            A.block_timestamp\n        )\n        AND A.currency_address = p.token_address\n        LEFT JOIN tx_data t\n        ON t.tx_hash = A.tx_hash\n        LEFT JOIN symbols\n        ON symbols.token_address = A.currency_address\n        LEFT JOIN eth_prices\n        ON eth_prices.hour = DATE_TRUNC(\n            'hour',\n            A.block_timestamp\n        )\n)\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    event_type,\n    platform_address,\n    platform_name,\n    seller_address,\n    buyer_address,\n    nft_address,\n    project_name,\n    erc1155_value,\n    tokenId,\n    token_metadata,\n    currency_symbol,\n    currency_address,\n    price,\n    price_usd,\n    total_fees,\n    platform_fee,\n    creator_fee,\n    total_fees_usd,\n    platform_fee_usd,\n    creator_fee_usd,\n    tx_fee,\n    tx_fee_usd,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature,\n    nft_uni_id,\n    ingested_at\nFROM\n    final_join qualify(ROW_NUMBER() over(PARTITION BY nft_uni_id\nORDER BY\n    price_usd DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.silver_nft.rarible_sales"}, "model.ethereum_models.silver_nft__metadata": {"raw_sql": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT\n    blockchain,\n    commission_rate,\n    contract_address,\n    contract_name,\n    created_at_block_id,\n    created_at_timestamp,\n    created_at_tx_id,\n    creator_address,\n    creator_name,\n    image_url,\n    project_name,\n    token_id,\n    token_metadata,\n    token_metadata_uri,\n    token_name\nFROM\n    {{ source(\n        'flipside_gold_ethereum',\n        'nft_metadata'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.ethereum_models.flipside_gold_ethereum.nft_metadata"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "silver_nft", "fqn": ["ethereum_models", "silver", "nft", "silver_nft__metadata"], "unique_id": "model.ethereum_models.silver_nft__metadata", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "silver/nft/silver_nft__metadata.sql", "original_file_path": "models/silver/nft/silver_nft__metadata.sql", "name": "silver_nft__metadata", "alias": "metadata", "checksum": {"name": "sha256", "checksum": "92f7179221d850ec984f56c86b2cbc2f0adc8ef38cc4eeca3ba2d130f298535c"}, "tags": [], "refs": [], "sources": [["flipside_gold_ethereum", "nft_metadata"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__metadata.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1654351201.932086, "compiled_sql": "\n\nSELECT\n    blockchain,\n    commission_rate,\n    contract_address,\n    contract_name,\n    created_at_block_id,\n    created_at_timestamp,\n    created_at_tx_id,\n    creator_address,\n    creator_name,\n    image_url,\n    project_name,\n    token_id,\n    token_metadata,\n    token_metadata_uri,\n    token_name\nFROM\n    flipside_prod_db.ethereum.nft_metadata", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.silver_nft.metadata"}, "model.ethereum_models.silver_nft__opensea_sales": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = '_log_id',\n    cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH opensea_sales AS (\n\n    SELECT\n        _log_id,\n        block_number,\n        block_timestamp,\n        tx_hash,\n        contract_address,\n        event_name,\n        event_inputs,\n        event_index,\n        event_inputs :maker :: STRING AS maker_address,\n        event_inputs :taker :: STRING AS taker_address,\n        event_inputs :price :: INTEGER AS unadj_price,\n        ingested_at :: TIMESTAMP AS ingested_at,\n        ROW_NUMBER() over(\n            PARTITION BY tx_hash\n            ORDER BY\n                event_index ASC\n        ) AS agg_id\n    FROM\n        {{ ref('silver__logs') }}\n    WHERE\n        contract_address IN (\n            '0x7be8076f4ea4a4ad08075c2508e481d6c946d12b',\n            '0x7f268357a8c2552623316e2562d90e642bb538e5'\n        )\n        AND event_name = 'OrdersMatched'\n        AND tx_status = 'SUCCESS'\n\n{% if is_incremental() %}\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\nnft_transfers AS (\n    SELECT\n        tx_hash,\n        contract_address AS nft_address,\n        project_name,\n        from_address,\n        to_address,\n        tokenid,\n        token_metadata,\n        erc1155_value,\n        ingested_at,\n        _log_id,\n        event_index,\n        ROW_NUMBER() over(\n            PARTITION BY tx_hash\n            ORDER BY\n                event_index ASC\n        ) AS agg_id\n    FROM\n        {{ ref('silver__nft_transfers') }}\n    WHERE\n        tx_hash IN (\n            SELECT\n                tx_hash\n            FROM\n                opensea_sales\n        )\n\n{% if is_incremental() %}\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\neth_tx_data AS (\n    SELECT\n        tx_hash,\n        block_number,\n        block_timestamp,\n        from_address,\n        to_address,\n        eth_value,\n        identifier,\n        LEFT(identifier, LENGTH(identifier) -2) AS id_group,\n        CASE\n            WHEN identifier = 'CALL_ORIGIN' THEN 'ORIGIN'\n            WHEN from_address IN (\n                '0x7be8076f4ea4a4ad08075c2508e481d6c946d12b',\n                '0x7f268357a8c2552623316e2562d90e642bb538e5'\n            )\n            AND to_address = '0x5b3256965e7c3cf26e11fcaf296dfc8807c01073' THEN 'OS_FEE'\n            WHEN from_address IN (\n                '0x7be8076f4ea4a4ad08075c2508e481d6c946d12b',\n                '0x7f268357a8c2552623316e2562d90e642bb538e5'\n            )\n            AND to_address <> '0x5b3256965e7c3cf26e11fcaf296dfc8807c01073'\n            AND identifier <> 'CALL_ORIGIN' THEN 'TO_SELLER'\n            WHEN to_address IN (\n                '0x7be8076f4ea4a4ad08075c2508e481d6c946d12b',\n                '0x7f268357a8c2552623316e2562d90e642bb538e5'\n            ) THEN 'SALE_EVENT'\n        END AS call_record_type\n    FROM\n        {{ ref('silver__eth_transfers') }}\n    WHERE\n        tx_hash IN (\n            SELECT\n                tx_hash\n            FROM\n                opensea_sales\n        )\n\n{% if is_incremental() %}\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\ntraces_sales_address AS (\n    SELECT\n        tx_hash,\n        from_address,\n        to_address,\n        eth_value,\n        identifier,\n        SUBSTR(identifier, 0, LENGTH(identifier) - CHARINDEX('_', REVERSE(identifier))) AS sale_call_id\n    FROM\n        eth_tx_data\n    WHERE\n        call_record_type = 'TO_SELLER'),\n        traces_sales AS (\n            SELECT\n                eth_tx_data.tx_hash AS sale_hash,\n                eth_tx_data.eth_value AS sale_value,\n                eth_tx_data.identifier AS sale_identifer,\n                traces_sales_address.to_address AS seller_address,\n                SPLIT(\n                    sale_identifer,\n                    '_'\n                ) AS split_id,\n                split_id [1] :: INTEGER AS level1,\n                split_id [2] :: INTEGER AS level2,\n                split_id [3] :: INTEGER AS level3,\n                split_id [4] :: INTEGER AS level4,\n                split_id [5] :: INTEGER AS level5,\n                ROW_NUMBER() over(\n                    PARTITION BY sale_hash\n                    ORDER BY\n                        level1 ASC,\n                        level2 ASC,\n                        level3 ASC,\n                        level4 ASC,\n                        level5 ASC\n                ) AS agg_id\n            FROM\n                eth_tx_data\n                LEFT JOIN traces_sales_address\n                ON eth_tx_data.tx_hash = traces_sales_address.tx_hash\n                AND eth_tx_data.identifier = traces_sales_address.sale_call_id\n            WHERE\n                eth_tx_data.call_record_type = 'SALE_EVENT'\n        ),\n        os_eth_fees AS (\n            SELECT\n                tx_hash,\n                identifier,\n                eth_value AS os_fee,\n                SPLIT(\n                    identifier,\n                    '_'\n                ) AS split_id,\n                split_id [1] :: INTEGER AS level1,\n                split_id [2] :: INTEGER AS level2,\n                split_id [3] :: INTEGER AS level3,\n                split_id [4] :: INTEGER AS level4,\n                split_id [5] :: INTEGER AS level5,\n                ROW_NUMBER() over(\n                    PARTITION BY tx_hash\n                    ORDER BY\n                        level1 ASC,\n                        level2 ASC,\n                        level3 ASC,\n                        level4 ASC,\n                        level5 ASC\n                ) AS agg_id\n            FROM\n                eth_tx_data\n            WHERE\n                call_record_type = 'OS_FEE'\n        ),\n        token_tx_data AS (\n            SELECT\n                tx_hash,\n                contract_address AS currency_address,\n                to_address,\n                from_address,\n                raw_amount,\n                event_index,\n                ROW_NUMBER() over(\n                    PARTITION BY tx_hash\n                    ORDER BY\n                        event_index ASC\n                ) AS agg_id\n            FROM\n                {{ ref('silver__transfers') }}\n            WHERE\n                tx_hash IN (\n                    SELECT\n                        tx_hash\n                    FROM\n                        opensea_sales\n                )\n\n{% if is_incremental() %}\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\ntx_data AS (\n    SELECT\n        tx_hash,\n        block_timestamp,\n        block_number,\n        to_address,\n        from_address,\n        eth_value,\n        tx_fee,\n        origin_function_signature,\n        CASE\n            WHEN to_address IN (\n                '0x7be8076f4ea4a4ad08075c2508e481d6c946d12b',\n                '0x7f268357a8c2552623316e2562d90e642bb538e5'\n            ) THEN 'DIRECT'\n            ELSE 'INDIRECT'\n        END AS interaction_type,\n        ingested_at\n    FROM\n        {{ ref('silver__transactions') }}\n    WHERE\n        tx_hash IN (\n            SELECT\n                tx_hash\n            FROM\n                opensea_sales\n        )\n\n{% if is_incremental() %}\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\nnfts_per_trade AS (\n    SELECT\n        tx_hash,\n        COUNT(\n            DISTINCT tokenid\n        ) AS nft_count\n    FROM\n        nft_transfers\n    GROUP BY\n        tx_hash\n),\neth_sales AS (\n    SELECT\n        tx_hash,\n        'ETH' AS currency_address\n    FROM\n        opensea_sales\n    WHERE\n        tx_hash NOT IN (\n            SELECT\n                tx_hash\n            FROM\n                token_tx_data\n        )\n),\ntrade_currency AS (\n    SELECT\n        tx_hash,\n        currency_address\n    FROM\n        token_tx_data\n    UNION ALL\n    SELECT\n        tx_hash,\n        currency_address\n    FROM\n        eth_sales\n),\ntx_currency AS (\n    SELECT\n        DISTINCT tx_hash,\n        currency_address\n    FROM\n        trade_currency\n),\ndecimals AS (\n    SELECT\n        address,\n        symbol,\n        decimals\n    FROM\n        {{ ref('silver__contracts') }}\n    WHERE\n        address IN (\n            SELECT\n                DISTINCT LOWER(currency_address)\n            FROM\n                tx_currency\n        )\n),\nos_token_fees AS (\n    SELECT\n        tx_hash,\n        currency_address,\n        to_address,\n        from_address,\n        raw_amount,\n        agg_id\n    FROM\n        token_tx_data\n    WHERE\n        to_address = '0x5b3256965e7c3cf26e11fcaf296dfc8807c01073'\n),\ntoken_prices AS (\n    SELECT\n        HOUR,\n        CASE\n            WHEN LOWER(token_address) IS NULL THEN 'ETH'\n            ELSE LOWER(token_address)\n        END AS token_address,\n        AVG(price) AS price\n    FROM\n        {{ ref('core__fact_hourly_token_prices') }}\n    WHERE\n        (\n            token_address IN (\n                SELECT\n                    DISTINCT LOWER(currency_address)\n                FROM\n                    trade_currency\n            )\n            OR (\n                token_address IS NULL\n                AND symbol IS NULL\n            )\n        )\n        AND HOUR :: DATE IN (\n            SELECT\n                DISTINCT block_timestamp :: DATE\n            FROM\n                opensea_sales\n        )\n    GROUP BY\n        HOUR,\n        token_address\n),\neth_prices AS (\n    SELECT\n        HOUR,\n        token_address,\n        price AS eth_price\n    FROM\n        token_prices\n    WHERE\n        token_address = 'ETH'\n),\ndirect_interactions AS (\n    SELECT\n        nft_transfers._log_id AS _log_id,\n        opensea_sales.block_number AS block_number,\n        opensea_sales.block_timestamp AS block_timestamp,\n        opensea_sales.tx_hash AS tx_hash,\n        contract_address AS platform_address,\n        tx_data.tx_fee AS tx_fee,\n        CASE\n            WHEN opensea_sales.maker_address = nft_transfers.from_address THEN 'sale'\n            WHEN opensea_sales.maker_address = nft_transfers.to_address THEN 'bid_won'\n        END AS event_type,\n        ROUND(\n            tx_fee * eth_price,\n            2\n        ) AS tx_fee_usd,\n        event_name,\n        event_inputs,\n        maker_address,\n        taker_address,\n        nft_transfers.from_address AS nft_from_address,\n        nft_transfers.to_address AS nft_to_address,\n        nft_transfers.project_name AS project_name,\n        nft_transfers.token_metadata AS token_metadata,\n        nft_address,\n        tokenId,\n        erc1155_value,\n        unadj_price,\n        price AS token_price,\n        nft_count,\n        tx_currency.currency_address AS currency_address,\n        CASE\n            WHEN tx_currency.currency_address = 'ETH' THEN 'ETH'\n            ELSE symbol\n        END AS currency_symbol,\n        CASE\n            WHEN tx_currency.currency_address = 'ETH' THEN 18\n            ELSE decimals\n        END AS token_decimals,\n        opensea_sales.ingested_at AS ingested_at,\n        COALESCE(unadj_price / nft_count / pow(10, token_decimals), unadj_price) AS adj_price,\n        CASE\n            WHEN token_decimals IS NULL THEN NULL\n            ELSE ROUND(\n                adj_price * token_price,\n                2\n            )\n        END AS price_usd,\n        COALESCE(\n            os_fee,\n            COALESCE(raw_amount / nft_count / pow(10, token_decimals), raw_amount),\n            0\n        ) AS total_fees,\n        CASE\n            WHEN total_fees > 0 THEN adj_price * 0.025\n            ELSE 0\n        END AS platform_fee,\n        COALESCE(\n            total_fees - platform_fee,\n            0\n        ) AS creator_fee,\n        CASE\n            WHEN token_decimals IS NULL THEN NULL\n            ELSE ROUND(\n                total_fees * token_price,\n                2\n            )\n        END AS total_fees_usd,\n        CASE\n            WHEN token_decimals IS NULL THEN NULL\n            ELSE ROUND(\n                platform_fee * token_price,\n                2\n            )\n        END AS platform_fee_usd,\n        CASE\n            WHEN token_decimals IS NULL THEN NULL\n            ELSE ROUND(\n                creator_fee * token_price,\n                2\n            )\n        END AS creator_fee_usd,\n        tx_data.to_address AS origin_to_address,\n        tx_data.from_address AS origin_from_address,\n        tx_data.origin_function_signature AS origin_function_signature\n    FROM\n        opensea_sales\n        INNER JOIN tx_data\n        ON opensea_sales.tx_hash = tx_data.tx_hash\n        AND tx_data.interaction_type = 'DIRECT'\n        LEFT JOIN nft_transfers\n        ON opensea_sales.tx_hash = nft_transfers.tx_hash\n        AND (\n            (\n                opensea_sales.maker_address = nft_transfers.from_address\n                AND opensea_sales.taker_address = nft_transfers.to_address\n            )\n            OR (\n                opensea_sales.maker_address = nft_transfers.to_address\n                AND opensea_sales.taker_address = nft_transfers.from_address\n            )\n        )\n        LEFT JOIN tx_currency\n        ON tx_currency.tx_hash = opensea_sales.tx_hash\n        LEFT JOIN decimals\n        ON tx_currency.currency_address = decimals.address\n        LEFT JOIN token_prices\n        ON token_prices.hour = DATE_TRUNC(\n            'HOUR',\n            opensea_sales.block_timestamp\n        )\n        AND tx_currency.currency_address = token_prices.token_address\n        LEFT JOIN nfts_per_trade\n        ON nfts_per_trade.tx_hash = opensea_sales.tx_hash\n        LEFT JOIN os_eth_fees\n        ON os_eth_fees.tx_hash = opensea_sales.tx_hash\n        LEFT JOIN os_token_fees\n        ON os_token_fees.tx_hash = opensea_sales.tx_hash\n        AND os_token_fees.currency_address = decimals.address\n        LEFT JOIN eth_prices\n        ON eth_prices.hour = DATE_TRUNC(\n            'HOUR',\n            opensea_sales.block_timestamp\n        )\n),\nindirect_interactions AS (\n    SELECT\n        nft_transfers._log_id AS _log_id,\n        nft_transfers.tx_hash AS tx_hash,\n        tx_data.block_timestamp AS block_timestamp,\n        tx_data.block_number AS block_number,\n        tx_data.ingested_at AS ingested_at,\n        nft_transfers.from_address AS nft_from_address,\n        nft_transfers.to_address AS nft_to_address,\n        nft_transfers.nft_address AS nft_address,\n        nft_transfers.tokenId AS tokenId,\n        nft_transfers.token_metadata AS token_metadata,\n        nft_transfers.erc1155_value AS erc1155_value,\n        nft_transfers.project_name AS project_name,\n        tx_data.tx_fee AS tx_fee,\n        'sale' AS event_type,\n        ROUND(\n            tx_fee * eth_price,\n            2\n        ) AS tx_fee_usd,\n        platform.contract_address AS platform_address,\n        tx_currency.currency_address AS currency_address,\n        CASE\n            WHEN tx_currency.currency_address = 'ETH' THEN 'ETH'\n            ELSE symbol\n        END AS currency_symbol,\n        CASE\n            WHEN tx_currency.currency_address = 'ETH' THEN 18\n            ELSE decimals\n        END AS token_decimals,\n        sale_value,\n        CASE\n            WHEN token_decimals IS NULL THEN NULL\n            ELSE ROUND(\n                sale_value * price,\n                2\n            )\n        END AS price_usd,\n        COALESCE(\n            os_fee,\n            COALESCE(raw_amount / nft_count / pow(10, token_decimals), raw_amount),\n            0\n        ) AS total_fees,\n        CASE\n            WHEN total_fees > 0 THEN sale_value * 0.025\n            ELSE 0\n        END AS platform_fee,\n        COALESCE(\n            total_fees - platform_fee,\n            0\n        ) AS creator_fee,\n        CASE\n            WHEN token_decimals IS NULL THEN NULL\n            ELSE ROUND(\n                total_fees * price,\n                2\n            )\n        END AS total_fees_usd,\n        CASE\n            WHEN token_decimals IS NULL THEN NULL\n            ELSE ROUND(\n                platform_fee * price,\n                2\n            )\n        END AS platform_fee_usd,\n        CASE\n            WHEN token_decimals IS NULL THEN NULL\n            ELSE ROUND(\n                creator_fee * price,\n                2\n            )\n        END AS creator_fee_usd,\n        tx_data.to_address AS origin_to_address,\n        tx_data.from_address AS origin_from_address,\n        tx_data.origin_function_signature AS origin_function_signature\n    FROM\n        nft_transfers\n        INNER JOIN tx_data\n        ON nft_transfers.tx_hash = tx_data.tx_hash\n        AND tx_data.interaction_type = 'INDIRECT'\n        INNER JOIN traces_sales\n        ON traces_sales.sale_hash = nft_transfers.tx_hash\n        AND nft_transfers.from_address = traces_sales.seller_address\n        AND nft_transfers.agg_id = traces_sales.agg_id\n        LEFT JOIN tx_currency\n        ON tx_currency.tx_hash = nft_transfers.tx_hash\n        LEFT JOIN os_eth_fees\n        ON os_eth_fees.tx_hash = nft_transfers.tx_hash\n        AND os_eth_fees.agg_id = nft_transfers.agg_id\n        LEFT JOIN os_token_fees\n        ON os_token_fees.tx_hash = nft_transfers.tx_hash\n        AND os_token_fees.agg_id = nft_transfers.agg_id\n        LEFT JOIN decimals\n        ON tx_currency.currency_address = decimals.address\n        LEFT JOIN token_prices\n        ON token_prices.hour = DATE_TRUNC(\n            'HOUR',\n            tx_data.block_timestamp\n        )\n        AND tx_currency.currency_address = token_prices.token_address\n        LEFT JOIN (\n            SELECT\n                DISTINCT tx_hash,\n                contract_address\n            FROM\n                opensea_sales\n        ) AS platform\n        ON platform.tx_hash = tx_data.tx_hash\n        LEFT JOIN nfts_per_trade\n        ON nfts_per_trade.tx_hash = tx_data.tx_hash\n        LEFT JOIN eth_prices\n        ON eth_prices.hour = DATE_TRUNC(\n            'HOUR',\n            tx_data.block_timestamp\n        )\n),\nFINAL AS (\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_to_address,\n        origin_from_address,\n        origin_function_signature,\n        event_type,\n        platform_address,\n        'opensea' AS platform_name,\n        nft_from_address,\n        nft_to_address,\n        nft_address,\n        project_name,\n        erc1155_value,\n        tokenId,\n        token_metadata,\n        currency_symbol,\n        currency_address,\n        adj_price AS price,\n        price_usd,\n        total_fees,\n        platform_fee,\n        creator_fee,\n        total_fees_usd,\n        platform_fee_usd,\n        creator_fee_usd,\n        tx_fee,\n        tx_fee_usd,\n        _log_id,\n        ingested_at\n    FROM\n        direct_interactions\n    WHERE\n        _log_id IS NOT NULL\n    UNION\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_to_address,\n        origin_from_address,\n        origin_function_signature,\n        event_type,\n        platform_address,\n        'opensea' AS platform_name,\n        nft_from_address,\n        nft_to_address,\n        nft_address,\n        project_name,\n        erc1155_value,\n        tokenId,\n        token_metadata,\n        currency_symbol,\n        currency_address,\n        sale_value AS price,\n        price_usd,\n        total_fees,\n        platform_fee,\n        creator_fee,\n        total_fees_usd,\n        platform_fee_usd,\n        creator_fee_usd,\n        tx_fee,\n        tx_fee_usd,\n        _log_id,\n        ingested_at\n    FROM\n        indirect_interactions\n    WHERE\n        _log_id IS NOT NULL\n)\nSELECT\n    block_number,\n    block_timestamp,\n    origin_to_address,\n    origin_from_address,\n    origin_function_signature,\n    tx_hash,\n    event_type,\n    platform_address,\n    platform_name,\n    nft_from_address,\n    nft_to_address,\n    nft_address,\n    project_name,\n    erc1155_value,\n    tokenId,\n    token_metadata,\n    currency_symbol,\n    currency_address,\n    price,\n    price_usd,\n    total_fees,\n    platform_fee,\n    creator_fee,\n    total_fees_usd,\n    platform_fee_usd,\n    creator_fee_usd,\n    tx_fee,\n    tx_fee_usd,\n    _log_id,\n    ingested_at\nFROM\n    FINAL qualify(ROW_NUMBER() over(PARTITION BY _log_id\nORDER BY\n    ingested_at DESC, currency_symbol)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_models.silver__logs", "model.ethereum_models.silver__nft_transfers", "model.ethereum_models.silver__eth_transfers", "model.ethereum_models.silver__transfers", "model.ethereum_models.silver__transactions", "model.ethereum_models.silver__contracts", "model.ethereum_models.core__fact_hourly_token_prices"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "cluster_by": ["block_timestamp::DATE"], "unique_key": "_log_id", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "silver_nft", "fqn": ["ethereum_models", "silver", "nft", "silver_nft__opensea_sales"], "unique_id": "model.ethereum_models.silver_nft__opensea_sales", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "silver/nft/silver_nft__opensea_sales.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.sql", "name": "silver_nft__opensea_sales", "alias": "opensea_sales", "checksum": {"name": "sha256", "checksum": "f8f8c29e6d36f560466e7839d3b6be824b302a444de5d3eab5aab10b9f1d0374"}, "tags": [], "refs": [["silver__logs"], ["silver__nft_transfers"], ["silver__eth_transfers"], ["silver__transfers"], ["silver__transactions"], ["silver__contracts"], ["core__fact_hourly_token_prices"]], "sources": [], "description": "", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM_ADDRESS": {"name": "PLATFORM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM_NAME": {"name": "PLATFORM_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_FROM_ADDRESS": {"name": "NFT_FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_TO_ADDRESS": {"name": "NFT_TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_ADDRESS": {"name": "NFT_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKENID": {"name": "TOKENID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CURRENCY_ADDRESS": {"name": "CURRENCY_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRICE": {"name": "PRICE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRICE_USD": {"name": "PRICE_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_FEES": {"name": "TOTAL_FEES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM_FEE": {"name": "PLATFORM_FEE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR_FEE": {"name": "CREATOR_FEE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_FEES_USD": {"name": "TOTAL_FEES_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM_FEE_USD": {"name": "PLATFORM_FEE_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR_FEE_USD": {"name": "CREATOR_FEE_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_FEE": {"name": "TX_FEE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_FEE_USD": {"name": "TX_FEE_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_LOG_ID": {"name": "_LOG_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_TYPE": {"name": "EVENT_TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_models://models/silver/nft/silver_nft__opensea_sales.yml", "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "_log_id", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1654351203.715341, "compiled_sql": "\n\nWITH opensea_sales AS (\n\n    SELECT\n        _log_id,\n        block_number,\n        block_timestamp,\n        tx_hash,\n        contract_address,\n        event_name,\n        event_inputs,\n        event_index,\n        event_inputs :maker :: STRING AS maker_address,\n        event_inputs :taker :: STRING AS taker_address,\n        event_inputs :price :: INTEGER AS unadj_price,\n        ingested_at :: TIMESTAMP AS ingested_at,\n        ROW_NUMBER() over(\n            PARTITION BY tx_hash\n            ORDER BY\n                event_index ASC\n        ) AS agg_id\n    FROM\n        ETHEREUM_DEV.silver.logs\n    WHERE\n        contract_address IN (\n            '0x7be8076f4ea4a4ad08075c2508e481d6c946d12b',\n            '0x7f268357a8c2552623316e2562d90e642bb538e5'\n        )\n        AND event_name = 'OrdersMatched'\n        AND tx_status = 'SUCCESS'\n\n\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        ETHEREUM_DEV.silver_nft.opensea_sales\n)\n\n),\nnft_transfers AS (\n    SELECT\n        tx_hash,\n        contract_address AS nft_address,\n        project_name,\n        from_address,\n        to_address,\n        tokenid,\n        token_metadata,\n        erc1155_value,\n        ingested_at,\n        _log_id,\n        event_index,\n        ROW_NUMBER() over(\n            PARTITION BY tx_hash\n            ORDER BY\n                event_index ASC\n        ) AS agg_id\n    FROM\n        ETHEREUM_DEV.silver.nft_transfers\n    WHERE\n        tx_hash IN (\n            SELECT\n                tx_hash\n            FROM\n                opensea_sales\n        )\n\n\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        ETHEREUM_DEV.silver_nft.opensea_sales\n)\n\n),\neth_tx_data AS (\n    SELECT\n        tx_hash,\n        block_number,\n        block_timestamp,\n        from_address,\n        to_address,\n        eth_value,\n        identifier,\n        LEFT(identifier, LENGTH(identifier) -2) AS id_group,\n        CASE\n            WHEN identifier = 'CALL_ORIGIN' THEN 'ORIGIN'\n            WHEN from_address IN (\n                '0x7be8076f4ea4a4ad08075c2508e481d6c946d12b',\n                '0x7f268357a8c2552623316e2562d90e642bb538e5'\n            )\n            AND to_address = '0x5b3256965e7c3cf26e11fcaf296dfc8807c01073' THEN 'OS_FEE'\n            WHEN from_address IN (\n                '0x7be8076f4ea4a4ad08075c2508e481d6c946d12b',\n                '0x7f268357a8c2552623316e2562d90e642bb538e5'\n            )\n            AND to_address <> '0x5b3256965e7c3cf26e11fcaf296dfc8807c01073'\n            AND identifier <> 'CALL_ORIGIN' THEN 'TO_SELLER'\n            WHEN to_address IN (\n                '0x7be8076f4ea4a4ad08075c2508e481d6c946d12b',\n                '0x7f268357a8c2552623316e2562d90e642bb538e5'\n            ) THEN 'SALE_EVENT'\n        END AS call_record_type\n    FROM\n        ETHEREUM_DEV.silver.eth_transfers\n    WHERE\n        tx_hash IN (\n            SELECT\n                tx_hash\n            FROM\n                opensea_sales\n        )\n\n\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        ETHEREUM_DEV.silver_nft.opensea_sales\n)\n\n),\ntraces_sales_address AS (\n    SELECT\n        tx_hash,\n        from_address,\n        to_address,\n        eth_value,\n        identifier,\n        SUBSTR(identifier, 0, LENGTH(identifier) - CHARINDEX('_', REVERSE(identifier))) AS sale_call_id\n    FROM\n        eth_tx_data\n    WHERE\n        call_record_type = 'TO_SELLER'),\n        traces_sales AS (\n            SELECT\n                eth_tx_data.tx_hash AS sale_hash,\n                eth_tx_data.eth_value AS sale_value,\n                eth_tx_data.identifier AS sale_identifer,\n                traces_sales_address.to_address AS seller_address,\n                SPLIT(\n                    sale_identifer,\n                    '_'\n                ) AS split_id,\n                split_id [1] :: INTEGER AS level1,\n                split_id [2] :: INTEGER AS level2,\n                split_id [3] :: INTEGER AS level3,\n                split_id [4] :: INTEGER AS level4,\n                split_id [5] :: INTEGER AS level5,\n                ROW_NUMBER() over(\n                    PARTITION BY sale_hash\n                    ORDER BY\n                        level1 ASC,\n                        level2 ASC,\n                        level3 ASC,\n                        level4 ASC,\n                        level5 ASC\n                ) AS agg_id\n            FROM\n                eth_tx_data\n                LEFT JOIN traces_sales_address\n                ON eth_tx_data.tx_hash = traces_sales_address.tx_hash\n                AND eth_tx_data.identifier = traces_sales_address.sale_call_id\n            WHERE\n                eth_tx_data.call_record_type = 'SALE_EVENT'\n        ),\n        os_eth_fees AS (\n            SELECT\n                tx_hash,\n                identifier,\n                eth_value AS os_fee,\n                SPLIT(\n                    identifier,\n                    '_'\n                ) AS split_id,\n                split_id [1] :: INTEGER AS level1,\n                split_id [2] :: INTEGER AS level2,\n                split_id [3] :: INTEGER AS level3,\n                split_id [4] :: INTEGER AS level4,\n                split_id [5] :: INTEGER AS level5,\n                ROW_NUMBER() over(\n                    PARTITION BY tx_hash\n                    ORDER BY\n                        level1 ASC,\n                        level2 ASC,\n                        level3 ASC,\n                        level4 ASC,\n                        level5 ASC\n                ) AS agg_id\n            FROM\n                eth_tx_data\n            WHERE\n                call_record_type = 'OS_FEE'\n        ),\n        token_tx_data AS (\n            SELECT\n                tx_hash,\n                contract_address AS currency_address,\n                to_address,\n                from_address,\n                raw_amount,\n                event_index,\n                ROW_NUMBER() over(\n                    PARTITION BY tx_hash\n                    ORDER BY\n                        event_index ASC\n                ) AS agg_id\n            FROM\n                ETHEREUM_DEV.silver.transfers\n            WHERE\n                tx_hash IN (\n                    SELECT\n                        tx_hash\n                    FROM\n                        opensea_sales\n                )\n\n\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        ETHEREUM_DEV.silver_nft.opensea_sales\n)\n\n),\ntx_data AS (\n    SELECT\n        tx_hash,\n        block_timestamp,\n        block_number,\n        to_address,\n        from_address,\n        eth_value,\n        tx_fee,\n        origin_function_signature,\n        CASE\n            WHEN to_address IN (\n                '0x7be8076f4ea4a4ad08075c2508e481d6c946d12b',\n                '0x7f268357a8c2552623316e2562d90e642bb538e5'\n            ) THEN 'DIRECT'\n            ELSE 'INDIRECT'\n        END AS interaction_type,\n        ingested_at\n    FROM\n        ETHEREUM_DEV.silver.transactions\n    WHERE\n        tx_hash IN (\n            SELECT\n                tx_hash\n            FROM\n                opensea_sales\n        )\n\n\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        ETHEREUM_DEV.silver_nft.opensea_sales\n)\n\n),\nnfts_per_trade AS (\n    SELECT\n        tx_hash,\n        COUNT(\n            DISTINCT tokenid\n        ) AS nft_count\n    FROM\n        nft_transfers\n    GROUP BY\n        tx_hash\n),\neth_sales AS (\n    SELECT\n        tx_hash,\n        'ETH' AS currency_address\n    FROM\n        opensea_sales\n    WHERE\n        tx_hash NOT IN (\n            SELECT\n                tx_hash\n            FROM\n                token_tx_data\n        )\n),\ntrade_currency AS (\n    SELECT\n        tx_hash,\n        currency_address\n    FROM\n        token_tx_data\n    UNION ALL\n    SELECT\n        tx_hash,\n        currency_address\n    FROM\n        eth_sales\n),\ntx_currency AS (\n    SELECT\n        DISTINCT tx_hash,\n        currency_address\n    FROM\n        trade_currency\n),\ndecimals AS (\n    SELECT\n        address,\n        symbol,\n        decimals\n    FROM\n        ETHEREUM_DEV.silver.contracts\n    WHERE\n        address IN (\n            SELECT\n                DISTINCT LOWER(currency_address)\n            FROM\n                tx_currency\n        )\n),\nos_token_fees AS (\n    SELECT\n        tx_hash,\n        currency_address,\n        to_address,\n        from_address,\n        raw_amount,\n        agg_id\n    FROM\n        token_tx_data\n    WHERE\n        to_address = '0x5b3256965e7c3cf26e11fcaf296dfc8807c01073'\n),\ntoken_prices AS (\n    SELECT\n        HOUR,\n        CASE\n            WHEN LOWER(token_address) IS NULL THEN 'ETH'\n            ELSE LOWER(token_address)\n        END AS token_address,\n        AVG(price) AS price\n    FROM\n        ETHEREUM_DEV.core.fact_hourly_token_prices\n    WHERE\n        (\n            token_address IN (\n                SELECT\n                    DISTINCT LOWER(currency_address)\n                FROM\n                    trade_currency\n            )\n            OR (\n                token_address IS NULL\n                AND symbol IS NULL\n            )\n        )\n        AND HOUR :: DATE IN (\n            SELECT\n                DISTINCT block_timestamp :: DATE\n            FROM\n                opensea_sales\n        )\n    GROUP BY\n        HOUR,\n        token_address\n),\neth_prices AS (\n    SELECT\n        HOUR,\n        token_address,\n        price AS eth_price\n    FROM\n        token_prices\n    WHERE\n        token_address = 'ETH'\n),\ndirect_interactions AS (\n    SELECT\n        nft_transfers._log_id AS _log_id,\n        opensea_sales.block_number AS block_number,\n        opensea_sales.block_timestamp AS block_timestamp,\n        opensea_sales.tx_hash AS tx_hash,\n        contract_address AS platform_address,\n        tx_data.tx_fee AS tx_fee,\n        CASE\n            WHEN opensea_sales.maker_address = nft_transfers.from_address THEN 'sale'\n            WHEN opensea_sales.maker_address = nft_transfers.to_address THEN 'bid_won'\n        END AS event_type,\n        ROUND(\n            tx_fee * eth_price,\n            2\n        ) AS tx_fee_usd,\n        event_name,\n        event_inputs,\n        maker_address,\n        taker_address,\n        nft_transfers.from_address AS nft_from_address,\n        nft_transfers.to_address AS nft_to_address,\n        nft_transfers.project_name AS project_name,\n        nft_transfers.token_metadata AS token_metadata,\n        nft_address,\n        tokenId,\n        erc1155_value,\n        unadj_price,\n        price AS token_price,\n        nft_count,\n        tx_currency.currency_address AS currency_address,\n        CASE\n            WHEN tx_currency.currency_address = 'ETH' THEN 'ETH'\n            ELSE symbol\n        END AS currency_symbol,\n        CASE\n            WHEN tx_currency.currency_address = 'ETH' THEN 18\n            ELSE decimals\n        END AS token_decimals,\n        opensea_sales.ingested_at AS ingested_at,\n        COALESCE(unadj_price / nft_count / pow(10, token_decimals), unadj_price) AS adj_price,\n        CASE\n            WHEN token_decimals IS NULL THEN NULL\n            ELSE ROUND(\n                adj_price * token_price,\n                2\n            )\n        END AS price_usd,\n        COALESCE(\n            os_fee,\n            COALESCE(raw_amount / nft_count / pow(10, token_decimals), raw_amount),\n            0\n        ) AS total_fees,\n        CASE\n            WHEN total_fees > 0 THEN adj_price * 0.025\n            ELSE 0\n        END AS platform_fee,\n        COALESCE(\n            total_fees - platform_fee,\n            0\n        ) AS creator_fee,\n        CASE\n            WHEN token_decimals IS NULL THEN NULL\n            ELSE ROUND(\n                total_fees * token_price,\n                2\n            )\n        END AS total_fees_usd,\n        CASE\n            WHEN token_decimals IS NULL THEN NULL\n            ELSE ROUND(\n                platform_fee * token_price,\n                2\n            )\n        END AS platform_fee_usd,\n        CASE\n            WHEN token_decimals IS NULL THEN NULL\n            ELSE ROUND(\n                creator_fee * token_price,\n                2\n            )\n        END AS creator_fee_usd,\n        tx_data.to_address AS origin_to_address,\n        tx_data.from_address AS origin_from_address,\n        tx_data.origin_function_signature AS origin_function_signature\n    FROM\n        opensea_sales\n        INNER JOIN tx_data\n        ON opensea_sales.tx_hash = tx_data.tx_hash\n        AND tx_data.interaction_type = 'DIRECT'\n        LEFT JOIN nft_transfers\n        ON opensea_sales.tx_hash = nft_transfers.tx_hash\n        AND (\n            (\n                opensea_sales.maker_address = nft_transfers.from_address\n                AND opensea_sales.taker_address = nft_transfers.to_address\n            )\n            OR (\n                opensea_sales.maker_address = nft_transfers.to_address\n                AND opensea_sales.taker_address = nft_transfers.from_address\n            )\n        )\n        LEFT JOIN tx_currency\n        ON tx_currency.tx_hash = opensea_sales.tx_hash\n        LEFT JOIN decimals\n        ON tx_currency.currency_address = decimals.address\n        LEFT JOIN token_prices\n        ON token_prices.hour = DATE_TRUNC(\n            'HOUR',\n            opensea_sales.block_timestamp\n        )\n        AND tx_currency.currency_address = token_prices.token_address\n        LEFT JOIN nfts_per_trade\n        ON nfts_per_trade.tx_hash = opensea_sales.tx_hash\n        LEFT JOIN os_eth_fees\n        ON os_eth_fees.tx_hash = opensea_sales.tx_hash\n        LEFT JOIN os_token_fees\n        ON os_token_fees.tx_hash = opensea_sales.tx_hash\n        AND os_token_fees.currency_address = decimals.address\n        LEFT JOIN eth_prices\n        ON eth_prices.hour = DATE_TRUNC(\n            'HOUR',\n            opensea_sales.block_timestamp\n        )\n),\nindirect_interactions AS (\n    SELECT\n        nft_transfers._log_id AS _log_id,\n        nft_transfers.tx_hash AS tx_hash,\n        tx_data.block_timestamp AS block_timestamp,\n        tx_data.block_number AS block_number,\n        tx_data.ingested_at AS ingested_at,\n        nft_transfers.from_address AS nft_from_address,\n        nft_transfers.to_address AS nft_to_address,\n        nft_transfers.nft_address AS nft_address,\n        nft_transfers.tokenId AS tokenId,\n        nft_transfers.token_metadata AS token_metadata,\n        nft_transfers.erc1155_value AS erc1155_value,\n        nft_transfers.project_name AS project_name,\n        tx_data.tx_fee AS tx_fee,\n        'sale' AS event_type,\n        ROUND(\n            tx_fee * eth_price,\n            2\n        ) AS tx_fee_usd,\n        platform.contract_address AS platform_address,\n        tx_currency.currency_address AS currency_address,\n        CASE\n            WHEN tx_currency.currency_address = 'ETH' THEN 'ETH'\n            ELSE symbol\n        END AS currency_symbol,\n        CASE\n            WHEN tx_currency.currency_address = 'ETH' THEN 18\n            ELSE decimals\n        END AS token_decimals,\n        sale_value,\n        CASE\n            WHEN token_decimals IS NULL THEN NULL\n            ELSE ROUND(\n                sale_value * price,\n                2\n            )\n        END AS price_usd,\n        COALESCE(\n            os_fee,\n            COALESCE(raw_amount / nft_count / pow(10, token_decimals), raw_amount),\n            0\n        ) AS total_fees,\n        CASE\n            WHEN total_fees > 0 THEN sale_value * 0.025\n            ELSE 0\n        END AS platform_fee,\n        COALESCE(\n            total_fees - platform_fee,\n            0\n        ) AS creator_fee,\n        CASE\n            WHEN token_decimals IS NULL THEN NULL\n            ELSE ROUND(\n                total_fees * price,\n                2\n            )\n        END AS total_fees_usd,\n        CASE\n            WHEN token_decimals IS NULL THEN NULL\n            ELSE ROUND(\n                platform_fee * price,\n                2\n            )\n        END AS platform_fee_usd,\n        CASE\n            WHEN token_decimals IS NULL THEN NULL\n            ELSE ROUND(\n                creator_fee * price,\n                2\n            )\n        END AS creator_fee_usd,\n        tx_data.to_address AS origin_to_address,\n        tx_data.from_address AS origin_from_address,\n        tx_data.origin_function_signature AS origin_function_signature\n    FROM\n        nft_transfers\n        INNER JOIN tx_data\n        ON nft_transfers.tx_hash = tx_data.tx_hash\n        AND tx_data.interaction_type = 'INDIRECT'\n        INNER JOIN traces_sales\n        ON traces_sales.sale_hash = nft_transfers.tx_hash\n        AND nft_transfers.from_address = traces_sales.seller_address\n        AND nft_transfers.agg_id = traces_sales.agg_id\n        LEFT JOIN tx_currency\n        ON tx_currency.tx_hash = nft_transfers.tx_hash\n        LEFT JOIN os_eth_fees\n        ON os_eth_fees.tx_hash = nft_transfers.tx_hash\n        AND os_eth_fees.agg_id = nft_transfers.agg_id\n        LEFT JOIN os_token_fees\n        ON os_token_fees.tx_hash = nft_transfers.tx_hash\n        AND os_token_fees.agg_id = nft_transfers.agg_id\n        LEFT JOIN decimals\n        ON tx_currency.currency_address = decimals.address\n        LEFT JOIN token_prices\n        ON token_prices.hour = DATE_TRUNC(\n            'HOUR',\n            tx_data.block_timestamp\n        )\n        AND tx_currency.currency_address = token_prices.token_address\n        LEFT JOIN (\n            SELECT\n                DISTINCT tx_hash,\n                contract_address\n            FROM\n                opensea_sales\n        ) AS platform\n        ON platform.tx_hash = tx_data.tx_hash\n        LEFT JOIN nfts_per_trade\n        ON nfts_per_trade.tx_hash = tx_data.tx_hash\n        LEFT JOIN eth_prices\n        ON eth_prices.hour = DATE_TRUNC(\n            'HOUR',\n            tx_data.block_timestamp\n        )\n),\nFINAL AS (\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_to_address,\n        origin_from_address,\n        origin_function_signature,\n        event_type,\n        platform_address,\n        'opensea' AS platform_name,\n        nft_from_address,\n        nft_to_address,\n        nft_address,\n        project_name,\n        erc1155_value,\n        tokenId,\n        token_metadata,\n        currency_symbol,\n        currency_address,\n        adj_price AS price,\n        price_usd,\n        total_fees,\n        platform_fee,\n        creator_fee,\n        total_fees_usd,\n        platform_fee_usd,\n        creator_fee_usd,\n        tx_fee,\n        tx_fee_usd,\n        _log_id,\n        ingested_at\n    FROM\n        direct_interactions\n    WHERE\n        _log_id IS NOT NULL\n    UNION\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_to_address,\n        origin_from_address,\n        origin_function_signature,\n        event_type,\n        platform_address,\n        'opensea' AS platform_name,\n        nft_from_address,\n        nft_to_address,\n        nft_address,\n        project_name,\n        erc1155_value,\n        tokenId,\n        token_metadata,\n        currency_symbol,\n        currency_address,\n        sale_value AS price,\n        price_usd,\n        total_fees,\n        platform_fee,\n        creator_fee,\n        total_fees_usd,\n        platform_fee_usd,\n        creator_fee_usd,\n        tx_fee,\n        tx_fee_usd,\n        _log_id,\n        ingested_at\n    FROM\n        indirect_interactions\n    WHERE\n        _log_id IS NOT NULL\n)\nSELECT\n    block_number,\n    block_timestamp,\n    origin_to_address,\n    origin_from_address,\n    origin_function_signature,\n    tx_hash,\n    event_type,\n    platform_address,\n    platform_name,\n    nft_from_address,\n    nft_to_address,\n    nft_address,\n    project_name,\n    erc1155_value,\n    tokenId,\n    token_metadata,\n    currency_symbol,\n    currency_address,\n    price,\n    price_usd,\n    total_fees,\n    platform_fee,\n    creator_fee,\n    total_fees_usd,\n    platform_fee_usd,\n    creator_fee_usd,\n    tx_fee,\n    tx_fee_usd,\n    _log_id,\n    ingested_at\nFROM\n    FINAL qualify(ROW_NUMBER() over(PARTITION BY _log_id\nORDER BY\n    ingested_at DESC, currency_symbol)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.silver_nft.opensea_sales"}, "model.ethereum_models.silver_dex__v2_swaps": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true },\n    unique_key = '_log_id',\n    cluster_by = ['ingested_at::DATE']\n) }}\n\nWITH v2_pairs AS (\n\n    SELECT\n        pool_address,\n        pool_name,\n        token0_address,\n        token0_decimals,\n        token0_symbol,\n        token1_address,\n        token1_decimals,\n        token1_symbol,\n        platform\n    FROM\n        {{ ref('silver_dex__pools') }}\n    WHERE\n        platform IN (\n            'uniswap-v2',\n            'sushiswap'\n        )\n),\nswap_events AS (\n    SELECT\n        block_number,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        block_timestamp,\n        tx_hash,\n        contract_address,\n        event_name,\n        TRY_TO_NUMBER(\n            event_inputs :amount0In :: STRING\n        ) AS amount0In,\n        TRY_TO_NUMBER(\n            event_inputs :amount1In :: STRING\n        ) AS amount1In,\n        TRY_TO_NUMBER(\n            event_inputs :amount0Out :: STRING\n        ) AS amount0Out,\n        TRY_TO_NUMBER(\n            event_inputs :amount1Out :: STRING\n        ) AS amount1Out,\n        event_inputs :sender :: STRING AS sender,\n        event_inputs :to :: STRING AS tx_to,\n        event_index,\n        _log_id,\n        ingested_at\n    FROM\n        {{ ref('silver__logs') }}\n    WHERE\n        event_name = 'Swap'\n        AND tx_status = 'SUCCESS'\n        AND contract_address IN (\n            SELECT\n                DISTINCT pool_address\n            FROM\n                v2_pairs\n        )\n\n{% if is_incremental() %}\nAND ingested_at >= (\n    SELECT\n        MAX(ingested_at) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\nhourly_prices AS (\n    SELECT\n        token_address,\n        HOUR,\n        AVG(price) AS price\n    FROM\n        {{ ref('core__fact_hourly_token_prices') }}\n    WHERE\n        1 = 1\n\n{% if is_incremental() %}\nAND HOUR :: DATE IN (\n    SELECT\n        DISTINCT block_timestamp :: DATE\n    FROM\n        swap_events\n)\n{% else %}\n    AND HOUR :: DATE >= '2020-05-05'\n{% endif %}\nGROUP BY\n    token_address,\n    HOUR\n),\nFINAL AS (\n    SELECT\n        block_number,\n        block_timestamp,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        tx_hash,\n        contract_address,\n        event_name,\n        CASE\n            WHEN amount0In <> 0\n            AND amount1In <> 0\n            AND token1_decimals IS NOT NULL THEN amount1In / power(\n                10,\n                token1_decimals\n            ) :: FLOAT\n            WHEN amount0In <> 0\n            AND token0_decimals IS NOT NULL THEN amount0In / power(\n                10,\n                token0_decimals\n            ) :: FLOAT\n            WHEN amount1In <> 0\n            AND token1_decimals IS NOT NULL THEN amount1In / power(\n                10,\n                token1_decimals\n            ) :: FLOAT\n            WHEN amount0In <> 0\n            AND token0_decimals IS NULL THEN amount0In\n            WHEN amount1In <> 0\n            AND token1_decimals IS NULL THEN amount1In\n        END AS amount_in,\n        CASE\n            WHEN amount0Out <> 0\n            AND token0_decimals IS NOT NULL THEN amount0Out / power(\n                10,\n                token0_decimals\n            ) :: FLOAT\n            WHEN amount1Out <> 0\n            AND token1_decimals IS NOT NULL THEN amount1Out / power(\n                10,\n                token1_decimals\n            ) :: FLOAT\n            WHEN amount0Out <> 0\n            AND token0_decimals IS NULL THEN amount0Out\n            WHEN amount1Out <> 0\n            AND token1_decimals IS NULL THEN amount1Out\n        END AS amount_out,\n        sender,\n        tx_to,\n        event_index,\n        _log_id,\n        platform,\n        ingested_at,\n        CASE\n            WHEN amount0In <> 0\n            AND amount1In <> 0 THEN token1_address\n            WHEN amount0In <> 0 THEN token0_address\n            WHEN amount1In <> 0 THEN token1_address\n        END AS token_in,\n        CASE\n            WHEN amount0Out <> 0 THEN token0_address\n            WHEN amount1Out <> 0 THEN token1_address\n        END AS token_out,\n        CASE\n            WHEN amount0In <> 0\n            AND amount1In <> 0 THEN token1_symbol\n            WHEN amount0In <> 0 THEN token0_symbol\n            WHEN amount1In <> 0 THEN token1_symbol\n        END AS symbol_in,\n        CASE\n            WHEN amount0Out <> 0 THEN token0_symbol\n            WHEN amount1Out <> 0 THEN token1_symbol\n        END AS symbol_out,\n        CASE\n            WHEN amount0In <> 0\n            AND amount1In <> 0 THEN token1_decimals\n            WHEN amount0In <> 0 THEN token0_decimals\n            WHEN amount1In <> 0 THEN token1_decimals\n        END AS decimals_in,\n        CASE\n            WHEN amount0Out <> 0 THEN token0_decimals\n            WHEN amount1Out <> 0 THEN token1_decimals\n        END AS decimals_out,\n        token0_decimals,\n        token1_decimals,\n        token0_symbol,\n        token1_symbol,\n        pool_name,\n        pool_address\n    FROM\n        swap_events\n        LEFT JOIN v2_pairs\n        ON swap_events.contract_address = v2_pairs.pool_address\n)\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    contract_address,\n    pool_name,\n    event_name,\n    amount_in,\n    CASE\n        WHEN decimals_in IS NOT NULL THEN amount_in * pricesIn.price\n        ELSE NULL\n    END AS amount_in_usd,\n    amount_out,\n    CASE\n        WHEN decimals_out IS NOT NULL THEN amount_out * pricesOut.price\n        ELSE NULL\n    END AS amount_out_usd,\n    sender,\n    tx_to,\n    event_index,\n    platform,\n    token_in,\n    token_out,\n    symbol_in,\n    symbol_out,\n    _log_id,\n    ingested_at\nFROM\n    FINAL\n    LEFT JOIN hourly_prices AS pricesIn\n    ON DATE_TRUNC(\n        'HOUR',\n        block_timestamp\n    ) = pricesIn.hour\n    AND FINAL.token_in = pricesIn.token_address\n    LEFT JOIN hourly_prices AS pricesOut\n    ON DATE_TRUNC(\n        'HOUR',\n        block_timestamp\n    ) = pricesOut.hour\n    AND FINAL.token_out = pricesOut.token_address\nWHERE\n    token_in IS NOT NULL\n    AND token_out IS NOT NULL", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_models.silver_dex__pools", "model.ethereum_models.silver__logs", "model.ethereum_models.core__fact_hourly_token_prices"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "cluster_by": ["ingested_at::DATE"], "unique_key": "_log_id", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "silver_dex", "fqn": ["ethereum_models", "silver", "dex", "silver_dex__v2_swaps"], "unique_id": "model.ethereum_models.silver_dex__v2_swaps", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "silver/dex/silver_dex__v2_swaps.sql", "original_file_path": "models/silver/dex/silver_dex__v2_swaps.sql", "name": "silver_dex__v2_swaps", "alias": "v2_swaps", "checksum": {"name": "sha256", "checksum": "3c73de5305b1e8f4b5aae6c5d247223c6b0ea3f8810b5b7acce38c3341337365"}, "tags": [], "refs": [["silver_dex__pools"], ["silver__logs"], ["core__fact_hourly_token_prices"]], "sources": [], "description": "", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_NAME": {"name": "EVENT_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_IN": {"name": "AMOUNT_IN", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_OUT": {"name": "AMOUNT_OUT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_IN_USD": {"name": "AMOUNT_IN_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_OUT_USD": {"name": "AMOUNT_OUT_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_IN": {"name": "TOKEN_IN", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_OUT": {"name": "TOKEN_OUT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYMBOL_IN": {"name": "SYMBOL_IN", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYMBOL_OUT": {"name": "SYMBOL_OUT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SENDER": {"name": "SENDER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_TO": {"name": "TX_TO", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM": {"name": "PLATFORM", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_INDEX": {"name": "EVENT_INDEX", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_LOG_ID": {"name": "_LOG_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_models://models/silver/dex/silver_dex__v2_swaps.yml", "compiled_path": "target/compiled/ethereum_models/models/silver/dex/silver_dex__v2_swaps.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "unique_key": "_log_id", "cluster_by": ["ingested_at::DATE"]}, "created_at": 1654351204.122816, "compiled_sql": "\n\nWITH v2_pairs AS (\n\n    SELECT\n        pool_address,\n        pool_name,\n        token0_address,\n        token0_decimals,\n        token0_symbol,\n        token1_address,\n        token1_decimals,\n        token1_symbol,\n        platform\n    FROM\n        ETHEREUM_DEV.silver_dex.pools\n    WHERE\n        platform IN (\n            'uniswap-v2',\n            'sushiswap'\n        )\n),\nswap_events AS (\n    SELECT\n        block_number,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        block_timestamp,\n        tx_hash,\n        contract_address,\n        event_name,\n        TRY_TO_NUMBER(\n            event_inputs :amount0In :: STRING\n        ) AS amount0In,\n        TRY_TO_NUMBER(\n            event_inputs :amount1In :: STRING\n        ) AS amount1In,\n        TRY_TO_NUMBER(\n            event_inputs :amount0Out :: STRING\n        ) AS amount0Out,\n        TRY_TO_NUMBER(\n            event_inputs :amount1Out :: STRING\n        ) AS amount1Out,\n        event_inputs :sender :: STRING AS sender,\n        event_inputs :to :: STRING AS tx_to,\n        event_index,\n        _log_id,\n        ingested_at\n    FROM\n        ETHEREUM_DEV.silver.logs\n    WHERE\n        event_name = 'Swap'\n        AND tx_status = 'SUCCESS'\n        AND contract_address IN (\n            SELECT\n                DISTINCT pool_address\n            FROM\n                v2_pairs\n        )\n\n\nAND ingested_at >= (\n    SELECT\n        MAX(ingested_at) :: DATE - 2\n    FROM\n        ETHEREUM_DEV.silver_dex.v2_swaps\n)\n\n),\nhourly_prices AS (\n    SELECT\n        token_address,\n        HOUR,\n        AVG(price) AS price\n    FROM\n        ETHEREUM_DEV.core.fact_hourly_token_prices\n    WHERE\n        1 = 1\n\n\nAND HOUR :: DATE IN (\n    SELECT\n        DISTINCT block_timestamp :: DATE\n    FROM\n        swap_events\n)\n\nGROUP BY\n    token_address,\n    HOUR\n),\nFINAL AS (\n    SELECT\n        block_number,\n        block_timestamp,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        tx_hash,\n        contract_address,\n        event_name,\n        CASE\n            WHEN amount0In <> 0\n            AND amount1In <> 0\n            AND token1_decimals IS NOT NULL THEN amount1In / power(\n                10,\n                token1_decimals\n            ) :: FLOAT\n            WHEN amount0In <> 0\n            AND token0_decimals IS NOT NULL THEN amount0In / power(\n                10,\n                token0_decimals\n            ) :: FLOAT\n            WHEN amount1In <> 0\n            AND token1_decimals IS NOT NULL THEN amount1In / power(\n                10,\n                token1_decimals\n            ) :: FLOAT\n            WHEN amount0In <> 0\n            AND token0_decimals IS NULL THEN amount0In\n            WHEN amount1In <> 0\n            AND token1_decimals IS NULL THEN amount1In\n        END AS amount_in,\n        CASE\n            WHEN amount0Out <> 0\n            AND token0_decimals IS NOT NULL THEN amount0Out / power(\n                10,\n                token0_decimals\n            ) :: FLOAT\n            WHEN amount1Out <> 0\n            AND token1_decimals IS NOT NULL THEN amount1Out / power(\n                10,\n                token1_decimals\n            ) :: FLOAT\n            WHEN amount0Out <> 0\n            AND token0_decimals IS NULL THEN amount0Out\n            WHEN amount1Out <> 0\n            AND token1_decimals IS NULL THEN amount1Out\n        END AS amount_out,\n        sender,\n        tx_to,\n        event_index,\n        _log_id,\n        platform,\n        ingested_at,\n        CASE\n            WHEN amount0In <> 0\n            AND amount1In <> 0 THEN token1_address\n            WHEN amount0In <> 0 THEN token0_address\n            WHEN amount1In <> 0 THEN token1_address\n        END AS token_in,\n        CASE\n            WHEN amount0Out <> 0 THEN token0_address\n            WHEN amount1Out <> 0 THEN token1_address\n        END AS token_out,\n        CASE\n            WHEN amount0In <> 0\n            AND amount1In <> 0 THEN token1_symbol\n            WHEN amount0In <> 0 THEN token0_symbol\n            WHEN amount1In <> 0 THEN token1_symbol\n        END AS symbol_in,\n        CASE\n            WHEN amount0Out <> 0 THEN token0_symbol\n            WHEN amount1Out <> 0 THEN token1_symbol\n        END AS symbol_out,\n        CASE\n            WHEN amount0In <> 0\n            AND amount1In <> 0 THEN token1_decimals\n            WHEN amount0In <> 0 THEN token0_decimals\n            WHEN amount1In <> 0 THEN token1_decimals\n        END AS decimals_in,\n        CASE\n            WHEN amount0Out <> 0 THEN token0_decimals\n            WHEN amount1Out <> 0 THEN token1_decimals\n        END AS decimals_out,\n        token0_decimals,\n        token1_decimals,\n        token0_symbol,\n        token1_symbol,\n        pool_name,\n        pool_address\n    FROM\n        swap_events\n        LEFT JOIN v2_pairs\n        ON swap_events.contract_address = v2_pairs.pool_address\n)\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    contract_address,\n    pool_name,\n    event_name,\n    amount_in,\n    CASE\n        WHEN decimals_in IS NOT NULL THEN amount_in * pricesIn.price\n        ELSE NULL\n    END AS amount_in_usd,\n    amount_out,\n    CASE\n        WHEN decimals_out IS NOT NULL THEN amount_out * pricesOut.price\n        ELSE NULL\n    END AS amount_out_usd,\n    sender,\n    tx_to,\n    event_index,\n    platform,\n    token_in,\n    token_out,\n    symbol_in,\n    symbol_out,\n    _log_id,\n    ingested_at\nFROM\n    FINAL\n    LEFT JOIN hourly_prices AS pricesIn\n    ON DATE_TRUNC(\n        'HOUR',\n        block_timestamp\n    ) = pricesIn.hour\n    AND FINAL.token_in = pricesIn.token_address\n    LEFT JOIN hourly_prices AS pricesOut\n    ON DATE_TRUNC(\n        'HOUR',\n        block_timestamp\n    ) = pricesOut.hour\n    AND FINAL.token_out = pricesOut.token_address\nWHERE\n    token_in IS NOT NULL\n    AND token_out IS NOT NULL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.silver_dex.v2_swaps"}, "model.ethereum_models.silver_dex__pools": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true },\n    unique_key = 'pool_address',\n) }}\n\nWITH univ2_sushi_pairs AS (\n\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        contract_address AS factory_address,\n        event_name,\n        event_inputs :pair :: STRING AS pool_address,\n        event_inputs :token0 :: STRING AS token0,\n        event_inputs :token1 :: STRING AS token1,\n        _log_id,\n        ingested_at,\n        CASE\n            WHEN contract_address = '0x5c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f' THEN 'uniswap-v2'\n            WHEN contract_address = '0xc0aee478e3658e2610c5f7a4a2e1777ce9e4f2ac' THEN 'sushiswap'\n        END AS platform,\n        1 AS model_weight,\n        'events' AS model_name\n    FROM\n        {{ ref('silver__logs') }}\n    WHERE\n        contract_address IN (\n            '0x5c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f',\n            '0xc0aee478e3658e2610c5f7a4a2e1777ce9e4f2ac'\n        )\n        AND event_name = 'PairCreated'\n\n{% if is_incremental() %}\nAND ingested_at >= (\n    SELECT\n        MAX(ingested_at)\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\nuniswap_v3_pools AS (\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        contract_address AS factory_address,\n        event_name,\n        event_inputs :fee :: INTEGER AS fee,\n        event_inputs :pool :: STRING AS pool_address,\n        event_inputs :tickSpacing :: INTEGER AS tickSpacing,\n        event_inputs :token0 :: STRING AS token0,\n        event_inputs :token1 :: STRING AS token1,\n        _log_id,\n        ingested_at,\n        'uniswap-v3' AS platform,\n        1 AS model_weight,\n        'events' AS model_name\n    FROM\n        {{ ref('silver__logs') }}\n    WHERE\n        contract_address = '0x1f98431c8ad98523631ae4a59f267346ea31f984'\n        AND event_name = 'PoolCreated'\n\n{% if is_incremental() %}\nAND ingested_at >= (\n    SELECT\n        MAX(ingested_at)\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\nlegacy_pipeline AS (\n    SELECT\n        creation_time,\n        creation_tx,\n        factory_address,\n        pool_address,\n        pool_name,\n        token0,\n        token1,\n        platform,\n        tokens,\n        NULL AS creation_block,\n        NULL AS event_name,\n        NULL AS fee,\n        NULL AS tickSpacing,\n        NULL AS _log_id,\n        NULL AS ingested_at,\n        2 AS model_weight,\n        'legacy' AS model_name\n    FROM\n        {{ source(\n            'flipside_gold_ethereum',\n            'dex_liquidity_pools'\n        ) }}\n),\nunion_ctes AS (\n    SELECT\n        block_number AS creation_block,\n        block_timestamp AS creation_time,\n        tx_hash AS creation_tx,\n        factory_address,\n        platform,\n        event_name,\n        pool_address,\n        NULL AS pool_name,\n        token0,\n        token1,\n        NULL AS fee,\n        NULL AS tickSpacing,\n        ARRAY_CONSTRUCT(\n            token0,\n            token1\n        ) AS tokens,\n        _log_id,\n        ingested_at,\n        model_weight,\n        model_name\n    FROM\n        univ2_sushi_pairs\n    UNION ALL\n    SELECT\n        block_number AS creation_block,\n        block_timestamp AS creation_time,\n        tx_hash AS creation_tx,\n        factory_address,\n        platform,\n        event_name,\n        pool_address,\n        NULL AS pool_name,\n        token0,\n        token1,\n        fee,\n        tickSpacing,\n        ARRAY_CONSTRUCT(\n            token0,\n            token1\n        ) AS tokens,\n        _log_id,\n        ingested_at,\n        model_weight,\n        model_name\n    FROM\n        uniswap_v3_pools\n    UNION ALL\n    SELECT\n        creation_block,\n        creation_time,\n        creation_tx,\n        factory_address,\n        platform,\n        event_name,\n        pool_address,\n        pool_name,\n        token0,\n        token1,\n        fee,\n        tickSpacing,\n        tokens,\n        _log_id,\n        ingested_at,\n        model_weight,\n        model_name\n    FROM\n        legacy_pipeline\n),\ndedup_pools AS (\n    SELECT\n        *\n    FROM\n        union_ctes\n    WHERE\n        pool_address IS NOT NULL qualify(ROW_NUMBER() over(PARTITION BY pool_address\n    ORDER BY\n        model_weight ASC)) = 1\n),\ncontract_details AS (\n    SELECT\n        LOWER(address) AS token_address,\n        symbol,\n        decimals\n    FROM\n        {{ ref('core__dim_contracts') }}\n    WHERE\n        address IN (\n            SELECT\n                DISTINCT token0\n            FROM\n                dedup_pools\n        )\n        OR address IN (\n            SELECT\n                DISTINCT token1\n            FROM\n                dedup_pools\n        )\n),\nFINAL AS (\n    SELECT\n        creation_block,\n        creation_time,\n        creation_tx,\n        factory_address,\n        platform,\n        event_name,\n        pool_address,\n        CASE\n            WHEN pool_name IS NULL\n            AND platform = 'sushiswap' THEN contract0.symbol || '-' || contract1.symbol || ' SLP'\n            WHEN pool_name IS NULL\n            AND platform = 'uniswap-v2' THEN contract0.symbol || '-' || contract1.symbol || ' UNI-V2 LP'\n            WHEN pool_name IS NULL\n            AND platform = 'uniswap-v3' THEN contract0.symbol || '-' || contract1.symbol || ' ' || fee || ' ' || tickSpacing || ' UNI-V3 LP'\n            WHEN platform = 'curve' THEN pool_name\n            ELSE pool_name\n        END AS pool_name,\n        token0 AS token0_address,\n        contract0.symbol AS token0_symbol,\n        contract0.decimals AS token0_decimals,\n        token1 AS token1_address,\n        contract1.symbol AS token1_symbol,\n        contract1.decimals AS token1_decimals,\n        fee,\n        tickSpacing,\n        _log_id,\n        ingested_at,\n        model_name\n    FROM\n        dedup_pools\n        LEFT JOIN contract_details AS contract0\n        ON contract0.token_address = dedup_pools.token0\n        LEFT JOIN contract_details AS contract1\n        ON contract1.token_address = dedup_pools.token1\n)\nSELECT\n    creation_block,\n    creation_time,\n    creation_tx,\n    factory_address,\n    platform,\n    event_name,\n    pool_address,\n    pool_name,\n    token0_address,\n    token0_symbol,\n    token0_decimals,\n    token1_address,\n    token1_symbol,\n    token1_decimals,\n    fee,\n    tickSpacing,\n    _log_id,\n    ingested_at,\n    model_name\nFROM\n    FINAL qualify(ROW_NUMBER() over(PARTITION BY pool_address\nORDER BY\n    ingested_at DESC nulls last)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["source.ethereum_models.flipside_gold_ethereum.dex_liquidity_pools", "model.ethereum_models.silver__logs", "model.ethereum_models.silver__logs", "model.ethereum_models.core__dim_contracts"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "unique_key": "pool_address", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "silver_dex", "fqn": ["ethereum_models", "silver", "dex", "silver_dex__pools"], "unique_id": "model.ethereum_models.silver_dex__pools", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "silver/dex/silver_dex__pools.sql", "original_file_path": "models/silver/dex/silver_dex__pools.sql", "name": "silver_dex__pools", "alias": "pools", "checksum": {"name": "sha256", "checksum": "21450551408157701a1f0532559e0260339f5e5fec6e8f4ea00dfc21db93006f"}, "tags": [], "refs": [["silver__logs"], ["silver__logs"], ["core__dim_contracts"]], "sources": [["flipside_gold_ethereum", "dex_liquidity_pools"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_models://models/silver/dex/silver_dex__pools.yml", "compiled_path": "target/compiled/ethereum_models/models/silver/dex/silver_dex__pools.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "unique_key": "pool_address"}, "created_at": 1654351204.267217, "compiled_sql": "\n\nWITH univ2_sushi_pairs AS (\n\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        contract_address AS factory_address,\n        event_name,\n        event_inputs :pair :: STRING AS pool_address,\n        event_inputs :token0 :: STRING AS token0,\n        event_inputs :token1 :: STRING AS token1,\n        _log_id,\n        ingested_at,\n        CASE\n            WHEN contract_address = '0x5c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f' THEN 'uniswap-v2'\n            WHEN contract_address = '0xc0aee478e3658e2610c5f7a4a2e1777ce9e4f2ac' THEN 'sushiswap'\n        END AS platform,\n        1 AS model_weight,\n        'events' AS model_name\n    FROM\n        ETHEREUM_DEV.silver.logs\n    WHERE\n        contract_address IN (\n            '0x5c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f',\n            '0xc0aee478e3658e2610c5f7a4a2e1777ce9e4f2ac'\n        )\n        AND event_name = 'PairCreated'\n\n\nAND ingested_at >= (\n    SELECT\n        MAX(ingested_at)\n    FROM\n        ETHEREUM_DEV.silver_dex.pools\n)\n\n),\nuniswap_v3_pools AS (\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        contract_address AS factory_address,\n        event_name,\n        event_inputs :fee :: INTEGER AS fee,\n        event_inputs :pool :: STRING AS pool_address,\n        event_inputs :tickSpacing :: INTEGER AS tickSpacing,\n        event_inputs :token0 :: STRING AS token0,\n        event_inputs :token1 :: STRING AS token1,\n        _log_id,\n        ingested_at,\n        'uniswap-v3' AS platform,\n        1 AS model_weight,\n        'events' AS model_name\n    FROM\n        ETHEREUM_DEV.silver.logs\n    WHERE\n        contract_address = '0x1f98431c8ad98523631ae4a59f267346ea31f984'\n        AND event_name = 'PoolCreated'\n\n\nAND ingested_at >= (\n    SELECT\n        MAX(ingested_at)\n    FROM\n        ETHEREUM_DEV.silver_dex.pools\n)\n\n),\nlegacy_pipeline AS (\n    SELECT\n        creation_time,\n        creation_tx,\n        factory_address,\n        pool_address,\n        pool_name,\n        token0,\n        token1,\n        platform,\n        tokens,\n        NULL AS creation_block,\n        NULL AS event_name,\n        NULL AS fee,\n        NULL AS tickSpacing,\n        NULL AS _log_id,\n        NULL AS ingested_at,\n        2 AS model_weight,\n        'legacy' AS model_name\n    FROM\n        flipside_prod_db.ethereum.dex_liquidity_pools\n),\nunion_ctes AS (\n    SELECT\n        block_number AS creation_block,\n        block_timestamp AS creation_time,\n        tx_hash AS creation_tx,\n        factory_address,\n        platform,\n        event_name,\n        pool_address,\n        NULL AS pool_name,\n        token0,\n        token1,\n        NULL AS fee,\n        NULL AS tickSpacing,\n        ARRAY_CONSTRUCT(\n            token0,\n            token1\n        ) AS tokens,\n        _log_id,\n        ingested_at,\n        model_weight,\n        model_name\n    FROM\n        univ2_sushi_pairs\n    UNION ALL\n    SELECT\n        block_number AS creation_block,\n        block_timestamp AS creation_time,\n        tx_hash AS creation_tx,\n        factory_address,\n        platform,\n        event_name,\n        pool_address,\n        NULL AS pool_name,\n        token0,\n        token1,\n        fee,\n        tickSpacing,\n        ARRAY_CONSTRUCT(\n            token0,\n            token1\n        ) AS tokens,\n        _log_id,\n        ingested_at,\n        model_weight,\n        model_name\n    FROM\n        uniswap_v3_pools\n    UNION ALL\n    SELECT\n        creation_block,\n        creation_time,\n        creation_tx,\n        factory_address,\n        platform,\n        event_name,\n        pool_address,\n        pool_name,\n        token0,\n        token1,\n        fee,\n        tickSpacing,\n        tokens,\n        _log_id,\n        ingested_at,\n        model_weight,\n        model_name\n    FROM\n        legacy_pipeline\n),\ndedup_pools AS (\n    SELECT\n        *\n    FROM\n        union_ctes\n    WHERE\n        pool_address IS NOT NULL qualify(ROW_NUMBER() over(PARTITION BY pool_address\n    ORDER BY\n        model_weight ASC)) = 1\n),\ncontract_details AS (\n    SELECT\n        LOWER(address) AS token_address,\n        symbol,\n        decimals\n    FROM\n        ETHEREUM_DEV.core.dim_contracts\n    WHERE\n        address IN (\n            SELECT\n                DISTINCT token0\n            FROM\n                dedup_pools\n        )\n        OR address IN (\n            SELECT\n                DISTINCT token1\n            FROM\n                dedup_pools\n        )\n),\nFINAL AS (\n    SELECT\n        creation_block,\n        creation_time,\n        creation_tx,\n        factory_address,\n        platform,\n        event_name,\n        pool_address,\n        CASE\n            WHEN pool_name IS NULL\n            AND platform = 'sushiswap' THEN contract0.symbol || '-' || contract1.symbol || ' SLP'\n            WHEN pool_name IS NULL\n            AND platform = 'uniswap-v2' THEN contract0.symbol || '-' || contract1.symbol || ' UNI-V2 LP'\n            WHEN pool_name IS NULL\n            AND platform = 'uniswap-v3' THEN contract0.symbol || '-' || contract1.symbol || ' ' || fee || ' ' || tickSpacing || ' UNI-V3 LP'\n            WHEN platform = 'curve' THEN pool_name\n            ELSE pool_name\n        END AS pool_name,\n        token0 AS token0_address,\n        contract0.symbol AS token0_symbol,\n        contract0.decimals AS token0_decimals,\n        token1 AS token1_address,\n        contract1.symbol AS token1_symbol,\n        contract1.decimals AS token1_decimals,\n        fee,\n        tickSpacing,\n        _log_id,\n        ingested_at,\n        model_name\n    FROM\n        dedup_pools\n        LEFT JOIN contract_details AS contract0\n        ON contract0.token_address = dedup_pools.token0\n        LEFT JOIN contract_details AS contract1\n        ON contract1.token_address = dedup_pools.token1\n)\nSELECT\n    creation_block,\n    creation_time,\n    creation_tx,\n    factory_address,\n    platform,\n    event_name,\n    pool_address,\n    pool_name,\n    token0_address,\n    token0_symbol,\n    token0_decimals,\n    token1_address,\n    token1_symbol,\n    token1_decimals,\n    fee,\n    tickSpacing,\n    _log_id,\n    ingested_at,\n    model_name\nFROM\n    FINAL qualify(ROW_NUMBER() over(PARTITION BY pool_address\nORDER BY\n    ingested_at DESC nulls last)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.silver_dex.pools"}, "model.ethereum_models.core__fact_transactions": {"raw_sql": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true }\n) }}\n\nSELECT\n    block_number,\n    block_timestamp,\n    block_hash,\n    tx_hash,\n    nonce,\n    POSITION,\n    origin_function_signature,\n    from_address,\n    to_address,\n    eth_value,\n    tx_fee,\n    gas_price,\n    gas_limit,\n    gas_used,\n    cumulative_Gas_Used,\n    input_data,\n    status,\n    tx_json\nFROM\n    {{ ref('silver__transactions') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "core", "fqn": ["ethereum_models", "gold", "core__fact_transactions"], "unique_id": "model.ethereum_models.core__fact_transactions", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "gold/core__fact_transactions.sql", "original_file_path": "models/gold/core__fact_transactions.sql", "name": "core__fact_transactions", "alias": "fact_transactions", "checksum": {"name": "sha256", "checksum": "452ef04a5c97f87df70cd7eea4519fbc7e59e7c21dea3a2ae6072b9a85a59654"}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "This table contains transaction level data for the Ethereum Blockchain. Each transaction will have a unique transaction hash, along with transactions fees and an ETH value transferred when applicable. Transactions may be native ETH transfers or interactions with contract addresses. For more information, please see [The Ethereum Organization - Transactions](https://ethereum.org/en/developers/docs/transactions/)", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "Also known as block height. The block number, which indicates the length of the blockchain, increases after the addition of each new block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block was produced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HASH": {"name": "BLOCK_HASH", "description": "Block hash is a unique 66-character identifier that is generate when a block is produced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NONCE": {"name": "NONCE", "description": "The number of transactions sent from a given address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POSITION": {"name": "POSITION", "description": "The position of the transaction within the block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The sending address of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "The receiving address of this transaction. This can be a contract address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETH_VALUE": {"name": "ETH_VALUE", "description": "The value transacted in Ether.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_FEE": {"name": "TX_FEE", "description": "Amount paid to validate the transaction in Ether.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_PRICE": {"name": "GAS_PRICE", "description": "Cost per unit of gas in Gwei.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_LIMIT": {"name": "GAS_LIMIT", "description": "Maximum amount of gas allocated for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_USED": {"name": "GAS_USED", "description": "Gas used by transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CUMULATIVE_GAS_USED": {"name": "CUMULATIVE_GAS_USED", "description": "The total amount of gas used when this transaction was executed in the block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "STATUS": {"name": "STATUS", "description": "Status of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_JSON": {"name": "TX_JSON", "description": "This JSON column contains the transaction details, including event logs.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INPUT_DATA": {"name": "INPUT_DATA", "description": "This column contains additional data for this transaction, and is commonly used as part of a contract interaction or as a message to the recipient.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "The function signature of the contract call.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_models://models/gold/core__fact_transactions.yml", "compiled_path": "target/compiled/ethereum_models/models/gold/core__fact_transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1654351204.4308999, "compiled_sql": "\n\nSELECT\n    block_number,\n    block_timestamp,\n    block_hash,\n    tx_hash,\n    nonce,\n    POSITION,\n    origin_function_signature,\n    from_address,\n    to_address,\n    eth_value,\n    tx_fee,\n    gas_price,\n    gas_limit,\n    gas_used,\n    cumulative_Gas_Used,\n    input_data,\n    status,\n    tx_json\nFROM\n    ETHEREUM_DEV.silver.transactions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.core.fact_transactions"}, "model.ethereum_models.core__dim_dex_liquidity_pools": {"raw_sql": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT\n    creation_time,\n    creation_tx,\n    factory_address,\n    pool_name,\n    pool_address,\n    token0,\n    token1,\n    platform,\n    tokens\nFROM\n    {{ source(\n        'flipside_gold_ethereum',\n        'dex_liquidity_pools'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.ethereum_models.flipside_gold_ethereum.dex_liquidity_pools"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "core", "fqn": ["ethereum_models", "gold", "core__dim_dex_liquidity_pools"], "unique_id": "model.ethereum_models.core__dim_dex_liquidity_pools", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "gold/core__dim_dex_liquidity_pools.sql", "original_file_path": "models/gold/core__dim_dex_liquidity_pools.sql", "name": "core__dim_dex_liquidity_pools", "alias": "dim_dex_liquidity_pools", "checksum": {"name": "sha256", "checksum": "b08a479ad2cf16d504a773f57d8eba8d8a578cb77efbf06e7ba6118c0e250341"}, "tags": [], "refs": [], "sources": [["flipside_gold_ethereum", "dex_liquidity_pools"]], "description": "This table contains details on different Liquidity Pools on the Ethereum blockchain, including the tokens within each pool as well as platform and contract creation info where possible.", "columns": {"CREATION_TIME": {"name": "CREATION_TIME", "description": "When this pool was created, where possible.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATION_TX": {"name": "CREATION_TX", "description": "The transaction where this contract was created, where possible.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FACTORY_ADDRESS": {"name": "FACTORY_ADDRESS", "description": "The address that created or deployed this pool, where possible.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_NAME": {"name": "POOL_NAME", "description": "The name of the liquidity pool, where possible.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "POOL_ADDRESS": {"name": "POOL_ADDRESS", "description": "The contract address for the liquidity pool.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN0": {"name": "TOKEN0", "description": "Token 0 is the first token in the pair, and will show up first within the event logs for relevant transactions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN1": {"name": "TOKEN1", "description": "Token 1 is the second token in the pair, and will show up second within the event logs for relevant transactions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM": {"name": "PLATFORM", "description": "This field denotes which application the liquidity pool belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKENS": {"name": "TOKENS", "description": "This field denotes which application the liquidity pool belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_models://models/gold/core__dim_dex_liquidity_pools.yml", "compiled_path": "target/compiled/ethereum_models/models/gold/core__dim_dex_liquidity_pools.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1654351204.425202, "compiled_sql": "\n\nSELECT\n    creation_time,\n    creation_tx,\n    factory_address,\n    pool_name,\n    pool_address,\n    token0,\n    token1,\n    platform,\n    tokens\nFROM\n    flipside_prod_db.ethereum.dex_liquidity_pools", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.core.dim_dex_liquidity_pools"}, "model.ethereum_models.core__dim_contracts_extended": {"raw_sql": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true }\n) }}\n\nSELECT\n    system_created_at,\n    block_number,\n    block_timestamp,\n    creator_address,\n    contract_address,\n    logic_address,\n    token_convention,\n    NAME,\n    symbol,\n    decimals,\n    contract_metadata\nFROM\n    {{ ref('silver__contracts_extended') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.ethereum_models.silver__contracts_extended"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "core", "fqn": ["ethereum_models", "gold", "core__dim_contracts_extended"], "unique_id": "model.ethereum_models.core__dim_contracts_extended", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "gold/core__dim_contracts_extended.sql", "original_file_path": "models/gold/core__dim_contracts_extended.sql", "name": "core__dim_contracts_extended", "alias": "dim_contracts_extended", "checksum": {"name": "sha256", "checksum": "b4ac9d81f8c1782f3808babf0d0de66052676552ece077da7b06cc5fab94441c"}, "tags": [], "refs": [["silver__contracts_extended"]], "sources": [], "description": "This table contains contract details for contracts deployed on the Ethereum blockchain.", "columns": {"SYSTEM_CREATED_AT": {"name": "SYSTEM_CREATED_AT", "description": "Internal column.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "The block number at which the contract was read and details recorded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The block timestamp at which the contract was read and details recorded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR_ADDRESS": {"name": "CREATOR_ADDRESS", "description": "The address of the contract creator.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "The unique Ethereum address of the deployed contract.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LOGIC_ADDRESS": {"name": "LOGIC_ADDRESS", "description": "The logic address, where applicable.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_CONVENTION": {"name": "TOKEN_CONVENTION", "description": "The token standard utilized by this contract.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "The name of the deployed contract. Please note this is not necessarily unique.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYMBOL": {"name": "SYMBOL", "description": "The symbol used to represent this contract. Please note this is not necessarily unique.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DECIMALS": {"name": "DECIMALS", "description": "The number of decimal places this contract needs adjusted where token values exist. For example, use the decimal field to correctly transform raw amounts in ```fact_token_transfers```.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_METADATA": {"name": "CONTRACT_METADATA", "description": "This JSON column contains other relevant details for each contract.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_models://models/gold/core__dim_contracts_extended.yml", "compiled_path": "target/compiled/ethereum_models/models/gold/core__dim_contracts_extended.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1654351204.434688, "compiled_sql": "\n\nSELECT\n    system_created_at,\n    block_number,\n    block_timestamp,\n    creator_address,\n    contract_address,\n    logic_address,\n    token_convention,\n    NAME,\n    symbol,\n    decimals,\n    contract_metadata\nFROM\n    ETHEREUM_DEV.silver.contracts_extended", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.core.dim_contracts_extended"}, "model.ethereum_models.core__ez_token_transfers": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true },\n    unique_key = '_log_id',\n    cluster_by = ['block_timestamp::DATE'],\n    post_hook = \"{{ grant_data_share_statement('EZ_TOKEN_TRANSFERS', 'TABLE') }}\"\n) }}\n\nWITH metadata AS (\n\n    SELECT\n        LOWER(address) AS address,\n        symbol,\n        NAME,\n        decimals\n    FROM\n        {{ ref('core__dim_contracts') }}\n    WHERE\n        decimals IS NOT NULL\n),\ntransfers AS (\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        LOWER(contract_address) AS contract_address,\n        from_address,\n        to_address,\n        raw_amount,\n        _log_id,\n        ingested_at\n    FROM\n        {{ ref('silver__transfers') }}\n\n{% if is_incremental() %}\nWHERE\n    ingested_at >= (\n        SELECT\n            MAX(\n                ingested_at\n            ) :: DATE - 2\n        FROM\n            {{ this }}\n    )\n{% endif %}\n),\nhourly_prices AS (\n    SELECT\n        HOUR,\n        LOWER(token_address) AS token_address,\n        AVG(price) AS price\n    FROM\n        {{ ref('core__fact_hourly_token_prices') }}\n    WHERE\n        1 = 1\n\n{% if is_incremental() %}\nAND HOUR :: DATE IN (\n    SELECT\n        DISTINCT block_timestamp :: DATE\n    FROM\n        transfers\n)\n{% else %}\n    AND HOUR :: DATE >= '2020-05-05'\n{% endif %}\nGROUP BY\n    HOUR,\n    token_address\n)\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    contract_address,\n    from_address,\n    to_address,\n    raw_amount,\n    decimals,\n    symbol,\n    price AS token_price,\n    CASE\n        WHEN decimals IS NOT NULL THEN raw_amount / pow(\n            10,\n            decimals\n        )\n        ELSE NULL\n    END AS amount,\n    CASE\n        WHEN decimals IS NOT NULL\n        AND price IS NOT NULL THEN amount * price\n        ELSE NULL\n    END AS amount_usd,\n    CASE\n        WHEN decimals IS NULL THEN 'false'\n        ELSE 'true'\n    END AS has_decimal,\n    CASE\n        WHEN price IS NULL THEN 'false'\n        ELSE 'true'\n    END AS has_price,\n    _log_id,\n    ingested_at\nFROM\n    transfers\n    LEFT JOIN metadata\n    ON contract_address = address\n    LEFT JOIN hourly_prices\n    ON contract_address = token_address\n    AND DATE_TRUNC(\n        'hour',\n        block_timestamp\n    ) = HOUR", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.ethereum_models.grant_data_share_statement"], "nodes": ["model.ethereum_models.core__dim_contracts", "model.ethereum_models.silver__transfers", "model.ethereum_models.core__fact_hourly_token_prices"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "cluster_by": ["block_timestamp::DATE"], "unique_key": "_log_id", "post-hook": [{"sql": "{{ grant_data_share_statement('EZ_TOKEN_TRANSFERS', 'TABLE') }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "core", "fqn": ["ethereum_models", "gold", "core__ez_token_transfers"], "unique_id": "model.ethereum_models.core__ez_token_transfers", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "gold/core__ez_token_transfers.sql", "original_file_path": "models/gold/core__ez_token_transfers.sql", "name": "core__ez_token_transfers", "alias": "ez_token_transfers", "checksum": {"name": "sha256", "checksum": "7b82e8fb74ea756f45b76476aa40af454f973747bf01d58449e4257991ee5415"}, "tags": [], "refs": [["core__dim_contracts"], ["silver__transfers"], ["core__fact_hourly_token_prices"]], "sources": [], "description": "This table will contain all events in the ```fact_token_transfers table```, along with joined columns such as token price, symbol, and decimals where possible that allow for easier analysis of token transfer events. Please note Native ETH transfers are not included here.", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "Also known as block height. The block number, which indicates the length of the blockchain, increases after the addition of each new block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block was produced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed. This will not be unique in this table as a transaction could include multiple transfer events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "Contract address of the token being transferred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The sending address of this transfer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "The receiving address of this transfer. This can be a contract address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RAW_AMOUNT": {"name": "RAW_AMOUNT", "description": "The amount of tokens transferred. This value is not decimal adjusted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DECIMALS": {"name": "DECIMALS", "description": "The number of decimal places this contract needs adjusted where token values exist. For example, use the decimal field to correctly transform raw amounts in ```fact_token_transfers```.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYMBOL": {"name": "SYMBOL", "description": "The symbol used to represent this contract. Please note this is not necessarily unique.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_PRICE": {"name": "TOKEN_PRICE", "description": "The price, if available, for this token at the transfer time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "The decimal transformed amount for this token. Tokens without a decimal adjustment will be nulled out here.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_USD": {"name": "AMOUNT_USD", "description": "The amount in US dollars for this transfer at the time of the transfer. Tokens without a decimal adjustment or price will be nulled out here.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "HAS_PRICE": {"name": "HAS_PRICE", "description": "Whether or not our prices model contains this hourly token price.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "HAS_DECIMAL": {"name": "HAS_DECIMAL", "description": "Whether or not our contracts model contains the necessary decimal adjustment for this token.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_LOG_ID": {"name": "_LOG_ID", "description": "This is the primary key for this table. This is a concatenation of the transaction hash and the event index at which the transfer event occurred. This field can be used to find more details on the event within the ```fact_event_logs``` table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": "Internal column.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "The function signature of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "The from address at the transaction level.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "The to address at the transaction level.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_models://models/gold/core__ez_token_transfers.yml", "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_token_transfers.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "unique_key": "_log_id", "cluster_by": ["block_timestamp::DATE"], "post-hook": ["{{ grant_data_share_statement('EZ_TOKEN_TRANSFERS', 'TABLE') }}"]}, "created_at": 1654351204.441849, "compiled_sql": "\n\nWITH metadata AS (\n\n    SELECT\n        LOWER(address) AS address,\n        symbol,\n        NAME,\n        decimals\n    FROM\n        ETHEREUM_DEV.core.dim_contracts\n    WHERE\n        decimals IS NOT NULL\n),\ntransfers AS (\n    SELECT\n        block_number,\n        block_timestamp,\n        tx_hash,\n        origin_function_signature,\n        origin_from_address,\n        origin_to_address,\n        LOWER(contract_address) AS contract_address,\n        from_address,\n        to_address,\n        raw_amount,\n        _log_id,\n        ingested_at\n    FROM\n        ETHEREUM_DEV.silver.transfers\n\n\nWHERE\n    ingested_at >= (\n        SELECT\n            MAX(\n                ingested_at\n            ) :: DATE - 2\n        FROM\n            ETHEREUM_DEV.core.ez_token_transfers\n    )\n\n),\nhourly_prices AS (\n    SELECT\n        HOUR,\n        LOWER(token_address) AS token_address,\n        AVG(price) AS price\n    FROM\n        ETHEREUM_DEV.core.fact_hourly_token_prices\n    WHERE\n        1 = 1\n\n\nAND HOUR :: DATE IN (\n    SELECT\n        DISTINCT block_timestamp :: DATE\n    FROM\n        transfers\n)\n\nGROUP BY\n    HOUR,\n    token_address\n)\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    contract_address,\n    from_address,\n    to_address,\n    raw_amount,\n    decimals,\n    symbol,\n    price AS token_price,\n    CASE\n        WHEN decimals IS NOT NULL THEN raw_amount / pow(\n            10,\n            decimals\n        )\n        ELSE NULL\n    END AS amount,\n    CASE\n        WHEN decimals IS NOT NULL\n        AND price IS NOT NULL THEN amount * price\n        ELSE NULL\n    END AS amount_usd,\n    CASE\n        WHEN decimals IS NULL THEN 'false'\n        ELSE 'true'\n    END AS has_decimal,\n    CASE\n        WHEN price IS NULL THEN 'false'\n        ELSE 'true'\n    END AS has_price,\n    _log_id,\n    ingested_at\nFROM\n    transfers\n    LEFT JOIN metadata\n    ON contract_address = address\n    LEFT JOIN hourly_prices\n    ON contract_address = token_address\n    AND DATE_TRUNC(\n        'hour',\n        block_timestamp\n    ) = HOUR", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.core.ez_token_transfers"}, "model.ethereum_models.core__ez_eth_transfers": {"raw_sql": "{{ config(\n    materialized = 'view'\n) }}\n\nWITH eth_base AS (\n\n    SELECT\n        tx_hash,\n        block_number,\n        block_timestamp,\n        from_address,\n        to_address,\n        eth_value,\n        identifier,\n        _call_id,\n        ingested_at,\n        input\n    FROM\n        {{ ref('silver__traces') }}\n    WHERE\n        TYPE = 'CALL'\n        AND eth_value > 0\n        AND tx_status = 'SUCCESS'\n),\neth_price AS (\n    SELECT\n        HOUR,\n        AVG(price) AS eth_price\n    FROM\n        {{ source(\n            'ethereum_share',\n            'token_prices_hourly'\n        ) }}\n    WHERE\n        token_address IS NULL\n        AND symbol IS NULL\n    GROUP BY\n        HOUR\n)\nSELECT\n    A.tx_hash AS tx_hash,\n    A.block_number AS block_number,\n    A.block_timestamp AS block_timestamp,\n    A.identifier AS identifier,\n    tx.from_address AS origin_from_address,\n    tx.to_address AS origin_to_address,\n    tx.origin_function_signature AS origin_function_signature,\n    A.from_address AS eth_from_address,\n    A.to_address AS eth_to_address,\n    A.eth_value AS amount,\n    ROUND(\n        A.eth_value * eth_price,\n        2\n    ) AS amount_usd\nFROM\n    eth_base A\n    LEFT JOIN eth_price\n    ON DATE_TRUNC(\n        'hour',\n        block_timestamp\n    ) = HOUR\n    JOIN {{ ref('silver__transactions') }}\n    tx\n    ON A.tx_hash = tx.tx_hash", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.ethereum_models.ethereum_share.token_prices_hourly", "model.ethereum_models.silver__traces", "model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "core", "fqn": ["ethereum_models", "gold", "core__ez_eth_transfers"], "unique_id": "model.ethereum_models.core__ez_eth_transfers", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "gold/core__ez_eth_transfers.sql", "original_file_path": "models/gold/core__ez_eth_transfers.sql", "name": "core__ez_eth_transfers", "alias": "ez_eth_transfers", "checksum": {"name": "sha256", "checksum": "ed7feb7c6f64a8eba7bdec0cd10fb6ea09e49ee52cff7d92a562bbceb0f89fd6"}, "tags": [], "refs": [["silver__traces"], ["silver__transactions"]], "sources": [["ethereum_share", "token_prices_hourly"]], "description": "This table will contain all events in the ```fact_token_transfers table```, along with joined columns such as token price, symbol, and decimals where possible that allow for easier analysis of token transfer events. Please note Native ETH transfers are not included here.", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "Also known as block height. The block number, which indicates the length of the blockchain, increases after the addition of each new block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block was produced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed. This will not be unique in this table as a transaction could include multiple transfer events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETH_FROM_ADDRESS": {"name": "ETH_FROM_ADDRESS", "description": "The sending address of this transfer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETH_TO_ADDRESS": {"name": "ETH_TO_ADDRESS", "description": "The receiving address of this transfer. This can be a contract address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT": {"name": "AMOUNT", "description": "ETH value transferred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_PRICE": {"name": "TOKEN_PRICE", "description": "The price, if available, for this token at the transfer time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_USD": {"name": "AMOUNT_USD", "description": "ETH value transferred, in USD.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "HAS_PRICE": {"name": "HAS_PRICE", "description": "Whether or not our prices model contains this hourly token price.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "The function signature of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "The from address at the transaction level.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "The to address at the transaction level.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IDENTIFIER": {"name": "IDENTIFIER", "description": "This field represents the position and type of the trace within the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_models://models/gold/core__ez_eth_transfers.yml", "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_eth_transfers.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1654351204.570039, "compiled_sql": "\n\nWITH eth_base AS (\n\n    SELECT\n        tx_hash,\n        block_number,\n        block_timestamp,\n        from_address,\n        to_address,\n        eth_value,\n        identifier,\n        _call_id,\n        ingested_at,\n        input\n    FROM\n        ETHEREUM_DEV.silver.traces\n    WHERE\n        TYPE = 'CALL'\n        AND eth_value > 0\n        AND tx_status = 'SUCCESS'\n),\neth_price AS (\n    SELECT\n        HOUR,\n        AVG(price) AS eth_price\n    FROM\n        ETHEREUM_DEV.silver.token_prices_hourly\n    WHERE\n        token_address IS NULL\n        AND symbol IS NULL\n    GROUP BY\n        HOUR\n)\nSELECT\n    A.tx_hash AS tx_hash,\n    A.block_number AS block_number,\n    A.block_timestamp AS block_timestamp,\n    A.identifier AS identifier,\n    tx.from_address AS origin_from_address,\n    tx.to_address AS origin_to_address,\n    tx.origin_function_signature AS origin_function_signature,\n    A.from_address AS eth_from_address,\n    A.to_address AS eth_to_address,\n    A.eth_value AS amount,\n    ROUND(\n        A.eth_value * eth_price,\n        2\n    ) AS amount_usd\nFROM\n    eth_base A\n    LEFT JOIN eth_price\n    ON DATE_TRUNC(\n        'hour',\n        block_timestamp\n    ) = HOUR\n    JOIN ETHEREUM_DEV.silver.transactions\n    tx\n    ON A.tx_hash = tx.tx_hash", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.core.ez_eth_transfers"}, "model.ethereum_models.core__fact_token_transfers": {"raw_sql": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true }\n) }}\n\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    contract_address,\n    from_address,\n    to_address,\n    raw_amount,\n    _log_id\nFROM\n    {{ ref('silver__transfers') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.ethereum_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "core", "fqn": ["ethereum_models", "gold", "core__fact_token_transfers"], "unique_id": "model.ethereum_models.core__fact_token_transfers", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "gold/core__fact_token_transfers.sql", "original_file_path": "models/gold/core__fact_token_transfers.sql", "name": "core__fact_token_transfers", "alias": "fact_token_transfers", "checksum": {"name": "sha256", "checksum": "c3eebcef88689a0d752489051ae38cd7faf1439f041e15b80f54f32e702e76d7"}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "This table contains events on the Ethereum Blockchain with an event name of 'Transfer'. The contract address is the token transferred, and the raw amount field is the amount of tokens transferred. Please note this amount is not decimal adjusted. Decimal adjustments for a token address can be found in ```dim_contracts```. This table will not contain transfers of native ETH.", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "Also known as block height. The block number, which indicates the length of the blockchain, increases after the addition of each new block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block was produced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed. This will not be unique in this table as a transaction could include multiple transfer events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "Contract address of the token being transferred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The sending address of this transfer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "The receiving address of this transfer. This can be a contract address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RAW_AMOUNT": {"name": "RAW_AMOUNT", "description": "The amount of tokens transferred. This value is not decimal adjusted.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_LOG_ID": {"name": "_LOG_ID", "description": "This is the primary key for this table. This is a concatenation of the transaction hash and the event index at which the transfer event occurred. This field can be used to find more details on the event within the ```fact_event_logs``` table.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "The function signature of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "The from address at the transaction level.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "The to address at the transaction level.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_models://models/gold/core__fact_token_transfers.yml", "compiled_path": "target/compiled/ethereum_models/models/gold/core__fact_token_transfers.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1654351204.407177, "compiled_sql": "\n\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    contract_address,\n    from_address,\n    to_address,\n    raw_amount,\n    _log_id\nFROM\n    ETHEREUM_DEV.silver.transfers", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.core.fact_token_transfers"}, "model.ethereum_models.core__dim_function_signatures": {"raw_sql": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true }\n) }}\n\nSELECT\n    text_signature,\n    bytes_signature,\n    id\nFROM\n    {{ source(\n        'ethereum_silver',\n        'signatures_backfill'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.ethereum_models.ethereum_silver.signatures_backfill"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "core", "fqn": ["ethereum_models", "gold", "core__dim_function_signatures"], "unique_id": "model.ethereum_models.core__dim_function_signatures", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "gold/core__dim_function_signatures.sql", "original_file_path": "models/gold/core__dim_function_signatures.sql", "name": "core__dim_function_signatures", "alias": "dim_function_signatures", "checksum": {"name": "sha256", "checksum": "32dba83a2c2f3bcff7b8779d0e52aa21e599a769acf54cb197a2db96787e2ccc"}, "tags": [], "refs": [], "sources": [["ethereum_silver", "signatures_backfill"]], "description": "This table contains function signatures used to decode Ethereum call data into a human-readable format. For more details see (https://www.4byte.directory/).", "columns": {"TEXT_SIGNATURE": {"name": "TEXT_SIGNATURE", "description": "The human-readable format for this function or event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BYTES_SIGNATURE": {"name": "BYTES_SIGNATURE", "description": "The byte signature for this function.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ID": {"name": "ID", "description": "The ID for this function or event signature.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_models://models/gold/core__dim_function_signatures.yml", "compiled_path": "target/compiled/ethereum_models/models/gold/core__dim_function_signatures.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1654351204.4032981, "compiled_sql": "\n\nSELECT\n    text_signature,\n    bytes_signature,\n    id\nFROM\n    ethereum.silver.signatures_backfill", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.core.dim_function_signatures"}, "model.ethereum_models.core__ez_dex_swaps": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  persist_docs ={ \"relation\": true,\n  \"columns\": true },\n  unique_key = '_log_id',\n  cluster_by = ['ingested_at::DATE'],\n  post_hook = \"{{ grant_data_share_statement('EZ_DEX_SWAPS', 'TABLE') }}\"\n) }}\n\nWITH v2_swaps AS (\n\n  SELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    contract_address,\n    pool_name,\n    event_name,\n    amount_in,\n    amount_in_usd,\n    amount_out,\n    amount_out_usd,\n    sender,\n    tx_to,\n    event_index,\n    platform,\n    token_in,\n    token_out,\n    symbol_in,\n    symbol_out,\n    _log_id,\n    ingested_at\n  FROM\n    {{ ref('silver_dex__v2_swaps') }}\n\n{% if is_incremental() %}\nWHERE\n  ingested_at >= (\n    SELECT\n      MAX(ingested_at) :: DATE - 2\n    FROM\n      {{ this }}\n  )\n{% endif %}\n)\nSELECT\n  block_number,\n  block_timestamp,\n  tx_hash,\n  origin_function_signature,\n  origin_from_address,\n  origin_to_address,\n  contract_address,\n  pool_name,\n  event_name,\n  amount_in,\n  amount_in_usd,\n  amount_out,\n  amount_out_usd,\n  sender,\n  tx_to,\n  event_index,\n  platform,\n  token_in,\n  token_out,\n  symbol_in,\n  symbol_out,\n  _log_id,\n  ingested_at\nFROM\n  v2_swaps", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.ethereum_models.grant_data_share_statement"], "nodes": ["model.ethereum_models.silver_dex__v2_swaps"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "cluster_by": ["ingested_at::DATE"], "unique_key": "_log_id", "post-hook": [{"sql": "{{ grant_data_share_statement('EZ_DEX_SWAPS', 'TABLE') }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "core", "fqn": ["ethereum_models", "gold", "core__ez_dex_swaps"], "unique_id": "model.ethereum_models.core__ez_dex_swaps", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "gold/core__ez_dex_swaps.sql", "original_file_path": "models/gold/core__ez_dex_swaps.sql", "name": "core__ez_dex_swaps", "alias": "ez_dex_swaps", "checksum": {"name": "sha256", "checksum": "eae8d8b9902dcd989f50633f337e7b1603cceb2aa23fa05c35d80d40f27d166a"}, "tags": [], "refs": [["silver_dex__v2_swaps"]], "sources": [], "description": "This table currently contains swap events from the ```fact_event_logs``` table for Uniswap V2 and SushiSwap, along with other helpful columns including an amount USD where possible. Other dexes coming soon!", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "Also known as block height. The block number, which indicates the length of the blockchain, increases after the addition of each new block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block was produced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed. This field will not be unique in this table, as a given transaction can include multiple events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "The address interacted with for a given event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_NAME": {"name": "EVENT_NAME", "description": "The decoded event name for a given event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_IN": {"name": "AMOUNT_IN", "description": "The amount of tokens put into the swap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_OUT": {"name": "AMOUNT_OUT", "description": "The amount of tokens taken out of or received from the swap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_IN_USD": {"name": "AMOUNT_IN_USD", "description": "The amount of tokens put into the swap converted to USD using the price of the token.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_OUT_USD": {"name": "AMOUNT_OUT_USD", "description": "The amount of tokens taken out of or received from the swap converted to USD using the price of the token.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_IN": {"name": "TOKEN_IN", "description": "The address of the token sent for swap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_OUT": {"name": "TOKEN_OUT", "description": "The address of the token being swapped to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYMBOL_IN": {"name": "SYMBOL_IN", "description": "The symbol of the token sent for swap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYMBOL_OUT": {"name": "SYMBOL_OUT", "description": "The symbol of the token being swapped to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SENDER": {"name": "SENDER", "description": "The Router is the Sender in the swap function.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_TO": {"name": "TX_TO", "description": "The tx_to is the address who receives the swapped token. This corresponds to the \"to\" field in the swap function.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM": {"name": "PLATFORM", "description": "This field denotes which application the liquidity pool belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_INDEX": {"name": "EVENT_INDEX", "description": "Event number within a transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_LOG_ID": {"name": "_LOG_ID", "description": "This is the primary key for this table. This is a concatenation of the transaction hash and the event index at which the event occurred. This field can be used within other event based tables such as ```fact_transfers``` & ```ez_token_transfers```.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "The function signature of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "The from address at the transaction level.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "The to address at the transaction level.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_models://models/gold/core__ez_dex_swaps.yml", "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_dex_swaps.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "unique_key": "_log_id", "cluster_by": ["ingested_at::DATE"], "post-hook": ["{{ grant_data_share_statement('EZ_DEX_SWAPS', 'TABLE') }}"]}, "created_at": 1654351204.2798688, "compiled_sql": "\n\nWITH v2_swaps AS (\n\n  SELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    contract_address,\n    pool_name,\n    event_name,\n    amount_in,\n    amount_in_usd,\n    amount_out,\n    amount_out_usd,\n    sender,\n    tx_to,\n    event_index,\n    platform,\n    token_in,\n    token_out,\n    symbol_in,\n    symbol_out,\n    _log_id,\n    ingested_at\n  FROM\n    ETHEREUM_DEV.silver_dex.v2_swaps\n\n\nWHERE\n  ingested_at >= (\n    SELECT\n      MAX(ingested_at) :: DATE - 2\n    FROM\n      ETHEREUM_DEV.core.ez_dex_swaps\n  )\n\n)\nSELECT\n  block_number,\n  block_timestamp,\n  tx_hash,\n  origin_function_signature,\n  origin_from_address,\n  origin_to_address,\n  contract_address,\n  pool_name,\n  event_name,\n  amount_in,\n  amount_in_usd,\n  amount_out,\n  amount_out_usd,\n  sender,\n  tx_to,\n  event_index,\n  platform,\n  token_in,\n  token_out,\n  symbol_in,\n  symbol_out,\n  _log_id,\n  ingested_at\nFROM\n  v2_swaps", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.core.ez_dex_swaps"}, "model.ethereum_models.core__fact_hourly_token_prices": {"raw_sql": "{{ config(\n    materialized = 'view'\n) }}\n\nSELECT\n    HOUR,\n    token_address,\n    symbol,\n    decimals,\n    price,\n    is_imputed\nFROM\n    {{ source(\n        'flipside_gold_ethereum',\n        'token_prices_hourly'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.ethereum_models.flipside_gold_ethereum.token_prices_hourly"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "core", "fqn": ["ethereum_models", "gold", "core__fact_hourly_token_prices"], "unique_id": "model.ethereum_models.core__fact_hourly_token_prices", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "gold/core__fact_hourly_token_prices.sql", "original_file_path": "models/gold/core__fact_hourly_token_prices.sql", "name": "core__fact_hourly_token_prices", "alias": "fact_hourly_token_prices", "checksum": {"name": "sha256", "checksum": "d468d286ffd443cecca0c5fabdbc63a24c9e26bad21b76711558e63a8cacf691"}, "tags": [], "refs": [], "sources": [["flipside_gold_ethereum", "token_prices_hourly"]], "description": "This table contains hourly prices for tokens on the Ethereum Blockchain. \nThe sources of this data are [CoinMarketCap](https://coinmarketcap.com/) and [CoinGecko](https://www.coingecko.com/).", "columns": {"HOUR": {"name": "HOUR", "description": "Hour at which the token price was recorded.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_ADDRESS": {"name": "TOKEN_ADDRESS", "description": "The unique Ethereum address for a given token.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYMBOL": {"name": "SYMBOL", "description": "The token's symbol.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DECIMALS": {"name": "DECIMALS", "description": "The number of decimals for token contract.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRICE": {"name": "PRICE", "description": "The token price for a given hour.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IS_IMPUTED": {"name": "IS_IMPUTED", "description": "This column indicates whether or not the price has been pulled forward from the previous hour. Sometimes hourly prices are missed from our data source, and in that case we carry forward the last recorded hourly price until we record a new price.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_models://models/gold/core__fact_hourly_token_prices.yml", "compiled_path": "target/compiled/ethereum_models/models/gold/core__fact_hourly_token_prices.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1654351204.4094348, "compiled_sql": "\n\nSELECT\n    HOUR,\n    token_address,\n    symbol,\n    decimals,\n    price,\n    is_imputed\nFROM\n    flipside_prod_db.ethereum.token_prices_hourly", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.core.fact_hourly_token_prices"}, "model.ethereum_models.core__fact_traces": {"raw_sql": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true }\n) }}\n\nSELECT\n    tx_hash,\n    block_number,\n    block_timestamp,\n    from_address,\n    to_address,\n    eth_value,\n    gas,\n    gas_used,\n    input,\n    output,\n    TYPE,\n    identifier,\n    DATA,\n    tx_status,\n    sub_traces\nFROM\n    {{ ref('silver__traces') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.ethereum_models.silver__traces"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "core", "fqn": ["ethereum_models", "gold", "core__fact_traces"], "unique_id": "model.ethereum_models.core__fact_traces", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "gold/core__fact_traces.sql", "original_file_path": "models/gold/core__fact_traces.sql", "name": "core__fact_traces", "alias": "fact_traces", "checksum": {"name": "sha256", "checksum": "2792bb3c26477e8d207b32f8b6ba305b57c15269fc878ee1143b79aa052f8c7d"}, "tags": [], "refs": [["silver__traces"]], "sources": [], "description": "This table contains flattened trace data for internal contract calls on the Ethereum blockchain. Hex encoded fields can be decoded to integers by using `TO_NUMBER(<FIELD>, 'XXXXXXXXXXXX')`, with the number of Xs being the max length of the encoded field. You must also remove the `0x` from your field to use the `TO_NUMBER()` function, if applicable.", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "The block number of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The block timestamp of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "The transaction hash for the trace. Please note, this is not necessarily unique in this table as transactions frequently have multiple traces.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "FROM_ADDRESS": {"name": "FROM_ADDRESS", "description": "The sending address of this trace. This is not necessarily the from address of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TO_ADDRESS": {"name": "TO_ADDRESS", "description": "The receiving address of this trace. This is not necessarily the to address of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ETH_VALUE": {"name": "ETH_VALUE", "description": "The amount of ETH transferred in this trace.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS": {"name": "GAS", "description": "The gas supplied for this trace.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_USED": {"name": "GAS_USED", "description": "The gas used for this trace.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INPUT": {"name": "INPUT", "description": "The input data for this trace.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "OUTPUT": {"name": "OUTPUT", "description": "The output data for this trace.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TYPE": {"name": "TYPE", "description": "The type of internal transaction. Common trace types are `CALL`, `DELEGATECALL`, and `STATICCALL`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "IDENTIFIER": {"name": "IDENTIFIER", "description": "This field represents the position and type of the trace within the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DATA": {"name": "DATA", "description": "The raw JSON data for this trace.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_STATUS": {"name": "TX_STATUS", "description": "Status of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SUB_TRACES": {"name": "SUB_TRACES", "description": "The amount of nested sub traces for this trace.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_models://models/gold/core__fact_traces.yml", "compiled_path": "target/compiled/ethereum_models/models/gold/core__fact_traces.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1654351204.421813, "compiled_sql": "\n\nSELECT\n    tx_hash,\n    block_number,\n    block_timestamp,\n    from_address,\n    to_address,\n    eth_value,\n    gas,\n    gas_used,\n    input,\n    output,\n    TYPE,\n    identifier,\n    DATA,\n    tx_status,\n    sub_traces\nFROM\n    ETHEREUM_DEV.silver.traces", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.core.fact_traces"}, "model.ethereum_models.core__dim_event_signatures": {"raw_sql": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true }\n) }}\n\nSELECT\n    text_signature,\n    hex_signature,\n    id\nFROM\n    {{ source(\n        'ethereum_silver',\n        'event_signatures_backfill'\n    ) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.ethereum_models.ethereum_silver.event_signatures_backfill"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "core", "fqn": ["ethereum_models", "gold", "core__dim_event_signatures"], "unique_id": "model.ethereum_models.core__dim_event_signatures", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "gold/core__dim_event_signatures.sql", "original_file_path": "models/gold/core__dim_event_signatures.sql", "name": "core__dim_event_signatures", "alias": "dim_event_signatures", "checksum": {"name": "sha256", "checksum": "33ff4db39d26978fdf95ccfce9fe05b481fe2f644998748f9451f7c9c8316e07"}, "tags": [], "refs": [], "sources": [["ethereum_silver", "event_signatures_backfill"]], "description": "This table contains event signatures used to decode Ethereum event data into a human-readable format. For more details see (https://www.4byte.directory/).", "columns": {"TEXT_SIGNATURE": {"name": "TEXT_SIGNATURE", "description": "The human-readable format for this function or event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "HEX_SIGNATURE": {"name": "HEX_SIGNATURE", "description": "The hex signature for this event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ID": {"name": "ID", "description": "The ID for this function or event signature.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_models://models/gold/core__dim_event_signatures.yml", "compiled_path": "target/compiled/ethereum_models/models/gold/core__dim_event_signatures.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1654351204.417064, "compiled_sql": "\n\nSELECT\n    text_signature,\n    hex_signature,\n    id\nFROM\n    ethereum.silver.event_signatures_backfill", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.core.dim_event_signatures"}, "model.ethereum_models.core__fact_blocks": {"raw_sql": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true }\n) }}\n\nSELECT\n    block_number,\n    block_timestamp,\n    network,\n    blockchain,\n    tx_count,\n    difficulty,\n    total_difficulty,\n    extra_data,\n    gas_limit,\n    gas_used,\n    HASH,\n    parent_hash,\n    miner,\n    nonce,\n    receipts_root,\n    sha3_uncles,\n    SIZE,\n    uncle_blocks,\n    block_header_json\nFROM\n    {{ ref('silver__blocks') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "core", "fqn": ["ethereum_models", "gold", "core__fact_blocks"], "unique_id": "model.ethereum_models.core__fact_blocks", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "gold/core__fact_blocks.sql", "original_file_path": "models/gold/core__fact_blocks.sql", "name": "core__fact_blocks", "alias": "fact_blocks", "checksum": {"name": "sha256", "checksum": "4cb1728f5f60cd6a42226f0fe982c6cf9ffbbc3a8b822e4b0faa23aa63dfbdb1"}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "This table contains block level data for the Ethereum Blockchain. This table can be used to analyze trends at a block level, for example gas fees vs. total transactions over time. For more information, please see [Etherscan Resources](https://etherscan.io/directory/Learning_Resources/Ethereum) or [The Ethereum Organization](https://ethereum.org/en/developers/docs/blocks/)", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "Also known as block height. The block number, which indicates the length of the blockchain, increases after the addition of each new block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block was produced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NETWORK": {"name": "NETWORK", "description": "The network on the blockchain used by a transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The blockchain on which transactions are being confirmed.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_COUNT": {"name": "TX_COUNT", "description": "Total number of transactions within a block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DIFFICULTY": {"name": "DIFFICULTY", "description": "The effort required to mine the block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_DIFFICULTY": {"name": "TOTAL_DIFFICULTY", "description": "Total difficulty of the chain at a given block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EXTRA_DATA": {"name": "EXTRA_DATA", "description": "Any data included by the miner for a given block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_LIMIT": {"name": "GAS_LIMIT", "description": "Total gas limit provided by all transactions in the block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "GAS_USED": {"name": "GAS_USED", "description": "Total gas used in the block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "HASH": {"name": "HASH", "description": "The hash of the block header for a given block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PARENT_HASH": {"name": "PARENT_HASH", "description": "The hash of the block from which a given block is generated. Also known as the parent block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINER": {"name": "MINER", "description": "Miner who successfully added a given block to the blockchain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NONCE": {"name": "NONCE", "description": "Block nonce is a value used during mining to demonstrate proof of work for a given block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "RECEIPTS_ROOT": {"name": "RECEIPTS_ROOT", "description": "The root of the state trie.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SHA3_UNCLES": {"name": "SHA3_UNCLES", "description": "The mechanism which Ethereum Javascript RLP encodes an empty string.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SIZE": {"name": "SIZE", "description": "Block size, which is determined by a given block's gas limit.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "UNCLE_BLOCKS": {"name": "UNCLE_BLOCKS", "description": "Uncle blocks occur when two blocks are mined and broadcasted at the same time, with the same block number. The block validated across the most nodes will be added to the primary chain, and the other one becomes an uncle block. Miners do receive rewards for uncle blocks.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_HEADER_JSON": {"name": "BLOCK_HEADER_JSON", "description": "This JSON column contains the block header details.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_models://models/gold/core__fact_blocks.yml", "compiled_path": "target/compiled/ethereum_models/models/gold/core__fact_blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1654351204.415458, "compiled_sql": "\n\nSELECT\n    block_number,\n    block_timestamp,\n    network,\n    blockchain,\n    tx_count,\n    difficulty,\n    total_difficulty,\n    extra_data,\n    gas_limit,\n    gas_used,\n    HASH,\n    parent_hash,\n    miner,\n    nonce,\n    receipts_root,\n    sha3_uncles,\n    SIZE,\n    uncle_blocks,\n    block_header_json\nFROM\n    ETHEREUM_DEV.silver.blocks", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.core.fact_blocks"}, "model.ethereum_models.core__dim_dates": {"raw_sql": "{{ config(\n    materialized = \"table\",\n    post_hook = \"{{ grant_data_share_statement('DIM_DATES', 'TABLE') }}\"\n) }}\n{{ dbt_date.get_date_dimension(\n    '2017-01-01',\n    '2022-12-31'\n) }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_date.get_date_dimension", "macro.ethereum_models.grant_data_share_statement"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [{"sql": "{{ grant_data_share_statement('DIM_DATES', 'TABLE') }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "core", "fqn": ["ethereum_models", "gold", "core__dim_dates"], "unique_id": "model.ethereum_models.core__dim_dates", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "gold/core__dim_dates.sql", "original_file_path": "models/gold/core__dim_dates.sql", "name": "core__dim_dates", "alias": "dim_dates", "checksum": {"name": "sha256", "checksum": "782a5d821fdc165ba1fd5153d66ee35bf2b7e7182bdc70ce4f47b6f7a24a3517"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__dim_dates.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "post-hook": ["{{ grant_data_share_statement('DIM_DATES', 'TABLE') }}"]}, "created_at": 1654351202.049249, "compiled_sql": "\n\n    \nwith base_dates as (\n    \n    with date_spine as\n(\n\n    \n\n\n\n\n\nwith rawdata as (\n\n    \n\n    \n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    \n    p0.generated_number * power(2, 0)\n     + \n    \n    p1.generated_number * power(2, 1)\n     + \n    \n    p2.generated_number * power(2, 2)\n     + \n    \n    p3.generated_number * power(2, 3)\n     + \n    \n    p4.generated_number * power(2, 4)\n     + \n    \n    p5.generated_number * power(2, 5)\n     + \n    \n    p6.generated_number * power(2, 6)\n     + \n    \n    p7.generated_number * power(2, 7)\n     + \n    \n    p8.generated_number * power(2, 8)\n     + \n    \n    p9.generated_number * power(2, 9)\n     + \n    \n    p10.generated_number * power(2, 10)\n     + \n    \n    p11.generated_number * power(2, 11)\n    \n    \n    + 1\n    as generated_number\n\n    from\n\n    \n    p as p0\n     cross join \n    \n    p as p1\n     cross join \n    \n    p as p2\n     cross join \n    \n    p as p3\n     cross join \n    \n    p as p4\n     cross join \n    \n    p as p5\n     cross join \n    \n    p as p6\n     cross join \n    \n    p as p7\n     cross join \n    \n    p as p8\n     cross join \n    \n    p as p9\n     cross join \n    \n    p as p10\n     cross join \n    \n    p as p11\n    \n    \n\n    )\n\n    select *\n    from unioned\n    where generated_number <= 2190\n    order by generated_number\n\n\n\n),\n\nall_periods as (\n\n    select (\n        \n\n    dateadd(\n        day,\n        row_number() over (order by 1) - 1,\n        cast('2017-01-01' as \n    timestamp_ntz\n)\n        )\n\n\n    ) as date_day\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_day <= cast('2022-12-31' as \n    timestamp_ntz\n)\n\n)\n\nselect * from filtered\n\n\n\n)\nselect\n    cast(d.date_day as \n    timestamp_ntz\n) as date_day\nfrom\n    date_spine d\n\n\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast(\n\n    dateadd(\n        year,\n        -1,\n        d.date_day\n        )\n\n as date) as prior_year_date_day,\n        cast(\n\n    dateadd(\n        day,\n        -364,\n        d.date_day\n        )\n\n as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    cast(\n\n    dateadd(\n        day,\n        -1,\n        d.date_day\n        )\n\n as date) as prior_date_day,\n    cast(\n\n    dateadd(\n        day,\n        1,\n        d.date_day\n        )\n\n as date) as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    case\n            when date_part('dayofweek', d.date_day) = 7 then 1\n            else date_part('dayofweek', d.date_day) + 1\n        end as day_of_week,\n    date_part('dayofweekiso', d.date_day) as day_of_week_iso,\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname(d.date_day)\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end as day_of_week_name,\n    dayname(d.date_day) as day_of_week_name_short,\n    date_part('day', d.date_day) as day_of_month,\n    date_part('dayofyear', d.date_day) as day_of_year,\n\n    \n    \n    cast(\n\n    dateadd(\n        day,\n        -1 * (case\n            when date_part('dayofweek', d.date_day) = 7 then 1\n            else date_part('dayofweek', d.date_day) + 1\n        end - 1),\n        d.date_day\n        )\n\n as date) as week_start_date,\n    cast(\n\n    dateadd(\n        day,\n        6,\n        \n    \n    cast(\n\n    dateadd(\n        day,\n        -1 * (case\n            when date_part('dayofweek', d.date_day) = 7 then 1\n            else date_part('dayofweek', d.date_day) + 1\n        end - 1),\n        d.date_day\n        )\n\n as date)\n        )\n\n as date) as week_end_date,\n    \n    \n    cast(\n\n    dateadd(\n        day,\n        -1 * (case\n            when date_part('dayofweek', d.prior_year_over_year_date_day) = 7 then 1\n            else date_part('dayofweek', d.prior_year_over_year_date_day) + 1\n        end - 1),\n        d.prior_year_over_year_date_day\n        )\n\n as date) as prior_year_week_start_date,\n    cast(\n\n    dateadd(\n        day,\n        6,\n        \n    \n    cast(\n\n    dateadd(\n        day,\n        -1 * (case\n            when date_part('dayofweek', d.prior_year_over_year_date_day) = 7 then 1\n            else date_part('dayofweek', d.prior_year_over_year_date_day) + 1\n        end - 1),\n        d.prior_year_over_year_date_day\n        )\n\n as date)\n        )\n\n as date) as prior_year_week_end_date,\n    cast(date_part('week', d.date_day) as \n    int\n) as week_of_year,\n\n    cast(date_trunc('week', d.date_day) as date) as iso_week_start_date,\n    cast(\n\n    dateadd(\n        day,\n        6,\n        cast(date_trunc('week', d.date_day) as date)\n        )\n\n as date) as iso_week_end_date,\n    cast(date_trunc('week', d.prior_year_over_year_date_day) as date) as prior_year_iso_week_start_date,\n    cast(\n\n    dateadd(\n        day,\n        6,\n        cast(date_trunc('week', d.prior_year_over_year_date_day) as date)\n        )\n\n as date) as prior_year_iso_week_end_date,\n    cast(date_part('weekiso', d.date_day) as \n    int\n) as iso_week_of_year,\n\n    cast(date_part('week', d.prior_year_over_year_date_day) as \n    int\n) as prior_year_week_of_year,\n    cast(date_part('weekiso', d.prior_year_over_year_date_day) as \n    int\n) as prior_year_iso_week_of_year,\n\n    cast(date_part('month', d.date_day) as \n    int\n) as month_of_year,\n    to_char(d.date_day, 'MMMM')  as month_name,\n    to_char(d.date_day, 'MON')  as month_name_short,\n\n    cast(date_trunc('month', d.date_day) as date) as month_start_date,\n    cast(cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        month,\n        1,\n        date_trunc('month', d.date_day)\n        )\n\n\n        )\n\n\n        as date) as date) as month_end_date,\n\n    cast(date_trunc('month', d.prior_year_date_day) as date) as prior_year_month_start_date,\n    cast(cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        month,\n        1,\n        date_trunc('month', d.prior_year_date_day)\n        )\n\n\n        )\n\n\n        as date) as date) as prior_year_month_end_date,\n\n    cast(date_part('quarter', d.date_day) as \n    int\n) as quarter_of_year,\n    cast(date_trunc('quarter', d.date_day) as date) as quarter_start_date,\n    cast(cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        quarter,\n        1,\n        date_trunc('quarter', d.date_day)\n        )\n\n\n        )\n\n\n        as date) as date) as quarter_end_date,\n\n    cast(date_part('year', d.date_day) as \n    int\n) as year_number,\n    cast(date_trunc('year', d.date_day) as date) as year_start_date,\n    cast(cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        year,\n        1,\n        date_trunc('year', d.date_day)\n        )\n\n\n        )\n\n\n        as date) as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.core.dim_dates"}, "model.ethereum_models.core__fact_event_logs": {"raw_sql": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true }\n) }}\n\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    event_index,\n    contract_address,\n    contract_name,\n    event_name,\n    event_inputs,\n    topics,\n    DATA,\n    event_removed,\n    tx_status,\n    _log_id\nFROM\n    {{ ref('silver__logs') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.ethereum_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "core", "fqn": ["ethereum_models", "gold", "core__fact_event_logs"], "unique_id": "model.ethereum_models.core__fact_event_logs", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "gold/core__fact_event_logs.sql", "original_file_path": "models/gold/core__fact_event_logs.sql", "name": "core__fact_event_logs", "alias": "fact_event_logs", "checksum": {"name": "sha256", "checksum": "29f93e13a4b2e570184152057cd213f07e0553d98206a9675ae4adf94850513d"}, "tags": [], "refs": [["silver__logs"]], "sources": [], "description": "This table contains flattened event logs from transactions on the Ethereum Blockchain. Transactions may have multiple events, which are denoted by the event index for a transaction hash. Therefore, this table is unique on the combination of transaction hash and event index. Event names are decoded in this table where possible. The event inputs column will contain the log details in JSON format. Specific fields can be pulled from this column using the following sample format: ```event_inputs:<FILED_NAME>::<DATA TYPE> as <FIELD_NAME>```.", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "Also known as block height. The block number, which indicates the length of the blockchain, increases after the addition of each new block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block was produced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed. This field will not be unique in this table, as a given transaction can include multiple events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_INDEX": {"name": "EVENT_INDEX", "description": "Event number within a transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "The address interacted with for a given event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_NAME": {"name": "CONTRACT_NAME", "description": "The name of the contract or token, where possible.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_NAME": {"name": "EVENT_NAME", "description": "The decoded event name for a given event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_INPUTS": {"name": "EVENT_INPUTS", "description": "The decoded event inputs for a given event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOPICS": {"name": "TOPICS", "description": "The un-decoded event input topics.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DATA": {"name": "DATA", "description": "The un-decoded event data.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_REMOVED": {"name": "EVENT_REMOVED", "description": "Whether the event has been removed from the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_LOG_ID": {"name": "_LOG_ID", "description": "This is the primary key for this table. This is a concatenation of the transaction hash and the event index at which the event occurred. This field can be used within other event based tables such as ```fact_transfers``` & ```ez_token_transfers```.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_STATUS": {"name": "TX_STATUS", "description": "Status of the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "The function signature of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "The from address at the transaction level.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "The to address at the transaction level.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_models://models/gold/core__fact_event_logs.yml", "compiled_path": "target/compiled/ethereum_models/models/gold/core__fact_event_logs.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1654351204.659081, "compiled_sql": "\n\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_function_signature,\n    origin_from_address,\n    origin_to_address,\n    event_index,\n    contract_address,\n    contract_name,\n    event_name,\n    event_inputs,\n    topics,\n    DATA,\n    event_removed,\n    tx_status,\n    _log_id\nFROM\n    ETHEREUM_DEV.silver.logs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.core.fact_event_logs"}, "model.ethereum_models.core__dim_contracts": {"raw_sql": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true }\n) }}\n\nSELECT\n    address,\n    symbol,\n    NAME,\n    decimals,\n    contract_metadata\nFROM\n    {{ ref('silver__contracts') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.ethereum_models.silver__contracts"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "core", "fqn": ["ethereum_models", "gold", "core__dim_contracts"], "unique_id": "model.ethereum_models.core__dim_contracts", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "gold/core__dim_contracts.sql", "original_file_path": "models/gold/core__dim_contracts.sql", "name": "core__dim_contracts", "alias": "dim_contracts", "checksum": {"name": "sha256", "checksum": "8bb0b60ca82d8da265b566d0aa8633f124fe2165019af7820479e000e7218905"}, "tags": [], "refs": [["silver__contracts"]], "sources": [], "description": "This table contains contract details for contracts deployed on the Ethereum blockchain.", "columns": {"ADDRESS": {"name": "ADDRESS", "description": "The unique Ethereum address of the deployed contract.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYMBOL": {"name": "SYMBOL", "description": "The symbol used to represent this contract. Please note this is not necessarily unique.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NAME": {"name": "NAME", "description": "The name of the deployed contract. Please note this is not necessarily unique.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "DECIMALS": {"name": "DECIMALS", "description": "The number of decimal places this contract needs adjusted where token values exist. For example, use the decimal field to correctly transform raw amounts in ```fact_token_transfers```.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_METADATA": {"name": "CONTRACT_METADATA", "description": "This JSON column contains other relevant details for each contract.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_models://models/gold/core__dim_contracts.yml", "compiled_path": "target/compiled/ethereum_models/models/gold/core__dim_contracts.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1654351204.57691, "compiled_sql": "\n\nSELECT\n    address,\n    symbol,\n    NAME,\n    decimals,\n    contract_metadata\nFROM\n    ETHEREUM_DEV.silver.contracts", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.core.dim_contracts"}, "model.ethereum_models.core__dim_labels": {"raw_sql": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true }\n) }}\n\nSELECT\n    blockchain,\n    creator,\n    address,\n    address_name,\n    label_type,\n    label_subtype,\n    label\nFROM\n    {{ source(\n        'flipside_gold_ethereum',\n        'labels'\n    ) }}\nWHERE\n    blockchain = 'ethereum'\n    AND address LIKE '0x%'", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.ethereum_models.flipside_gold_ethereum.labels"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "core", "fqn": ["ethereum_models", "gold", "core__dim_labels"], "unique_id": "model.ethereum_models.core__dim_labels", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "gold/core__dim_labels.sql", "original_file_path": "models/gold/core__dim_labels.sql", "name": "core__dim_labels", "alias": "dim_labels", "checksum": {"name": "sha256", "checksum": "cb8ab9ed453b9a4b06a3bccfe62679121c4adc00acf802148e312a21ade088b4"}, "tags": [], "refs": [], "sources": [["flipside_gold_ethereum", "labels"]], "description": "This table contains labels for addresses on the Ethereum Blockchain.", "columns": {"BLOCKCHAIN": {"name": "BLOCKCHAIN", "description": "The name of the blockchain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR": {"name": "CREATOR", "description": "The name of the creator of the label.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS": {"name": "ADDRESS", "description": "Address that the label is for. This is the field that should be used to join other tables with labels.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ADDRESS_NAME": {"name": "ADDRESS_NAME", "description": "This table contains labels for addresses on the Ethereum Blockchain.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL_TYPE": {"name": "LABEL_TYPE", "description": "A high-level category describing the addresses main function or ownership.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL_SUBTYPE": {"name": "LABEL_SUBTYPE", "description": "A sub-category nested within label type providing further detail.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "LABEL": {"name": "LABEL", "description": "The label for this address.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_models://models/gold/core__dim_labels.yml", "compiled_path": "target/compiled/ethereum_models/models/gold/core__dim_labels.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1654351204.5801349, "compiled_sql": "\n\nSELECT\n    blockchain,\n    creator,\n    address,\n    address_name,\n    label_type,\n    label_subtype,\n    label\nFROM\n    flipside_prod_db.ethereum.labels\nWHERE\n    blockchain = 'ethereum'\n    AND address LIKE '0x%'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.core.dim_labels"}, "model.ethereum_models.core__sv_dim_labels": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = true,\n    pre_hook = \"call silver.sp_create_cross_db_share_clones()\",\n    post_hook = \"{{ grant_data_share_statement('SV_DIM_LABELS', 'VIEW') }}\"\n) }}\n\nSELECT\n    *\nFROM\n    {{ source('ethereum_share','labels')}}\nWHERE\n    blockchain = 'ethereum'\n    AND address LIKE '0x%'", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.ethereum_models.grant_data_share_statement"], "nodes": ["source.ethereum_models.ethereum_share.labels"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "secure": true, "post-hook": [{"sql": "{{ grant_data_share_statement('SV_DIM_LABELS', 'VIEW') }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "call silver.sp_create_cross_db_share_clones()", "transaction": true, "index": null}]}, "database": "ETHEREUM_DEV", "schema": "core", "fqn": ["ethereum_models", "gold", "secure_views", "core__sv_dim_labels"], "unique_id": "model.ethereum_models.core__sv_dim_labels", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "gold/secure_views/core__sv_dim_labels.sql", "original_file_path": "models/gold/secure_views/core__sv_dim_labels.sql", "name": "core__sv_dim_labels", "alias": "sv_dim_labels", "checksum": {"name": "sha256", "checksum": "9dc53ccd2951f0aff8872e596514e174bd747986056b2a0482c50613827b5cf5"}, "tags": [], "refs": [], "sources": [["ethereum_share", "labels"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/secure_views/core__sv_dim_labels.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "secure": true, "pre-hook": ["call silver.sp_create_cross_db_share_clones()"], "post-hook": ["{{ grant_data_share_statement('SV_DIM_LABELS', 'VIEW') }}"]}, "created_at": 1654351202.17229, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    ETHEREUM_DEV.silver.labels\nWHERE\n    blockchain = 'ethereum'\n    AND address LIKE '0x%'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.core.sv_dim_labels"}, "model.ethereum_models.core__sv_fact_blocks": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = true,\n    post_hook = \"{{ grant_data_share_statement('SV_FACT_BLOCKS', 'VIEW') }}\"\n) }}\n\nSELECT\n    *\nFROM\n    {{ ref('core__fact_blocks') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.ethereum_models.grant_data_share_statement"], "nodes": ["model.ethereum_models.core__fact_blocks"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "secure": true, "post-hook": [{"sql": "{{ grant_data_share_statement('SV_FACT_BLOCKS', 'VIEW') }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "core", "fqn": ["ethereum_models", "gold", "secure_views", "core__sv_fact_blocks"], "unique_id": "model.ethereum_models.core__sv_fact_blocks", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "gold/secure_views/core__sv_fact_blocks.sql", "original_file_path": "models/gold/secure_views/core__sv_fact_blocks.sql", "name": "core__sv_fact_blocks", "alias": "sv_fact_blocks", "checksum": {"name": "sha256", "checksum": "635f17f5f46b6dfba1f16e12ad4500ea1f4fcca06b4f59fc1b8a0c2e93841934"}, "tags": [], "refs": [["core__fact_blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/secure_views/core__sv_fact_blocks.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "secure": true, "post-hook": ["{{ grant_data_share_statement('SV_FACT_BLOCKS', 'VIEW') }}"]}, "created_at": 1654351202.178171, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    ETHEREUM_DEV.core.fact_blocks", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.core.sv_fact_blocks"}, "model.ethereum_models.core__sv_fact_traces": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = true,\n    post_hook = \"{{ grant_data_share_statement('SV_FACT_TRACES', 'VIEW') }}\"\n) }}\n\nSELECT\n    *\nFROM\n    {{ ref('core__fact_traces') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.ethereum_models.grant_data_share_statement"], "nodes": ["model.ethereum_models.core__fact_traces"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "secure": true, "post-hook": [{"sql": "{{ grant_data_share_statement('SV_FACT_TRACES', 'VIEW') }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "core", "fqn": ["ethereum_models", "gold", "secure_views", "core__sv_fact_traces"], "unique_id": "model.ethereum_models.core__sv_fact_traces", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "gold/secure_views/core__sv_fact_traces.sql", "original_file_path": "models/gold/secure_views/core__sv_fact_traces.sql", "name": "core__sv_fact_traces", "alias": "sv_fact_traces", "checksum": {"name": "sha256", "checksum": "8d3317066cc25a54bf3fc4fd122fe93c3a358f126f89fb6ddd6c2c1fa21e5816"}, "tags": [], "refs": [["core__fact_traces"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/secure_views/core__sv_fact_traces.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "secure": true, "post-hook": ["{{ grant_data_share_statement('SV_FACT_TRACES', 'VIEW') }}"]}, "created_at": 1654351202.184244, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    ETHEREUM_DEV.core.fact_traces", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.core.sv_fact_traces"}, "model.ethereum_models.core__sv_ez_eth_transfers": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = true,\n    post_hook = \"{{ grant_data_share_statement('SV_EZ_ETH_TRANSFERS', 'VIEW') }}\"\n) }}\n\nSELECT\n    *\nFROM\n    {{ ref('core__ez_eth_transfers') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.ethereum_models.grant_data_share_statement"], "nodes": ["model.ethereum_models.core__ez_eth_transfers"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "secure": true, "post-hook": [{"sql": "{{ grant_data_share_statement('SV_EZ_ETH_TRANSFERS', 'VIEW') }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "core", "fqn": ["ethereum_models", "gold", "secure_views", "core__sv_ez_eth_transfers"], "unique_id": "model.ethereum_models.core__sv_ez_eth_transfers", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "gold/secure_views/core__sv_ez_eth_transfers.sql", "original_file_path": "models/gold/secure_views/core__sv_ez_eth_transfers.sql", "name": "core__sv_ez_eth_transfers", "alias": "sv_ez_eth_transfers", "checksum": {"name": "sha256", "checksum": "8332e197aa0e68f220e1028fe401eaf60617918247367a4be65a604e917596f9"}, "tags": [], "refs": [["core__ez_eth_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/secure_views/core__sv_ez_eth_transfers.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "secure": true, "post-hook": ["{{ grant_data_share_statement('SV_EZ_ETH_TRANSFERS', 'VIEW') }}"]}, "created_at": 1654351202.196158, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    ETHEREUM_DEV.core.ez_eth_transfers", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.core.sv_ez_eth_transfers"}, "model.ethereum_models.core__sv_dim_function_signatures": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = true,\n    post_hook = \"{{ grant_data_share_statement('SV_DIM_FUNCTION_SIGNATURES', 'VIEW') }}\"\n) }}\n\nSELECT\n    *\nFROM\n    {{ ref('core__dim_function_signatures') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.ethereum_models.grant_data_share_statement"], "nodes": ["model.ethereum_models.core__dim_function_signatures"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "secure": true, "post-hook": [{"sql": "{{ grant_data_share_statement('SV_DIM_FUNCTION_SIGNATURES', 'VIEW') }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "core", "fqn": ["ethereum_models", "gold", "secure_views", "core__sv_dim_function_signatures"], "unique_id": "model.ethereum_models.core__sv_dim_function_signatures", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "gold/secure_views/core__sv_dim_function_signatures.sql", "original_file_path": "models/gold/secure_views/core__sv_dim_function_signatures.sql", "name": "core__sv_dim_function_signatures", "alias": "sv_dim_function_signatures", "checksum": {"name": "sha256", "checksum": "4458900c6bc331fc7e90b167170c2fbff1a0ee76e6fddc7a349dcc085efb0400"}, "tags": [], "refs": [["core__dim_function_signatures"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/secure_views/core__sv_dim_function_signatures.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "secure": true, "post-hook": ["{{ grant_data_share_statement('SV_DIM_FUNCTION_SIGNATURES', 'VIEW') }}"]}, "created_at": 1654351202.202511, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    ETHEREUM_DEV.core.dim_function_signatures", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.core.sv_dim_function_signatures"}, "model.ethereum_models.core__sv_fact_transactions": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = true,\n    post_hook = \"{{ grant_data_share_statement('SV_FACT_TRANSACTIONS', 'VIEW') }}\"\n) }}\n\nSELECT\n    *\nFROM\n    {{ ref('core__fact_transactions') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.ethereum_models.grant_data_share_statement"], "nodes": ["model.ethereum_models.core__fact_transactions"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "secure": true, "post-hook": [{"sql": "{{ grant_data_share_statement('SV_FACT_TRANSACTIONS', 'VIEW') }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "core", "fqn": ["ethereum_models", "gold", "secure_views", "core__sv_fact_transactions"], "unique_id": "model.ethereum_models.core__sv_fact_transactions", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "gold/secure_views/core__sv_fact_transactions.sql", "original_file_path": "models/gold/secure_views/core__sv_fact_transactions.sql", "name": "core__sv_fact_transactions", "alias": "sv_fact_transactions", "checksum": {"name": "sha256", "checksum": "f99a4a9fd334551a0dd781a15aff588f82b0e5ac9d9fd38d71c9a66ef2f8462f"}, "tags": [], "refs": [["core__fact_transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/secure_views/core__sv_fact_transactions.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "secure": true, "post-hook": ["{{ grant_data_share_statement('SV_FACT_TRANSACTIONS', 'VIEW') }}"]}, "created_at": 1654351202.2082071, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    ETHEREUM_DEV.core.fact_transactions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.core.sv_fact_transactions"}, "model.ethereum_models.core__sv_fact_event_logs": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = true,\n    post_hook = \"{{ grant_data_share_statement('SV_FACT_EVENT_LOGS', 'VIEW') }}\"\n) }}\n\nSELECT\n    *\nFROM\n    {{ ref('core__fact_event_logs') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.ethereum_models.grant_data_share_statement"], "nodes": ["model.ethereum_models.core__fact_event_logs"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "secure": true, "post-hook": [{"sql": "{{ grant_data_share_statement('SV_FACT_EVENT_LOGS', 'VIEW') }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "core", "fqn": ["ethereum_models", "gold", "secure_views", "core__sv_fact_event_logs"], "unique_id": "model.ethereum_models.core__sv_fact_event_logs", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "gold/secure_views/core__sv_fact_event_logs.sql", "original_file_path": "models/gold/secure_views/core__sv_fact_event_logs.sql", "name": "core__sv_fact_event_logs", "alias": "sv_fact_event_logs", "checksum": {"name": "sha256", "checksum": "adc854f287257f5995309ed9eed0dcc8e78338516f2cf4168849691269b9afe2"}, "tags": [], "refs": [["core__fact_event_logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/secure_views/core__sv_fact_event_logs.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "secure": true, "post-hook": ["{{ grant_data_share_statement('SV_FACT_EVENT_LOGS', 'VIEW') }}"]}, "created_at": 1654351202.213863, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    ETHEREUM_DEV.core.fact_event_logs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.core.sv_fact_event_logs"}, "model.ethereum_models.core__sv_fact_token_transfers": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = true,\n    post_hook = \"{{ grant_data_share_statement('SV_FACT_TOKEN_TRANSFERS', 'VIEW') }}\"\n) }}\n\nSELECT\n    *\nFROM\n    {{ ref('core__fact_token_transfers') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.ethereum_models.grant_data_share_statement"], "nodes": ["model.ethereum_models.core__fact_token_transfers"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "secure": true, "post-hook": [{"sql": "{{ grant_data_share_statement('SV_FACT_TOKEN_TRANSFERS', 'VIEW') }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "core", "fqn": ["ethereum_models", "gold", "secure_views", "core__sv_fact_token_transfers"], "unique_id": "model.ethereum_models.core__sv_fact_token_transfers", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "gold/secure_views/core__sv_fact_token_transfers.sql", "original_file_path": "models/gold/secure_views/core__sv_fact_token_transfers.sql", "name": "core__sv_fact_token_transfers", "alias": "sv_fact_token_transfers", "checksum": {"name": "sha256", "checksum": "910fe1620c769bb2602fc347ff86298865ac86bb3f90ef977b984b11161c8614"}, "tags": [], "refs": [["core__fact_token_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/secure_views/core__sv_fact_token_transfers.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "secure": true, "post-hook": ["{{ grant_data_share_statement('SV_FACT_TOKEN_TRANSFERS', 'VIEW') }}"]}, "created_at": 1654351202.22462, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    ETHEREUM_DEV.core.fact_token_transfers", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.core.sv_fact_token_transfers"}, "model.ethereum_models.core__sv_dim_dex_liquidity_pools": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = true,\n    pre_hook = \"call silver.sp_create_cross_db_share_clones()\",\n    post_hook = \"{{ grant_data_share_statement('SV_DIM_DEX_LIQUIDITY_POOLS', 'VIEW') }}\"\n) }}\n\nSELECT\n    *\nFROM\n    {{ source('ethereum_share','dex_liquidity_pools')}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.ethereum_models.grant_data_share_statement"], "nodes": ["source.ethereum_models.ethereum_share.dex_liquidity_pools"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "secure": true, "post-hook": [{"sql": "{{ grant_data_share_statement('SV_DIM_DEX_LIQUIDITY_POOLS', 'VIEW') }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "call silver.sp_create_cross_db_share_clones()", "transaction": true, "index": null}]}, "database": "ETHEREUM_DEV", "schema": "core", "fqn": ["ethereum_models", "gold", "secure_views", "core__sv_dim_dex_liquidity_pools"], "unique_id": "model.ethereum_models.core__sv_dim_dex_liquidity_pools", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "gold/secure_views/core__sv_dim_dex_liquidity_pools.sql", "original_file_path": "models/gold/secure_views/core__sv_dim_dex_liquidity_pools.sql", "name": "core__sv_dim_dex_liquidity_pools", "alias": "sv_dim_dex_liquidity_pools", "checksum": {"name": "sha256", "checksum": "4cc2f81442ca16d7f0f8c089c70015c6626b91466e2443762e6e200ca1efd138"}, "tags": [], "refs": [], "sources": [["ethereum_share", "dex_liquidity_pools"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/secure_views/core__sv_dim_dex_liquidity_pools.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "secure": true, "pre-hook": ["call silver.sp_create_cross_db_share_clones()"], "post-hook": ["{{ grant_data_share_statement('SV_DIM_DEX_LIQUIDITY_POOLS', 'VIEW') }}"]}, "created_at": 1654351202.231166, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    ETHEREUM_DEV.silver.dex_liquidity_pools", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.core.sv_dim_dex_liquidity_pools"}, "model.ethereum_models.core__sv_dim_contracts": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = true,\n    post_hook = \"{{ grant_data_share_statement('SV_DIM_CONTRACTS', 'VIEW') }}\"\n) }}\n\nSELECT\n    *\nFROM\n    {{ ref('core__dim_contracts') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.ethereum_models.grant_data_share_statement"], "nodes": ["model.ethereum_models.core__dim_contracts"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "secure": true, "post-hook": [{"sql": "{{ grant_data_share_statement('SV_DIM_CONTRACTS', 'VIEW') }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "core", "fqn": ["ethereum_models", "gold", "secure_views", "core__sv_dim_contracts"], "unique_id": "model.ethereum_models.core__sv_dim_contracts", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "gold/secure_views/core__sv_dim_contracts.sql", "original_file_path": "models/gold/secure_views/core__sv_dim_contracts.sql", "name": "core__sv_dim_contracts", "alias": "sv_dim_contracts", "checksum": {"name": "sha256", "checksum": "6d20526a4eab0d98158cc370008e6333e32f753c991c2157dec872f793013463"}, "tags": [], "refs": [["core__dim_contracts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/secure_views/core__sv_dim_contracts.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "secure": true, "post-hook": ["{{ grant_data_share_statement('SV_DIM_CONTRACTS', 'VIEW') }}"]}, "created_at": 1654351202.2367759, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    ETHEREUM_DEV.core.dim_contracts", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.core.sv_dim_contracts"}, "model.ethereum_models.core__sv_fact_hourly_token_prices": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = true,\n    pre_hook = \"call silver.sp_create_cross_db_share_clones()\",\n    post_hook = \"{{ grant_data_share_statement('SV_FACT_HOURLY_TOKEN_PRICES', 'VIEW') }}\"\n) }}\n\nSELECT\n    *\nFROM\n    {{ source('ethereum_share','token_prices_hourly')}}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.ethereum_models.grant_data_share_statement"], "nodes": ["source.ethereum_models.ethereum_share.token_prices_hourly"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "secure": true, "post-hook": [{"sql": "{{ grant_data_share_statement('SV_FACT_HOURLY_TOKEN_PRICES', 'VIEW') }}", "transaction": true, "index": null}], "pre-hook": [{"sql": "call silver.sp_create_cross_db_share_clones()", "transaction": true, "index": null}]}, "database": "ETHEREUM_DEV", "schema": "core", "fqn": ["ethereum_models", "gold", "secure_views", "core__sv_fact_hourly_token_prices"], "unique_id": "model.ethereum_models.core__sv_fact_hourly_token_prices", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "gold/secure_views/core__sv_fact_hourly_token_prices.sql", "original_file_path": "models/gold/secure_views/core__sv_fact_hourly_token_prices.sql", "name": "core__sv_fact_hourly_token_prices", "alias": "sv_fact_hourly_token_prices", "checksum": {"name": "sha256", "checksum": "e45b0d248f8c8258ca3e18b16987e3a3b89c4c433dfc9173df203304b5ffb625"}, "tags": [], "refs": [], "sources": [["ethereum_share", "token_prices_hourly"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/secure_views/core__sv_fact_hourly_token_prices.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "secure": true, "pre-hook": ["call silver.sp_create_cross_db_share_clones()"], "post-hook": ["{{ grant_data_share_statement('SV_FACT_HOURLY_TOKEN_PRICES', 'VIEW') }}"]}, "created_at": 1654351202.242222, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    ETHEREUM_DEV.silver.token_prices_hourly", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.core.sv_fact_hourly_token_prices"}, "model.ethereum_models.core__sv_dim_event_signatures": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = true,\n    post_hook = \"{{ grant_data_share_statement('SV_DIM_EVENT_SIGNATURES', 'VIEW') }}\"\n) }}\n\nSELECT\n    *\nFROM\n    {{ ref('core__dim_event_signatures') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.ethereum_models.grant_data_share_statement"], "nodes": ["model.ethereum_models.core__dim_event_signatures"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "secure": true, "post-hook": [{"sql": "{{ grant_data_share_statement('SV_DIM_EVENT_SIGNATURES', 'VIEW') }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "core", "fqn": ["ethereum_models", "gold", "secure_views", "core__sv_dim_event_signatures"], "unique_id": "model.ethereum_models.core__sv_dim_event_signatures", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "gold/secure_views/core__sv_dim_event_signatures.sql", "original_file_path": "models/gold/secure_views/core__sv_dim_event_signatures.sql", "name": "core__sv_dim_event_signatures", "alias": "sv_dim_event_signatures", "checksum": {"name": "sha256", "checksum": "aadf2f5aaff93ac786d3b0b0c605374881f1ffa7ff4db6caf2f606a88df3d67f"}, "tags": [], "refs": [["core__dim_event_signatures"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/secure_views/core__sv_dim_event_signatures.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "secure": true, "post-hook": ["{{ grant_data_share_statement('SV_DIM_EVENT_SIGNATURES', 'VIEW') }}"]}, "created_at": 1654351202.248201, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    ETHEREUM_DEV.core.dim_event_signatures", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.core.sv_dim_event_signatures"}, "model.ethereum_models.sushi__ez_swaps": {"raw_sql": "{{ config(\n  materialized = 'incremental',\n  persist_docs ={ \"relation\": true,\n  \"columns\": true },\n  unique_key = '_log_id',\n  cluster_by = ['ingested_at::DATE']\n) }}\n\nSELECT\n  block_number,\n  block_timestamp,\n  tx_hash,\n  origin_function_signature,\n  origin_from_address,\n  origin_to_address,\n  contract_address,\n  pool_name,\n  event_name,\n  amount_in,\n  amount_out,\n  sender,\n  tx_to,\n  event_index,\n  platform,\n  token_in,\n  token_out,\n  symbol_in,\n  symbol_out,\n  amount_in_usd,\n  amount_out_usd,\n  _log_id,\n  ingested_at\nFROM\n  {{ ref('silver_dex__v2_swaps') }}\nWHERE\n  platform = 'sushiswap'\n\n{% if is_incremental() %}\nAND ingested_at >= (\n  SELECT\n    MAX(ingested_at)\n  FROM\n    {{ this }}\n)\n{% endif %}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_models.silver_dex__v2_swaps"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "cluster_by": ["ingested_at::DATE"], "unique_key": "_log_id", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "sushi", "fqn": ["ethereum_models", "Sushi", "sushi__ez_swaps"], "unique_id": "model.ethereum_models.sushi__ez_swaps", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "Sushi/sushi__ez_swaps.sql", "original_file_path": "models/Sushi/sushi__ez_swaps.sql", "name": "sushi__ez_swaps", "alias": "ez_swaps", "checksum": {"name": "sha256", "checksum": "1b28f1a85137898c7e2d0c48a2221ad4d60f1e7ae5cca91810fc4c7e8f2f0d14"}, "tags": [], "refs": [["silver_dex__v2_swaps"]], "sources": [], "description": "This table will contain all swap events done on the Sushiswap platform in the ```fact_event_logs table```, joined along with the addresses of both tokens in the swap and the decimal adjusted prices.", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "Also known as block height. The block number, which indicates the length of the blockchain, increases after the addition of each new block.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The date and time at which the block was produced.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed. This field will not be unique in this table, as a given transaction can include multiple events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CONTRACT_ADDRESS": {"name": "CONTRACT_ADDRESS", "description": "The address interacted with for a given event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_NAME": {"name": "EVENT_NAME", "description": "The decoded event name for a given event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_IN": {"name": "AMOUNT_IN", "description": "The amount of tokens put into the swap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_OUT": {"name": "AMOUNT_OUT", "description": "The amount of tokens taken out of or received from the swap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_IN_USD": {"name": "AMOUNT_IN_USD", "description": "The amount of tokens put into the swap converted to USD using the price of the token.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "AMOUNT_OUT_USD": {"name": "AMOUNT_OUT_USD", "description": "The amount of tokens taken out of or received from the swap converted to USD using the price of the token.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_IN": {"name": "TOKEN_IN", "description": "The address of the token sent for swap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_OUT": {"name": "TOKEN_OUT", "description": "The address of the token being swapped to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYMBOL_IN": {"name": "SYMBOL_IN", "description": "The symbol of the token sent for swap.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SYMBOL_OUT": {"name": "SYMBOL_OUT", "description": "The symbol of the token being swapped to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SENDER": {"name": "SENDER", "description": "The Router is the Sender in the swap function.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_TO": {"name": "TX_TO", "description": "The tx_to is the address who receives the swapped token. This corresponds to the \"to\" field in the swap function.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM": {"name": "PLATFORM", "description": "This field denotes which application the liquidity pool belongs to.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_INDEX": {"name": "EVENT_INDEX", "description": "Event number within a transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_LOG_ID": {"name": "_LOG_ID", "description": "This is the primary key for this table. This is a concatenation of the transaction hash and the event index at which the event occurred. This field can be used within other event based tables such as ```fact_transfers``` & ```ez_token_transfers```.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "The function signature of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "The from address at the transaction level.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "The to address at the transaction level.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_models://models/Sushi/sushi__ez_swaps.yml", "compiled_path": "target/compiled/ethereum_models/models/Sushi/sushi__ez_swaps.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "unique_key": "_log_id", "cluster_by": ["ingested_at::DATE"]}, "created_at": 1654351204.667381, "compiled_sql": "\n\nSELECT\n  block_number,\n  block_timestamp,\n  tx_hash,\n  origin_function_signature,\n  origin_from_address,\n  origin_to_address,\n  contract_address,\n  pool_name,\n  event_name,\n  amount_in,\n  amount_out,\n  sender,\n  tx_to,\n  event_index,\n  platform,\n  token_in,\n  token_out,\n  symbol_in,\n  symbol_out,\n  amount_in_usd,\n  amount_out_usd,\n  _log_id,\n  ingested_at\nFROM\n  ETHEREUM_DEV.silver_dex.v2_swaps\nWHERE\n  platform = 'sushiswap'\n\n\nAND ingested_at >= (\n  SELECT\n    MAX(ingested_at)\n  FROM\n    ETHEREUM_DEV.sushi.ez_swaps\n)\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.sushi.ez_swaps"}, "model.ethereum_models.sushi__dim_distributor_reward_schedule": {"raw_sql": "{{ config(\n    materialized = 'table',\n        ) }}\n\nselect merkle_root,\n        case when merkle_root = '0x015e6c2cd1a4d6fa77aa1884c436b2435aae4beab5c9a091f18fd0c00dc7e577' then cast('2021-10-22 23:10:00' as timestamp_ntz)\n             when merkle_root = '0x2828440576d787582da1af59d0bc0f090e5add2680610dc2ffa53b5a6aa30b07' then cast('2021-10-12 21:47:00' as timestamp_ntz)               \n             end as rewards_snapshot,\n        c.key as address, \n        c.value:index::number as index, \n        silver.js_hex_to_int(\n        c.value :amount :: STRING\n    ) / pow(10,18) AS amount, \n       c.value:proof::array as proof\nfrom {{ source(\n        'sushi_external',\n        'sushi_rewards_schedule'\n    ) }},\ntable(flatten(claims)) c", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["source.ethereum_models.sushi_external.sushi_rewards_schedule"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "table", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "sushi", "fqn": ["ethereum_models", "Sushi", "sushi__dim_distributor_reward_schedule"], "unique_id": "model.ethereum_models.sushi__dim_distributor_reward_schedule", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "Sushi/sushi__dim_distributor_reward_schedule.sql", "original_file_path": "models/Sushi/sushi__dim_distributor_reward_schedule.sql", "name": "sushi__dim_distributor_reward_schedule", "alias": "dim_distributor_reward_schedule", "checksum": {"name": "sha256", "checksum": "043143308b565ebce7bf8d2cb1cd74d5995cc1c5baa872b33628e1359e743b46"}, "tags": [], "refs": [], "sources": [["sushi_external", "sushi_rewards_schedule"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/Sushi/sushi__dim_distributor_reward_schedule.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table"}, "created_at": 1654351202.298465, "compiled_sql": "\n\nselect merkle_root,\n        case when merkle_root = '0x015e6c2cd1a4d6fa77aa1884c436b2435aae4beab5c9a091f18fd0c00dc7e577' then cast('2021-10-22 23:10:00' as timestamp_ntz)\n             when merkle_root = '0x2828440576d787582da1af59d0bc0f090e5add2680610dc2ffa53b5a6aa30b07' then cast('2021-10-12 21:47:00' as timestamp_ntz)               \n             end as rewards_snapshot,\n        c.key as address, \n        c.value:index::number as index, \n        silver.js_hex_to_int(\n        c.value :amount :: STRING\n    ) / pow(10,18) AS amount, \n       c.value:proof::array as proof\nfrom ETHEREUM_DEV.silver.sushi_rewards_schedule,\ntable(flatten(claims)) c", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.sushi.dim_distributor_reward_schedule"}, "test.ethereum_models.silver__transactions__tx-gap": {"raw_sql": "-- depends_on: {{ ref('silver__blocks') }}\n{{ tx_gaps(ref(\"silver__transactions\")) }}", "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.ethereum_models.tx_gaps"], "nodes": ["model.ethereum_models.silver__blocks", "model.ethereum_models.silver__transactions", "model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "silver", "fqn": ["ethereum_models", "ethereum", "silver__transactions__tx-gap"], "unique_id": "test.ethereum_models.silver__transactions__tx-gap", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "ethereum/silver__transactions__tx-gap.sql", "original_file_path": "tests/ethereum/silver__transactions__tx-gap.sql", "name": "silver__transactions__tx-gap", "alias": "transactions", "checksum": {"name": "sha256", "checksum": "65c68258e91e8a03312c4c39f19ef870828c3e9edc28b8b5d2f638ed9bf4e24c"}, "tags": [], "refs": [["silver__blocks"], ["silver__transactions"], ["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/tests/ethereum/silver__transactions__tx-gap.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.310991, "compiled_sql": "-- depends_on: ETHEREUM_DEV.silver.blocks\n\n    WITH block_base AS (\n        SELECT\n            block_number,\n            tx_count\n        FROM\n            ETHEREUM_DEV.silver.blocks\n    ),\n    model_name AS (\n        SELECT\n            block_number,\n            COUNT(\n                DISTINCT tx_hash\n            ) AS model_tx_count\n        FROM\n            ETHEREUM_DEV.silver.transactions\n        GROUP BY\n            block_number\n    )\nSELECT\n    block_base.block_number,\n    tx_count,\n    model_name.block_number,\n    model_tx_count\nFROM\n    block_base\n    LEFT JOIN model_name\n    ON block_base.block_number = model_name.block_number\nWHERE\n    tx_count <> model_tx_count\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "seed.ethereum_models.silver__seed_nft_metadata_upload": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "silver", "fqn": ["ethereum_models", "silver__seed_nft_metadata_upload"], "unique_id": "seed.ethereum_models.silver__seed_nft_metadata_upload", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "silver__seed_nft_metadata_upload.csv", "original_file_path": "data/silver__seed_nft_metadata_upload.csv", "name": "silver__seed_nft_metadata_upload", "alias": "seed_nft_metadata_upload", "checksum": {"name": "sha256", "checksum": "2d9a68aa3ca4b11128dcbc551e4c3a65a93628f098158f88b4c90bb5b3b00328"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.327301, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.silver.seed_nft_metadata_upload"}, "seed.ethereum_models.silver__event_signatures_backfill": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "silver", "fqn": ["ethereum_models", "silver__event_signatures_backfill"], "unique_id": "seed.ethereum_models.silver__event_signatures_backfill", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "silver__event_signatures_backfill.csv", "original_file_path": "data/silver__event_signatures_backfill.csv", "name": "silver__event_signatures_backfill", "alias": "event_signatures_backfill", "checksum": {"name": "path", "checksum": "data/silver__event_signatures_backfill.csv"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.329449, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.silver.event_signatures_backfill"}, "seed.ethereum_models.silver__signatures_backfill": {"raw_sql": "", "compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "seed", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "silver", "fqn": ["ethereum_models", "silver__signatures_backfill"], "unique_id": "seed.ethereum_models.silver__signatures_backfill", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "silver__signatures_backfill.csv", "original_file_path": "data/silver__signatures_backfill.csv", "name": "silver__signatures_backfill", "alias": "signatures_backfill", "checksum": {"name": "path", "checksum": "data/silver__signatures_backfill.csv"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.3310568, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.silver.signatures_backfill"}, "operation.ethereum_models.ethereum_models-on-run-start-0": {"raw_sql": "{{ create_sps() }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.ethereum_models.create_sps"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "ethereum_models-on-run-start-0", "fqn": ["ethereum_models", "hooks", "ethereum_models-on-run-start-0"], "unique_id": "operation.ethereum_models.ethereum_models-on-run-start-0", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "hooks/ethereum_models-on-run-start-0.sql", "original_file_path": "./dbt_project.yml", "name": "ethereum_models-on-run-start-0", "alias": "", "checksum": {"name": "sha256", "checksum": "ef619331d27c696d85361d5b13f860871c391fe52b1f8449334952fb3b6751bd"}, "tags": ["on-run-start"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/./dbt_project.yml/hooks/ethereum_models-on-run-start-0.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.3495722, "compiled_sql": "\n    \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 0}, "operation.ethereum_models.ethereum_models-on-run-start-1": {"raw_sql": "{{ sp_create_load_nft_metadata() }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.ethereum_models.sp_create_load_nft_metadata"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "ethereum_models-on-run-start-1", "fqn": ["ethereum_models", "hooks", "ethereum_models-on-run-start-1"], "unique_id": "operation.ethereum_models.ethereum_models-on-run-start-1", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "hooks/ethereum_models-on-run-start-1.sql", "original_file_path": "./dbt_project.yml", "name": "ethereum_models-on-run-start-1", "alias": "", "checksum": {"name": "sha256", "checksum": "ef619331d27c696d85361d5b13f860871c391fe52b1f8449334952fb3b6751bd"}, "tags": ["on-run-start"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/./dbt_project.yml/hooks/ethereum_models-on-run-start-1.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.354711, "compiled_sql": "\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 1}, "operation.ethereum_models.ethereum_models-on-run-start-2": {"raw_sql": "{{ sp_create_cross_db_share_clones() }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.ethereum_models.sp_create_cross_db_share_clones"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "ethereum_models-on-run-start-2", "fqn": ["ethereum_models", "hooks", "ethereum_models-on-run-start-2"], "unique_id": "operation.ethereum_models.ethereum_models-on-run-start-2", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "hooks/ethereum_models-on-run-start-2.sql", "original_file_path": "./dbt_project.yml", "name": "ethereum_models-on-run-start-2", "alias": "", "checksum": {"name": "sha256", "checksum": "ef619331d27c696d85361d5b13f860871c391fe52b1f8449334952fb3b6751bd"}, "tags": ["on-run-start"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/./dbt_project.yml/hooks/ethereum_models-on-run-start-2.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.361729, "compiled_sql": "\n  \n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 2}, "operation.ethereum_models.ethereum_models-on-run-start-3": {"raw_sql": "{{ create_udfs() }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.ethereum_models.create_udfs"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "ethereum_models-on-run-start-3", "fqn": ["ethereum_models", "hooks", "ethereum_models-on-run-start-3"], "unique_id": "operation.ethereum_models.ethereum_models-on-run-start-3", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "hooks/ethereum_models-on-run-start-3.sql", "original_file_path": "./dbt_project.yml", "name": "ethereum_models-on-run-start-3", "alias": "", "checksum": {"name": "sha256", "checksum": "ef619331d27c696d85361d5b13f860871c391fe52b1f8449334952fb3b6751bd"}, "tags": ["on-run-start"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/./dbt_project.yml/hooks/ethereum_models-on-run-start-3.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.366635, "compiled_sql": "\n    \n    \n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 3}, "test.ethereum_models.not_null_silver__logs_BLOCK_NUMBER.f98b235d4c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__logs_BLOCK_NUMBER"], "unique_id": "test.ethereum_models.not_null_silver__logs_BLOCK_NUMBER.f98b235d4c", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__logs_BLOCK_NUMBER.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_BLOCK_NUMBER", "alias": "logs_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__logs.yml/not_null_silver__logs_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.4652328, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.logs\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__logs"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_NUMBER__NUMBER.73461cc432": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6bced39dcb284fa8dad23c0b49df1248\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6bced39dcb284fa8dad23c0b49df1248", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_NUMBER__NUMBER"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_NUMBER__NUMBER.73461cc432", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_6bced39dcb284fa8dad23c0b49df1248.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_NUMBER__NUMBER", "alias": "logs_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__logs.yml/dbt_expectations_expect_column_6bced39dcb284fa8dad23c0b49df1248.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_6bced39dcb284fa8dad23c0b49df1248"}, "created_at": 1654351202.467238, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INPUTS' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOPICS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_REMOVED' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_STATUS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__logs"}, "test.ethereum_models.not_null_silver__logs_BLOCK_TIMESTAMP.ca6209335c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__logs_BLOCK_TIMESTAMP"], "unique_id": "test.ethereum_models.not_null_silver__logs_BLOCK_TIMESTAMP.ca6209335c", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__logs_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_BLOCK_TIMESTAMP", "alias": "logs_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__logs.yml/not_null_silver__logs_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.478506, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.logs\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__logs"}, "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__logs_BLOCK_TIMESTAMP__day__1.79d0ca0413": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_246437673a44a698488babf02633f091\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_246437673a44a698488babf02633f091", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__logs_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__logs_BLOCK_TIMESTAMP__day__1.79d0ca0413", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_row_va_246437673a44a698488babf02633f091.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__logs_BLOCK_TIMESTAMP__day__1", "alias": "logs_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__logs.yml/dbt_expectations_expect_row_va_246437673a44a698488babf02633f091.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_246437673a44a698488babf02633f091"}, "created_at": 1654351202.48002, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        ETHEREUM_DEV.silver.logs\n    where\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__logs"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c39585c6f3": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3a3eb74bc46de42ee273692cd9b3a7df\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3a3eb74bc46de42ee273692cd9b3a7df", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c39585c6f3", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_3a3eb74bc46de42ee273692cd9b3a7df.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "logs_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__logs.yml/dbt_expectations_expect_column_3a3eb74bc46de42ee273692cd9b3a7df.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_3a3eb74bc46de42ee273692cd9b3a7df"}, "created_at": 1654351202.497486, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INPUTS' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOPICS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_REMOVED' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_STATUS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__logs"}, "test.ethereum_models.not_null_silver__logs_TX_HASH.18b09ee14d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__logs_TX_HASH"], "unique_id": "test.ethereum_models.not_null_silver__logs_TX_HASH.18b09ee14d", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__logs_TX_HASH.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_TX_HASH", "alias": "logs_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__logs.yml/not_null_silver__logs_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.501934, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.logs\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.silver__logs"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_TX_HASH__0_xX_0_9a_fA_F_.0eee0960b6": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6030dcae62096d3ca68fc728e3d15a65\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6030dcae62096d3ca68fc728e3d15a65", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__logs_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_TX_HASH__0_xX_0_9a_fA_F_.0eee0960b6", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_6030dcae62096d3ca68fc728e3d15a65.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__logs_TX_HASH__0_xX_0_9a_fA_F_", "alias": "logs_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__logs.yml/dbt_expectations_expect_column_6030dcae62096d3ca68fc728e3d15a65.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_6030dcae62096d3ca68fc728e3d15a65"}, "created_at": 1654351202.503444, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver.logs\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.silver__logs"}, "test.ethereum_models.not_null_silver__logs_EVENT_INDEX.b97eeb39d7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVENT_INDEX", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__logs_EVENT_INDEX"], "unique_id": "test.ethereum_models.not_null_silver__logs_EVENT_INDEX.b97eeb39d7", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__logs_EVENT_INDEX.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_EVENT_INDEX", "alias": "logs_EVENT_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__logs.yml/not_null_silver__logs_EVENT_INDEX.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.519475, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.logs\nwhere EVENT_INDEX is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EVENT_INDEX", "file_key_name": "models.silver__logs"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INDEX__NUMBER__FLOAT.d0df352178": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c696cc611f4a35c037364ebeebfefb43\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "EVENT_INDEX", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c696cc611f4a35c037364ebeebfefb43", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INDEX__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INDEX__NUMBER__FLOAT.d0df352178", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_c696cc611f4a35c037364ebeebfefb43.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INDEX__NUMBER__FLOAT", "alias": "logs_EVENT_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__logs.yml/dbt_expectations_expect_column_c696cc611f4a35c037364ebeebfefb43.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c696cc611f4a35c037364ebeebfefb43"}, "created_at": 1654351202.5211232, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INPUTS' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOPICS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_REMOVED' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_STATUS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVENT_INDEX'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EVENT_INDEX", "file_key_name": "models.silver__logs"}, "test.ethereum_models.not_null_silver__logs_CONTRACT_ADDRESS.b78d8c86eb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__logs_CONTRACT_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver__logs_CONTRACT_ADDRESS.b78d8c86eb", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__logs_CONTRACT_ADDRESS.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_CONTRACT_ADDRESS", "alias": "logs_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__logs.yml/not_null_silver__logs_CONTRACT_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.525687, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.logs\nwhere CONTRACT_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.silver__logs"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.28bc84b2ae": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8bbb281f525daefe2f856f6c8b08e8e9\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8bbb281f525daefe2f856f6c8b08e8e9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__logs_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.28bc84b2ae", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_8bbb281f525daefe2f856f6c8b08e8e9.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__logs_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_", "alias": "logs_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__logs.yml/dbt_expectations_expect_column_8bbb281f525daefe2f856f6c8b08e8e9.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_8bbb281f525daefe2f856f6c8b08e8e9"}, "created_at": 1654351202.527841, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(CONTRACT_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver.logs\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.silver__logs"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_NAME__STRING__VARCHAR.7af2bc20cd": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3cd4d6e1b11a2401af32000858f05ab5\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "EVENT_NAME", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3cd4d6e1b11a2401af32000858f05ab5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_NAME__STRING__VARCHAR"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_NAME__STRING__VARCHAR.7af2bc20cd", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_3cd4d6e1b11a2401af32000858f05ab5.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_NAME__STRING__VARCHAR", "alias": "logs_EVENT_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__logs.yml/dbt_expectations_expect_column_3cd4d6e1b11a2401af32000858f05ab5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_3cd4d6e1b11a2401af32000858f05ab5"}, "created_at": 1654351202.5332842, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INPUTS' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOPICS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_REMOVED' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_STATUS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVENT_NAME'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EVENT_NAME", "file_key_name": "models.silver__logs"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INPUTS__OBJECT.a903a96237": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ca48036c47d26b7d96bf136183f6f6a5\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["OBJECT"], "column_name": "EVENT_INPUTS", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ca48036c47d26b7d96bf136183f6f6a5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INPUTS__OBJECT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INPUTS__OBJECT.a903a96237", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_ca48036c47d26b7d96bf136183f6f6a5.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INPUTS__OBJECT", "alias": "logs_EVENT_INPUTS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__logs.yml/dbt_expectations_expect_column_ca48036c47d26b7d96bf136183f6f6a5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_ca48036c47d26b7d96bf136183f6f6a5"}, "created_at": 1654351202.538136, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INPUTS' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOPICS' as \n    varchar\n) as relation_column,\n            cast('VARIANT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_REMOVED' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_STATUS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVENT_INPUTS'\n            and\n            relation_column_type not in ('OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EVENT_INPUTS", "file_key_name": "models.silver__logs"}, "test.ethereum_models.not_null_silver__logs_TOPICS.f042e94d85": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOPICS", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__logs_TOPICS"], "unique_id": "test.ethereum_models.not_null_silver__logs_TOPICS.f042e94d85", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__logs_TOPICS.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_TOPICS", "alias": "logs_TOPICS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__logs.yml/not_null_silver__logs_TOPICS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.543541, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.logs\nwhere TOPICS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOPICS", "file_key_name": "models.silver__logs"}, "test.ethereum_models.not_null_silver__logs_DATA.c5fac5c4a4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DATA", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__logs_DATA"], "unique_id": "test.ethereum_models.not_null_silver__logs_DATA.c5fac5c4a4", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__logs_DATA.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_DATA", "alias": "logs_DATA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__logs.yml/not_null_silver__logs_DATA.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.5451388, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.logs\nwhere DATA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DATA", "file_key_name": "models.silver__logs"}, "test.ethereum_models.not_null_silver__logs_EVENT_REMOVED.4f302d08e0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVENT_REMOVED", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__logs_EVENT_REMOVED"], "unique_id": "test.ethereum_models.not_null_silver__logs_EVENT_REMOVED.4f302d08e0", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__logs_EVENT_REMOVED.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_EVENT_REMOVED", "alias": "logs_EVENT_REMOVED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__logs.yml/not_null_silver__logs_EVENT_REMOVED.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.546742, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.logs\nwhere EVENT_REMOVED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EVENT_REMOVED", "file_key_name": "models.silver__logs"}, "test.ethereum_models.not_null_silver__logs__LOG_ID.8c3f196b2a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_LOG_ID", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__logs__LOG_ID"], "unique_id": "test.ethereum_models.not_null_silver__logs__LOG_ID.8c3f196b2a", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__logs__LOG_ID.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs__LOG_ID", "alias": "logs", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__logs.yml/not_null_silver__logs__LOG_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.548516, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.logs\nwhere _LOG_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_LOG_ID", "file_key_name": "models.silver__logs"}, "test.ethereum_models.not_null_silver__logs_ORIGIN_FUNCTION_SIGNATURE.ed647f3e17": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FUNCTION_SIGNATURE", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__logs_ORIGIN_FUNCTION_SIGNATURE"], "unique_id": "test.ethereum_models.not_null_silver__logs_ORIGIN_FUNCTION_SIGNATURE.ed647f3e17", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__logs_ORIGIN_FUNCTION_SIGNATURE.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_ORIGIN_FUNCTION_SIGNATURE", "alias": "logs_ORIGIN_FUNCTION_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__logs.yml/not_null_silver__logs_ORIGIN_FUNCTION_SIGNATURE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.550215, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.logs\nwhere ORIGIN_FUNCTION_SIGNATURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FUNCTION_SIGNATURE", "file_key_name": "models.silver__logs"}, "test.ethereum_models.not_null_silver__logs_ORIGIN_FROM_ADDRESS.1759538d91": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__logs_ORIGIN_FROM_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver__logs_ORIGIN_FROM_ADDRESS.1759538d91", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__logs_ORIGIN_FROM_ADDRESS.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "not_null_silver__logs_ORIGIN_FROM_ADDRESS", "alias": "logs_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__logs.yml/not_null_silver__logs_ORIGIN_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.551924, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.logs\nwhere ORIGIN_FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.silver__logs"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.a59d6ffc6a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e1301d0c4df2c6cf4bb726a830884900\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e1301d0c4df2c6cf4bb726a830884900", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.a59d6ffc6a", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_e1301d0c4df2c6cf4bb726a830884900.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "logs_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__logs.yml/dbt_expectations_expect_column_e1301d0c4df2c6cf4bb726a830884900.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e1301d0c4df2c6cf4bb726a830884900"}, "created_at": 1654351202.5535119, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver.logs\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.silver__logs"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.869407dadd": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_505e723dd043eda11bc88c8bb8ae33f6\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__logs"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_505e723dd043eda11bc88c8bb8ae33f6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.869407dadd", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_505e723dd043eda11bc88c8bb8ae33f6.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "logs_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__logs.yml/dbt_expectations_expect_column_505e723dd043eda11bc88c8bb8ae33f6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_505e723dd043eda11bc88c8bb8ae33f6"}, "created_at": 1654351202.558465, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver.logs\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.silver__logs"}, "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__logs__LOG_ID.780efa90bd": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_LOG_ID"], "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["ethereum_models", "silver", "dbt_utils_unique_combination_of_columns_silver__logs__LOG_ID"], "unique_id": "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__logs__LOG_ID.780efa90bd", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_utils_unique_combination_of_columns_silver__logs__LOG_ID.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "dbt_utils_unique_combination_of_columns_silver__logs__LOG_ID", "alias": "logs", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__logs.yml/dbt_utils_unique_combination_of_columns_silver__logs__LOG_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.5632021, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _LOG_ID\n    from ETHEREUM_DEV.silver.logs\n    group by _LOG_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__logs"}, "test.ethereum_models.sequence_gaps_silver__logs_EVENT_INDEX__BLOCK_NUMBER__TX_HASH.8b3582ee4a": {"raw_sql": "{{ test_sequence_gaps(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP < CURRENT_DATE\") }}", "test_metadata": {"name": "sequence_gaps", "kwargs": {"partition_by": ["BLOCK_NUMBER", "TX_HASH"], "column_name": "EVENT_INDEX", "model": "{{ get_where_subquery(ref('silver__logs')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.ethereum_models.test_sequence_gaps", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__logs"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCK_TIMESTAMP < CURRENT_DATE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "sequence_gaps_silver", "fqn": ["ethereum_models", "silver", "sequence_gaps_silver__logs_EVENT_INDEX__BLOCK_NUMBER__TX_HASH"], "unique_id": "test.ethereum_models.sequence_gaps_silver__logs_EVENT_INDEX__BLOCK_NUMBER__TX_HASH.8b3582ee4a", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "sequence_gaps_silver__logs_EVENT_INDEX__BLOCK_NUMBER__TX_HASH.sql", "original_file_path": "models/silver/silver__logs.yml", "name": "sequence_gaps_silver__logs_EVENT_INDEX__BLOCK_NUMBER__TX_HASH", "alias": "logs_EVENT_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__logs"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__logs.yml/sequence_gaps_silver__logs_EVENT_INDEX__BLOCK_NUMBER__TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "BLOCK_TIMESTAMP < CURRENT_DATE"}, "created_at": 1654351202.573546, "compiled_sql": "WITH source AS (\n    SELECT\n        BLOCK_NUMBER, TX_HASH,\n        EVENT_INDEX,\n        LAG(\n            EVENT_INDEX,\n            1\n        ) over (\n            PARTITION BY BLOCK_NUMBER, TX_HASH\n            ORDER BY\n                EVENT_INDEX ASC\n        ) AS prev_EVENT_INDEX\n    FROM\n        (select * from ETHEREUM_DEV.silver.logs where BLOCK_TIMESTAMP < CURRENT_DATE) dbt_subquery\n)\nSELECT\n    BLOCK_NUMBER, TX_HASH,\n    prev_EVENT_INDEX,\n    EVENT_INDEX,\n    EVENT_INDEX - prev_EVENT_INDEX\n    - 1 AS gap\nFROM\n    source\nWHERE\n    EVENT_INDEX - prev_EVENT_INDEX <> 1\nORDER BY\n    gap DESC ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__logs"}, "test.ethereum_models.not_null_silver__blocks_BLOCK_NUMBER.3ed5bd5a97": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__blocks_BLOCK_NUMBER"], "unique_id": "test.ethereum_models.not_null_silver__blocks_BLOCK_NUMBER.3ed5bd5a97", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__blocks_BLOCK_NUMBER.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_BLOCK_NUMBER", "alias": "blocks_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.yml/not_null_silver__blocks_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.5888839, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.blocks\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__blocks"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_NUMBER__NUMBER__FLOAT.5e6997665c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7e05ea22080deb3c6bc0a6264fd73f41\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7e05ea22080deb3c6bc0a6264fd73f41", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_NUMBER__NUMBER__FLOAT.5e6997665c", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_7e05ea22080deb3c6bc0a6264fd73f41.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "blocks_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_7e05ea22080deb3c6bc0a6264fd73f41.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_7e05ea22080deb3c6bc0a6264fd73f41"}, "created_at": 1654351202.5907571, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NETWORK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EXTRA_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PARENT_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('MINER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SHA3_UNCLES' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIZE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('UNCLE_BLOCKS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEADER_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__blocks"}, "test.ethereum_models.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__blocks_BLOCK_TIMESTAMP"], "unique_id": "test.ethereum_models.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__blocks_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_BLOCK_TIMESTAMP", "alias": "blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.yml/not_null_silver__blocks_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.5957649, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.blocks\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__blocks"}, "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1.3844f6e7d3": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_59f17192e0f2a3ba8e68b2c9a7ff0692\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_59f17192e0f2a3ba8e68b2c9a7ff0692", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1.3844f6e7d3", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_row_va_59f17192e0f2a3ba8e68b2c9a7ff0692.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1", "alias": "blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.yml/dbt_expectations_expect_row_va_59f17192e0f2a3ba8e68b2c9a7ff0692.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_59f17192e0f2a3ba8e68b2c9a7ff0692"}, "created_at": 1654351202.597387, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        ETHEREUM_DEV.silver.blocks\n    where\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__blocks"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "blocks_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_2ee4d8ce0368be721e1f5e161b194f27"}, "created_at": 1654351202.603094, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NETWORK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EXTRA_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PARENT_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('MINER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SHA3_UNCLES' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIZE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('UNCLE_BLOCKS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEADER_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__blocks"}, "test.ethereum_models.not_null_silver__blocks_NETWORK.65d2a5d7b1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NETWORK", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__blocks_NETWORK"], "unique_id": "test.ethereum_models.not_null_silver__blocks_NETWORK.65d2a5d7b1", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__blocks_NETWORK.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_NETWORK", "alias": "blocks_NETWORK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.yml/not_null_silver__blocks_NETWORK.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.6077619, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.blocks\nwhere NETWORK is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NETWORK", "file_key_name": "models.silver__blocks"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NETWORK__STRING__VARCHAR.31e2a1e5bd": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1cef2f83b795118726572883c9991bd1\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "NETWORK", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1cef2f83b795118726572883c9991bd1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NETWORK__STRING__VARCHAR"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NETWORK__STRING__VARCHAR.31e2a1e5bd", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_1cef2f83b795118726572883c9991bd1.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NETWORK__STRING__VARCHAR", "alias": "blocks_NETWORK", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_1cef2f83b795118726572883c9991bd1.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_1cef2f83b795118726572883c9991bd1"}, "created_at": 1654351202.6096158, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NETWORK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EXTRA_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PARENT_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('MINER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SHA3_UNCLES' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIZE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('UNCLE_BLOCKS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEADER_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'NETWORK'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NETWORK", "file_key_name": "models.silver__blocks"}, "test.ethereum_models.not_null_silver__blocks_BLOCKCHAIN.c3e6e8be96": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__blocks_BLOCKCHAIN"], "unique_id": "test.ethereum_models.not_null_silver__blocks_BLOCKCHAIN.c3e6e8be96", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__blocks_BLOCKCHAIN.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_BLOCKCHAIN", "alias": "blocks_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.yml/not_null_silver__blocks_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.614274, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.blocks\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__blocks"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCKCHAIN__STRING__VARCHAR.01a66b1dcd": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c04728f705e33131533b5963a999d26d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c04728f705e33131533b5963a999d26d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCKCHAIN__STRING__VARCHAR"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCKCHAIN__STRING__VARCHAR.01a66b1dcd", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_c04728f705e33131533b5963a999d26d.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCKCHAIN__STRING__VARCHAR", "alias": "blocks_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_c04728f705e33131533b5963a999d26d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c04728f705e33131533b5963a999d26d"}, "created_at": 1654351202.616043, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NETWORK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EXTRA_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PARENT_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('MINER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SHA3_UNCLES' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIZE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('UNCLE_BLOCKS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEADER_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCKCHAIN'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCKCHAIN", "file_key_name": "models.silver__blocks"}, "test.ethereum_models.not_null_silver__blocks_TX_COUNT.34525b51e6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_COUNT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__blocks_TX_COUNT"], "unique_id": "test.ethereum_models.not_null_silver__blocks_TX_COUNT.34525b51e6", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__blocks_TX_COUNT.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_TX_COUNT", "alias": "blocks_TX_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.yml/not_null_silver__blocks_TX_COUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.620302, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.blocks\nwhere TX_COUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_COUNT", "file_key_name": "models.silver__blocks"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT.9486c781f5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_57647135d3191ca6bcc33dccc86d30b7\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TX_COUNT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_57647135d3191ca6bcc33dccc86d30b7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT.9486c781f5", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_57647135d3191ca6bcc33dccc86d30b7.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT", "alias": "blocks_TX_COUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_57647135d3191ca6bcc33dccc86d30b7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_57647135d3191ca6bcc33dccc86d30b7"}, "created_at": 1654351202.6225128, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NETWORK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EXTRA_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PARENT_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('MINER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SHA3_UNCLES' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIZE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('UNCLE_BLOCKS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEADER_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_COUNT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_COUNT", "file_key_name": "models.silver__blocks"}, "test.ethereum_models.not_null_silver__blocks_DIFFICULTY.dfd6bb7310": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "DIFFICULTY", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__blocks_DIFFICULTY"], "unique_id": "test.ethereum_models.not_null_silver__blocks_DIFFICULTY.dfd6bb7310", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__blocks_DIFFICULTY.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_DIFFICULTY", "alias": "blocks_DIFFICULTY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.yml/not_null_silver__blocks_DIFFICULTY.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.626824, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.blocks\nwhere DIFFICULTY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIFFICULTY", "file_key_name": "models.silver__blocks"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_DIFFICULTY__NUMBER__FLOAT.4b5343dd2c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ed68d3dda75fcab39e15e42c73e545ac\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "DIFFICULTY", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ed68d3dda75fcab39e15e42c73e545ac", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_DIFFICULTY__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_DIFFICULTY__NUMBER__FLOAT.4b5343dd2c", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_ed68d3dda75fcab39e15e42c73e545ac.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_DIFFICULTY__NUMBER__FLOAT", "alias": "blocks_DIFFICULTY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_ed68d3dda75fcab39e15e42c73e545ac.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_ed68d3dda75fcab39e15e42c73e545ac"}, "created_at": 1654351202.628692, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NETWORK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EXTRA_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PARENT_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('MINER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SHA3_UNCLES' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIZE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('UNCLE_BLOCKS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEADER_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DIFFICULTY'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DIFFICULTY", "file_key_name": "models.silver__blocks"}, "test.ethereum_models.not_null_silver__blocks_TOTAL_DIFFICULTY.64edc4b2a9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_DIFFICULTY", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__blocks_TOTAL_DIFFICULTY"], "unique_id": "test.ethereum_models.not_null_silver__blocks_TOTAL_DIFFICULTY.64edc4b2a9", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__blocks_TOTAL_DIFFICULTY.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_TOTAL_DIFFICULTY", "alias": "blocks_TOTAL_DIFFICULTY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.yml/not_null_silver__blocks_TOTAL_DIFFICULTY.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.633235, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.blocks\nwhere TOTAL_DIFFICULTY is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOTAL_DIFFICULTY", "file_key_name": "models.silver__blocks"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TOTAL_DIFFICULTY__NUMBER__FLOAT.4a0213cf40": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2ff09b420fb96365118952812fcba5b0\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TOTAL_DIFFICULTY", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2ff09b420fb96365118952812fcba5b0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TOTAL_DIFFICULTY__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TOTAL_DIFFICULTY__NUMBER__FLOAT.4a0213cf40", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_2ff09b420fb96365118952812fcba5b0.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TOTAL_DIFFICULTY__NUMBER__FLOAT", "alias": "blocks_TOTAL_DIFFICULTY", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_2ff09b420fb96365118952812fcba5b0.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_2ff09b420fb96365118952812fcba5b0"}, "created_at": 1654351202.634741, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NETWORK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EXTRA_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PARENT_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('MINER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SHA3_UNCLES' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIZE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('UNCLE_BLOCKS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEADER_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TOTAL_DIFFICULTY'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOTAL_DIFFICULTY", "file_key_name": "models.silver__blocks"}, "test.ethereum_models.not_null_silver__blocks_EXTRA_DATA.7b7824f6ea": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EXTRA_DATA", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__blocks_EXTRA_DATA"], "unique_id": "test.ethereum_models.not_null_silver__blocks_EXTRA_DATA.7b7824f6ea", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__blocks_EXTRA_DATA.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_EXTRA_DATA", "alias": "blocks_EXTRA_DATA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.yml/not_null_silver__blocks_EXTRA_DATA.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.6395562, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.blocks\nwhere EXTRA_DATA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EXTRA_DATA", "file_key_name": "models.silver__blocks"}, "test.ethereum_models.not_null_silver__blocks_GAS_LIMIT.a66366ccf7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAS_LIMIT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__blocks_GAS_LIMIT"], "unique_id": "test.ethereum_models.not_null_silver__blocks_GAS_LIMIT.a66366ccf7", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__blocks_GAS_LIMIT.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_GAS_LIMIT", "alias": "blocks_GAS_LIMIT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.yml/not_null_silver__blocks_GAS_LIMIT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.6411781, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.blocks\nwhere GAS_LIMIT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "GAS_LIMIT", "file_key_name": "models.silver__blocks"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_LIMIT__NUMBER__FLOAT.c009cca74d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1daa86559d61b508d00b01f9f99af80a\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "GAS_LIMIT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1daa86559d61b508d00b01f9f99af80a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_LIMIT__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_LIMIT__NUMBER__FLOAT.c009cca74d", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_1daa86559d61b508d00b01f9f99af80a.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_LIMIT__NUMBER__FLOAT", "alias": "blocks_GAS_LIMIT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_1daa86559d61b508d00b01f9f99af80a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_1daa86559d61b508d00b01f9f99af80a"}, "created_at": 1654351202.642851, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NETWORK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EXTRA_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PARENT_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('MINER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SHA3_UNCLES' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIZE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('UNCLE_BLOCKS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEADER_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'GAS_LIMIT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "GAS_LIMIT", "file_key_name": "models.silver__blocks"}, "test.ethereum_models.not_null_silver__blocks_GAS_USED.637b37099a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAS_USED", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__blocks_GAS_USED"], "unique_id": "test.ethereum_models.not_null_silver__blocks_GAS_USED.637b37099a", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__blocks_GAS_USED.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_GAS_USED", "alias": "blocks_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.yml/not_null_silver__blocks_GAS_USED.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.647455, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.blocks\nwhere GAS_USED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "GAS_USED", "file_key_name": "models.silver__blocks"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_USED__NUMBER__FLOAT.bde7aa758f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f415928bbbf31687059ff7dbbfbd150b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "GAS_USED", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f415928bbbf31687059ff7dbbfbd150b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_USED__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_USED__NUMBER__FLOAT.bde7aa758f", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_f415928bbbf31687059ff7dbbfbd150b.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_USED__NUMBER__FLOAT", "alias": "blocks_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_f415928bbbf31687059ff7dbbfbd150b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_f415928bbbf31687059ff7dbbfbd150b"}, "created_at": 1654351202.649258, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NETWORK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EXTRA_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PARENT_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('MINER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SHA3_UNCLES' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIZE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('UNCLE_BLOCKS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEADER_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'GAS_USED'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "GAS_USED", "file_key_name": "models.silver__blocks"}, "test.ethereum_models.not_null_silver__blocks_HASH.bc44a39f94": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__blocks_HASH"], "unique_id": "test.ethereum_models.not_null_silver__blocks_HASH.bc44a39f94", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__blocks_HASH.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_HASH", "alias": "blocks_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.yml/not_null_silver__blocks_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.653908, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.blocks\nwhere HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "HASH", "file_key_name": "models.silver__blocks"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_HASH__0_xX_0_9a_fA_F_.923a822bca": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c1de592817bfb7ff003239c7e695b890\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c1de592817bfb7ff003239c7e695b890", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__blocks_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_HASH__0_xX_0_9a_fA_F_.923a822bca", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_c1de592817bfb7ff003239c7e695b890.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__blocks_HASH__0_xX_0_9a_fA_F_", "alias": "blocks_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_c1de592817bfb7ff003239c7e695b890.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c1de592817bfb7ff003239c7e695b890"}, "created_at": 1654351202.6554859, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver.blocks\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "HASH", "file_key_name": "models.silver__blocks"}, "test.ethereum_models.not_null_silver__blocks_PARENT_HASH.a17a399346": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PARENT_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__blocks_PARENT_HASH"], "unique_id": "test.ethereum_models.not_null_silver__blocks_PARENT_HASH.a17a399346", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__blocks_PARENT_HASH.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_PARENT_HASH", "alias": "blocks_PARENT_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.yml/not_null_silver__blocks_PARENT_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.6618109, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.blocks\nwhere PARENT_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PARENT_HASH", "file_key_name": "models.silver__blocks"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_PARENT_HASH__0_xX_0_9a_fA_F_.164fb6eb16": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5ab97ce7ef94821c9e7507b522f5063b\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "PARENT_HASH", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5ab97ce7ef94821c9e7507b522f5063b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__blocks_PARENT_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_PARENT_HASH__0_xX_0_9a_fA_F_.164fb6eb16", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_5ab97ce7ef94821c9e7507b522f5063b.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__blocks_PARENT_HASH__0_xX_0_9a_fA_F_", "alias": "blocks_PARENT_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_5ab97ce7ef94821c9e7507b522f5063b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_5ab97ce7ef94821c9e7507b522f5063b"}, "created_at": 1654351202.663717, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(PARENT_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver.blocks\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PARENT_HASH", "file_key_name": "models.silver__blocks"}, "test.ethereum_models.not_null_silver__blocks_MINER.c17f6cbb87": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "MINER", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__blocks_MINER"], "unique_id": "test.ethereum_models.not_null_silver__blocks_MINER.c17f6cbb87", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__blocks_MINER.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_MINER", "alias": "blocks_MINER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.yml/not_null_silver__blocks_MINER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.6684391, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.blocks\nwhere MINER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "MINER", "file_key_name": "models.silver__blocks"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_MINER__0_xX_0_9a_fA_F_.7e8cc9ca0b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a2ff9e6809e3f772c0d4c8ca8112dd8e\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "MINER", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a2ff9e6809e3f772c0d4c8ca8112dd8e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__blocks_MINER__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_MINER__0_xX_0_9a_fA_F_.7e8cc9ca0b", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_a2ff9e6809e3f772c0d4c8ca8112dd8e.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__blocks_MINER__0_xX_0_9a_fA_F_", "alias": "blocks_MINER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_a2ff9e6809e3f772c0d4c8ca8112dd8e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_a2ff9e6809e3f772c0d4c8ca8112dd8e"}, "created_at": 1654351202.670083, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(MINER, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver.blocks\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "MINER", "file_key_name": "models.silver__blocks"}, "test.ethereum_models.not_null_silver__blocks_NONCE.10c0698884": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NONCE", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__blocks_NONCE"], "unique_id": "test.ethereum_models.not_null_silver__blocks_NONCE.10c0698884", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__blocks_NONCE.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_NONCE", "alias": "blocks_NONCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.yml/not_null_silver__blocks_NONCE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.674573, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.blocks\nwhere NONCE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NONCE", "file_key_name": "models.silver__blocks"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_NONCE__0_xX_0_9a_fA_F_.0f55c64955": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9f1652571b7ac6fa920df47a87242455\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "NONCE", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9f1652571b7ac6fa920df47a87242455", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__blocks_NONCE__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_NONCE__0_xX_0_9a_fA_F_.0f55c64955", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_9f1652571b7ac6fa920df47a87242455.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__blocks_NONCE__0_xX_0_9a_fA_F_", "alias": "blocks_NONCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_9f1652571b7ac6fa920df47a87242455.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_9f1652571b7ac6fa920df47a87242455"}, "created_at": 1654351202.676221, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(NONCE, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver.blocks\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NONCE", "file_key_name": "models.silver__blocks"}, "test.ethereum_models.not_null_silver__blocks_RECEIPTS_ROOT.cd3163505f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RECEIPTS_ROOT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__blocks_RECEIPTS_ROOT"], "unique_id": "test.ethereum_models.not_null_silver__blocks_RECEIPTS_ROOT.cd3163505f", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__blocks_RECEIPTS_ROOT.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_RECEIPTS_ROOT", "alias": "blocks_RECEIPTS_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.yml/not_null_silver__blocks_RECEIPTS_ROOT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.6810482, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.blocks\nwhere RECEIPTS_ROOT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RECEIPTS_ROOT", "file_key_name": "models.silver__blocks"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_RECEIPTS_ROOT__0_xX_0_9a_fA_F_.6964f6dc30": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_928c7d0ac4503aa3fba357dc439448d3\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "RECEIPTS_ROOT", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_928c7d0ac4503aa3fba357dc439448d3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__blocks_RECEIPTS_ROOT__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_RECEIPTS_ROOT__0_xX_0_9a_fA_F_.6964f6dc30", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_928c7d0ac4503aa3fba357dc439448d3.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__blocks_RECEIPTS_ROOT__0_xX_0_9a_fA_F_", "alias": "blocks_RECEIPTS_ROOT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_928c7d0ac4503aa3fba357dc439448d3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_928c7d0ac4503aa3fba357dc439448d3"}, "created_at": 1654351202.68281, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(RECEIPTS_ROOT, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver.blocks\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RECEIPTS_ROOT", "file_key_name": "models.silver__blocks"}, "test.ethereum_models.not_null_silver__blocks_SHA3_UNCLES.e7c903103e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SHA3_UNCLES", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__blocks_SHA3_UNCLES"], "unique_id": "test.ethereum_models.not_null_silver__blocks_SHA3_UNCLES.e7c903103e", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__blocks_SHA3_UNCLES.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_SHA3_UNCLES", "alias": "blocks_SHA3_UNCLES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.yml/not_null_silver__blocks_SHA3_UNCLES.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.687417, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.blocks\nwhere SHA3_UNCLES is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SHA3_UNCLES", "file_key_name": "models.silver__blocks"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_SHA3_UNCLES__0_xX_0_9a_fA_F_.c74b2fa922": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_154155f901daaab522c7c97e397e6479\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "SHA3_UNCLES", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_154155f901daaab522c7c97e397e6479", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__blocks_SHA3_UNCLES__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_SHA3_UNCLES__0_xX_0_9a_fA_F_.c74b2fa922", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_154155f901daaab522c7c97e397e6479.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__blocks_SHA3_UNCLES__0_xX_0_9a_fA_F_", "alias": "blocks_SHA3_UNCLES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_154155f901daaab522c7c97e397e6479.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_154155f901daaab522c7c97e397e6479"}, "created_at": 1654351202.68927, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(SHA3_UNCLES, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver.blocks\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SHA3_UNCLES", "file_key_name": "models.silver__blocks"}, "test.ethereum_models.not_null_silver__blocks_SIZE.f1fa8f466b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SIZE", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__blocks_SIZE"], "unique_id": "test.ethereum_models.not_null_silver__blocks_SIZE.f1fa8f466b", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__blocks_SIZE.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_SIZE", "alias": "blocks_SIZE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.yml/not_null_silver__blocks_SIZE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.6936178, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.blocks\nwhere SIZE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SIZE", "file_key_name": "models.silver__blocks"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_SIZE__NUMBER.7f2a8fc982": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c12c48f401fb508673d875e88736b875\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "SIZE", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c12c48f401fb508673d875e88736b875", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_SIZE__NUMBER"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_SIZE__NUMBER.7f2a8fc982", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_c12c48f401fb508673d875e88736b875.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_SIZE__NUMBER", "alias": "blocks_SIZE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_c12c48f401fb508673d875e88736b875.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c12c48f401fb508673d875e88736b875"}, "created_at": 1654351202.695901, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NETWORK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EXTRA_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PARENT_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('MINER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SHA3_UNCLES' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIZE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('UNCLE_BLOCKS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEADER_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SIZE'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SIZE", "file_key_name": "models.silver__blocks"}, "test.ethereum_models.not_null_silver__blocks_BLOCK_HEADER_JSON.98268f8f2b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HEADER_JSON", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__blocks_BLOCK_HEADER_JSON"], "unique_id": "test.ethereum_models.not_null_silver__blocks_BLOCK_HEADER_JSON.98268f8f2b", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__blocks_BLOCK_HEADER_JSON.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "not_null_silver__blocks_BLOCK_HEADER_JSON", "alias": "blocks_BLOCK_HEADER_JSON", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.yml/not_null_silver__blocks_BLOCK_HEADER_JSON.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.700396, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.blocks\nwhere BLOCK_HEADER_JSON is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_HEADER_JSON", "file_key_name": "models.silver__blocks"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HEADER_JSON__OBJECT.1be6a88f28": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3ef449a2e3d542bf9a2fb0d78d544691\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["OBJECT"], "column_name": "BLOCK_HEADER_JSON", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3ef449a2e3d542bf9a2fb0d78d544691", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HEADER_JSON__OBJECT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HEADER_JSON__OBJECT.1be6a88f28", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_3ef449a2e3d542bf9a2fb0d78d544691.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HEADER_JSON__OBJECT", "alias": "blocks_BLOCK_HEADER_JSON", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.yml/dbt_expectations_expect_column_3ef449a2e3d542bf9a2fb0d78d544691.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_3ef449a2e3d542bf9a2fb0d78d544691"}, "created_at": 1654351202.702328, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NETWORK' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_COUNT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_DIFFICULTY' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EXTRA_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PARENT_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('MINER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RECEIPTS_ROOT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SHA3_UNCLES' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SIZE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('UNCLE_BLOCKS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HEADER_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_HEADER_JSON'\n            and\n            relation_column_type not in ('OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_HEADER_JSON", "file_key_name": "models.silver__blocks"}, "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_NUMBER.58d43342ca": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_29324c86efadd806a7aa4bc13c3aac08\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCK_NUMBER"], "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_29324c86efadd806a7aa4bc13c3aac08", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["ethereum_models", "silver", "dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_NUMBER"], "unique_id": "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_NUMBER.58d43342ca", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_utils_unique_combination_o_29324c86efadd806a7aa4bc13c3aac08.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_NUMBER", "alias": "blocks_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.yml/dbt_utils_unique_combination_o_29324c86efadd806a7aa4bc13c3aac08.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_29324c86efadd806a7aa4bc13c3aac08"}, "created_at": 1654351202.706364, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCK_NUMBER\n    from ETHEREUM_DEV.silver.blocks\n    group by BLOCK_NUMBER\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__blocks"}, "test.ethereum_models.sequence_gaps_silver__blocks_BLOCK_NUMBER.4a1c166840": {"raw_sql": "{{ test_sequence_gaps(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP < CURRENT_DATE - 1 AND BLOCK_NUMBER > 9265469\") }}", "test_metadata": {"name": "sequence_gaps", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__blocks')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.ethereum_models.test_sequence_gaps", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__blocks"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCK_TIMESTAMP < CURRENT_DATE - 1 AND BLOCK_NUMBER > 9265469", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "sequence_gaps_silver", "fqn": ["ethereum_models", "silver", "sequence_gaps_silver__blocks_BLOCK_NUMBER"], "unique_id": "test.ethereum_models.sequence_gaps_silver__blocks_BLOCK_NUMBER.4a1c166840", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "sequence_gaps_silver__blocks_BLOCK_NUMBER.sql", "original_file_path": "models/silver/silver__blocks.yml", "name": "sequence_gaps_silver__blocks_BLOCK_NUMBER", "alias": "blocks_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__blocks"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__blocks.yml/sequence_gaps_silver__blocks_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "BLOCK_TIMESTAMP < CURRENT_DATE - 1 AND BLOCK_NUMBER > 9265469"}, "created_at": 1654351202.711089, "compiled_sql": "WITH source AS (\n    SELECT\n        \n        BLOCK_NUMBER,\n        LAG(\n            BLOCK_NUMBER,\n            1\n        ) over (\n            \n            ORDER BY\n                BLOCK_NUMBER ASC\n        ) AS prev_BLOCK_NUMBER\n    FROM\n        (select * from ETHEREUM_DEV.silver.blocks where BLOCK_TIMESTAMP < CURRENT_DATE - 1 AND BLOCK_NUMBER > 9265469) dbt_subquery\n)\nSELECT\n    \n    prev_BLOCK_NUMBER,\n    BLOCK_NUMBER,\n    BLOCK_NUMBER - prev_BLOCK_NUMBER\n    - 1 AS gap\nFROM\n    source\nWHERE\n    BLOCK_NUMBER - prev_BLOCK_NUMBER <> 1\nORDER BY\n    gap DESC ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__blocks"}, "test.ethereum_models.not_null_silver__transactions_BLOCK_NUMBER.574ebe21b0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__transactions_BLOCK_NUMBER"], "unique_id": "test.ethereum_models.not_null_silver__transactions_BLOCK_NUMBER.574ebe21b0", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__transactions_BLOCK_NUMBER.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_BLOCK_NUMBER", "alias": "transactions_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transactions.yml/not_null_silver__transactions_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.72297, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.transactions\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__transactions"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_NUMBER__NUMBER__FLOAT.c48e941615": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_05e071a30a52fe01bd86c5f0b2b8b265\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_05e071a30a52fe01bd86c5f0b2b8b265", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_NUMBER__NUMBER__FLOAT.c48e941615", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_05e071a30a52fe01bd86c5f0b2b8b265.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "transactions_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_05e071a30a52fe01bd86c5f0b2b8b265.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_05e071a30a52fe01bd86c5f0b2b8b265"}, "created_at": 1654351202.724828, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POSITION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ETH_VALUE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CUMULATIVE_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EFFECTIVE_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__transactions"}, "test.ethereum_models.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__transactions_BLOCK_TIMESTAMP"], "unique_id": "test.ethereum_models.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__transactions_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_BLOCK_TIMESTAMP", "alias": "transactions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transactions.yml/not_null_silver__transactions_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.729525, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.transactions\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transactions"}, "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__1.cf074498fc": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_7e7ddbc9b4a7dbd76c2af79a27effcdb\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_7e7ddbc9b4a7dbd76c2af79a27effcdb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__1.cf074498fc", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_row_va_7e7ddbc9b4a7dbd76c2af79a27effcdb.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__1", "alias": "transactions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transactions.yml/dbt_expectations_expect_row_va_7e7ddbc9b4a7dbd76c2af79a27effcdb.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_7e7ddbc9b4a7dbd76c2af79a27effcdb"}, "created_at": 1654351202.731285, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        ETHEREUM_DEV.silver.transactions\n    where\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transactions"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bc42693f6e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_867039df339fcae87e7a780c6020a0eb\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_867039df339fcae87e7a780c6020a0eb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bc42693f6e", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_867039df339fcae87e7a780c6020a0eb.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "transactions_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_867039df339fcae87e7a780c6020a0eb.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_867039df339fcae87e7a780c6020a0eb"}, "created_at": 1654351202.73661, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POSITION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ETH_VALUE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CUMULATIVE_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EFFECTIVE_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transactions"}, "test.ethereum_models.not_null_silver__transactions_TX_HASH.8a2cc32062": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__transactions_TX_HASH"], "unique_id": "test.ethereum_models.not_null_silver__transactions_TX_HASH.8a2cc32062", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__transactions_TX_HASH.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_TX_HASH", "alias": "transactions_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transactions.yml/not_null_silver__transactions_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.740811, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.transactions\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.silver__transactions"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TX_HASH__0_xX_0_9a_fA_F_.558497d3b6": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_084333e99c2867404db31712b1bd21ec\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_084333e99c2867404db31712b1bd21ec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TX_HASH__0_xX_0_9a_fA_F_.558497d3b6", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_084333e99c2867404db31712b1bd21ec.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TX_HASH__0_xX_0_9a_fA_F_", "alias": "transactions_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_084333e99c2867404db31712b1bd21ec.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_084333e99c2867404db31712b1bd21ec"}, "created_at": 1654351202.74235, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver.transactions\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.silver__transactions"}, "test.ethereum_models.not_null_silver__transactions_NONCE.3eac435cf9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NONCE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__transactions_NONCE"], "unique_id": "test.ethereum_models.not_null_silver__transactions_NONCE.3eac435cf9", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__transactions_NONCE.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_NONCE", "alias": "transactions_NONCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transactions.yml/not_null_silver__transactions_NONCE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.7471008, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.transactions\nwhere NONCE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NONCE", "file_key_name": "models.silver__transactions"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_NONCE__NUMBER__FLOAT.e9f3267e00": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_62dca8692bf0a9aa5386914ec2196f2f\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "NONCE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_62dca8692bf0a9aa5386914ec2196f2f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_NONCE__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_NONCE__NUMBER__FLOAT.e9f3267e00", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_62dca8692bf0a9aa5386914ec2196f2f.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_NONCE__NUMBER__FLOAT", "alias": "transactions_NONCE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_62dca8692bf0a9aa5386914ec2196f2f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_62dca8692bf0a9aa5386914ec2196f2f"}, "created_at": 1654351202.7486022, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POSITION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ETH_VALUE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CUMULATIVE_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EFFECTIVE_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'NONCE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NONCE", "file_key_name": "models.silver__transactions"}, "test.ethereum_models.not_null_silver__transactions_POSITION.6be7c293c7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "POSITION", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__transactions_POSITION"], "unique_id": "test.ethereum_models.not_null_silver__transactions_POSITION.6be7c293c7", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__transactions_POSITION.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_POSITION", "alias": "transactions_POSITION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transactions.yml/not_null_silver__transactions_POSITION.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.7531111, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.transactions\nwhere POSITION is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "POSITION", "file_key_name": "models.silver__transactions"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_POSITION__NUMBER.5d920e939f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_555689e62c9d439cab0c03d27abf490d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER"], "column_name": "POSITION", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_555689e62c9d439cab0c03d27abf490d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_POSITION__NUMBER"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_POSITION__NUMBER.5d920e939f", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_555689e62c9d439cab0c03d27abf490d.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_POSITION__NUMBER", "alias": "transactions_POSITION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_555689e62c9d439cab0c03d27abf490d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_555689e62c9d439cab0c03d27abf490d"}, "created_at": 1654351202.754672, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POSITION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ETH_VALUE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CUMULATIVE_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EFFECTIVE_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'POSITION'\n            and\n            relation_column_type not in ('NUMBER')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "POSITION", "file_key_name": "models.silver__transactions"}, "test.ethereum_models.not_null_silver__transactions_FROM_ADDRESS.002109da43": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__transactions_FROM_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver__transactions_FROM_ADDRESS.002109da43", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__transactions_FROM_ADDRESS.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_FROM_ADDRESS", "alias": "transactions_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transactions.yml/not_null_silver__transactions_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.758968, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.transactions\nwhere FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__transactions"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_FROM_ADDRESS__0_xX_0_9a_fA_F_.48157e7169": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ace827f4f78564d52ce5e48d294e6787\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ace827f4f78564d52ce5e48d294e6787", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__transactions_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_FROM_ADDRESS__0_xX_0_9a_fA_F_.48157e7169", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_ace827f4f78564d52ce5e48d294e6787.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__transactions_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "transactions_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_ace827f4f78564d52ce5e48d294e6787.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_ace827f4f78564d52ce5e48d294e6787"}, "created_at": 1654351202.760771, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver.transactions\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__transactions"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TO_ADDRESS__0_xX_0_9a_fA_F_.6729f77190": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(where=\"TO_ADDRESS IS NOT NULL\",alias=\"dbt_expectations_expect_column_dc2d30f7c379dd83ac67adf5ebd5bf14\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_dc2d30f7c379dd83ac67adf5ebd5bf14", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "TO_ADDRESS IS NOT NULL", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TO_ADDRESS__0_xX_0_9a_fA_F_.6729f77190", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_dc2d30f7c379dd83ac67adf5ebd5bf14.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "transactions_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_dc2d30f7c379dd83ac67adf5ebd5bf14.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "TO_ADDRESS IS NOT NULL", "alias": "dbt_expectations_expect_column_dc2d30f7c379dd83ac67adf5ebd5bf14"}, "created_at": 1654351202.766338, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from (select * from ETHEREUM_DEV.silver.transactions where TO_ADDRESS IS NOT NULL) dbt_subquery\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TO_ADDRESS", "file_key_name": "models.silver__transactions"}, "test.ethereum_models.not_null_silver__transactions_ETH_VALUE.1b920ed67c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ETH_VALUE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__transactions_ETH_VALUE"], "unique_id": "test.ethereum_models.not_null_silver__transactions_ETH_VALUE.1b920ed67c", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__transactions_ETH_VALUE.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_ETH_VALUE", "alias": "transactions_ETH_VALUE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transactions.yml/not_null_silver__transactions_ETH_VALUE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.770793, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.transactions\nwhere ETH_VALUE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ETH_VALUE", "file_key_name": "models.silver__transactions"}, "test.ethereum_models.not_null_silver__transactions_BLOCK_HASH.2c918b73f5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_HASH", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__transactions_BLOCK_HASH"], "unique_id": "test.ethereum_models.not_null_silver__transactions_BLOCK_HASH.2c918b73f5", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__transactions_BLOCK_HASH.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_BLOCK_HASH", "alias": "transactions_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transactions.yml/not_null_silver__transactions_BLOCK_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.772311, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.transactions\nwhere BLOCK_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_HASH", "file_key_name": "models.silver__transactions"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_BLOCK_HASH__0_xX_0_9a_fA_F_.6a7999ad31": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_edb379d8ec7579800d3cdbbe1bc0c0ef\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "BLOCK_HASH", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_edb379d8ec7579800d3cdbbe1bc0c0ef", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__transactions_BLOCK_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_BLOCK_HASH__0_xX_0_9a_fA_F_.6a7999ad31", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_edb379d8ec7579800d3cdbbe1bc0c0ef.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__transactions_BLOCK_HASH__0_xX_0_9a_fA_F_", "alias": "transactions_BLOCK_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_edb379d8ec7579800d3cdbbe1bc0c0ef.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_edb379d8ec7579800d3cdbbe1bc0c0ef"}, "created_at": 1654351202.773816, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(BLOCK_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver.transactions\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_HASH", "file_key_name": "models.silver__transactions"}, "test.ethereum_models.not_null_silver__transactions_GAS_PRICE.9ee195e584": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAS_PRICE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__transactions_GAS_PRICE"], "unique_id": "test.ethereum_models.not_null_silver__transactions_GAS_PRICE.9ee195e584", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__transactions_GAS_PRICE.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_GAS_PRICE", "alias": "transactions_GAS_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transactions.yml/not_null_silver__transactions_GAS_PRICE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.778351, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.transactions\nwhere GAS_PRICE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "GAS_PRICE", "file_key_name": "models.silver__transactions"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_PRICE__NUMBER__FLOAT.7ff329f632": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b1991aaa0f0ac7849860fbbb2c14be39\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "GAS_PRICE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b1991aaa0f0ac7849860fbbb2c14be39", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_PRICE__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_PRICE__NUMBER__FLOAT.7ff329f632", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_b1991aaa0f0ac7849860fbbb2c14be39.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_PRICE__NUMBER__FLOAT", "alias": "transactions_GAS_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_b1991aaa0f0ac7849860fbbb2c14be39.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_b1991aaa0f0ac7849860fbbb2c14be39"}, "created_at": 1654351202.780454, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POSITION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ETH_VALUE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CUMULATIVE_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EFFECTIVE_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'GAS_PRICE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "GAS_PRICE", "file_key_name": "models.silver__transactions"}, "test.ethereum_models.not_null_silver__transactions_GAS_LIMIT.b5ac619228": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAS_LIMIT", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__transactions_GAS_LIMIT"], "unique_id": "test.ethereum_models.not_null_silver__transactions_GAS_LIMIT.b5ac619228", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__transactions_GAS_LIMIT.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_GAS_LIMIT", "alias": "transactions_GAS_LIMIT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transactions.yml/not_null_silver__transactions_GAS_LIMIT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.785063, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.transactions\nwhere GAS_LIMIT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "GAS_LIMIT", "file_key_name": "models.silver__transactions"}, "test.ethereum_models.not_null_silver__transactions_INPUT_DATA.3cc998f5b1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INPUT_DATA", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__transactions_INPUT_DATA"], "unique_id": "test.ethereum_models.not_null_silver__transactions_INPUT_DATA.3cc998f5b1", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__transactions_INPUT_DATA.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_INPUT_DATA", "alias": "transactions_INPUT_DATA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transactions.yml/not_null_silver__transactions_INPUT_DATA.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.787143, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.transactions\nwhere INPUT_DATA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INPUT_DATA", "file_key_name": "models.silver__transactions"}, "test.ethereum_models.not_null_silver__transactions_STATUS.42a484ef7a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "STATUS", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__transactions_STATUS"], "unique_id": "test.ethereum_models.not_null_silver__transactions_STATUS.42a484ef7a", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__transactions_STATUS.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_STATUS", "alias": "transactions_STATUS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transactions.yml/not_null_silver__transactions_STATUS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.788692, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.transactions\nwhere STATUS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "STATUS", "file_key_name": "models.silver__transactions"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver__transactions_STATUS__SUCCESS__FAIL.f4150c7e34": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_872f99065f10c7e61eabddf3c8777c3c\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["SUCCESS", "FAIL"], "column_name": "STATUS", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_872f99065f10c7e61eabddf3c8777c3c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_set_silver__transactions_STATUS__SUCCESS__FAIL"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver__transactions_STATUS__SUCCESS__FAIL.f4150c7e34", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_872f99065f10c7e61eabddf3c8777c3c.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_silver__transactions_STATUS__SUCCESS__FAIL", "alias": "transactions_STATUS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_872f99065f10c7e61eabddf3c8777c3c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_872f99065f10c7e61eabddf3c8777c3c"}, "created_at": 1654351202.7903402, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        STATUS as value_field\n\n    from ETHEREUM_DEV.silver.transactions\n    \n\n),\nset_values as (\n\n    select\n        cast('SUCCESS' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('FAIL' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "STATUS", "file_key_name": "models.silver__transactions"}, "test.ethereum_models.not_null_silver__transactions_GAS_USED.1c943486c0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "GAS_USED", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__transactions_GAS_USED"], "unique_id": "test.ethereum_models.not_null_silver__transactions_GAS_USED.1c943486c0", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__transactions_GAS_USED.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_GAS_USED", "alias": "transactions_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transactions.yml/not_null_silver__transactions_GAS_USED.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.7997289, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.transactions\nwhere GAS_USED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "GAS_USED", "file_key_name": "models.silver__transactions"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT.5308f986d3": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0e2b2dda75a879bf3be8005c2ae5de07\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "GAS_USED", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0e2b2dda75a879bf3be8005c2ae5de07", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT.5308f986d3", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_0e2b2dda75a879bf3be8005c2ae5de07.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT", "alias": "transactions_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_0e2b2dda75a879bf3be8005c2ae5de07.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_0e2b2dda75a879bf3be8005c2ae5de07"}, "created_at": 1654351202.801331, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POSITION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ETH_VALUE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CUMULATIVE_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EFFECTIVE_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'GAS_USED'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "GAS_USED", "file_key_name": "models.silver__transactions"}, "test.ethereum_models.not_null_silver__transactions_CUMULATIVE_GAS_USED.2ff9788f8f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CUMULATIVE_GAS_USED", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__transactions_CUMULATIVE_GAS_USED"], "unique_id": "test.ethereum_models.not_null_silver__transactions_CUMULATIVE_GAS_USED.2ff9788f8f", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__transactions_CUMULATIVE_GAS_USED.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_CUMULATIVE_GAS_USED", "alias": "transactions_CUMULATIVE_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transactions.yml/not_null_silver__transactions_CUMULATIVE_GAS_USED.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.805886, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.transactions\nwhere CUMULATIVE_GAS_USED is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CUMULATIVE_GAS_USED", "file_key_name": "models.silver__transactions"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_CUMULATIVE_GAS_USED__NUMBER__FLOAT.68061c4689": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_45b95261835eb2c24f1f98898c20a8ed\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "CUMULATIVE_GAS_USED", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_45b95261835eb2c24f1f98898c20a8ed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_CUMULATIVE_GAS_USED__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_CUMULATIVE_GAS_USED__NUMBER__FLOAT.68061c4689", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_45b95261835eb2c24f1f98898c20a8ed.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_CUMULATIVE_GAS_USED__NUMBER__FLOAT", "alias": "transactions_CUMULATIVE_GAS_USED", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_45b95261835eb2c24f1f98898c20a8ed.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_45b95261835eb2c24f1f98898c20a8ed"}, "created_at": 1654351202.807632, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POSITION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ETH_VALUE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CUMULATIVE_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EFFECTIVE_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CUMULATIVE_GAS_USED'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CUMULATIVE_GAS_USED", "file_key_name": "models.silver__transactions"}, "test.ethereum_models.not_null_silver__transactions_TX_FEE.f2f0cdc085": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_FEE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__transactions_TX_FEE"], "unique_id": "test.ethereum_models.not_null_silver__transactions_TX_FEE.f2f0cdc085", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__transactions_TX_FEE.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_TX_FEE", "alias": "transactions_TX_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transactions.yml/not_null_silver__transactions_TX_FEE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.8124511, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.transactions\nwhere TX_FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_FEE", "file_key_name": "models.silver__transactions"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_FEE__NUMBER__FLOAT.c56121a801": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0b4d3bcae2ca4f1c43b283711aef3c35\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TX_FEE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0b4d3bcae2ca4f1c43b283711aef3c35", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_FEE__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_FEE__NUMBER__FLOAT.c56121a801", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_0b4d3bcae2ca4f1c43b283711aef3c35.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_FEE__NUMBER__FLOAT", "alias": "transactions_TX_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_0b4d3bcae2ca4f1c43b283711aef3c35.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_0b4d3bcae2ca4f1c43b283711aef3c35"}, "created_at": 1654351202.814236, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POSITION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ETH_VALUE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CUMULATIVE_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EFFECTIVE_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_FEE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_FEE", "file_key_name": "models.silver__transactions"}, "test.ethereum_models.not_null_silver__transactions_EFFECTIVE_GAS_PRICE.fac733dec7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EFFECTIVE_GAS_PRICE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__transactions_EFFECTIVE_GAS_PRICE"], "unique_id": "test.ethereum_models.not_null_silver__transactions_EFFECTIVE_GAS_PRICE.fac733dec7", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__transactions_EFFECTIVE_GAS_PRICE.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_EFFECTIVE_GAS_PRICE", "alias": "transactions_EFFECTIVE_GAS_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transactions.yml/not_null_silver__transactions_EFFECTIVE_GAS_PRICE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.818808, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.transactions\nwhere EFFECTIVE_GAS_PRICE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EFFECTIVE_GAS_PRICE", "file_key_name": "models.silver__transactions"}, "test.ethereum_models.not_null_silver__transactions_TX_JSON.c989b71e6a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_JSON", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__transactions_TX_JSON"], "unique_id": "test.ethereum_models.not_null_silver__transactions_TX_JSON.c989b71e6a", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__transactions_TX_JSON.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_TX_JSON", "alias": "transactions_TX_JSON", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transactions.yml/not_null_silver__transactions_TX_JSON.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.820399, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.transactions\nwhere TX_JSON is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_JSON", "file_key_name": "models.silver__transactions"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_JSON__OBJECT.f6596e98ec": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_06b0aca54d96e39c17a644c62937f0ed\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["OBJECT"], "column_name": "TX_JSON", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_06b0aca54d96e39c17a644c62937f0ed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_JSON__OBJECT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_JSON__OBJECT.f6596e98ec", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_06b0aca54d96e39c17a644c62937f0ed.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_JSON__OBJECT", "alias": "transactions_TX_JSON", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_06b0aca54d96e39c17a644c62937f0ed.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_06b0aca54d96e39c17a644c62937f0ed"}, "created_at": 1654351202.822146, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POSITION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ETH_VALUE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CUMULATIVE_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EFFECTIVE_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_JSON'\n            and\n            relation_column_type not in ('OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_JSON", "file_key_name": "models.silver__transactions"}, "test.ethereum_models.not_null_silver__transactions_INGESTED_AT.98e6b66449": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__transactions_INGESTED_AT"], "unique_id": "test.ethereum_models.not_null_silver__transactions_INGESTED_AT.98e6b66449", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__transactions_INGESTED_AT.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_INGESTED_AT", "alias": "transactions_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transactions.yml/not_null_silver__transactions_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.826594, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.transactions\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.silver__transactions"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_INGESTED_AT__TIMESTAMP_NTZ.c716636b55": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_52f894208921d17a5239f274366ad6f3\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_52f894208921d17a5239f274366ad6f3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_INGESTED_AT__TIMESTAMP_NTZ"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_INGESTED_AT__TIMESTAMP_NTZ.c716636b55", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_52f894208921d17a5239f274366ad6f3.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_INGESTED_AT__TIMESTAMP_NTZ", "alias": "transactions_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transactions.yml/dbt_expectations_expect_column_52f894208921d17a5239f274366ad6f3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_52f894208921d17a5239f274366ad6f3"}, "created_at": 1654351202.828464, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NONCE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POSITION' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ETH_VALUE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_LIMIT' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT_DATA' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('STATUS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CUMULATIVE_GAS_USED' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EFFECTIVE_GAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_JSON' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'INGESTED_AT'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.silver__transactions"}, "test.ethereum_models.not_null_silver__transactions_ORIGIN_FUNCTION_SIGNATURE.6ba6212d68": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FUNCTION_SIGNATURE", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__transactions_ORIGIN_FUNCTION_SIGNATURE"], "unique_id": "test.ethereum_models.not_null_silver__transactions_ORIGIN_FUNCTION_SIGNATURE.6ba6212d68", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__transactions_ORIGIN_FUNCTION_SIGNATURE.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "not_null_silver__transactions_ORIGIN_FUNCTION_SIGNATURE", "alias": "transactions_ORIGIN_FUNCTION_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transactions.yml/not_null_silver__transactions_ORIGIN_FUNCTION_SIGNATURE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.832524, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.transactions\nwhere ORIGIN_FUNCTION_SIGNATURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FUNCTION_SIGNATURE", "file_key_name": "models.silver__transactions"}, "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__transactions_TX_HASH.c217683bc6": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7a84e25f1ca3d82eb9547aa168eb4b32\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["TX_HASH"], "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7a84e25f1ca3d82eb9547aa168eb4b32", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["ethereum_models", "silver", "dbt_utils_unique_combination_of_columns_silver__transactions_TX_HASH"], "unique_id": "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__transactions_TX_HASH.c217683bc6", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_utils_unique_combination_o_7a84e25f1ca3d82eb9547aa168eb4b32.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "dbt_utils_unique_combination_of_columns_silver__transactions_TX_HASH", "alias": "transactions_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transactions.yml/dbt_utils_unique_combination_o_7a84e25f1ca3d82eb9547aa168eb4b32.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_7a84e25f1ca3d82eb9547aa168eb4b32"}, "created_at": 1654351202.834348, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        TX_HASH\n    from ETHEREUM_DEV.silver.transactions\n    group by TX_HASH\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__transactions"}, "test.ethereum_models.sequence_gaps_silver__transactions_POSITION__BLOCK_NUMBER.bb18e3a49e": {"raw_sql": "{{ test_sequence_gaps(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP < CURRENT_DATE\") }}", "test_metadata": {"name": "sequence_gaps", "kwargs": {"partition_by": ["BLOCK_NUMBER"], "column_name": "POSITION", "model": "{{ get_where_subquery(ref('silver__transactions')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.ethereum_models.test_sequence_gaps", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transactions"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCK_TIMESTAMP < CURRENT_DATE", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "sequence_gaps_silver", "fqn": ["ethereum_models", "silver", "sequence_gaps_silver__transactions_POSITION__BLOCK_NUMBER"], "unique_id": "test.ethereum_models.sequence_gaps_silver__transactions_POSITION__BLOCK_NUMBER.bb18e3a49e", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "sequence_gaps_silver__transactions_POSITION__BLOCK_NUMBER.sql", "original_file_path": "models/silver/silver__transactions.yml", "name": "sequence_gaps_silver__transactions_POSITION__BLOCK_NUMBER", "alias": "transactions_POSITION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transactions"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transactions.yml/sequence_gaps_silver__transactions_POSITION__BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "BLOCK_TIMESTAMP < CURRENT_DATE"}, "created_at": 1654351202.839373, "compiled_sql": "WITH source AS (\n    SELECT\n        BLOCK_NUMBER,\n        POSITION,\n        LAG(\n            POSITION,\n            1\n        ) over (\n            PARTITION BY BLOCK_NUMBER\n            ORDER BY\n                POSITION ASC\n        ) AS prev_POSITION\n    FROM\n        (select * from ETHEREUM_DEV.silver.transactions where BLOCK_TIMESTAMP < CURRENT_DATE) dbt_subquery\n)\nSELECT\n    BLOCK_NUMBER,\n    prev_POSITION,\n    POSITION,\n    POSITION - prev_POSITION\n    - 1 AS gap\nFROM\n    source\nWHERE\n    POSITION - prev_POSITION <> 1\nORDER BY\n    gap DESC ", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__transactions"}, "test.ethereum_models.not_null_silver__transfers_BLOCK_NUMBER.d11bbde531": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__transfers_BLOCK_NUMBER"], "unique_id": "test.ethereum_models.not_null_silver__transfers_BLOCK_NUMBER.d11bbde531", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__transfers_BLOCK_NUMBER.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_BLOCK_NUMBER", "alias": "transfers_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transfers.yml/not_null_silver__transfers_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.848298, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.transfers\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__transfers"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_NUMBER__NUMBER__FLOAT.45ecdb8c94": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bd45beacfc40801946216542c2049d02\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bd45beacfc40801946216542c2049d02", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_NUMBER__NUMBER__FLOAT.45ecdb8c94", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_bd45beacfc40801946216542c2049d02.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "transfers_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_bd45beacfc40801946216542c2049d02.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_bd45beacfc40801946216542c2049d02"}, "created_at": 1654351202.8505769, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__transfers"}, "test.ethereum_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__transfers_BLOCK_TIMESTAMP"], "unique_id": "test.ethereum_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__transfers_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_BLOCK_TIMESTAMP", "alias": "transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transfers.yml/not_null_silver__transfers_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.8553119, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.transfers\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transfers"}, "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__1.aef2ec1111": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_0391e7977e8cebd188a1d5fa8d5e5c1d\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_0391e7977e8cebd188a1d5fa8d5e5c1d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__1.aef2ec1111", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_row_va_0391e7977e8cebd188a1d5fa8d5e5c1d.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__1", "alias": "transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transfers.yml/dbt_expectations_expect_row_va_0391e7977e8cebd188a1d5fa8d5e5c1d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_0391e7977e8cebd188a1d5fa8d5e5c1d"}, "created_at": 1654351202.8571799, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        ETHEREUM_DEV.silver.transfers\n    where\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transfers"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.4ccf9184cd": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_aaa4d09592b0234773f61be8de1236a1\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_aaa4d09592b0234773f61be8de1236a1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.4ccf9184cd", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_aaa4d09592b0234773f61be8de1236a1.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_aaa4d09592b0234773f61be8de1236a1.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_aaa4d09592b0234773f61be8de1236a1"}, "created_at": 1654351202.862965, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__transfers"}, "test.ethereum_models.not_null_silver__transfers_TX_HASH.9444c39bdc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__transfers_TX_HASH"], "unique_id": "test.ethereum_models.not_null_silver__transfers_TX_HASH.9444c39bdc", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__transfers_TX_HASH.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_TX_HASH", "alias": "transfers_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transfers.yml/not_null_silver__transfers_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.866831, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.transfers\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.silver__transfers"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TX_HASH__0_xX_0_9a_fA_F_.f25b6d0ca1": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d624337f4f78032513c390b15f119aab\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d624337f4f78032513c390b15f119aab", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TX_HASH__0_xX_0_9a_fA_F_.f25b6d0ca1", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_d624337f4f78032513c390b15f119aab.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TX_HASH__0_xX_0_9a_fA_F_", "alias": "transfers_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_d624337f4f78032513c390b15f119aab.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d624337f4f78032513c390b15f119aab"}, "created_at": 1654351202.868622, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver.transfers\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.silver__transfers"}, "test.ethereum_models.not_null_silver__transfers_CONTRACT_ADDRESS.df8cd401ef": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__transfers_CONTRACT_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver__transfers_CONTRACT_ADDRESS.df8cd401ef", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__transfers_CONTRACT_ADDRESS.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_CONTRACT_ADDRESS", "alias": "transfers_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transfers.yml/not_null_silver__transfers_CONTRACT_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.8729658, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.transfers\nwhere CONTRACT_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.silver__transfers"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.8e89d13bed": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fba7c1e9a17511d04443ec0e84015cde\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fba7c1e9a17511d04443ec0e84015cde", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.8e89d13bed", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_fba7c1e9a17511d04443ec0e84015cde.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_", "alias": "transfers_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_fba7c1e9a17511d04443ec0e84015cde.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_fba7c1e9a17511d04443ec0e84015cde"}, "created_at": 1654351202.874725, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(CONTRACT_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver.transfers\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.silver__transfers"}, "test.ethereum_models.not_null_silver__transfers_FROM_ADDRESS.cc15ca835c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP > '2021-08-01'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCK_TIMESTAMP > '2021-08-01'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__transfers_FROM_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver__transfers_FROM_ADDRESS.cc15ca835c", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__transfers_FROM_ADDRESS.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_FROM_ADDRESS", "alias": "transfers_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transfers.yml/not_null_silver__transfers_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "BLOCK_TIMESTAMP > '2021-08-01'"}, "created_at": 1654351202.8796318, "compiled_sql": "\n    \n    \n\nselect *\nfrom (select * from ETHEREUM_DEV.silver.transfers where BLOCK_TIMESTAMP > '2021-08-01') dbt_subquery\nwhere FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__transfers"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_FROM_ADDRESS__0_xX_0_9a_fA_F_.0479073084": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_11c955c962648507f9afe949f72ead16\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_11c955c962648507f9afe949f72ead16", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_FROM_ADDRESS__0_xX_0_9a_fA_F_.0479073084", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_11c955c962648507f9afe949f72ead16.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "transfers_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_11c955c962648507f9afe949f72ead16.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_11c955c962648507f9afe949f72ead16"}, "created_at": 1654351202.8813272, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver.transfers\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__transfers"}, "test.ethereum_models.not_null_silver__transfers_TO_ADDRESS.2ea6a02b7c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__transfers_TO_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver__transfers_TO_ADDRESS.2ea6a02b7c", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__transfers_TO_ADDRESS.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_TO_ADDRESS", "alias": "transfers_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transfers.yml/not_null_silver__transfers_TO_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.8863099, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.transfers\nwhere TO_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TO_ADDRESS", "file_key_name": "models.silver__transfers"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TO_ADDRESS__0_xX_0_9a_fA_F_.f65ff6bdb6": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_61bceb32252bba56af400b6e097a7cfc\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_61bceb32252bba56af400b6e097a7cfc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TO_ADDRESS__0_xX_0_9a_fA_F_.f65ff6bdb6", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_61bceb32252bba56af400b6e097a7cfc.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "transfers_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_61bceb32252bba56af400b6e097a7cfc.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_61bceb32252bba56af400b6e097a7cfc"}, "created_at": 1654351202.887959, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver.transfers\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TO_ADDRESS", "file_key_name": "models.silver__transfers"}, "test.ethereum_models.not_null_silver__transfers_RAW_AMOUNT.c53823d6c7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RAW_AMOUNT", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__transfers_RAW_AMOUNT"], "unique_id": "test.ethereum_models.not_null_silver__transfers_RAW_AMOUNT.c53823d6c7", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__transfers_RAW_AMOUNT.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_RAW_AMOUNT", "alias": "transfers_RAW_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transfers.yml/not_null_silver__transfers_RAW_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.892452, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.transfers\nwhere RAW_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RAW_AMOUNT", "file_key_name": "models.silver__transfers"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_RAW_AMOUNT__NUMBER__FLOAT.eb70e6172e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_940dd8a16015feb4a7bd93d193e67f0d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "RAW_AMOUNT", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_940dd8a16015feb4a7bd93d193e67f0d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_RAW_AMOUNT__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_RAW_AMOUNT__NUMBER__FLOAT.eb70e6172e", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_940dd8a16015feb4a7bd93d193e67f0d.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_RAW_AMOUNT__NUMBER__FLOAT", "alias": "transfers_RAW_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_940dd8a16015feb4a7bd93d193e67f0d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_940dd8a16015feb4a7bd93d193e67f0d"}, "created_at": 1654351202.894179, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'RAW_AMOUNT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RAW_AMOUNT", "file_key_name": "models.silver__transfers"}, "test.ethereum_models.not_null_silver__transfers__LOG_ID.29bb073a40": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_LOG_ID", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__transfers__LOG_ID"], "unique_id": "test.ethereum_models.not_null_silver__transfers__LOG_ID.29bb073a40", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__transfers__LOG_ID.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers__LOG_ID", "alias": "transfers", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transfers.yml/not_null_silver__transfers__LOG_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.898824, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.transfers\nwhere _LOG_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_LOG_ID", "file_key_name": "models.silver__transfers"}, "test.ethereum_models.not_null_silver__transfers_ORIGIN_FUNCTION_SIGNATURE.c1c149f732": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FUNCTION_SIGNATURE", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__transfers_ORIGIN_FUNCTION_SIGNATURE"], "unique_id": "test.ethereum_models.not_null_silver__transfers_ORIGIN_FUNCTION_SIGNATURE.c1c149f732", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__transfers_ORIGIN_FUNCTION_SIGNATURE.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_ORIGIN_FUNCTION_SIGNATURE", "alias": "transfers_ORIGIN_FUNCTION_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transfers.yml/not_null_silver__transfers_ORIGIN_FUNCTION_SIGNATURE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.9003441, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.transfers\nwhere ORIGIN_FUNCTION_SIGNATURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FUNCTION_SIGNATURE", "file_key_name": "models.silver__transfers"}, "test.ethereum_models.not_null_silver__transfers_ORIGIN_FROM_ADDRESS.30ffa7f127": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__transfers_ORIGIN_FROM_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver__transfers_ORIGIN_FROM_ADDRESS.30ffa7f127", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__transfers_ORIGIN_FROM_ADDRESS.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "not_null_silver__transfers_ORIGIN_FROM_ADDRESS", "alias": "transfers_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transfers.yml/not_null_silver__transfers_ORIGIN_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.902177, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.transfers\nwhere ORIGIN_FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.silver__transfers"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.fb311c6cec": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_57a875c8c76ea04448b1a0fd7cdd4c83\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_57a875c8c76ea04448b1a0fd7cdd4c83", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.fb311c6cec", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_57a875c8c76ea04448b1a0fd7cdd4c83.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "transfers_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_57a875c8c76ea04448b1a0fd7cdd4c83.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_57a875c8c76ea04448b1a0fd7cdd4c83"}, "created_at": 1654351202.903957, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver.transfers\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.silver__transfers"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.81fe3d170a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_485ceed5592c0a003510c7db121e3c6c\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_485ceed5592c0a003510c7db121e3c6c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.81fe3d170a", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_485ceed5592c0a003510c7db121e3c6c.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "transfers_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transfers.yml/dbt_expectations_expect_column_485ceed5592c0a003510c7db121e3c6c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_485ceed5592c0a003510c7db121e3c6c"}, "created_at": 1654351202.909027, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver.transfers\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.silver__transfers"}, "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__transfers__LOG_ID.3ebab76726": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_92e87c768ab455e8d4a45a09a6fd346d\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_LOG_ID"], "model": "{{ get_where_subquery(ref('silver__transfers')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__transfers"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_92e87c768ab455e8d4a45a09a6fd346d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["ethereum_models", "silver", "dbt_utils_unique_combination_of_columns_silver__transfers__LOG_ID"], "unique_id": "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__transfers__LOG_ID.3ebab76726", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_utils_unique_combination_o_92e87c768ab455e8d4a45a09a6fd346d.sql", "original_file_path": "models/silver/silver__transfers.yml", "name": "dbt_utils_unique_combination_of_columns_silver__transfers__LOG_ID", "alias": "transfers", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__transfers.yml/dbt_utils_unique_combination_o_92e87c768ab455e8d4a45a09a6fd346d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_92e87c768ab455e8d4a45a09a6fd346d"}, "created_at": 1654351202.913841, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _LOG_ID\n    from ETHEREUM_DEV.silver.transfers\n    group by _LOG_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__transfers"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_SYSTEM_CREATED_AT__TIMESTAMP_NTZ.b181fa0cf2": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_51b22f541a5c89963742af97de750741\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "SYSTEM_CREATED_AT", "model": "{{ get_where_subquery(ref('silver__contracts_extended')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__contracts_extended"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_51b22f541a5c89963742af97de750741", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_SYSTEM_CREATED_AT__TIMESTAMP_NTZ"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_SYSTEM_CREATED_AT__TIMESTAMP_NTZ.b181fa0cf2", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_51b22f541a5c89963742af97de750741.sql", "original_file_path": "models/silver/silver__contracts_extended.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_SYSTEM_CREATED_AT__TIMESTAMP_NTZ", "alias": "contracts_extended_SYSTEM_CREATED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__contracts_extended"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__contracts_extended.yml/dbt_expectations_expect_column_51b22f541a5c89963742af97de750741.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_51b22f541a5c89963742af97de750741"}, "created_at": 1654351202.9227898, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('SYSTEM_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOGIC_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_CONVENTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('MODEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SYSTEM_CREATED_AT'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SYSTEM_CREATED_AT", "file_key_name": "models.silver__contracts_extended"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_BLOCK_NUMBER__NUMBER__FLOAT.130c12438a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a5c9aaa7f71b3ca1cce74b9b3d574e2d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__contracts_extended')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__contracts_extended"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a5c9aaa7f71b3ca1cce74b9b3d574e2d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_BLOCK_NUMBER__NUMBER__FLOAT.130c12438a", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_a5c9aaa7f71b3ca1cce74b9b3d574e2d.sql", "original_file_path": "models/silver/silver__contracts_extended.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "contracts_extended_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__contracts_extended"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__contracts_extended.yml/dbt_expectations_expect_column_a5c9aaa7f71b3ca1cce74b9b3d574e2d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_a5c9aaa7f71b3ca1cce74b9b3d574e2d"}, "created_at": 1654351202.927451, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('SYSTEM_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOGIC_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_CONVENTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('MODEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__contracts_extended"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.873512a62c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f6a1b080bfc366aceb9ea7eb85beed9a\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__contracts_extended')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__contracts_extended"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f6a1b080bfc366aceb9ea7eb85beed9a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.873512a62c", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_f6a1b080bfc366aceb9ea7eb85beed9a.sql", "original_file_path": "models/silver/silver__contracts_extended.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "contracts_extended_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__contracts_extended"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__contracts_extended.yml/dbt_expectations_expect_column_f6a1b080bfc366aceb9ea7eb85beed9a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_f6a1b080bfc366aceb9ea7eb85beed9a"}, "created_at": 1654351202.932255, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('SYSTEM_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOGIC_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_CONVENTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('MODEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__contracts_extended"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__contracts_extended_CREATOR_ADDRESS__0_xX_0_9a_fA_F_.e7f86e2060": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_df40c5a7c0021b47ae23c6297aca0b27\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "CREATOR_ADDRESS", "model": "{{ get_where_subquery(ref('silver__contracts_extended')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__contracts_extended"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_df40c5a7c0021b47ae23c6297aca0b27", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__contracts_extended_CREATOR_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__contracts_extended_CREATOR_ADDRESS__0_xX_0_9a_fA_F_.e7f86e2060", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_df40c5a7c0021b47ae23c6297aca0b27.sql", "original_file_path": "models/silver/silver__contracts_extended.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__contracts_extended_CREATOR_ADDRESS__0_xX_0_9a_fA_F_", "alias": "contracts_extended_CREATOR_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__contracts_extended"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__contracts_extended.yml/dbt_expectations_expect_column_df40c5a7c0021b47ae23c6297aca0b27.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_df40c5a7c0021b47ae23c6297aca0b27"}, "created_at": 1654351202.9364421, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(CREATOR_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver.contracts_extended\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATOR_ADDRESS", "file_key_name": "models.silver__contracts_extended"}, "test.ethereum_models.not_null_silver__contracts_extended_CONTRACT_ADDRESS.955f4c68be": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('silver__contracts_extended')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__contracts_extended"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__contracts_extended_CONTRACT_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver__contracts_extended_CONTRACT_ADDRESS.955f4c68be", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__contracts_extended_CONTRACT_ADDRESS.sql", "original_file_path": "models/silver/silver__contracts_extended.yml", "name": "not_null_silver__contracts_extended_CONTRACT_ADDRESS", "alias": "contracts_extended_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__contracts_extended"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__contracts_extended.yml/not_null_silver__contracts_extended_CONTRACT_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.940598, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.contracts_extended\nwhere CONTRACT_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.silver__contracts_extended"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__contracts_extended_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.4020521dbd": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_29653322841560693cc3978988bf1921\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('silver__contracts_extended')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__contracts_extended"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_29653322841560693cc3978988bf1921", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__contracts_extended_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__contracts_extended_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.4020521dbd", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_29653322841560693cc3978988bf1921.sql", "original_file_path": "models/silver/silver__contracts_extended.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__contracts_extended_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_", "alias": "contracts_extended_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__contracts_extended"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__contracts_extended.yml/dbt_expectations_expect_column_29653322841560693cc3978988bf1921.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_29653322841560693cc3978988bf1921"}, "created_at": 1654351202.9425259, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(CONTRACT_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver.contracts_extended\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.silver__contracts_extended"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__contracts_extended_LOGIC_ADDRESS__0_xX_0_9a_fA_F_.1a0dc10ba5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b1868c5990d25068cf16d54891198066\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "LOGIC_ADDRESS", "model": "{{ get_where_subquery(ref('silver__contracts_extended')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__contracts_extended"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b1868c5990d25068cf16d54891198066", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__contracts_extended_LOGIC_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__contracts_extended_LOGIC_ADDRESS__0_xX_0_9a_fA_F_.1a0dc10ba5", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_b1868c5990d25068cf16d54891198066.sql", "original_file_path": "models/silver/silver__contracts_extended.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__contracts_extended_LOGIC_ADDRESS__0_xX_0_9a_fA_F_", "alias": "contracts_extended_LOGIC_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__contracts_extended"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__contracts_extended.yml/dbt_expectations_expect_column_b1868c5990d25068cf16d54891198066.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_b1868c5990d25068cf16d54891198066"}, "created_at": 1654351202.946837, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(LOGIC_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver.contracts_extended\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LOGIC_ADDRESS", "file_key_name": "models.silver__contracts_extended"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_TOKEN_CONVENTION__STRING__VARCHAR.8a2cf81ede": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6a6f31851212e121389c601744bf1a24\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "TOKEN_CONVENTION", "model": "{{ get_where_subquery(ref('silver__contracts_extended')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__contracts_extended"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6a6f31851212e121389c601744bf1a24", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_TOKEN_CONVENTION__STRING__VARCHAR"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_TOKEN_CONVENTION__STRING__VARCHAR.8a2cf81ede", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_6a6f31851212e121389c601744bf1a24.sql", "original_file_path": "models/silver/silver__contracts_extended.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_TOKEN_CONVENTION__STRING__VARCHAR", "alias": "contracts_extended_TOKEN_CONVENTION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__contracts_extended"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__contracts_extended.yml/dbt_expectations_expect_column_6a6f31851212e121389c601744bf1a24.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_6a6f31851212e121389c601744bf1a24"}, "created_at": 1654351202.951426, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('SYSTEM_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOGIC_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_CONVENTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('MODEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TOKEN_CONVENTION'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOKEN_CONVENTION", "file_key_name": "models.silver__contracts_extended"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver__contracts_extended_TOKEN_CONVENTION__erc20__erc721__erc1155.e1f3bc8eca": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(where=\"TOKEN_CONVENTION is not null\",alias=\"dbt_expectations_expect_column_6285d4f6d3d89e28a48463e42dd08a70\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["erc20", "erc721", "erc1155"], "column_name": "TOKEN_CONVENTION", "model": "{{ get_where_subquery(ref('silver__contracts_extended')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__contracts_extended"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6285d4f6d3d89e28a48463e42dd08a70", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "TOKEN_CONVENTION is not null", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_set_silver__contracts_extended_TOKEN_CONVENTION__erc20__erc721__erc1155"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver__contracts_extended_TOKEN_CONVENTION__erc20__erc721__erc1155.e1f3bc8eca", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_6285d4f6d3d89e28a48463e42dd08a70.sql", "original_file_path": "models/silver/silver__contracts_extended.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_silver__contracts_extended_TOKEN_CONVENTION__erc20__erc721__erc1155", "alias": "contracts_extended_TOKEN_CONVENTION", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__contracts_extended"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__contracts_extended.yml/dbt_expectations_expect_column_6285d4f6d3d89e28a48463e42dd08a70.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "TOKEN_CONVENTION is not null", "alias": "dbt_expectations_expect_column_6285d4f6d3d89e28a48463e42dd08a70"}, "created_at": 1654351202.956426, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        TOKEN_CONVENTION as value_field\n\n    from (select * from ETHEREUM_DEV.silver.contracts_extended where TOKEN_CONVENTION is not null) dbt_subquery\n    \n\n),\nset_values as (\n\n    select\n        cast('erc20' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('erc721' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('erc1155' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOKEN_CONVENTION", "file_key_name": "models.silver__contracts_extended"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_NAME__STRING__VARCHAR.b69b37b6ff": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_776952163e1c79b92e37af1fae34f924\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "NAME", "model": "{{ get_where_subquery(ref('silver__contracts_extended')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__contracts_extended"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_776952163e1c79b92e37af1fae34f924", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_NAME__STRING__VARCHAR"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_NAME__STRING__VARCHAR.b69b37b6ff", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_776952163e1c79b92e37af1fae34f924.sql", "original_file_path": "models/silver/silver__contracts_extended.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_NAME__STRING__VARCHAR", "alias": "contracts_extended_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__contracts_extended"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__contracts_extended.yml/dbt_expectations_expect_column_776952163e1c79b92e37af1fae34f924.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_776952163e1c79b92e37af1fae34f924"}, "created_at": 1654351202.9618418, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('SYSTEM_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOGIC_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_CONVENTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('MODEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'NAME'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NAME", "file_key_name": "models.silver__contracts_extended"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_SYMBOL__STRING__VARCHAR.346c9f22dc": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4a3ed3da048f9c6c8f0638b45685c640\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "SYMBOL", "model": "{{ get_where_subquery(ref('silver__contracts_extended')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__contracts_extended"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4a3ed3da048f9c6c8f0638b45685c640", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_SYMBOL__STRING__VARCHAR"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_SYMBOL__STRING__VARCHAR.346c9f22dc", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_4a3ed3da048f9c6c8f0638b45685c640.sql", "original_file_path": "models/silver/silver__contracts_extended.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_SYMBOL__STRING__VARCHAR", "alias": "contracts_extended_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__contracts_extended"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__contracts_extended.yml/dbt_expectations_expect_column_4a3ed3da048f9c6c8f0638b45685c640.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_4a3ed3da048f9c6c8f0638b45685c640"}, "created_at": 1654351202.96659, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('SYSTEM_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOGIC_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_CONVENTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('MODEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SYMBOL'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SYMBOL", "file_key_name": "models.silver__contracts_extended"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_DECIMALS__NUMBER__FLOAT.1f393edf99": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_409d8a1640bed17064fc7e5fed6c5385\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "DECIMALS", "model": "{{ get_where_subquery(ref('silver__contracts_extended')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__contracts_extended"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_409d8a1640bed17064fc7e5fed6c5385", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_DECIMALS__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_DECIMALS__NUMBER__FLOAT.1f393edf99", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_409d8a1640bed17064fc7e5fed6c5385.sql", "original_file_path": "models/silver/silver__contracts_extended.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_DECIMALS__NUMBER__FLOAT", "alias": "contracts_extended_DECIMALS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__contracts_extended"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__contracts_extended.yml/dbt_expectations_expect_column_409d8a1640bed17064fc7e5fed6c5385.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_409d8a1640bed17064fc7e5fed6c5385"}, "created_at": 1654351202.971225, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('SYSTEM_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOGIC_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_CONVENTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('MODEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DECIMALS'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DECIMALS", "file_key_name": "models.silver__contracts_extended"}, "test.ethereum_models.not_null_silver__contracts_extended_CONTRACT_METADATA.6fbefddf5b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CONTRACT_METADATA", "model": "{{ get_where_subquery(ref('silver__contracts_extended')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__contracts_extended"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__contracts_extended_CONTRACT_METADATA"], "unique_id": "test.ethereum_models.not_null_silver__contracts_extended_CONTRACT_METADATA.6fbefddf5b", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__contracts_extended_CONTRACT_METADATA.sql", "original_file_path": "models/silver/silver__contracts_extended.yml", "name": "not_null_silver__contracts_extended_CONTRACT_METADATA", "alias": "contracts_extended_CONTRACT_METADATA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__contracts_extended"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__contracts_extended.yml/not_null_silver__contracts_extended_CONTRACT_METADATA.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.9755788, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.contracts_extended\nwhere CONTRACT_METADATA is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CONTRACT_METADATA", "file_key_name": "models.silver__contracts_extended"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_CONTRACT_METADATA__OBJECT.0780253d9f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7ac8e0c5fb835ca55d8e6d0782eda263\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["OBJECT"], "column_name": "CONTRACT_METADATA", "model": "{{ get_where_subquery(ref('silver__contracts_extended')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__contracts_extended"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7ac8e0c5fb835ca55d8e6d0782eda263", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_CONTRACT_METADATA__OBJECT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_CONTRACT_METADATA__OBJECT.0780253d9f", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_7ac8e0c5fb835ca55d8e6d0782eda263.sql", "original_file_path": "models/silver/silver__contracts_extended.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_CONTRACT_METADATA__OBJECT", "alias": "contracts_extended_CONTRACT_METADATA", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__contracts_extended"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__contracts_extended.yml/dbt_expectations_expect_column_7ac8e0c5fb835ca55d8e6d0782eda263.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_7ac8e0c5fb835ca55d8e6d0782eda263"}, "created_at": 1654351202.9778838, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('SYSTEM_CREATED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LOGIC_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_CONVENTION' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('MODEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CONTRACT_METADATA'\n            and\n            relation_column_type not in ('OBJECT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CONTRACT_METADATA", "file_key_name": "models.silver__contracts_extended"}, "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__contracts_extended_CONTRACT_ADDRESS.868e0ffdc1": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_cd7d2371cf72ae6e3b2adf547477c4a8\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["CONTRACT_ADDRESS"], "model": "{{ get_where_subquery(ref('silver__contracts_extended')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__contracts_extended"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_cd7d2371cf72ae6e3b2adf547477c4a8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["ethereum_models", "silver", "dbt_utils_unique_combination_of_columns_silver__contracts_extended_CONTRACT_ADDRESS"], "unique_id": "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__contracts_extended_CONTRACT_ADDRESS.868e0ffdc1", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_utils_unique_combination_o_cd7d2371cf72ae6e3b2adf547477c4a8.sql", "original_file_path": "models/silver/silver__contracts_extended.yml", "name": "dbt_utils_unique_combination_of_columns_silver__contracts_extended_CONTRACT_ADDRESS", "alias": "contracts_extended_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__contracts_extended"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__contracts_extended.yml/dbt_utils_unique_combination_o_cd7d2371cf72ae6e3b2adf547477c4a8.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_cd7d2371cf72ae6e3b2adf547477c4a8"}, "created_at": 1654351202.9822211, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        CONTRACT_ADDRESS\n    from ETHEREUM_DEV.silver.contracts_extended\n    group by CONTRACT_ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__contracts_extended"}, "test.ethereum_models.not_null_silver__nft_transfers_BLOCK_NUMBER.5e11b6866e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__nft_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__nft_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__nft_transfers_BLOCK_NUMBER"], "unique_id": "test.ethereum_models.not_null_silver__nft_transfers_BLOCK_NUMBER.5e11b6866e", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__nft_transfers_BLOCK_NUMBER.sql", "original_file_path": "models/silver/silver__nft_transfers.yml", "name": "not_null_silver__nft_transfers_BLOCK_NUMBER", "alias": "nft_transfers_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__nft_transfers.yml/not_null_silver__nft_transfers_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.990497, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.nft_transfers\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__nft_transfers"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_transfers_BLOCK_NUMBER__NUMBER__FLOAT.6e27938ffc": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6add112b2d8e0c299e30b547af5ab5e1\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__nft_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__nft_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6add112b2d8e0c299e30b547af5ab5e1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_transfers_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_transfers_BLOCK_NUMBER__NUMBER__FLOAT.6e27938ffc", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_6add112b2d8e0c299e30b547af5ab5e1.sql", "original_file_path": "models/silver/silver__nft_transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_transfers_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "nft_transfers_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__nft_transfers.yml/dbt_expectations_expect_column_6add112b2d8e0c299e30b547af5ab5e1.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_6add112b2d8e0c299e30b547af5ab5e1"}, "created_at": 1654351202.9920619, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__nft_transfers"}, "test.ethereum_models.not_null_silver__nft_transfers_BLOCK_TIMESTAMP.376ac811e0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__nft_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__nft_transfers_BLOCK_TIMESTAMP"], "unique_id": "test.ethereum_models.not_null_silver__nft_transfers_BLOCK_TIMESTAMP.376ac811e0", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__nft_transfers_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__nft_transfers.yml", "name": "not_null_silver__nft_transfers_BLOCK_TIMESTAMP", "alias": "nft_transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__nft_transfers.yml/not_null_silver__nft_transfers_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351202.996741, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.nft_transfers\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__nft_transfers"}, "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_transfers_BLOCK_TIMESTAMP__day__1.acbf7aedfe": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_45e6ae25b8c42f8c18dbda9bc5e5b7f7\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__nft_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_45e6ae25b8c42f8c18dbda9bc5e5b7f7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_transfers_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_transfers_BLOCK_TIMESTAMP__day__1.acbf7aedfe", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_row_va_45e6ae25b8c42f8c18dbda9bc5e5b7f7.sql", "original_file_path": "models/silver/silver__nft_transfers.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_transfers_BLOCK_TIMESTAMP__day__1", "alias": "nft_transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__nft_transfers.yml/dbt_expectations_expect_row_va_45e6ae25b8c42f8c18dbda9bc5e5b7f7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_45e6ae25b8c42f8c18dbda9bc5e5b7f7"}, "created_at": 1654351202.998314, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        ETHEREUM_DEV.silver.nft_transfers\n    where\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__nft_transfers"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.dfd77585a5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e750c43f3ffd557a04a136de37795f45\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__nft_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__nft_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e750c43f3ffd557a04a136de37795f45", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.dfd77585a5", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_e750c43f3ffd557a04a136de37795f45.sql", "original_file_path": "models/silver/silver__nft_transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "nft_transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__nft_transfers.yml/dbt_expectations_expect_column_e750c43f3ffd557a04a136de37795f45.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e750c43f3ffd557a04a136de37795f45"}, "created_at": 1654351203.004123, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__nft_transfers"}, "test.ethereum_models.not_null_silver__nft_transfers_TX_HASH.494be13b6d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__nft_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__nft_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__nft_transfers_TX_HASH"], "unique_id": "test.ethereum_models.not_null_silver__nft_transfers_TX_HASH.494be13b6d", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__nft_transfers_TX_HASH.sql", "original_file_path": "models/silver/silver__nft_transfers.yml", "name": "not_null_silver__nft_transfers_TX_HASH", "alias": "nft_transfers_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__nft_transfers.yml/not_null_silver__nft_transfers_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.008724, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.nft_transfers\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.silver__nft_transfers"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__nft_transfers_TX_HASH__0_xX_0_9a_fA_F_.6e7cff5a71": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fb993c97f7f2c06d68854546566bad24\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__nft_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__nft_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fb993c97f7f2c06d68854546566bad24", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__nft_transfers_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__nft_transfers_TX_HASH__0_xX_0_9a_fA_F_.6e7cff5a71", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_fb993c97f7f2c06d68854546566bad24.sql", "original_file_path": "models/silver/silver__nft_transfers.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__nft_transfers_TX_HASH__0_xX_0_9a_fA_F_", "alias": "nft_transfers_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__nft_transfers.yml/dbt_expectations_expect_column_fb993c97f7f2c06d68854546566bad24.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_fb993c97f7f2c06d68854546566bad24"}, "created_at": 1654351203.0106509, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver.nft_transfers\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.silver__nft_transfers"}, "test.ethereum_models.not_null_silver__nft_transfers_CONTRACT_ADDRESS.616fbb7bba": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('silver__nft_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__nft_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__nft_transfers_CONTRACT_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver__nft_transfers_CONTRACT_ADDRESS.616fbb7bba", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__nft_transfers_CONTRACT_ADDRESS.sql", "original_file_path": "models/silver/silver__nft_transfers.yml", "name": "not_null_silver__nft_transfers_CONTRACT_ADDRESS", "alias": "nft_transfers_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__nft_transfers.yml/not_null_silver__nft_transfers_CONTRACT_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.015396, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.nft_transfers\nwhere CONTRACT_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.silver__nft_transfers"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__nft_transfers_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.c796a1205e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_102ca38cde0e2a4d7edf4dff83c80e7b\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('silver__nft_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__nft_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_102ca38cde0e2a4d7edf4dff83c80e7b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__nft_transfers_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__nft_transfers_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.c796a1205e", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_102ca38cde0e2a4d7edf4dff83c80e7b.sql", "original_file_path": "models/silver/silver__nft_transfers.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__nft_transfers_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_", "alias": "nft_transfers_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__nft_transfers.yml/dbt_expectations_expect_column_102ca38cde0e2a4d7edf4dff83c80e7b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_102ca38cde0e2a4d7edf4dff83c80e7b"}, "created_at": 1654351203.0170822, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(CONTRACT_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver.nft_transfers\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.silver__nft_transfers"}, "test.ethereum_models.not_null_silver__nft_transfers_FROM_ADDRESS.b6f4942bc7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP > '2021-08-01'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__nft_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__nft_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCK_TIMESTAMP > '2021-08-01'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__nft_transfers_FROM_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver__nft_transfers_FROM_ADDRESS.b6f4942bc7", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__nft_transfers_FROM_ADDRESS.sql", "original_file_path": "models/silver/silver__nft_transfers.yml", "name": "not_null_silver__nft_transfers_FROM_ADDRESS", "alias": "nft_transfers_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__nft_transfers.yml/not_null_silver__nft_transfers_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "BLOCK_TIMESTAMP > '2021-08-01'"}, "created_at": 1654351203.021908, "compiled_sql": "\n    \n    \n\nselect *\nfrom (select * from ETHEREUM_DEV.silver.nft_transfers where BLOCK_TIMESTAMP > '2021-08-01') dbt_subquery\nwhere FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__nft_transfers"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__nft_transfers_FROM_ADDRESS__0_xX_0_9a_fA_F_.19a7a2c3f7": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_18e05fc821a0d2e3f47c3e0c582d9260\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__nft_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__nft_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_18e05fc821a0d2e3f47c3e0c582d9260", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__nft_transfers_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__nft_transfers_FROM_ADDRESS__0_xX_0_9a_fA_F_.19a7a2c3f7", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_18e05fc821a0d2e3f47c3e0c582d9260.sql", "original_file_path": "models/silver/silver__nft_transfers.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__nft_transfers_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "nft_transfers_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__nft_transfers.yml/dbt_expectations_expect_column_18e05fc821a0d2e3f47c3e0c582d9260.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_18e05fc821a0d2e3f47c3e0c582d9260"}, "created_at": 1654351203.0237172, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver.nft_transfers\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__nft_transfers"}, "test.ethereum_models.not_null_silver__nft_transfers_TO_ADDRESS.be19f60243": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__nft_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__nft_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__nft_transfers_TO_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver__nft_transfers_TO_ADDRESS.be19f60243", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__nft_transfers_TO_ADDRESS.sql", "original_file_path": "models/silver/silver__nft_transfers.yml", "name": "not_null_silver__nft_transfers_TO_ADDRESS", "alias": "nft_transfers_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__nft_transfers.yml/not_null_silver__nft_transfers_TO_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.0282419, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.nft_transfers\nwhere TO_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TO_ADDRESS", "file_key_name": "models.silver__nft_transfers"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__nft_transfers_TO_ADDRESS__0_xX_0_9a_fA_F_.0ab08ee86e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b2c305b6afd9f9c08b6bd97e0e6b0bc1\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__nft_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__nft_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b2c305b6afd9f9c08b6bd97e0e6b0bc1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__nft_transfers_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__nft_transfers_TO_ADDRESS__0_xX_0_9a_fA_F_.0ab08ee86e", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_b2c305b6afd9f9c08b6bd97e0e6b0bc1.sql", "original_file_path": "models/silver/silver__nft_transfers.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__nft_transfers_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "nft_transfers_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__nft_transfers.yml/dbt_expectations_expect_column_b2c305b6afd9f9c08b6bd97e0e6b0bc1.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_b2c305b6afd9f9c08b6bd97e0e6b0bc1"}, "created_at": 1654351203.030008, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver.nft_transfers\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TO_ADDRESS", "file_key_name": "models.silver__nft_transfers"}, "test.ethereum_models.not_null_silver__nft_transfers_TOKENID.0ac214daa4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKENID", "model": "{{ get_where_subquery(ref('silver__nft_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__nft_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__nft_transfers_TOKENID"], "unique_id": "test.ethereum_models.not_null_silver__nft_transfers_TOKENID.0ac214daa4", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__nft_transfers_TOKENID.sql", "original_file_path": "models/silver/silver__nft_transfers.yml", "name": "not_null_silver__nft_transfers_TOKENID", "alias": "nft_transfers_TOKENID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__nft_transfers.yml/not_null_silver__nft_transfers_TOKENID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.034338, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.nft_transfers\nwhere TOKENID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOKENID", "file_key_name": "models.silver__nft_transfers"}, "test.ethereum_models.not_null_silver__nft_transfers__LOG_ID.50d81077a3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_LOG_ID", "model": "{{ get_where_subquery(ref('silver__nft_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__nft_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__nft_transfers__LOG_ID"], "unique_id": "test.ethereum_models.not_null_silver__nft_transfers__LOG_ID.50d81077a3", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__nft_transfers__LOG_ID.sql", "original_file_path": "models/silver/silver__nft_transfers.yml", "name": "not_null_silver__nft_transfers__LOG_ID", "alias": "nft_transfers", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__nft_transfers.yml/not_null_silver__nft_transfers__LOG_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.036194, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.nft_transfers\nwhere _LOG_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_LOG_ID", "file_key_name": "models.silver__nft_transfers"}, "test.ethereum_models.not_null_silver__nft_transfers_INGESTED_AT.52de2ea95d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver__nft_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__nft_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__nft_transfers_INGESTED_AT"], "unique_id": "test.ethereum_models.not_null_silver__nft_transfers_INGESTED_AT.52de2ea95d", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__nft_transfers_INGESTED_AT.sql", "original_file_path": "models/silver/silver__nft_transfers.yml", "name": "not_null_silver__nft_transfers_INGESTED_AT", "alias": "nft_transfers_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__nft_transfers.yml/not_null_silver__nft_transfers_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.037987, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.nft_transfers\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.silver__nft_transfers"}, "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__nft_transfers__LOG_ID.39058c5bc1": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_e1b067c56516fb6dea9092b8e1a81b53\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_LOG_ID"], "model": "{{ get_where_subquery(ref('silver__nft_transfers')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__nft_transfers"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_e1b067c56516fb6dea9092b8e1a81b53", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["ethereum_models", "silver", "dbt_utils_unique_combination_of_columns_silver__nft_transfers__LOG_ID"], "unique_id": "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__nft_transfers__LOG_ID.39058c5bc1", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_utils_unique_combination_o_e1b067c56516fb6dea9092b8e1a81b53.sql", "original_file_path": "models/silver/silver__nft_transfers.yml", "name": "dbt_utils_unique_combination_of_columns_silver__nft_transfers__LOG_ID", "alias": "nft_transfers", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__nft_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__nft_transfers.yml/dbt_utils_unique_combination_o_e1b067c56516fb6dea9092b8e1a81b53.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_e1b067c56516fb6dea9092b8e1a81b53"}, "created_at": 1654351203.039522, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _LOG_ID\n    from ETHEREUM_DEV.silver.nft_transfers\n    group by _LOG_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__nft_transfers"}, "test.ethereum_models.not_null_silver__eth_transfers_BLOCK_NUMBER.fb2e040913": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__eth_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__eth_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__eth_transfers_BLOCK_NUMBER"], "unique_id": "test.ethereum_models.not_null_silver__eth_transfers_BLOCK_NUMBER.fb2e040913", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__eth_transfers_BLOCK_NUMBER.sql", "original_file_path": "models/silver/silver__eth_transfers.yml", "name": "not_null_silver__eth_transfers_BLOCK_NUMBER", "alias": "eth_transfers_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__eth_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__eth_transfers.yml/not_null_silver__eth_transfers_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.0469508, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.eth_transfers\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__eth_transfers"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__eth_transfers_BLOCK_NUMBER__NUMBER__FLOAT.ed2b9f67f3": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b40ac98806c1ca1e2f2f12e49086326c\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__eth_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__eth_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b40ac98806c1ca1e2f2f12e49086326c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__eth_transfers_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__eth_transfers_BLOCK_NUMBER__NUMBER__FLOAT.ed2b9f67f3", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_b40ac98806c1ca1e2f2f12e49086326c.sql", "original_file_path": "models/silver/silver__eth_transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__eth_transfers_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "eth_transfers_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__eth_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__eth_transfers.yml/dbt_expectations_expect_column_b40ac98806c1ca1e2f2f12e49086326c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_b40ac98806c1ca1e2f2f12e49086326c"}, "created_at": 1654351203.049379, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ETH_VALUE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('IDENTIFIER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_CALL_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__eth_transfers"}, "test.ethereum_models.not_null_silver__eth_transfers_BLOCK_TIMESTAMP.0a766e4f24": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__eth_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__eth_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__eth_transfers_BLOCK_TIMESTAMP"], "unique_id": "test.ethereum_models.not_null_silver__eth_transfers_BLOCK_TIMESTAMP.0a766e4f24", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__eth_transfers_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/silver__eth_transfers.yml", "name": "not_null_silver__eth_transfers_BLOCK_TIMESTAMP", "alias": "eth_transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__eth_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__eth_transfers.yml/not_null_silver__eth_transfers_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.054101, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.eth_transfers\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__eth_transfers"}, "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__eth_transfers_BLOCK_TIMESTAMP__day__1.aede4cd522": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_0451b7535f3ee2557d7f3d393567797c\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__eth_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__eth_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_0451b7535f3ee2557d7f3d393567797c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_row_values_to_have_recent_data_silver__eth_transfers_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__eth_transfers_BLOCK_TIMESTAMP__day__1.aede4cd522", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_row_va_0451b7535f3ee2557d7f3d393567797c.sql", "original_file_path": "models/silver/silver__eth_transfers.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__eth_transfers_BLOCK_TIMESTAMP__day__1", "alias": "eth_transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__eth_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__eth_transfers.yml/dbt_expectations_expect_row_va_0451b7535f3ee2557d7f3d393567797c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_0451b7535f3ee2557d7f3d393567797c"}, "created_at": 1654351203.055702, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        ETHEREUM_DEV.silver.eth_transfers\n    where\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__eth_transfers"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__eth_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.77005357a9": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_808a998e50a8f2779988d3f2dbe9dec5\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__eth_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__eth_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_808a998e50a8f2779988d3f2dbe9dec5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__eth_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__eth_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.77005357a9", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_808a998e50a8f2779988d3f2dbe9dec5.sql", "original_file_path": "models/silver/silver__eth_transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__eth_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "eth_transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__eth_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__eth_transfers.yml/dbt_expectations_expect_column_808a998e50a8f2779988d3f2dbe9dec5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_808a998e50a8f2779988d3f2dbe9dec5"}, "created_at": 1654351203.061407, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ETH_VALUE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('IDENTIFIER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_CALL_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__eth_transfers"}, "test.ethereum_models.not_null_silver__eth_transfers_TX_HASH.17f57d6018": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__eth_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__eth_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__eth_transfers_TX_HASH"], "unique_id": "test.ethereum_models.not_null_silver__eth_transfers_TX_HASH.17f57d6018", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__eth_transfers_TX_HASH.sql", "original_file_path": "models/silver/silver__eth_transfers.yml", "name": "not_null_silver__eth_transfers_TX_HASH", "alias": "eth_transfers_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__eth_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__eth_transfers.yml/not_null_silver__eth_transfers_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.0663848, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.eth_transfers\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.silver__eth_transfers"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__eth_transfers_TX_HASH__0_xX_0_9a_fA_F_.6aa1eca6e4": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ab5472cc7a55ba8304c20cd35c17804a\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__eth_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__eth_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ab5472cc7a55ba8304c20cd35c17804a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_match_regex_silver__eth_transfers_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__eth_transfers_TX_HASH__0_xX_0_9a_fA_F_.6aa1eca6e4", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_ab5472cc7a55ba8304c20cd35c17804a.sql", "original_file_path": "models/silver/silver__eth_transfers.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__eth_transfers_TX_HASH__0_xX_0_9a_fA_F_", "alias": "eth_transfers_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__eth_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__eth_transfers.yml/dbt_expectations_expect_column_ab5472cc7a55ba8304c20cd35c17804a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_ab5472cc7a55ba8304c20cd35c17804a"}, "created_at": 1654351203.067963, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver.eth_transfers\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.silver__eth_transfers"}, "test.ethereum_models.not_null_silver__eth_transfers_FROM_ADDRESS.aeb58eefc2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__eth_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__eth_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__eth_transfers_FROM_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver__eth_transfers_FROM_ADDRESS.aeb58eefc2", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__eth_transfers_FROM_ADDRESS.sql", "original_file_path": "models/silver/silver__eth_transfers.yml", "name": "not_null_silver__eth_transfers_FROM_ADDRESS", "alias": "eth_transfers_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__eth_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__eth_transfers.yml/not_null_silver__eth_transfers_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.072581, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.eth_transfers\nwhere FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__eth_transfers"}, "test.ethereum_models.not_null_silver__eth_transfers_TO_ADDRESS.f2b33456f2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__eth_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__eth_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__eth_transfers_TO_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver__eth_transfers_TO_ADDRESS.f2b33456f2", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__eth_transfers_TO_ADDRESS.sql", "original_file_path": "models/silver/silver__eth_transfers.yml", "name": "not_null_silver__eth_transfers_TO_ADDRESS", "alias": "eth_transfers_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__eth_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__eth_transfers.yml/not_null_silver__eth_transfers_TO_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.074062, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.eth_transfers\nwhere TO_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TO_ADDRESS", "file_key_name": "models.silver__eth_transfers"}, "test.ethereum_models.not_null_silver__eth_transfers_ETH_VALUE.5a36354513": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ETH_VALUE", "model": "{{ get_where_subquery(ref('silver__eth_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__eth_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__eth_transfers_ETH_VALUE"], "unique_id": "test.ethereum_models.not_null_silver__eth_transfers_ETH_VALUE.5a36354513", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__eth_transfers_ETH_VALUE.sql", "original_file_path": "models/silver/silver__eth_transfers.yml", "name": "not_null_silver__eth_transfers_ETH_VALUE", "alias": "eth_transfers_ETH_VALUE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__eth_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__eth_transfers.yml/not_null_silver__eth_transfers_ETH_VALUE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.075732, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.eth_transfers\nwhere ETH_VALUE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ETH_VALUE", "file_key_name": "models.silver__eth_transfers"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__eth_transfers_ETH_VALUE__NUMBER__FLOAT.6f192002f4": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0186d73cf3a4c96e026c2f43c507e140\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "ETH_VALUE", "model": "{{ get_where_subquery(ref('silver__eth_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__eth_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0186d73cf3a4c96e026c2f43c507e140", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__eth_transfers_ETH_VALUE__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__eth_transfers_ETH_VALUE__NUMBER__FLOAT.6f192002f4", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_0186d73cf3a4c96e026c2f43c507e140.sql", "original_file_path": "models/silver/silver__eth_transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__eth_transfers_ETH_VALUE__NUMBER__FLOAT", "alias": "eth_transfers_ETH_VALUE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__eth_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__eth_transfers.yml/dbt_expectations_expect_column_0186d73cf3a4c96e026c2f43c507e140.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_0186d73cf3a4c96e026c2f43c507e140"}, "created_at": 1654351203.0776231, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ETH_VALUE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('IDENTIFIER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_CALL_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ETH_VALUE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ETH_VALUE", "file_key_name": "models.silver__eth_transfers"}, "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__eth_transfers__CALL_ID.bd08623ad0": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_43e00def325884cf2bd84d81431761b9\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_CALL_ID"], "model": "{{ get_where_subquery(ref('silver__eth_transfers')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__eth_transfers"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_43e00def325884cf2bd84d81431761b9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["ethereum_models", "silver", "dbt_utils_unique_combination_of_columns_silver__eth_transfers__CALL_ID"], "unique_id": "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__eth_transfers__CALL_ID.bd08623ad0", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_utils_unique_combination_o_43e00def325884cf2bd84d81431761b9.sql", "original_file_path": "models/silver/silver__eth_transfers.yml", "name": "dbt_utils_unique_combination_of_columns_silver__eth_transfers__CALL_ID", "alias": "eth_transfers", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__eth_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__eth_transfers.yml/dbt_utils_unique_combination_o_43e00def325884cf2bd84d81431761b9.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_43e00def325884cf2bd84d81431761b9"}, "created_at": 1654351203.082895, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _CALL_ID\n    from ETHEREUM_DEV.silver.eth_transfers\n    group by _CALL_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__eth_transfers"}, "test.ethereum_models.not_null_silver__contracts_address.79fc23bbae": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "address", "model": "{{ get_where_subquery(ref('silver__contracts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__contracts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__contracts_address"], "unique_id": "test.ethereum_models.not_null_silver__contracts_address.79fc23bbae", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__contracts_address.sql", "original_file_path": "models/silver/silver__contracts.yml", "name": "not_null_silver__contracts_address", "alias": "contracts_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__contracts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__contracts.yml/not_null_silver__contracts_address.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.088614, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.contracts\nwhere address is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "address", "file_key_name": "models.silver__contracts"}, "test.ethereum_models.not_null_silver__contracts_contract_metadata.aa94997b8d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "contract_metadata", "model": "{{ get_where_subquery(ref('silver__contracts')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__contracts"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "not_null_silver__contracts_contract_metadata"], "unique_id": "test.ethereum_models.not_null_silver__contracts_contract_metadata.aa94997b8d", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__contracts_contract_metadata.sql", "original_file_path": "models/silver/silver__contracts.yml", "name": "not_null_silver__contracts_contract_metadata", "alias": "contracts_contract_metadata", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__contracts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__contracts.yml/not_null_silver__contracts_contract_metadata.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.090663, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.contracts\nwhere contract_metadata is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "contract_metadata", "file_key_name": "models.silver__contracts"}, "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__contracts_address.5d43822bf3": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_69edf1f7655000224e2ca0febedab342\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["address"], "model": "{{ get_where_subquery(ref('silver__contracts')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__contracts"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_69edf1f7655000224e2ca0febedab342", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["ethereum_models", "silver", "dbt_utils_unique_combination_of_columns_silver__contracts_address"], "unique_id": "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__contracts_address.5d43822bf3", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_utils_unique_combination_o_69edf1f7655000224e2ca0febedab342.sql", "original_file_path": "models/silver/silver__contracts.yml", "name": "dbt_utils_unique_combination_of_columns_silver__contracts_address", "alias": "contracts_address", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__contracts"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/silver__contracts.yml/dbt_utils_unique_combination_o_69edf1f7655000224e2ca0febedab342.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_69edf1f7655000224e2ca0febedab342"}, "created_at": 1654351203.092514, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        address\n    from ETHEREUM_DEV.silver.contracts\n    group by address\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__contracts"}, "test.ethereum_models.not_null_silver__traces_BLOCK_NUMBER.9dcd1525b2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__traces"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "traces", "not_null_silver__traces_BLOCK_NUMBER"], "unique_id": "test.ethereum_models.not_null_silver__traces_BLOCK_NUMBER.9dcd1525b2", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__traces_BLOCK_NUMBER.sql", "original_file_path": "models/silver/traces/silver__traces.yml", "name": "not_null_silver__traces_BLOCK_NUMBER", "alias": "traces_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/traces/silver__traces.yml/not_null_silver__traces_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.099457, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.traces\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__traces"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_NUMBER__NUMBER__FLOAT.ccd2c156a6": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_43321ed6b77eca5b45f709f9d684bdc9\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__traces"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_43321ed6b77eca5b45f709f9d684bdc9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "traces", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_NUMBER__NUMBER__FLOAT.ccd2c156a6", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_43321ed6b77eca5b45f709f9d684bdc9.sql", "original_file_path": "models/silver/traces/silver__traces.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "traces_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/traces/silver__traces.yml/dbt_expectations_expect_column_43321ed6b77eca5b45f709f9d684bdc9.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_43321ed6b77eca5b45f709f9d684bdc9"}, "created_at": 1654351203.10149, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ETH_VALUE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTPUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('IDENTIFIER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_CALL_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_STATUS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SUB_TRACES' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver__traces"}, "test.ethereum_models.not_null_silver__traces_BLOCK_TIMESTAMP.4053e07c73": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__traces"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "traces", "not_null_silver__traces_BLOCK_TIMESTAMP"], "unique_id": "test.ethereum_models.not_null_silver__traces_BLOCK_TIMESTAMP.4053e07c73", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__traces_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/traces/silver__traces.yml", "name": "not_null_silver__traces_BLOCK_TIMESTAMP", "alias": "traces_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/traces/silver__traces.yml/not_null_silver__traces_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.106187, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.traces\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__traces"}, "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__traces_BLOCK_TIMESTAMP__day__1.0589c5d87f": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_d59c36b69ea35df3a2a1dec4ddbc34f0\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__traces"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_d59c36b69ea35df3a2a1dec4ddbc34f0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver", "fqn": ["ethereum_models", "silver", "traces", "dbt_expectations_expect_row_values_to_have_recent_data_silver__traces_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__traces_BLOCK_TIMESTAMP__day__1.0589c5d87f", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_row_va_d59c36b69ea35df3a2a1dec4ddbc34f0.sql", "original_file_path": "models/silver/traces/silver__traces.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver__traces_BLOCK_TIMESTAMP__day__1", "alias": "traces_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/traces/silver__traces.yml/dbt_expectations_expect_row_va_d59c36b69ea35df3a2a1dec4ddbc34f0.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_d59c36b69ea35df3a2a1dec4ddbc34f0"}, "created_at": 1654351203.108119, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        ETHEREUM_DEV.silver.traces\n    where\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__traces"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.3ffecd9044": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_628e3bea29d28ae73049f876d7c18590\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__traces"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_628e3bea29d28ae73049f876d7c18590", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver", "fqn": ["ethereum_models", "silver", "traces", "dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.3ffecd9044", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_628e3bea29d28ae73049f876d7c18590.sql", "original_file_path": "models/silver/traces/silver__traces.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "traces_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/traces/silver__traces.yml/dbt_expectations_expect_column_628e3bea29d28ae73049f876d7c18590.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_628e3bea29d28ae73049f876d7c18590"}, "created_at": 1654351203.1140008, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ETH_VALUE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('GAS_USED' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INPUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('OUTPUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('IDENTIFIER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_CALL_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_STATUS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SUB_TRACES' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver__traces"}, "test.ethereum_models.not_null_silver__traces_TX_HASH.ccbdeb5e91": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__traces"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "traces", "not_null_silver__traces_TX_HASH"], "unique_id": "test.ethereum_models.not_null_silver__traces_TX_HASH.ccbdeb5e91", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__traces_TX_HASH.sql", "original_file_path": "models/silver/traces/silver__traces.yml", "name": "not_null_silver__traces_TX_HASH", "alias": "traces_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/traces/silver__traces.yml/not_null_silver__traces_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.118714, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver.traces\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.silver__traces"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_TX_HASH__0_xX_0_9a_fA_F_.14f576932b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_579eb36993ea514537ff9fdd9ab01060\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__traces"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_579eb36993ea514537ff9fdd9ab01060", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["ethereum_models", "silver", "traces", "dbt_expectations_expect_column_values_to_match_regex_silver__traces_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_TX_HASH__0_xX_0_9a_fA_F_.14f576932b", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_579eb36993ea514537ff9fdd9ab01060.sql", "original_file_path": "models/silver/traces/silver__traces.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__traces_TX_HASH__0_xX_0_9a_fA_F_", "alias": "traces_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/traces/silver__traces.yml/dbt_expectations_expect_column_579eb36993ea514537ff9fdd9ab01060.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_579eb36993ea514537ff9fdd9ab01060"}, "created_at": 1654351203.120458, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver.traces\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.silver__traces"}, "test.ethereum_models.not_null_silver__traces_FROM_ADDRESS.285ef0c05b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"TYPE <> 'SELFDESTRUCT'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__traces"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "TYPE <> 'SELFDESTRUCT'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver", "fqn": ["ethereum_models", "silver", "traces", "not_null_silver__traces_FROM_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver__traces_FROM_ADDRESS.285ef0c05b", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver__traces_FROM_ADDRESS.sql", "original_file_path": "models/silver/traces/silver__traces.yml", "name": "not_null_silver__traces_FROM_ADDRESS", "alias": "traces_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/traces/silver__traces.yml/not_null_silver__traces_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "TYPE <> 'SELFDESTRUCT'"}, "created_at": 1654351203.125188, "compiled_sql": "\n    \n    \n\nselect *\nfrom (select * from ETHEREUM_DEV.silver.traces where TYPE <> 'SELFDESTRUCT') dbt_subquery\nwhere FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__traces"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_FROM_ADDRESS__0_xX_0_9a_fA_F_.b404693575": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9a525672490a2311a5e69fded19fee5f\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__traces"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9a525672490a2311a5e69fded19fee5f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["ethereum_models", "silver", "traces", "dbt_expectations_expect_column_values_to_match_regex_silver__traces_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_FROM_ADDRESS__0_xX_0_9a_fA_F_.b404693575", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_9a525672490a2311a5e69fded19fee5f.sql", "original_file_path": "models/silver/traces/silver__traces.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__traces_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "traces_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/traces/silver__traces.yml/dbt_expectations_expect_column_9a525672490a2311a5e69fded19fee5f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_9a525672490a2311a5e69fded19fee5f"}, "created_at": 1654351203.126997, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver.traces\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FROM_ADDRESS", "file_key_name": "models.silver__traces"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_TO_ADDRESS__0_xX_0_9a_fA_F_.3af876962e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(where=\"TO_ADDRESS IS NOT NULL\",alias=\"dbt_expectations_expect_column_5136f4a73886b056486a516d60d01feb\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__traces"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5136f4a73886b056486a516d60d01feb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "TO_ADDRESS IS NOT NULL", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver", "fqn": ["ethereum_models", "silver", "traces", "dbt_expectations_expect_column_values_to_match_regex_silver__traces_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_TO_ADDRESS__0_xX_0_9a_fA_F_.3af876962e", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_5136f4a73886b056486a516d60d01feb.sql", "original_file_path": "models/silver/traces/silver__traces.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver__traces_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "traces_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/traces/silver__traces.yml/dbt_expectations_expect_column_5136f4a73886b056486a516d60d01feb.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "TO_ADDRESS IS NOT NULL", "alias": "dbt_expectations_expect_column_5136f4a73886b056486a516d60d01feb"}, "created_at": 1654351203.1318989, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from (select * from ETHEREUM_DEV.silver.traces where TO_ADDRESS IS NOT NULL) dbt_subquery\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TO_ADDRESS", "file_key_name": "models.silver__traces"}, "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__traces__CALL_ID.2854a11c5a": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_CALL_ID"], "model": "{{ get_where_subquery(ref('silver__traces')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver__traces"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver", "fqn": ["ethereum_models", "silver", "traces", "dbt_utils_unique_combination_of_columns_silver__traces__CALL_ID"], "unique_id": "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__traces__CALL_ID.2854a11c5a", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_utils_unique_combination_of_columns_silver__traces__CALL_ID.sql", "original_file_path": "models/silver/traces/silver__traces.yml", "name": "dbt_utils_unique_combination_of_columns_silver__traces__CALL_ID", "alias": "traces", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver__traces"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/traces/silver__traces.yml/dbt_utils_unique_combination_of_columns_silver__traces__CALL_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.1363149, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _CALL_ID\n    from ETHEREUM_DEV.silver.traces\n    group by _CALL_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver__traces"}, "test.ethereum_models.not_null_silver_nft__rarible_sales_BLOCK_NUMBER.1ed5891cea": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__rarible_sales_BLOCK_NUMBER"], "unique_id": "test.ethereum_models.not_null_silver_nft__rarible_sales_BLOCK_NUMBER.1ed5891cea", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__rarible_sales_BLOCK_NUMBER.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "not_null_silver_nft__rarible_sales_BLOCK_NUMBER", "alias": "rarible_sales_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/not_null_silver_nft__rarible_sales_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.151068, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.rarible_sales\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_BLOCK_NUMBER__NUMBER__FLOAT.99c2666d8e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e0cdbfaaf7cfd0e3de4121ff94f09f31\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e0cdbfaaf7cfd0e3de4121ff94f09f31", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_BLOCK_NUMBER__NUMBER__FLOAT.99c2666d8e", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_e0cdbfaaf7cfd0e3de4121ff94f09f31.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "rarible_sales_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/dbt_expectations_expect_column_e0cdbfaaf7cfd0e3de4121ff94f09f31.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e0cdbfaaf7cfd0e3de4121ff94f09f31"}, "created_at": 1654351203.1529422, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_UNI_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.not_null_silver_nft__rarible_sales_BLOCK_TIMESTAMP.eeb49fcea0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__rarible_sales_BLOCK_TIMESTAMP"], "unique_id": "test.ethereum_models.not_null_silver_nft__rarible_sales_BLOCK_TIMESTAMP.eeb49fcea0", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__rarible_sales_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "not_null_silver_nft__rarible_sales_BLOCK_TIMESTAMP", "alias": "rarible_sales_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/not_null_silver_nft__rarible_sales_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.157488, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.rarible_sales\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__rarible_sales_BLOCK_TIMESTAMP__day__1.1e82baebd7": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_1503e2f51860b199c6066a8e42774e1f\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_1503e2f51860b199c6066a8e42774e1f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__rarible_sales_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__rarible_sales_BLOCK_TIMESTAMP__day__1.1e82baebd7", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_row_va_1503e2f51860b199c6066a8e42774e1f.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__rarible_sales_BLOCK_TIMESTAMP__day__1", "alias": "rarible_sales_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/dbt_expectations_expect_row_va_1503e2f51860b199c6066a8e42774e1f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_1503e2f51860b199c6066a8e42774e1f"}, "created_at": 1654351203.159263, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        ETHEREUM_DEV.silver_nft.rarible_sales\n    where\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.a9e554785e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_230b402935eaaeb437c2fe1e5905d2f1\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_230b402935eaaeb437c2fe1e5905d2f1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.a9e554785e", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_230b402935eaaeb437c2fe1e5905d2f1.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "rarible_sales_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/dbt_expectations_expect_column_230b402935eaaeb437c2fe1e5905d2f1.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_230b402935eaaeb437c2fe1e5905d2f1"}, "created_at": 1654351203.165096, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_UNI_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.not_null_silver_nft__rarible_sales_TX_HASH.d6af452d33": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__rarible_sales_TX_HASH"], "unique_id": "test.ethereum_models.not_null_silver_nft__rarible_sales_TX_HASH.d6af452d33", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__rarible_sales_TX_HASH.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "not_null_silver_nft__rarible_sales_TX_HASH", "alias": "rarible_sales_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/not_null_silver_nft__rarible_sales_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.1693928, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.rarible_sales\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_TX_HASH__0_xX_0_9a_fA_F_.fc5de21e39": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e4b86599e5f64859fa7574d5b0becdeb\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e4b86599e5f64859fa7574d5b0becdeb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_TX_HASH__0_xX_0_9a_fA_F_.fc5de21e39", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_e4b86599e5f64859fa7574d5b0becdeb.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_TX_HASH__0_xX_0_9a_fA_F_", "alias": "rarible_sales_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/dbt_expectations_expect_column_e4b86599e5f64859fa7574d5b0becdeb.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e4b86599e5f64859fa7574d5b0becdeb"}, "created_at": 1654351203.171231, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.rarible_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.not_null_silver_nft__rarible_sales_PLATFORM_ADDRESS.5b6afa36ec": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PLATFORM_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__rarible_sales_PLATFORM_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver_nft__rarible_sales_PLATFORM_ADDRESS.5b6afa36ec", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__rarible_sales_PLATFORM_ADDRESS.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "not_null_silver_nft__rarible_sales_PLATFORM_ADDRESS", "alias": "rarible_sales_PLATFORM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/not_null_silver_nft__rarible_sales_PLATFORM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.1761348, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.rarible_sales\nwhere PLATFORM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM_ADDRESS", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_.85379defc5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a8bc36335faa5599c0f57cfa9db2e9a1\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "PLATFORM_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a8bc36335faa5599c0f57cfa9db2e9a1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_.85379defc5", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_a8bc36335faa5599c0f57cfa9db2e9a1.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "rarible_sales_PLATFORM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/dbt_expectations_expect_column_a8bc36335faa5599c0f57cfa9db2e9a1.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_a8bc36335faa5599c0f57cfa9db2e9a1"}, "created_at": 1654351203.1777332, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(PLATFORM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.rarible_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM_ADDRESS", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.not_null_silver_nft__rarible_sales_PLATFORM_NAME.c5e4d3de5e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PLATFORM_NAME", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__rarible_sales_PLATFORM_NAME"], "unique_id": "test.ethereum_models.not_null_silver_nft__rarible_sales_PLATFORM_NAME.c5e4d3de5e", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__rarible_sales_PLATFORM_NAME.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "not_null_silver_nft__rarible_sales_PLATFORM_NAME", "alias": "rarible_sales_PLATFORM_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/not_null_silver_nft__rarible_sales_PLATFORM_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.1825228, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.rarible_sales\nwhere PLATFORM_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM_NAME", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__rarible_sales_PLATFORM_NAME__rarible.0e2c579390": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_942b0fff7fd139a2e9499ada070ff01d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["rarible"], "column_name": "PLATFORM_NAME", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_942b0fff7fd139a2e9499ada070ff01d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_set_silver_nft__rarible_sales_PLATFORM_NAME__rarible"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__rarible_sales_PLATFORM_NAME__rarible.0e2c579390", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_942b0fff7fd139a2e9499ada070ff01d.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_silver_nft__rarible_sales_PLATFORM_NAME__rarible", "alias": "rarible_sales_PLATFORM_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/dbt_expectations_expect_column_942b0fff7fd139a2e9499ada070ff01d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_942b0fff7fd139a2e9499ada070ff01d"}, "created_at": 1654351203.1840682, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        PLATFORM_NAME as value_field\n\n    from ETHEREUM_DEV.silver_nft.rarible_sales\n    \n\n),\nset_values as (\n\n    select\n        cast('rarible' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM_NAME", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.not_null_silver_nft__rarible_sales_SELLER_ADDRESS.74cc9082ac": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SELLER_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__rarible_sales_SELLER_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver_nft__rarible_sales_SELLER_ADDRESS.74cc9082ac", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__rarible_sales_SELLER_ADDRESS.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "not_null_silver_nft__rarible_sales_SELLER_ADDRESS", "alias": "rarible_sales_SELLER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/not_null_silver_nft__rarible_sales_SELLER_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.188921, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.rarible_sales\nwhere SELLER_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SELLER_ADDRESS", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_SELLER_ADDRESS__0_xX_0_9a_fA_F_.9abb06ee02": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_74620a3bc45ed86d45d7c87891098572\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "SELLER_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_74620a3bc45ed86d45d7c87891098572", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_SELLER_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_SELLER_ADDRESS__0_xX_0_9a_fA_F_.9abb06ee02", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_74620a3bc45ed86d45d7c87891098572.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_SELLER_ADDRESS__0_xX_0_9a_fA_F_", "alias": "rarible_sales_SELLER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/dbt_expectations_expect_column_74620a3bc45ed86d45d7c87891098572.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_74620a3bc45ed86d45d7c87891098572"}, "created_at": 1654351203.1905448, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(SELLER_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.rarible_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SELLER_ADDRESS", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.not_null_silver_nft__rarible_sales_BUYER_ADDRESS.24df303e2d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BUYER_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__rarible_sales_BUYER_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver_nft__rarible_sales_BUYER_ADDRESS.24df303e2d", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__rarible_sales_BUYER_ADDRESS.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "not_null_silver_nft__rarible_sales_BUYER_ADDRESS", "alias": "rarible_sales_BUYER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/not_null_silver_nft__rarible_sales_BUYER_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.194962, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.rarible_sales\nwhere BUYER_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BUYER_ADDRESS", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_BUYER_ADDRESS__0_xX_0_9a_fA_F_.9c266c2ce3": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_419d882da62b6781bad440ded01897dd\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "BUYER_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_419d882da62b6781bad440ded01897dd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_BUYER_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_BUYER_ADDRESS__0_xX_0_9a_fA_F_.9c266c2ce3", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_419d882da62b6781bad440ded01897dd.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_BUYER_ADDRESS__0_xX_0_9a_fA_F_", "alias": "rarible_sales_BUYER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/dbt_expectations_expect_column_419d882da62b6781bad440ded01897dd.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_419d882da62b6781bad440ded01897dd"}, "created_at": 1654351203.196479, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(BUYER_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.rarible_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BUYER_ADDRESS", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.not_null_silver_nft__rarible_sales_NFT_ADDRESS.eee841b924": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NFT_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__rarible_sales_NFT_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver_nft__rarible_sales_NFT_ADDRESS.eee841b924", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__rarible_sales_NFT_ADDRESS.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "not_null_silver_nft__rarible_sales_NFT_ADDRESS", "alias": "rarible_sales_NFT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/not_null_silver_nft__rarible_sales_NFT_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.200887, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.rarible_sales\nwhere NFT_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NFT_ADDRESS", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_.8f93e087d0": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b8a53f1396639f45f2255cf67f7d54f3\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "NFT_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b8a53f1396639f45f2255cf67f7d54f3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_.8f93e087d0", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_b8a53f1396639f45f2255cf67f7d54f3.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_", "alias": "rarible_sales_NFT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/dbt_expectations_expect_column_b8a53f1396639f45f2255cf67f7d54f3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_b8a53f1396639f45f2255cf67f7d54f3"}, "created_at": 1654351203.202432, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(NFT_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.rarible_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NFT_ADDRESS", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.not_null_silver_nft__rarible_sales_TOKENID.be34a7193c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKENID", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__rarible_sales_TOKENID"], "unique_id": "test.ethereum_models.not_null_silver_nft__rarible_sales_TOKENID.be34a7193c", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__rarible_sales_TOKENID.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "not_null_silver_nft__rarible_sales_TOKENID", "alias": "rarible_sales_TOKENID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/not_null_silver_nft__rarible_sales_TOKENID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.207113, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.rarible_sales\nwhere TOKENID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOKENID", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.not_null_silver_nft__rarible_sales_CURRENCY_ADDRESS.73c9b4e081": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP::date > '2021-07-01'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CURRENCY_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCK_TIMESTAMP::date > '2021-07-01'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__rarible_sales_CURRENCY_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver_nft__rarible_sales_CURRENCY_ADDRESS.73c9b4e081", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__rarible_sales_CURRENCY_ADDRESS.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "not_null_silver_nft__rarible_sales_CURRENCY_ADDRESS", "alias": "rarible_sales_CURRENCY_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/not_null_silver_nft__rarible_sales_CURRENCY_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "BLOCK_TIMESTAMP::date > '2021-07-01'"}, "created_at": 1654351203.209357, "compiled_sql": "\n    \n    \n\nselect *\nfrom (select * from ETHEREUM_DEV.silver_nft.rarible_sales where BLOCK_TIMESTAMP::date > '2021-07-01') dbt_subquery\nwhere CURRENCY_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CURRENCY_ADDRESS", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.not_null_silver_nft__rarible_sales_PRICE.4299cf265e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP::date > '2021-07-01'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PRICE", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCK_TIMESTAMP::date > '2021-07-01'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__rarible_sales_PRICE"], "unique_id": "test.ethereum_models.not_null_silver_nft__rarible_sales_PRICE.4299cf265e", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__rarible_sales_PRICE.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "not_null_silver_nft__rarible_sales_PRICE", "alias": "rarible_sales_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/not_null_silver_nft__rarible_sales_PRICE.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "BLOCK_TIMESTAMP::date > '2021-07-01'"}, "created_at": 1654351203.2115881, "compiled_sql": "\n    \n    \n\nselect *\nfrom (select * from ETHEREUM_DEV.silver_nft.rarible_sales where BLOCK_TIMESTAMP::date > '2021-07-01') dbt_subquery\nwhere PRICE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PRICE", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_PRICE__NUMBER__FLOAT.3c63c16af8": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7a39c7fd9f8cd0029564783a92e59143\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "PRICE", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7a39c7fd9f8cd0029564783a92e59143", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_PRICE__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_PRICE__NUMBER__FLOAT.3c63c16af8", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_7a39c7fd9f8cd0029564783a92e59143.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_PRICE__NUMBER__FLOAT", "alias": "rarible_sales_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/dbt_expectations_expect_column_7a39c7fd9f8cd0029564783a92e59143.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_7a39c7fd9f8cd0029564783a92e59143"}, "created_at": 1654351203.2131789, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_UNI_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PRICE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PRICE", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_PRICE_USD__NUMBER__FLOAT.064d20c674": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_52603377ae070e9311c68553e1dbcdba\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "PRICE_USD", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_52603377ae070e9311c68553e1dbcdba", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_PRICE_USD__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_PRICE_USD__NUMBER__FLOAT.064d20c674", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_52603377ae070e9311c68553e1dbcdba.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_PRICE_USD__NUMBER__FLOAT", "alias": "rarible_sales_PRICE_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/dbt_expectations_expect_column_52603377ae070e9311c68553e1dbcdba.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_52603377ae070e9311c68553e1dbcdba"}, "created_at": 1654351203.217888, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_UNI_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PRICE_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PRICE_USD", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.not_null_silver_nft__rarible_sales_TOTAL_FEES.2f0a1dde86": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP::date > '2021-07-01'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_FEES", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCK_TIMESTAMP::date > '2021-07-01'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__rarible_sales_TOTAL_FEES"], "unique_id": "test.ethereum_models.not_null_silver_nft__rarible_sales_TOTAL_FEES.2f0a1dde86", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__rarible_sales_TOTAL_FEES.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "not_null_silver_nft__rarible_sales_TOTAL_FEES", "alias": "rarible_sales_TOTAL_FEES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/not_null_silver_nft__rarible_sales_TOTAL_FEES.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "BLOCK_TIMESTAMP::date > '2021-07-01'"}, "created_at": 1654351203.2227762, "compiled_sql": "\n    \n    \n\nselect *\nfrom (select * from ETHEREUM_DEV.silver_nft.rarible_sales where BLOCK_TIMESTAMP::date > '2021-07-01') dbt_subquery\nwhere TOTAL_FEES is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOTAL_FEES", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_TOTAL_FEES__NUMBER__FLOAT.08041bbe52": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f81b8665b5dc0554bc0de8e3e9c9b2ee\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TOTAL_FEES", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f81b8665b5dc0554bc0de8e3e9c9b2ee", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_TOTAL_FEES__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_TOTAL_FEES__NUMBER__FLOAT.08041bbe52", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_f81b8665b5dc0554bc0de8e3e9c9b2ee.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_TOTAL_FEES__NUMBER__FLOAT", "alias": "rarible_sales_TOTAL_FEES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/dbt_expectations_expect_column_f81b8665b5dc0554bc0de8e3e9c9b2ee.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_f81b8665b5dc0554bc0de8e3e9c9b2ee"}, "created_at": 1654351203.224494, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_UNI_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TOTAL_FEES'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOTAL_FEES", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.not_null_silver_nft__rarible_sales_PLATFORM_FEE.5fb832c6d6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PLATFORM_FEE", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__rarible_sales_PLATFORM_FEE"], "unique_id": "test.ethereum_models.not_null_silver_nft__rarible_sales_PLATFORM_FEE.5fb832c6d6", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__rarible_sales_PLATFORM_FEE.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "not_null_silver_nft__rarible_sales_PLATFORM_FEE", "alias": "rarible_sales_PLATFORM_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/not_null_silver_nft__rarible_sales_PLATFORM_FEE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.229323, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.rarible_sales\nwhere PLATFORM_FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM_FEE", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_PLATFORM_FEE__NUMBER__FLOAT.58d99c50c3": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f8b39933ee01cc741cc9fad90af2afaa\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "PLATFORM_FEE", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f8b39933ee01cc741cc9fad90af2afaa", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_PLATFORM_FEE__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_PLATFORM_FEE__NUMBER__FLOAT.58d99c50c3", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_f8b39933ee01cc741cc9fad90af2afaa.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_PLATFORM_FEE__NUMBER__FLOAT", "alias": "rarible_sales_PLATFORM_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/dbt_expectations_expect_column_f8b39933ee01cc741cc9fad90af2afaa.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_f8b39933ee01cc741cc9fad90af2afaa"}, "created_at": 1654351203.232339, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_UNI_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PLATFORM_FEE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM_FEE", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.not_null_silver_nft__rarible_sales_CREATOR_FEE.de434ed2a1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATOR_FEE", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__rarible_sales_CREATOR_FEE"], "unique_id": "test.ethereum_models.not_null_silver_nft__rarible_sales_CREATOR_FEE.de434ed2a1", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__rarible_sales_CREATOR_FEE.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "not_null_silver_nft__rarible_sales_CREATOR_FEE", "alias": "rarible_sales_CREATOR_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/not_null_silver_nft__rarible_sales_CREATOR_FEE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.237767, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.rarible_sales\nwhere CREATOR_FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATOR_FEE", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_CREATOR_FEE__NUMBER__FLOAT.7bf7ddd040": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a40b4be10f405dcf128f55a4218dc450\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "CREATOR_FEE", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a40b4be10f405dcf128f55a4218dc450", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_CREATOR_FEE__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_CREATOR_FEE__NUMBER__FLOAT.7bf7ddd040", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_a40b4be10f405dcf128f55a4218dc450.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_CREATOR_FEE__NUMBER__FLOAT", "alias": "rarible_sales_CREATOR_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/dbt_expectations_expect_column_a40b4be10f405dcf128f55a4218dc450.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_a40b4be10f405dcf128f55a4218dc450"}, "created_at": 1654351203.239423, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_UNI_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CREATOR_FEE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATOR_FEE", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_TOTAL_FEES_USD__NUMBER__FLOAT.f3b00b2c4e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5b830d9d1875ee9225b6437f706fc481\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TOTAL_FEES_USD", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5b830d9d1875ee9225b6437f706fc481", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_TOTAL_FEES_USD__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_TOTAL_FEES_USD__NUMBER__FLOAT.f3b00b2c4e", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_5b830d9d1875ee9225b6437f706fc481.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_TOTAL_FEES_USD__NUMBER__FLOAT", "alias": "rarible_sales_TOTAL_FEES_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/dbt_expectations_expect_column_5b830d9d1875ee9225b6437f706fc481.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_5b830d9d1875ee9225b6437f706fc481"}, "created_at": 1654351203.24401, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_UNI_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TOTAL_FEES_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOTAL_FEES_USD", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_PLATFORM_FEE_USD__NUMBER__FLOAT.3b6e77f076": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_af9c1736d3c829abe2194ee6ce5a478b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "PLATFORM_FEE_USD", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_af9c1736d3c829abe2194ee6ce5a478b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_PLATFORM_FEE_USD__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_PLATFORM_FEE_USD__NUMBER__FLOAT.3b6e77f076", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_af9c1736d3c829abe2194ee6ce5a478b.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_PLATFORM_FEE_USD__NUMBER__FLOAT", "alias": "rarible_sales_PLATFORM_FEE_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/dbt_expectations_expect_column_af9c1736d3c829abe2194ee6ce5a478b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_af9c1736d3c829abe2194ee6ce5a478b"}, "created_at": 1654351203.248579, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_UNI_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PLATFORM_FEE_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM_FEE_USD", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_CREATOR_FEE_USD__NUMBER__FLOAT.a8e4c5c16a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_134ecc06e40093f22b30836876f6cd68\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "CREATOR_FEE_USD", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_134ecc06e40093f22b30836876f6cd68", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_CREATOR_FEE_USD__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_CREATOR_FEE_USD__NUMBER__FLOAT.a8e4c5c16a", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_134ecc06e40093f22b30836876f6cd68.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_CREATOR_FEE_USD__NUMBER__FLOAT", "alias": "rarible_sales_CREATOR_FEE_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/dbt_expectations_expect_column_134ecc06e40093f22b30836876f6cd68.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_134ecc06e40093f22b30836876f6cd68"}, "created_at": 1654351203.252943, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_UNI_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CREATOR_FEE_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATOR_FEE_USD", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.not_null_silver_nft__rarible_sales_TX_FEE.52480cc33b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_FEE", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__rarible_sales_TX_FEE"], "unique_id": "test.ethereum_models.not_null_silver_nft__rarible_sales_TX_FEE.52480cc33b", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__rarible_sales_TX_FEE.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "not_null_silver_nft__rarible_sales_TX_FEE", "alias": "rarible_sales_TX_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/not_null_silver_nft__rarible_sales_TX_FEE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.257335, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.rarible_sales\nwhere TX_FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_FEE", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_TX_FEE__NUMBER__FLOAT.d3339c69ea": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0e011988ba75d2268413dae610f3e97e\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TX_FEE", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0e011988ba75d2268413dae610f3e97e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_TX_FEE__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_TX_FEE__NUMBER__FLOAT.d3339c69ea", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_0e011988ba75d2268413dae610f3e97e.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_TX_FEE__NUMBER__FLOAT", "alias": "rarible_sales_TX_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/dbt_expectations_expect_column_0e011988ba75d2268413dae610f3e97e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_0e011988ba75d2268413dae610f3e97e"}, "created_at": 1654351203.259852, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_UNI_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_FEE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_FEE", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.not_null_silver_nft__rarible_sales_TX_FEE_USD.dec61f8fd8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"block_timestamp >= '2020-05-05' AND BLOCK_TIMESTAMP < CURRENT_DATE - 2\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_FEE_USD", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "block_timestamp >= '2020-05-05' AND BLOCK_TIMESTAMP < CURRENT_DATE - 2", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__rarible_sales_TX_FEE_USD"], "unique_id": "test.ethereum_models.not_null_silver_nft__rarible_sales_TX_FEE_USD.dec61f8fd8", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__rarible_sales_TX_FEE_USD.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "not_null_silver_nft__rarible_sales_TX_FEE_USD", "alias": "rarible_sales_TX_FEE_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/not_null_silver_nft__rarible_sales_TX_FEE_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "block_timestamp >= '2020-05-05' AND BLOCK_TIMESTAMP < CURRENT_DATE - 2"}, "created_at": 1654351203.264948, "compiled_sql": "\n    \n    \n\nselect *\nfrom (select * from ETHEREUM_DEV.silver_nft.rarible_sales where block_timestamp >= '2020-05-05' AND BLOCK_TIMESTAMP < CURRENT_DATE - 2) dbt_subquery\nwhere TX_FEE_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_FEE_USD", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_TX_FEE_USD__NUMBER__FLOAT.dc6bddc005": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a50cae16844cbeb3a9b78dc110826652\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TX_FEE_USD", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a50cae16844cbeb3a9b78dc110826652", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_TX_FEE_USD__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_TX_FEE_USD__NUMBER__FLOAT.dc6bddc005", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_a50cae16844cbeb3a9b78dc110826652.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_TX_FEE_USD__NUMBER__FLOAT", "alias": "rarible_sales_TX_FEE_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/dbt_expectations_expect_column_a50cae16844cbeb3a9b78dc110826652.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_a50cae16844cbeb3a9b78dc110826652"}, "created_at": 1654351203.266743, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_UNI_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_FEE_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_FEE_USD", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.not_null_silver_nft__rarible_sales_nft_uni_id.e4d5266587": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "nft_uni_id", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__rarible_sales_nft_uni_id"], "unique_id": "test.ethereum_models.not_null_silver_nft__rarible_sales_nft_uni_id.e4d5266587", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__rarible_sales_nft_uni_id.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "not_null_silver_nft__rarible_sales_nft_uni_id", "alias": "rarible_sales_nft_uni_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/not_null_silver_nft__rarible_sales_nft_uni_id.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.271434, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.rarible_sales\nwhere nft_uni_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "nft_uni_id", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.not_null_silver_nft__rarible_sales_INGESTED_AT.774efdbea6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__rarible_sales_INGESTED_AT"], "unique_id": "test.ethereum_models.not_null_silver_nft__rarible_sales_INGESTED_AT.774efdbea6", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__rarible_sales_INGESTED_AT.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "not_null_silver_nft__rarible_sales_INGESTED_AT", "alias": "rarible_sales_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/not_null_silver_nft__rarible_sales_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.2731478, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.rarible_sales\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__rarible_sales_INGESTED_AT__day__1.143ec4351d": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_4963d48ea94dd693341c0d1c5d26ecf9\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_4963d48ea94dd693341c0d1c5d26ecf9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__rarible_sales_INGESTED_AT__day__1"], "unique_id": "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__rarible_sales_INGESTED_AT__day__1.143ec4351d", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_row_va_4963d48ea94dd693341c0d1c5d26ecf9.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__rarible_sales_INGESTED_AT__day__1", "alias": "rarible_sales_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/dbt_expectations_expect_row_va_4963d48ea94dd693341c0d1c5d26ecf9.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_4963d48ea94dd693341c0d1c5d26ecf9"}, "created_at": 1654351203.274637, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(INGESTED_AT as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        ETHEREUM_DEV.silver_nft.rarible_sales\n    where\n        cast(INGESTED_AT as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_INGESTED_AT__TIMESTAMP_NTZ.1edcc84be4": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_163258cda8677df8e1eb5ef5e87fb129\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_163258cda8677df8e1eb5ef5e87fb129", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_INGESTED_AT__TIMESTAMP_NTZ"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_INGESTED_AT__TIMESTAMP_NTZ.1edcc84be4", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_163258cda8677df8e1eb5ef5e87fb129.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_INGESTED_AT__TIMESTAMP_NTZ", "alias": "rarible_sales_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/dbt_expectations_expect_column_163258cda8677df8e1eb5ef5e87fb129.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_163258cda8677df8e1eb5ef5e87fb129"}, "created_at": 1654351203.280187, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_UNI_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'INGESTED_AT'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.not_null_silver_nft__rarible_sales_ORIGIN_FROM_ADDRESS.c72d1e4948": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__rarible_sales_ORIGIN_FROM_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver_nft__rarible_sales_ORIGIN_FROM_ADDRESS.c72d1e4948", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__rarible_sales_ORIGIN_FROM_ADDRESS.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "not_null_silver_nft__rarible_sales_ORIGIN_FROM_ADDRESS", "alias": "rarible_sales_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/not_null_silver_nft__rarible_sales_ORIGIN_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.2846248, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.rarible_sales\nwhere ORIGIN_FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.7dfb847fac": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_03d0012e78e3aa630edf6bf31d6d9389\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_03d0012e78e3aa630edf6bf31d6d9389", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.7dfb847fac", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_03d0012e78e3aa630edf6bf31d6d9389.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "rarible_sales_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/dbt_expectations_expect_column_03d0012e78e3aa630edf6bf31d6d9389.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_03d0012e78e3aa630edf6bf31d6d9389"}, "created_at": 1654351203.286191, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.rarible_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.not_null_silver_nft__rarible_sales_ORIGIN_TO_ADDRESS.f8579d7685": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__rarible_sales_ORIGIN_TO_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver_nft__rarible_sales_ORIGIN_TO_ADDRESS.f8579d7685", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__rarible_sales_ORIGIN_TO_ADDRESS.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "not_null_silver_nft__rarible_sales_ORIGIN_TO_ADDRESS", "alias": "rarible_sales_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/not_null_silver_nft__rarible_sales_ORIGIN_TO_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.291043, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.rarible_sales\nwhere ORIGIN_TO_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.d4f38a6f88": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4d862bd26b32ad88e43d2c14a91593f4\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4d862bd26b32ad88e43d2c14a91593f4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.d4f38a6f88", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_4d862bd26b32ad88e43d2c14a91593f4.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "rarible_sales_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/dbt_expectations_expect_column_4d862bd26b32ad88e43d2c14a91593f4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_4d862bd26b32ad88e43d2c14a91593f4"}, "created_at": 1654351203.292702, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.rarible_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.not_null_silver_nft__rarible_sales_ORIGIN_FUNCTION_SIGNATURE.9f47ed4489": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FUNCTION_SIGNATURE", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__rarible_sales_ORIGIN_FUNCTION_SIGNATURE"], "unique_id": "test.ethereum_models.not_null_silver_nft__rarible_sales_ORIGIN_FUNCTION_SIGNATURE.9f47ed4489", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__rarible_sales_ORIGIN_FUNCTION_SIGNATURE.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "not_null_silver_nft__rarible_sales_ORIGIN_FUNCTION_SIGNATURE", "alias": "rarible_sales_ORIGIN_FUNCTION_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/not_null_silver_nft__rarible_sales_ORIGIN_FUNCTION_SIGNATURE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.297199, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.rarible_sales\nwhere ORIGIN_FUNCTION_SIGNATURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FUNCTION_SIGNATURE", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.936e776427": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_76f4b4f100f170b0b9735bd85bd1f6a5\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FUNCTION_SIGNATURE", "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_76f4b4f100f170b0b9735bd85bd1f6a5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.936e776427", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_76f4b4f100f170b0b9735bd85bd1f6a5.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_", "alias": "rarible_sales_ORIGIN_FUNCTION_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/dbt_expectations_expect_column_76f4b4f100f170b0b9735bd85bd1f6a5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_76f4b4f100f170b0b9735bd85bd1f6a5"}, "created_at": 1654351203.29899, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_FUNCTION_SIGNATURE, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.rarible_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FUNCTION_SIGNATURE", "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver_nft__rarible_sales_nft_uni_id.9eb1c12e50": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_85db9b8dc4f69a7ef87cbb09b6dd6794\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["nft_uni_id"], "model": "{{ get_where_subquery(ref('silver_nft__rarible_sales')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__rarible_sales"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_85db9b8dc4f69a7ef87cbb09b6dd6794", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_utils_unique_combination_of_columns_silver_nft__rarible_sales_nft_uni_id"], "unique_id": "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver_nft__rarible_sales_nft_uni_id.9eb1c12e50", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_utils_unique_combination_o_85db9b8dc4f69a7ef87cbb09b6dd6794.sql", "original_file_path": "models/silver/nft/silver_nft__rarible_sales.yml", "name": "dbt_utils_unique_combination_of_columns_silver_nft__rarible_sales_nft_uni_id", "alias": "rarible_sales_nft_uni_id", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__rarible_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__rarible_sales.yml/dbt_utils_unique_combination_o_85db9b8dc4f69a7ef87cbb09b6dd6794.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_85db9b8dc4f69a7ef87cbb09b6dd6794"}, "created_at": 1654351203.30328, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        nft_uni_id\n    from ETHEREUM_DEV.silver_nft.rarible_sales\n    group by nft_uni_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver_nft__rarible_sales"}, "test.ethereum_models.not_null_silver_nft__looksrare_sales_BLOCK_NUMBER.eff4fa805e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__looksrare_sales_BLOCK_NUMBER"], "unique_id": "test.ethereum_models.not_null_silver_nft__looksrare_sales_BLOCK_NUMBER.eff4fa805e", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__looksrare_sales_BLOCK_NUMBER.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "not_null_silver_nft__looksrare_sales_BLOCK_NUMBER", "alias": "looksrare_sales_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/not_null_silver_nft__looksrare_sales_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.318311, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.looksrare_sales\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_BLOCK_NUMBER__NUMBER__FLOAT.26f855064c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1e22075aebe60bf321e0ff02fde0c7bd\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1e22075aebe60bf321e0ff02fde0c7bd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_BLOCK_NUMBER__NUMBER__FLOAT.26f855064c", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_1e22075aebe60bf321e0ff02fde0c7bd.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "looksrare_sales_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/dbt_expectations_expect_column_1e22075aebe60bf321e0ff02fde0c7bd.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_1e22075aebe60bf321e0ff02fde0c7bd"}, "created_at": 1654351203.320102, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.not_null_silver_nft__looksrare_sales_BLOCK_TIMESTAMP.7479fcd544": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__looksrare_sales_BLOCK_TIMESTAMP"], "unique_id": "test.ethereum_models.not_null_silver_nft__looksrare_sales_BLOCK_TIMESTAMP.7479fcd544", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__looksrare_sales_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "not_null_silver_nft__looksrare_sales_BLOCK_TIMESTAMP", "alias": "looksrare_sales_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/not_null_silver_nft__looksrare_sales_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.324568, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.looksrare_sales\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__looksrare_sales_BLOCK_TIMESTAMP__day__1.7d41164578": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_459b3fe9b554253c4da810248608b035\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_459b3fe9b554253c4da810248608b035", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__looksrare_sales_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__looksrare_sales_BLOCK_TIMESTAMP__day__1.7d41164578", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_row_va_459b3fe9b554253c4da810248608b035.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__looksrare_sales_BLOCK_TIMESTAMP__day__1", "alias": "looksrare_sales_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/dbt_expectations_expect_row_va_459b3fe9b554253c4da810248608b035.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_459b3fe9b554253c4da810248608b035"}, "created_at": 1654351203.326279, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        ETHEREUM_DEV.silver_nft.looksrare_sales\n    where\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.203ba5aff8": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_18f4e0807257bce6539731e80bf5fbf7\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_18f4e0807257bce6539731e80bf5fbf7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.203ba5aff8", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_18f4e0807257bce6539731e80bf5fbf7.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "looksrare_sales_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/dbt_expectations_expect_column_18f4e0807257bce6539731e80bf5fbf7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_18f4e0807257bce6539731e80bf5fbf7"}, "created_at": 1654351203.332525, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.not_null_silver_nft__looksrare_sales_TX_HASH.06f84140a7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__looksrare_sales_TX_HASH"], "unique_id": "test.ethereum_models.not_null_silver_nft__looksrare_sales_TX_HASH.06f84140a7", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__looksrare_sales_TX_HASH.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "not_null_silver_nft__looksrare_sales_TX_HASH", "alias": "looksrare_sales_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/not_null_silver_nft__looksrare_sales_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.336803, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.looksrare_sales\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_TX_HASH__0_xX_0_9a_fA_F_.9d158c2558": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c7316e8b5645021cc4fdaebda2cb77df\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c7316e8b5645021cc4fdaebda2cb77df", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_TX_HASH__0_xX_0_9a_fA_F_.9d158c2558", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_c7316e8b5645021cc4fdaebda2cb77df.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_TX_HASH__0_xX_0_9a_fA_F_", "alias": "looksrare_sales_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/dbt_expectations_expect_column_c7316e8b5645021cc4fdaebda2cb77df.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c7316e8b5645021cc4fdaebda2cb77df"}, "created_at": 1654351203.33838, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.looksrare_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.not_null_silver_nft__looksrare_sales_PLATFORM_ADDRESS.66c756648f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PLATFORM_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__looksrare_sales_PLATFORM_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver_nft__looksrare_sales_PLATFORM_ADDRESS.66c756648f", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__looksrare_sales_PLATFORM_ADDRESS.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "not_null_silver_nft__looksrare_sales_PLATFORM_ADDRESS", "alias": "looksrare_sales_PLATFORM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/not_null_silver_nft__looksrare_sales_PLATFORM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.3431711, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.looksrare_sales\nwhere PLATFORM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM_ADDRESS", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_.bf6b7ad056": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cc09d02e4a575da024215e80b5031ecb\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "PLATFORM_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cc09d02e4a575da024215e80b5031ecb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_.bf6b7ad056", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_cc09d02e4a575da024215e80b5031ecb.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "looksrare_sales_PLATFORM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/dbt_expectations_expect_column_cc09d02e4a575da024215e80b5031ecb.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_cc09d02e4a575da024215e80b5031ecb"}, "created_at": 1654351203.3447628, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(PLATFORM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.looksrare_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM_ADDRESS", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.not_null_silver_nft__looksrare_sales_PLATFORM_NAME.51a5122ae1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PLATFORM_NAME", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__looksrare_sales_PLATFORM_NAME"], "unique_id": "test.ethereum_models.not_null_silver_nft__looksrare_sales_PLATFORM_NAME.51a5122ae1", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__looksrare_sales_PLATFORM_NAME.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "not_null_silver_nft__looksrare_sales_PLATFORM_NAME", "alias": "looksrare_sales_PLATFORM_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/not_null_silver_nft__looksrare_sales_PLATFORM_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.349351, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.looksrare_sales\nwhere PLATFORM_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM_NAME", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__looksrare_sales_PLATFORM_NAME__looksrare.9cbd647a62": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_254b2bc2fd301554134e3d6e87779c95\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["looksrare"], "column_name": "PLATFORM_NAME", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_254b2bc2fd301554134e3d6e87779c95", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_set_silver_nft__looksrare_sales_PLATFORM_NAME__looksrare"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__looksrare_sales_PLATFORM_NAME__looksrare.9cbd647a62", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_254b2bc2fd301554134e3d6e87779c95.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_silver_nft__looksrare_sales_PLATFORM_NAME__looksrare", "alias": "looksrare_sales_PLATFORM_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/dbt_expectations_expect_column_254b2bc2fd301554134e3d6e87779c95.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_254b2bc2fd301554134e3d6e87779c95"}, "created_at": 1654351203.350878, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        PLATFORM_NAME as value_field\n\n    from ETHEREUM_DEV.silver_nft.looksrare_sales\n    \n\n),\nset_values as (\n\n    select\n        cast('looksrare' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM_NAME", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.not_null_silver_nft__looksrare_sales_NFT_FROM_ADDRESS.b41cc15db9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NFT_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__looksrare_sales_NFT_FROM_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver_nft__looksrare_sales_NFT_FROM_ADDRESS.b41cc15db9", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__looksrare_sales_NFT_FROM_ADDRESS.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "not_null_silver_nft__looksrare_sales_NFT_FROM_ADDRESS", "alias": "looksrare_sales_NFT_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/not_null_silver_nft__looksrare_sales_NFT_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.3552709, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.looksrare_sales\nwhere NFT_FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NFT_FROM_ADDRESS", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_NFT_FROM_ADDRESS__0_xX_0_9a_fA_F_.0bd668142b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4aa37e4962aaeda0ea007e9ab79e9475\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "NFT_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4aa37e4962aaeda0ea007e9ab79e9475", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_NFT_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_NFT_FROM_ADDRESS__0_xX_0_9a_fA_F_.0bd668142b", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_4aa37e4962aaeda0ea007e9ab79e9475.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_NFT_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "looksrare_sales_NFT_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/dbt_expectations_expect_column_4aa37e4962aaeda0ea007e9ab79e9475.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_4aa37e4962aaeda0ea007e9ab79e9475"}, "created_at": 1654351203.356809, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(NFT_FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.looksrare_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NFT_FROM_ADDRESS", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.not_null_silver_nft__looksrare_sales_NFT_TO_ADDRESS.d7d647030e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NFT_TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__looksrare_sales_NFT_TO_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver_nft__looksrare_sales_NFT_TO_ADDRESS.d7d647030e", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__looksrare_sales_NFT_TO_ADDRESS.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "not_null_silver_nft__looksrare_sales_NFT_TO_ADDRESS", "alias": "looksrare_sales_NFT_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/not_null_silver_nft__looksrare_sales_NFT_TO_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.361574, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.looksrare_sales\nwhere NFT_TO_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NFT_TO_ADDRESS", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_NFT_TO_ADDRESS__0_xX_0_9a_fA_F_.666276b920": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6bcde7a83d85d22d1bb4a4d0d971874e\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "NFT_TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6bcde7a83d85d22d1bb4a4d0d971874e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_NFT_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_NFT_TO_ADDRESS__0_xX_0_9a_fA_F_.666276b920", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_6bcde7a83d85d22d1bb4a4d0d971874e.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_NFT_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "looksrare_sales_NFT_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/dbt_expectations_expect_column_6bcde7a83d85d22d1bb4a4d0d971874e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_6bcde7a83d85d22d1bb4a4d0d971874e"}, "created_at": 1654351203.3635101, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(NFT_TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.looksrare_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NFT_TO_ADDRESS", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.not_null_silver_nft__looksrare_sales_NFT_ADDRESS.7f102bd39e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NFT_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__looksrare_sales_NFT_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver_nft__looksrare_sales_NFT_ADDRESS.7f102bd39e", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__looksrare_sales_NFT_ADDRESS.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "not_null_silver_nft__looksrare_sales_NFT_ADDRESS", "alias": "looksrare_sales_NFT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/not_null_silver_nft__looksrare_sales_NFT_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.367859, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.looksrare_sales\nwhere NFT_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NFT_ADDRESS", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_.d80fae9d88": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_345ce34d6939e288130e619e060d9a3e\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "NFT_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_345ce34d6939e288130e619e060d9a3e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_.d80fae9d88", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_345ce34d6939e288130e619e060d9a3e.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_", "alias": "looksrare_sales_NFT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/dbt_expectations_expect_column_345ce34d6939e288130e619e060d9a3e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_345ce34d6939e288130e619e060d9a3e"}, "created_at": 1654351203.3698099, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(NFT_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.looksrare_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NFT_ADDRESS", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.not_null_silver_nft__looksrare_sales_TOKENID.a69b7a7b4d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKENID", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__looksrare_sales_TOKENID"], "unique_id": "test.ethereum_models.not_null_silver_nft__looksrare_sales_TOKENID.a69b7a7b4d", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__looksrare_sales_TOKENID.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "not_null_silver_nft__looksrare_sales_TOKENID", "alias": "looksrare_sales_TOKENID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/not_null_silver_nft__looksrare_sales_TOKENID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.374123, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.looksrare_sales\nwhere TOKENID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOKENID", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.not_null_silver_nft__looksrare_sales_CURRENCY_ADDRESS.07b9dcb4b5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CURRENCY_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__looksrare_sales_CURRENCY_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver_nft__looksrare_sales_CURRENCY_ADDRESS.07b9dcb4b5", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__looksrare_sales_CURRENCY_ADDRESS.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "not_null_silver_nft__looksrare_sales_CURRENCY_ADDRESS", "alias": "looksrare_sales_CURRENCY_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/not_null_silver_nft__looksrare_sales_CURRENCY_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.3758678, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.looksrare_sales\nwhere CURRENCY_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CURRENCY_ADDRESS", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.not_null_silver_nft__looksrare_sales_PRICE.c86ff5ae80": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PRICE", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__looksrare_sales_PRICE"], "unique_id": "test.ethereum_models.not_null_silver_nft__looksrare_sales_PRICE.c86ff5ae80", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__looksrare_sales_PRICE.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "not_null_silver_nft__looksrare_sales_PRICE", "alias": "looksrare_sales_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/not_null_silver_nft__looksrare_sales_PRICE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.3774168, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.looksrare_sales\nwhere PRICE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PRICE", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_PRICE__NUMBER__FLOAT.d68c2faeac": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e8897dd96de025b60ede52634680a74c\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "PRICE", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e8897dd96de025b60ede52634680a74c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_PRICE__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_PRICE__NUMBER__FLOAT.d68c2faeac", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_e8897dd96de025b60ede52634680a74c.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_PRICE__NUMBER__FLOAT", "alias": "looksrare_sales_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/dbt_expectations_expect_column_e8897dd96de025b60ede52634680a74c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e8897dd96de025b60ede52634680a74c"}, "created_at": 1654351203.3791869, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PRICE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PRICE", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_PRICE_USD__NUMBER__FLOAT.d87e60eece": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8615296b6b219a7de35aec925412315f\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "PRICE_USD", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8615296b6b219a7de35aec925412315f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_PRICE_USD__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_PRICE_USD__NUMBER__FLOAT.d87e60eece", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_8615296b6b219a7de35aec925412315f.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_PRICE_USD__NUMBER__FLOAT", "alias": "looksrare_sales_PRICE_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/dbt_expectations_expect_column_8615296b6b219a7de35aec925412315f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_8615296b6b219a7de35aec925412315f"}, "created_at": 1654351203.384165, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PRICE_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PRICE_USD", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.not_null_silver_nft__looksrare_sales_TOTAL_FEES.9a38d0c63e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_FEES", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__looksrare_sales_TOTAL_FEES"], "unique_id": "test.ethereum_models.not_null_silver_nft__looksrare_sales_TOTAL_FEES.9a38d0c63e", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__looksrare_sales_TOTAL_FEES.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "not_null_silver_nft__looksrare_sales_TOTAL_FEES", "alias": "looksrare_sales_TOTAL_FEES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/not_null_silver_nft__looksrare_sales_TOTAL_FEES.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.3885992, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.looksrare_sales\nwhere TOTAL_FEES is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOTAL_FEES", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_TOTAL_FEES__NUMBER__FLOAT.27da09c426": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9567f9a25358556c16a4eb23fecbffe3\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TOTAL_FEES", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9567f9a25358556c16a4eb23fecbffe3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_TOTAL_FEES__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_TOTAL_FEES__NUMBER__FLOAT.27da09c426", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_9567f9a25358556c16a4eb23fecbffe3.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_TOTAL_FEES__NUMBER__FLOAT", "alias": "looksrare_sales_TOTAL_FEES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/dbt_expectations_expect_column_9567f9a25358556c16a4eb23fecbffe3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_9567f9a25358556c16a4eb23fecbffe3"}, "created_at": 1654351203.3904371, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TOTAL_FEES'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOTAL_FEES", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.not_null_silver_nft__looksrare_sales_PLATFORM_FEE.24b3ac449d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PLATFORM_FEE", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__looksrare_sales_PLATFORM_FEE"], "unique_id": "test.ethereum_models.not_null_silver_nft__looksrare_sales_PLATFORM_FEE.24b3ac449d", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__looksrare_sales_PLATFORM_FEE.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "not_null_silver_nft__looksrare_sales_PLATFORM_FEE", "alias": "looksrare_sales_PLATFORM_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/not_null_silver_nft__looksrare_sales_PLATFORM_FEE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.395218, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.looksrare_sales\nwhere PLATFORM_FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM_FEE", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_PLATFORM_FEE__NUMBER__FLOAT.63ef886134": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bf15dd639bcfe3aebac3145ee836189e\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "PLATFORM_FEE", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bf15dd639bcfe3aebac3145ee836189e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_PLATFORM_FEE__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_PLATFORM_FEE__NUMBER__FLOAT.63ef886134", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_bf15dd639bcfe3aebac3145ee836189e.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_PLATFORM_FEE__NUMBER__FLOAT", "alias": "looksrare_sales_PLATFORM_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/dbt_expectations_expect_column_bf15dd639bcfe3aebac3145ee836189e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_bf15dd639bcfe3aebac3145ee836189e"}, "created_at": 1654351203.396801, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PLATFORM_FEE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM_FEE", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.not_null_silver_nft__looksrare_sales_CREATOR_FEE.1517fe04d7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATOR_FEE", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__looksrare_sales_CREATOR_FEE"], "unique_id": "test.ethereum_models.not_null_silver_nft__looksrare_sales_CREATOR_FEE.1517fe04d7", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__looksrare_sales_CREATOR_FEE.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "not_null_silver_nft__looksrare_sales_CREATOR_FEE", "alias": "looksrare_sales_CREATOR_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/not_null_silver_nft__looksrare_sales_CREATOR_FEE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.40205, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.looksrare_sales\nwhere CREATOR_FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATOR_FEE", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_CREATOR_FEE__NUMBER__FLOAT.76daf9d67e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_059af18fc9ecb27d74c895d893d55f64\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "CREATOR_FEE", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_059af18fc9ecb27d74c895d893d55f64", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_CREATOR_FEE__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_CREATOR_FEE__NUMBER__FLOAT.76daf9d67e", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_059af18fc9ecb27d74c895d893d55f64.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_CREATOR_FEE__NUMBER__FLOAT", "alias": "looksrare_sales_CREATOR_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/dbt_expectations_expect_column_059af18fc9ecb27d74c895d893d55f64.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_059af18fc9ecb27d74c895d893d55f64"}, "created_at": 1654351203.403556, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CREATOR_FEE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATOR_FEE", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_TOTAL_FEES_USD__NUMBER__FLOAT.af0751ca96": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3bc11527fe8de39339902176189cb0f7\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TOTAL_FEES_USD", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3bc11527fe8de39339902176189cb0f7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_TOTAL_FEES_USD__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_TOTAL_FEES_USD__NUMBER__FLOAT.af0751ca96", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_3bc11527fe8de39339902176189cb0f7.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_TOTAL_FEES_USD__NUMBER__FLOAT", "alias": "looksrare_sales_TOTAL_FEES_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/dbt_expectations_expect_column_3bc11527fe8de39339902176189cb0f7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_3bc11527fe8de39339902176189cb0f7"}, "created_at": 1654351203.4516869, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TOTAL_FEES_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOTAL_FEES_USD", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_PLATFORM_FEE_USD__NUMBER__FLOAT.b478b2adcf": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_754d4eb0bc32c0b5d745315504cee81d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "PLATFORM_FEE_USD", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_754d4eb0bc32c0b5d745315504cee81d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_PLATFORM_FEE_USD__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_PLATFORM_FEE_USD__NUMBER__FLOAT.b478b2adcf", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_754d4eb0bc32c0b5d745315504cee81d.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_PLATFORM_FEE_USD__NUMBER__FLOAT", "alias": "looksrare_sales_PLATFORM_FEE_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/dbt_expectations_expect_column_754d4eb0bc32c0b5d745315504cee81d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_754d4eb0bc32c0b5d745315504cee81d"}, "created_at": 1654351203.456744, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PLATFORM_FEE_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM_FEE_USD", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_CREATOR_FEE_USD__NUMBER__FLOAT.fe3338dc89": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f69ec60cd27d97d6731445eaacb6147d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "CREATOR_FEE_USD", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f69ec60cd27d97d6731445eaacb6147d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_CREATOR_FEE_USD__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_CREATOR_FEE_USD__NUMBER__FLOAT.fe3338dc89", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_f69ec60cd27d97d6731445eaacb6147d.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_CREATOR_FEE_USD__NUMBER__FLOAT", "alias": "looksrare_sales_CREATOR_FEE_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/dbt_expectations_expect_column_f69ec60cd27d97d6731445eaacb6147d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_f69ec60cd27d97d6731445eaacb6147d"}, "created_at": 1654351203.4615831, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CREATOR_FEE_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATOR_FEE_USD", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.not_null_silver_nft__looksrare_sales_TX_FEE.080a2177c8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_FEE", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__looksrare_sales_TX_FEE"], "unique_id": "test.ethereum_models.not_null_silver_nft__looksrare_sales_TX_FEE.080a2177c8", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__looksrare_sales_TX_FEE.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "not_null_silver_nft__looksrare_sales_TX_FEE", "alias": "looksrare_sales_TX_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/not_null_silver_nft__looksrare_sales_TX_FEE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.466026, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.looksrare_sales\nwhere TX_FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_FEE", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_TX_FEE__NUMBER__FLOAT.22bf944f15": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_12d2ef822f283e5cec2f0af2cfe642c2\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TX_FEE", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_12d2ef822f283e5cec2f0af2cfe642c2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_TX_FEE__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_TX_FEE__NUMBER__FLOAT.22bf944f15", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_12d2ef822f283e5cec2f0af2cfe642c2.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_TX_FEE__NUMBER__FLOAT", "alias": "looksrare_sales_TX_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/dbt_expectations_expect_column_12d2ef822f283e5cec2f0af2cfe642c2.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_12d2ef822f283e5cec2f0af2cfe642c2"}, "created_at": 1654351203.467534, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_FEE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_FEE", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.not_null_silver_nft__looksrare_sales_TX_FEE_USD.9a60a8a1c4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"block_timestamp >= '2020-05-05' AND BLOCK_TIMESTAMP < CURRENT_DATE - 2\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_FEE_USD", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "block_timestamp >= '2020-05-05' AND BLOCK_TIMESTAMP < CURRENT_DATE - 2", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__looksrare_sales_TX_FEE_USD"], "unique_id": "test.ethereum_models.not_null_silver_nft__looksrare_sales_TX_FEE_USD.9a60a8a1c4", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__looksrare_sales_TX_FEE_USD.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "not_null_silver_nft__looksrare_sales_TX_FEE_USD", "alias": "looksrare_sales_TX_FEE_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/not_null_silver_nft__looksrare_sales_TX_FEE_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "block_timestamp >= '2020-05-05' AND BLOCK_TIMESTAMP < CURRENT_DATE - 2"}, "created_at": 1654351203.472301, "compiled_sql": "\n    \n    \n\nselect *\nfrom (select * from ETHEREUM_DEV.silver_nft.looksrare_sales where block_timestamp >= '2020-05-05' AND BLOCK_TIMESTAMP < CURRENT_DATE - 2) dbt_subquery\nwhere TX_FEE_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_FEE_USD", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_TX_FEE_USD__NUMBER__FLOAT.68c28c8147": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6f6437d310e1b9dbeda4c8ccb5e8b2e5\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TX_FEE_USD", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6f6437d310e1b9dbeda4c8ccb5e8b2e5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_TX_FEE_USD__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_TX_FEE_USD__NUMBER__FLOAT.68c28c8147", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_6f6437d310e1b9dbeda4c8ccb5e8b2e5.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_TX_FEE_USD__NUMBER__FLOAT", "alias": "looksrare_sales_TX_FEE_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/dbt_expectations_expect_column_6f6437d310e1b9dbeda4c8ccb5e8b2e5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_6f6437d310e1b9dbeda4c8ccb5e8b2e5"}, "created_at": 1654351203.473929, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_FEE_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_FEE_USD", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.not_null_silver_nft__looksrare_sales__LOG_ID.8ab49a30e1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_LOG_ID", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__looksrare_sales__LOG_ID"], "unique_id": "test.ethereum_models.not_null_silver_nft__looksrare_sales__LOG_ID.8ab49a30e1", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__looksrare_sales__LOG_ID.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "not_null_silver_nft__looksrare_sales__LOG_ID", "alias": "looksrare_sales", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/not_null_silver_nft__looksrare_sales__LOG_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.478556, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.looksrare_sales\nwhere _LOG_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_LOG_ID", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.not_null_silver_nft__looksrare_sales_INGESTED_AT.2f4f068926": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__looksrare_sales_INGESTED_AT"], "unique_id": "test.ethereum_models.not_null_silver_nft__looksrare_sales_INGESTED_AT.2f4f068926", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__looksrare_sales_INGESTED_AT.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "not_null_silver_nft__looksrare_sales_INGESTED_AT", "alias": "looksrare_sales_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/not_null_silver_nft__looksrare_sales_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.4802449, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.looksrare_sales\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__looksrare_sales_INGESTED_AT__day__1.ddf637c9e2": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_8c939c715798506a2f658c87c8575cb0\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_8c939c715798506a2f658c87c8575cb0", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__looksrare_sales_INGESTED_AT__day__1"], "unique_id": "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__looksrare_sales_INGESTED_AT__day__1.ddf637c9e2", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_row_va_8c939c715798506a2f658c87c8575cb0.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__looksrare_sales_INGESTED_AT__day__1", "alias": "looksrare_sales_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/dbt_expectations_expect_row_va_8c939c715798506a2f658c87c8575cb0.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_8c939c715798506a2f658c87c8575cb0"}, "created_at": 1654351203.4820852, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(INGESTED_AT as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        ETHEREUM_DEV.silver_nft.looksrare_sales\n    where\n        cast(INGESTED_AT as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_INGESTED_AT__TIMESTAMP_NTZ.27ad6ac99d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e27b85f35eea09a26fecea4600205129\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e27b85f35eea09a26fecea4600205129", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_INGESTED_AT__TIMESTAMP_NTZ"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_INGESTED_AT__TIMESTAMP_NTZ.27ad6ac99d", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_e27b85f35eea09a26fecea4600205129.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_INGESTED_AT__TIMESTAMP_NTZ", "alias": "looksrare_sales_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/dbt_expectations_expect_column_e27b85f35eea09a26fecea4600205129.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e27b85f35eea09a26fecea4600205129"}, "created_at": 1654351203.487591, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'INGESTED_AT'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.not_null_silver_nft__looksrare_sales_ORIGIN_FROM_ADDRESS.79187e68b6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__looksrare_sales_ORIGIN_FROM_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver_nft__looksrare_sales_ORIGIN_FROM_ADDRESS.79187e68b6", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__looksrare_sales_ORIGIN_FROM_ADDRESS.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "not_null_silver_nft__looksrare_sales_ORIGIN_FROM_ADDRESS", "alias": "looksrare_sales_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/not_null_silver_nft__looksrare_sales_ORIGIN_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.491863, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.looksrare_sales\nwhere ORIGIN_FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.7d533b46b8": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b9fbb6d72865fcf684766de7ab821cbd\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b9fbb6d72865fcf684766de7ab821cbd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.7d533b46b8", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_b9fbb6d72865fcf684766de7ab821cbd.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "looksrare_sales_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/dbt_expectations_expect_column_b9fbb6d72865fcf684766de7ab821cbd.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_b9fbb6d72865fcf684766de7ab821cbd"}, "created_at": 1654351203.4934888, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.looksrare_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.not_null_silver_nft__looksrare_sales_ORIGIN_TO_ADDRESS.bda1344132": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__looksrare_sales_ORIGIN_TO_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver_nft__looksrare_sales_ORIGIN_TO_ADDRESS.bda1344132", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__looksrare_sales_ORIGIN_TO_ADDRESS.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "not_null_silver_nft__looksrare_sales_ORIGIN_TO_ADDRESS", "alias": "looksrare_sales_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/not_null_silver_nft__looksrare_sales_ORIGIN_TO_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.498026, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.looksrare_sales\nwhere ORIGIN_TO_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.18b6e532b8": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_01b5bf447060c118cafe1cd78148b62b\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_01b5bf447060c118cafe1cd78148b62b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.18b6e532b8", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_01b5bf447060c118cafe1cd78148b62b.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "looksrare_sales_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/dbt_expectations_expect_column_01b5bf447060c118cafe1cd78148b62b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_01b5bf447060c118cafe1cd78148b62b"}, "created_at": 1654351203.499637, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.looksrare_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.not_null_silver_nft__looksrare_sales_ORIGIN_FUNCTION_SIGNATURE.ae8e49763c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FUNCTION_SIGNATURE", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__looksrare_sales_ORIGIN_FUNCTION_SIGNATURE"], "unique_id": "test.ethereum_models.not_null_silver_nft__looksrare_sales_ORIGIN_FUNCTION_SIGNATURE.ae8e49763c", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__looksrare_sales_ORIGIN_FUNCTION_SIGNATURE.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "not_null_silver_nft__looksrare_sales_ORIGIN_FUNCTION_SIGNATURE", "alias": "looksrare_sales_ORIGIN_FUNCTION_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/not_null_silver_nft__looksrare_sales_ORIGIN_FUNCTION_SIGNATURE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.504113, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.looksrare_sales\nwhere ORIGIN_FUNCTION_SIGNATURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FUNCTION_SIGNATURE", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.c912f2f9cc": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a48ce6d685db4d9584a485ecc8fb8b45\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FUNCTION_SIGNATURE", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a48ce6d685db4d9584a485ecc8fb8b45", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.c912f2f9cc", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_a48ce6d685db4d9584a485ecc8fb8b45.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_", "alias": "looksrare_sales_ORIGIN_FUNCTION_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/dbt_expectations_expect_column_a48ce6d685db4d9584a485ecc8fb8b45.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_a48ce6d685db4d9584a485ecc8fb8b45"}, "created_at": 1654351203.5059788, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_FUNCTION_SIGNATURE, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.looksrare_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FUNCTION_SIGNATURE", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.not_null_silver_nft__looksrare_sales_EVENT_TYPE.c68afd2d19": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVENT_TYPE", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__looksrare_sales_EVENT_TYPE"], "unique_id": "test.ethereum_models.not_null_silver_nft__looksrare_sales_EVENT_TYPE.c68afd2d19", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__looksrare_sales_EVENT_TYPE.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "not_null_silver_nft__looksrare_sales_EVENT_TYPE", "alias": "looksrare_sales_EVENT_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/not_null_silver_nft__looksrare_sales_EVENT_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.510873, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.looksrare_sales\nwhere EVENT_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EVENT_TYPE", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__looksrare_sales_EVENT_TYPE__bid_won__sale.1a3346fb31": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_62af283ceefdee785cad39dc2592d825\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["bid_won", "sale"], "column_name": "EVENT_TYPE", "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_62af283ceefdee785cad39dc2592d825", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_set_silver_nft__looksrare_sales_EVENT_TYPE__bid_won__sale"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__looksrare_sales_EVENT_TYPE__bid_won__sale.1a3346fb31", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_62af283ceefdee785cad39dc2592d825.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_silver_nft__looksrare_sales_EVENT_TYPE__bid_won__sale", "alias": "looksrare_sales_EVENT_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/dbt_expectations_expect_column_62af283ceefdee785cad39dc2592d825.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_62af283ceefdee785cad39dc2592d825"}, "created_at": 1654351203.512682, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        EVENT_TYPE as value_field\n\n    from ETHEREUM_DEV.silver_nft.looksrare_sales\n    \n\n),\nset_values as (\n\n    select\n        cast('bid_won' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('sale' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EVENT_TYPE", "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver_nft__looksrare_sales__log_id.6e1700c569": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_44e90554acba82ec9393cd3c86ebc7a1\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_log_id"], "model": "{{ get_where_subquery(ref('silver_nft__looksrare_sales')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__looksrare_sales"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_44e90554acba82ec9393cd3c86ebc7a1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_utils_unique_combination_of_columns_silver_nft__looksrare_sales__log_id"], "unique_id": "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver_nft__looksrare_sales__log_id.6e1700c569", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_utils_unique_combination_o_44e90554acba82ec9393cd3c86ebc7a1.sql", "original_file_path": "models/silver/nft/silver_nft__looksrare_sales.yml", "name": "dbt_utils_unique_combination_of_columns_silver_nft__looksrare_sales__log_id", "alias": "looksrare_sales", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__looksrare_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__looksrare_sales.yml/dbt_utils_unique_combination_o_44e90554acba82ec9393cd3c86ebc7a1.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_44e90554acba82ec9393cd3c86ebc7a1"}, "created_at": 1654351203.518241, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _log_id\n    from ETHEREUM_DEV.silver_nft.looksrare_sales\n    group by _log_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver_nft__looksrare_sales"}, "test.ethereum_models.not_null_silver_nft__opensea_sales_BLOCK_NUMBER.ff6ffccdd3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__opensea_sales_BLOCK_NUMBER"], "unique_id": "test.ethereum_models.not_null_silver_nft__opensea_sales_BLOCK_NUMBER.ff6ffccdd3", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__opensea_sales_BLOCK_NUMBER.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "not_null_silver_nft__opensea_sales_BLOCK_NUMBER", "alias": "opensea_sales_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/not_null_silver_nft__opensea_sales_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.716199, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.opensea_sales\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_BLOCK_NUMBER__NUMBER__FLOAT.d9ca2a1202": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5b69fc7078c3782d684f8a7505591d22\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5b69fc7078c3782d684f8a7505591d22", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_BLOCK_NUMBER__NUMBER__FLOAT.d9ca2a1202", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_5b69fc7078c3782d684f8a7505591d22.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "opensea_sales_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/dbt_expectations_expect_column_5b69fc7078c3782d684f8a7505591d22.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_5b69fc7078c3782d684f8a7505591d22"}, "created_at": 1654351203.7180648, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.not_null_silver_nft__opensea_sales_BLOCK_TIMESTAMP.0b00ab83f0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__opensea_sales_BLOCK_TIMESTAMP"], "unique_id": "test.ethereum_models.not_null_silver_nft__opensea_sales_BLOCK_TIMESTAMP.0b00ab83f0", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__opensea_sales_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "not_null_silver_nft__opensea_sales_BLOCK_TIMESTAMP", "alias": "opensea_sales_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/not_null_silver_nft__opensea_sales_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.722731, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.opensea_sales\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__opensea_sales_BLOCK_TIMESTAMP__day__1.6d7e629b07": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_29fd0b20842a5934033ed64b173f9384\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_29fd0b20842a5934033ed64b173f9384", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__opensea_sales_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__opensea_sales_BLOCK_TIMESTAMP__day__1.6d7e629b07", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_row_va_29fd0b20842a5934033ed64b173f9384.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__opensea_sales_BLOCK_TIMESTAMP__day__1", "alias": "opensea_sales_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/dbt_expectations_expect_row_va_29fd0b20842a5934033ed64b173f9384.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_29fd0b20842a5934033ed64b173f9384"}, "created_at": 1654351203.724454, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        ETHEREUM_DEV.silver_nft.opensea_sales\n    where\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.49514f88c4": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c814c29fb8c6a30ed4268539e761c113\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c814c29fb8c6a30ed4268539e761c113", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.49514f88c4", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_c814c29fb8c6a30ed4268539e761c113.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "opensea_sales_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/dbt_expectations_expect_column_c814c29fb8c6a30ed4268539e761c113.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c814c29fb8c6a30ed4268539e761c113"}, "created_at": 1654351203.730001, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.not_null_silver_nft__opensea_sales_TX_HASH.b9b888ff7c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__opensea_sales_TX_HASH"], "unique_id": "test.ethereum_models.not_null_silver_nft__opensea_sales_TX_HASH.b9b888ff7c", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__opensea_sales_TX_HASH.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "not_null_silver_nft__opensea_sales_TX_HASH", "alias": "opensea_sales_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/not_null_silver_nft__opensea_sales_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.7343118, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.opensea_sales\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_TX_HASH__0_xX_0_9a_fA_F_.28436a215a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_662c30d7d6b8615b908d44d6f07e705a\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_662c30d7d6b8615b908d44d6f07e705a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_TX_HASH__0_xX_0_9a_fA_F_.28436a215a", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_662c30d7d6b8615b908d44d6f07e705a.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_TX_HASH__0_xX_0_9a_fA_F_", "alias": "opensea_sales_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/dbt_expectations_expect_column_662c30d7d6b8615b908d44d6f07e705a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_662c30d7d6b8615b908d44d6f07e705a"}, "created_at": 1654351203.735874, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.opensea_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.not_null_silver_nft__opensea_sales_PLATFORM_ADDRESS.2f2598fc00": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PLATFORM_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__opensea_sales_PLATFORM_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver_nft__opensea_sales_PLATFORM_ADDRESS.2f2598fc00", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__opensea_sales_PLATFORM_ADDRESS.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "not_null_silver_nft__opensea_sales_PLATFORM_ADDRESS", "alias": "opensea_sales_PLATFORM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/not_null_silver_nft__opensea_sales_PLATFORM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.7409658, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.opensea_sales\nwhere PLATFORM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM_ADDRESS", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_.8d2dbabd48": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a6d2dfe6f27da447e1c53a9361fd08f3\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "PLATFORM_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a6d2dfe6f27da447e1c53a9361fd08f3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_.8d2dbabd48", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_a6d2dfe6f27da447e1c53a9361fd08f3.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "opensea_sales_PLATFORM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/dbt_expectations_expect_column_a6d2dfe6f27da447e1c53a9361fd08f3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_a6d2dfe6f27da447e1c53a9361fd08f3"}, "created_at": 1654351203.7426739, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(PLATFORM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.opensea_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM_ADDRESS", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.not_null_silver_nft__opensea_sales_PLATFORM_NAME.ac234a5988": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PLATFORM_NAME", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__opensea_sales_PLATFORM_NAME"], "unique_id": "test.ethereum_models.not_null_silver_nft__opensea_sales_PLATFORM_NAME.ac234a5988", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__opensea_sales_PLATFORM_NAME.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "not_null_silver_nft__opensea_sales_PLATFORM_NAME", "alias": "opensea_sales_PLATFORM_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/not_null_silver_nft__opensea_sales_PLATFORM_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.747382, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.opensea_sales\nwhere PLATFORM_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM_NAME", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__opensea_sales_PLATFORM_NAME__opensea.5aba577130": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_193dc726cdbe60d1011ba3b477e0d30c\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["opensea"], "column_name": "PLATFORM_NAME", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_193dc726cdbe60d1011ba3b477e0d30c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_set_silver_nft__opensea_sales_PLATFORM_NAME__opensea"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__opensea_sales_PLATFORM_NAME__opensea.5aba577130", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_193dc726cdbe60d1011ba3b477e0d30c.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_silver_nft__opensea_sales_PLATFORM_NAME__opensea", "alias": "opensea_sales_PLATFORM_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/dbt_expectations_expect_column_193dc726cdbe60d1011ba3b477e0d30c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_193dc726cdbe60d1011ba3b477e0d30c"}, "created_at": 1654351203.749184, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        PLATFORM_NAME as value_field\n\n    from ETHEREUM_DEV.silver_nft.opensea_sales\n    \n\n),\nset_values as (\n\n    select\n        cast('opensea' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM_NAME", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.not_null_silver_nft__opensea_sales_NFT_FROM_ADDRESS.14581c0a44": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NFT_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__opensea_sales_NFT_FROM_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver_nft__opensea_sales_NFT_FROM_ADDRESS.14581c0a44", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__opensea_sales_NFT_FROM_ADDRESS.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "not_null_silver_nft__opensea_sales_NFT_FROM_ADDRESS", "alias": "opensea_sales_NFT_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/not_null_silver_nft__opensea_sales_NFT_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.753452, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.opensea_sales\nwhere NFT_FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NFT_FROM_ADDRESS", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_NFT_FROM_ADDRESS__0_xX_0_9a_fA_F_.7121ee0cb0": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_923f4bfa89427073f2e7114d29747e80\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "NFT_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_923f4bfa89427073f2e7114d29747e80", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_NFT_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_NFT_FROM_ADDRESS__0_xX_0_9a_fA_F_.7121ee0cb0", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_923f4bfa89427073f2e7114d29747e80.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_NFT_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "opensea_sales_NFT_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/dbt_expectations_expect_column_923f4bfa89427073f2e7114d29747e80.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_923f4bfa89427073f2e7114d29747e80"}, "created_at": 1654351203.7554219, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(NFT_FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.opensea_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NFT_FROM_ADDRESS", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.not_null_silver_nft__opensea_sales_NFT_TO_ADDRESS.9d57a88f98": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NFT_TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__opensea_sales_NFT_TO_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver_nft__opensea_sales_NFT_TO_ADDRESS.9d57a88f98", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__opensea_sales_NFT_TO_ADDRESS.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "not_null_silver_nft__opensea_sales_NFT_TO_ADDRESS", "alias": "opensea_sales_NFT_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/not_null_silver_nft__opensea_sales_NFT_TO_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.759965, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.opensea_sales\nwhere NFT_TO_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NFT_TO_ADDRESS", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_NFT_TO_ADDRESS__0_xX_0_9a_fA_F_.95d93d45fe": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_104ace4299e26a502dbf9677af04bbfb\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "NFT_TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_104ace4299e26a502dbf9677af04bbfb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_NFT_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_NFT_TO_ADDRESS__0_xX_0_9a_fA_F_.95d93d45fe", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_104ace4299e26a502dbf9677af04bbfb.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_NFT_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "opensea_sales_NFT_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/dbt_expectations_expect_column_104ace4299e26a502dbf9677af04bbfb.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_104ace4299e26a502dbf9677af04bbfb"}, "created_at": 1654351203.761755, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(NFT_TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.opensea_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NFT_TO_ADDRESS", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.not_null_silver_nft__opensea_sales_NFT_ADDRESS.ccbdc863a6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NFT_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__opensea_sales_NFT_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver_nft__opensea_sales_NFT_ADDRESS.ccbdc863a6", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__opensea_sales_NFT_ADDRESS.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "not_null_silver_nft__opensea_sales_NFT_ADDRESS", "alias": "opensea_sales_NFT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/not_null_silver_nft__opensea_sales_NFT_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.766219, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.opensea_sales\nwhere NFT_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NFT_ADDRESS", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_.a8e11493ed": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b5e0c5e7490ccb71bd5c8eb714dd0ef6\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "NFT_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b5e0c5e7490ccb71bd5c8eb714dd0ef6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_.a8e11493ed", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_b5e0c5e7490ccb71bd5c8eb714dd0ef6.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_", "alias": "opensea_sales_NFT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/dbt_expectations_expect_column_b5e0c5e7490ccb71bd5c8eb714dd0ef6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_b5e0c5e7490ccb71bd5c8eb714dd0ef6"}, "created_at": 1654351203.768291, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(NFT_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.opensea_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NFT_ADDRESS", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.not_null_silver_nft__opensea_sales_TOKENID.0a6564219f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKENID", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__opensea_sales_TOKENID"], "unique_id": "test.ethereum_models.not_null_silver_nft__opensea_sales_TOKENID.0a6564219f", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__opensea_sales_TOKENID.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "not_null_silver_nft__opensea_sales_TOKENID", "alias": "opensea_sales_TOKENID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/not_null_silver_nft__opensea_sales_TOKENID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.772823, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.opensea_sales\nwhere TOKENID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOKENID", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.not_null_silver_nft__opensea_sales_CURRENCY_ADDRESS.67d7f68c0d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CURRENCY_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__opensea_sales_CURRENCY_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver_nft__opensea_sales_CURRENCY_ADDRESS.67d7f68c0d", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__opensea_sales_CURRENCY_ADDRESS.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "not_null_silver_nft__opensea_sales_CURRENCY_ADDRESS", "alias": "opensea_sales_CURRENCY_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/not_null_silver_nft__opensea_sales_CURRENCY_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.774558, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.opensea_sales\nwhere CURRENCY_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CURRENCY_ADDRESS", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.not_null_silver_nft__opensea_sales_PRICE.12d98fda92": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PRICE", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__opensea_sales_PRICE"], "unique_id": "test.ethereum_models.not_null_silver_nft__opensea_sales_PRICE.12d98fda92", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__opensea_sales_PRICE.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "not_null_silver_nft__opensea_sales_PRICE", "alias": "opensea_sales_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/not_null_silver_nft__opensea_sales_PRICE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.776138, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.opensea_sales\nwhere PRICE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PRICE", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_PRICE__NUMBER__FLOAT.49af08b6d6": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a3c078570fe9316604db8b7e39410e53\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "PRICE", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a3c078570fe9316604db8b7e39410e53", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_PRICE__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_PRICE__NUMBER__FLOAT.49af08b6d6", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_a3c078570fe9316604db8b7e39410e53.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_PRICE__NUMBER__FLOAT", "alias": "opensea_sales_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/dbt_expectations_expect_column_a3c078570fe9316604db8b7e39410e53.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_a3c078570fe9316604db8b7e39410e53"}, "created_at": 1654351203.7777238, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PRICE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PRICE", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_PRICE_USD__NUMBER__FLOAT.70feea7df8": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_09a0ee8382897f66fd93b2c8ff76020a\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "PRICE_USD", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_09a0ee8382897f66fd93b2c8ff76020a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_PRICE_USD__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_PRICE_USD__NUMBER__FLOAT.70feea7df8", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_09a0ee8382897f66fd93b2c8ff76020a.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_PRICE_USD__NUMBER__FLOAT", "alias": "opensea_sales_PRICE_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/dbt_expectations_expect_column_09a0ee8382897f66fd93b2c8ff76020a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_09a0ee8382897f66fd93b2c8ff76020a"}, "created_at": 1654351203.7846441, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PRICE_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PRICE_USD", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.not_null_silver_nft__opensea_sales_TOTAL_FEES.290020e9ec": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_FEES", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__opensea_sales_TOTAL_FEES"], "unique_id": "test.ethereum_models.not_null_silver_nft__opensea_sales_TOTAL_FEES.290020e9ec", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__opensea_sales_TOTAL_FEES.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "not_null_silver_nft__opensea_sales_TOTAL_FEES", "alias": "opensea_sales_TOTAL_FEES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/not_null_silver_nft__opensea_sales_TOTAL_FEES.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.7894762, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.opensea_sales\nwhere TOTAL_FEES is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOTAL_FEES", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_TOTAL_FEES__NUMBER__FLOAT.fc5ea050bf": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1f0eb055cccf011cf7bec610f6a9325b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TOTAL_FEES", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1f0eb055cccf011cf7bec610f6a9325b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_TOTAL_FEES__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_TOTAL_FEES__NUMBER__FLOAT.fc5ea050bf", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_1f0eb055cccf011cf7bec610f6a9325b.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_TOTAL_FEES__NUMBER__FLOAT", "alias": "opensea_sales_TOTAL_FEES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/dbt_expectations_expect_column_1f0eb055cccf011cf7bec610f6a9325b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_1f0eb055cccf011cf7bec610f6a9325b"}, "created_at": 1654351203.791012, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TOTAL_FEES'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOTAL_FEES", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.not_null_silver_nft__opensea_sales_PLATFORM_FEE.b66c03b059": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PLATFORM_FEE", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__opensea_sales_PLATFORM_FEE"], "unique_id": "test.ethereum_models.not_null_silver_nft__opensea_sales_PLATFORM_FEE.b66c03b059", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__opensea_sales_PLATFORM_FEE.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "not_null_silver_nft__opensea_sales_PLATFORM_FEE", "alias": "opensea_sales_PLATFORM_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/not_null_silver_nft__opensea_sales_PLATFORM_FEE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.7964742, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.opensea_sales\nwhere PLATFORM_FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM_FEE", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_PLATFORM_FEE__NUMBER__FLOAT.c169a6334f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c9007bbb4f4d006539a294ca0a872a01\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "PLATFORM_FEE", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c9007bbb4f4d006539a294ca0a872a01", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_PLATFORM_FEE__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_PLATFORM_FEE__NUMBER__FLOAT.c169a6334f", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_c9007bbb4f4d006539a294ca0a872a01.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_PLATFORM_FEE__NUMBER__FLOAT", "alias": "opensea_sales_PLATFORM_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/dbt_expectations_expect_column_c9007bbb4f4d006539a294ca0a872a01.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c9007bbb4f4d006539a294ca0a872a01"}, "created_at": 1654351203.7980149, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PLATFORM_FEE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM_FEE", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.not_null_silver_nft__opensea_sales_CREATOR_FEE.d7b66bbb1c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATOR_FEE", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__opensea_sales_CREATOR_FEE"], "unique_id": "test.ethereum_models.not_null_silver_nft__opensea_sales_CREATOR_FEE.d7b66bbb1c", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__opensea_sales_CREATOR_FEE.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "not_null_silver_nft__opensea_sales_CREATOR_FEE", "alias": "opensea_sales_CREATOR_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/not_null_silver_nft__opensea_sales_CREATOR_FEE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.803184, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.opensea_sales\nwhere CREATOR_FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATOR_FEE", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_CREATOR_FEE__NUMBER__FLOAT.dc96f9c75e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_002d4561c738e6dbdb69b4babe0551ff\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "CREATOR_FEE", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_002d4561c738e6dbdb69b4babe0551ff", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_CREATOR_FEE__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_CREATOR_FEE__NUMBER__FLOAT.dc96f9c75e", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_002d4561c738e6dbdb69b4babe0551ff.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_CREATOR_FEE__NUMBER__FLOAT", "alias": "opensea_sales_CREATOR_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/dbt_expectations_expect_column_002d4561c738e6dbdb69b4babe0551ff.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_002d4561c738e6dbdb69b4babe0551ff"}, "created_at": 1654351203.804896, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CREATOR_FEE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATOR_FEE", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_TOTAL_FEES_USD__NUMBER__FLOAT.8afb1a5920": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0da8a30f1b42dce7e2d276f01b905b86\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TOTAL_FEES_USD", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0da8a30f1b42dce7e2d276f01b905b86", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_TOTAL_FEES_USD__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_TOTAL_FEES_USD__NUMBER__FLOAT.8afb1a5920", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_0da8a30f1b42dce7e2d276f01b905b86.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_TOTAL_FEES_USD__NUMBER__FLOAT", "alias": "opensea_sales_TOTAL_FEES_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/dbt_expectations_expect_column_0da8a30f1b42dce7e2d276f01b905b86.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_0da8a30f1b42dce7e2d276f01b905b86"}, "created_at": 1654351203.8100638, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TOTAL_FEES_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOTAL_FEES_USD", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_PLATFORM_FEE_USD__NUMBER__FLOAT.5c66b8d9e6": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b33fcc7e7367ac7fac6e9d75d5596d00\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "PLATFORM_FEE_USD", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b33fcc7e7367ac7fac6e9d75d5596d00", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_PLATFORM_FEE_USD__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_PLATFORM_FEE_USD__NUMBER__FLOAT.5c66b8d9e6", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_b33fcc7e7367ac7fac6e9d75d5596d00.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_PLATFORM_FEE_USD__NUMBER__FLOAT", "alias": "opensea_sales_PLATFORM_FEE_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/dbt_expectations_expect_column_b33fcc7e7367ac7fac6e9d75d5596d00.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_b33fcc7e7367ac7fac6e9d75d5596d00"}, "created_at": 1654351203.815404, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PLATFORM_FEE_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM_FEE_USD", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_CREATOR_FEE_USD__NUMBER__FLOAT.12994666a6": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5584b61dd4fa09194b5d058031ed9cc5\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "CREATOR_FEE_USD", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5584b61dd4fa09194b5d058031ed9cc5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_CREATOR_FEE_USD__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_CREATOR_FEE_USD__NUMBER__FLOAT.12994666a6", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_5584b61dd4fa09194b5d058031ed9cc5.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_CREATOR_FEE_USD__NUMBER__FLOAT", "alias": "opensea_sales_CREATOR_FEE_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/dbt_expectations_expect_column_5584b61dd4fa09194b5d058031ed9cc5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_5584b61dd4fa09194b5d058031ed9cc5"}, "created_at": 1654351203.821897, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CREATOR_FEE_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATOR_FEE_USD", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.not_null_silver_nft__opensea_sales_TX_FEE.632153a569": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_FEE", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__opensea_sales_TX_FEE"], "unique_id": "test.ethereum_models.not_null_silver_nft__opensea_sales_TX_FEE.632153a569", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__opensea_sales_TX_FEE.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "not_null_silver_nft__opensea_sales_TX_FEE", "alias": "opensea_sales_TX_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/not_null_silver_nft__opensea_sales_TX_FEE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.82732, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.opensea_sales\nwhere TX_FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_FEE", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_TX_FEE__NUMBER__FLOAT.615a8e437b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_603f69adf650c10dbf65f551d32a8020\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TX_FEE", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_603f69adf650c10dbf65f551d32a8020", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_TX_FEE__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_TX_FEE__NUMBER__FLOAT.615a8e437b", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_603f69adf650c10dbf65f551d32a8020.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_TX_FEE__NUMBER__FLOAT", "alias": "opensea_sales_TX_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/dbt_expectations_expect_column_603f69adf650c10dbf65f551d32a8020.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_603f69adf650c10dbf65f551d32a8020"}, "created_at": 1654351203.829071, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_FEE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_FEE", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.not_null_silver_nft__opensea_sales_TX_FEE_USD.6f3f5c7484": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"block_timestamp >= '2020-05-05' AND BLOCK_TIMESTAMP < CURRENT_DATE - 2\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_FEE_USD", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "block_timestamp >= '2020-05-05' AND BLOCK_TIMESTAMP < CURRENT_DATE - 2", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__opensea_sales_TX_FEE_USD"], "unique_id": "test.ethereum_models.not_null_silver_nft__opensea_sales_TX_FEE_USD.6f3f5c7484", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__opensea_sales_TX_FEE_USD.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "not_null_silver_nft__opensea_sales_TX_FEE_USD", "alias": "opensea_sales_TX_FEE_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/not_null_silver_nft__opensea_sales_TX_FEE_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "block_timestamp >= '2020-05-05' AND BLOCK_TIMESTAMP < CURRENT_DATE - 2"}, "created_at": 1654351203.83496, "compiled_sql": "\n    \n    \n\nselect *\nfrom (select * from ETHEREUM_DEV.silver_nft.opensea_sales where block_timestamp >= '2020-05-05' AND BLOCK_TIMESTAMP < CURRENT_DATE - 2) dbt_subquery\nwhere TX_FEE_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_FEE_USD", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_TX_FEE_USD__NUMBER__FLOAT.fd8e71b5e3": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_daf6cfe3f5601cabf46943a21eccfc7e\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TX_FEE_USD", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_daf6cfe3f5601cabf46943a21eccfc7e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_TX_FEE_USD__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_TX_FEE_USD__NUMBER__FLOAT.fd8e71b5e3", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_daf6cfe3f5601cabf46943a21eccfc7e.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_TX_FEE_USD__NUMBER__FLOAT", "alias": "opensea_sales_TX_FEE_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/dbt_expectations_expect_column_daf6cfe3f5601cabf46943a21eccfc7e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_daf6cfe3f5601cabf46943a21eccfc7e"}, "created_at": 1654351203.83779, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_FEE_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_FEE_USD", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.not_null_silver_nft__opensea_sales__LOG_ID.18b5b8bc41": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_LOG_ID", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__opensea_sales__LOG_ID"], "unique_id": "test.ethereum_models.not_null_silver_nft__opensea_sales__LOG_ID.18b5b8bc41", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__opensea_sales__LOG_ID.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "not_null_silver_nft__opensea_sales__LOG_ID", "alias": "opensea_sales", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/not_null_silver_nft__opensea_sales__LOG_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.843086, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.opensea_sales\nwhere _LOG_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_LOG_ID", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.not_null_silver_nft__opensea_sales_INGESTED_AT.8ad208bea8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__opensea_sales_INGESTED_AT"], "unique_id": "test.ethereum_models.not_null_silver_nft__opensea_sales_INGESTED_AT.8ad208bea8", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__opensea_sales_INGESTED_AT.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "not_null_silver_nft__opensea_sales_INGESTED_AT", "alias": "opensea_sales_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/not_null_silver_nft__opensea_sales_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.8450959, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.opensea_sales\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__opensea_sales_INGESTED_AT__day__1.62a375743f": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_b8847f83d545cea58c5d669cd604e00f\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_b8847f83d545cea58c5d669cd604e00f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__opensea_sales_INGESTED_AT__day__1"], "unique_id": "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__opensea_sales_INGESTED_AT__day__1.62a375743f", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_row_va_b8847f83d545cea58c5d669cd604e00f.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__opensea_sales_INGESTED_AT__day__1", "alias": "opensea_sales_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/dbt_expectations_expect_row_va_b8847f83d545cea58c5d669cd604e00f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_b8847f83d545cea58c5d669cd604e00f"}, "created_at": 1654351203.846784, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(INGESTED_AT as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        ETHEREUM_DEV.silver_nft.opensea_sales\n    where\n        cast(INGESTED_AT as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_INGESTED_AT__TIMESTAMP_NTZ.df0515f572": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a55550f170b3be03a4f39539dc067286\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a55550f170b3be03a4f39539dc067286", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_INGESTED_AT__TIMESTAMP_NTZ"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_INGESTED_AT__TIMESTAMP_NTZ.df0515f572", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_a55550f170b3be03a4f39539dc067286.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_INGESTED_AT__TIMESTAMP_NTZ", "alias": "opensea_sales_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/dbt_expectations_expect_column_a55550f170b3be03a4f39539dc067286.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_a55550f170b3be03a4f39539dc067286"}, "created_at": 1654351203.8536792, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'INGESTED_AT'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.not_null_silver_nft__opensea_sales_ORIGIN_FROM_ADDRESS.c11d976102": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__opensea_sales_ORIGIN_FROM_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver_nft__opensea_sales_ORIGIN_FROM_ADDRESS.c11d976102", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__opensea_sales_ORIGIN_FROM_ADDRESS.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "not_null_silver_nft__opensea_sales_ORIGIN_FROM_ADDRESS", "alias": "opensea_sales_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/not_null_silver_nft__opensea_sales_ORIGIN_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.8579671, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.opensea_sales\nwhere ORIGIN_FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.89dc1db5d1": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2c55fad0c687aa6c9c9c73d823c45bec\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2c55fad0c687aa6c9c9c73d823c45bec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.89dc1db5d1", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_2c55fad0c687aa6c9c9c73d823c45bec.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "opensea_sales_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/dbt_expectations_expect_column_2c55fad0c687aa6c9c9c73d823c45bec.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_2c55fad0c687aa6c9c9c73d823c45bec"}, "created_at": 1654351203.860736, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.opensea_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.not_null_silver_nft__opensea_sales_ORIGIN_TO_ADDRESS.8a06fa835e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__opensea_sales_ORIGIN_TO_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver_nft__opensea_sales_ORIGIN_TO_ADDRESS.8a06fa835e", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__opensea_sales_ORIGIN_TO_ADDRESS.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "not_null_silver_nft__opensea_sales_ORIGIN_TO_ADDRESS", "alias": "opensea_sales_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/not_null_silver_nft__opensea_sales_ORIGIN_TO_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.8654459, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.opensea_sales\nwhere ORIGIN_TO_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.136e4cd9dc": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_08debe958b1376df783d2acab9019016\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_08debe958b1376df783d2acab9019016", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.136e4cd9dc", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_08debe958b1376df783d2acab9019016.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "opensea_sales_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/dbt_expectations_expect_column_08debe958b1376df783d2acab9019016.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_08debe958b1376df783d2acab9019016"}, "created_at": 1654351203.867937, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.opensea_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.not_null_silver_nft__opensea_sales_ORIGIN_FUNCTION_SIGNATURE.b2c2a50da7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FUNCTION_SIGNATURE", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__opensea_sales_ORIGIN_FUNCTION_SIGNATURE"], "unique_id": "test.ethereum_models.not_null_silver_nft__opensea_sales_ORIGIN_FUNCTION_SIGNATURE.b2c2a50da7", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__opensea_sales_ORIGIN_FUNCTION_SIGNATURE.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "not_null_silver_nft__opensea_sales_ORIGIN_FUNCTION_SIGNATURE", "alias": "opensea_sales_ORIGIN_FUNCTION_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/not_null_silver_nft__opensea_sales_ORIGIN_FUNCTION_SIGNATURE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.872674, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.opensea_sales\nwhere ORIGIN_FUNCTION_SIGNATURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FUNCTION_SIGNATURE", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.64a1b8490e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fc21290476a93640b96631702a926cad\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FUNCTION_SIGNATURE", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fc21290476a93640b96631702a926cad", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.64a1b8490e", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_fc21290476a93640b96631702a926cad.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_", "alias": "opensea_sales_ORIGIN_FUNCTION_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/dbt_expectations_expect_column_fc21290476a93640b96631702a926cad.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_fc21290476a93640b96631702a926cad"}, "created_at": 1654351203.874301, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_FUNCTION_SIGNATURE, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.opensea_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FUNCTION_SIGNATURE", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.not_null_silver_nft__opensea_sales_EVENT_TYPE.15a116ebe0": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVENT_TYPE", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__opensea_sales_EVENT_TYPE"], "unique_id": "test.ethereum_models.not_null_silver_nft__opensea_sales_EVENT_TYPE.15a116ebe0", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__opensea_sales_EVENT_TYPE.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "not_null_silver_nft__opensea_sales_EVENT_TYPE", "alias": "opensea_sales_EVENT_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/not_null_silver_nft__opensea_sales_EVENT_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351203.880168, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.opensea_sales\nwhere EVENT_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EVENT_TYPE", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__opensea_sales_EVENT_TYPE__bid_won__sale.ac2374f4eb": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ec8069cdf5fd976e801b4e81bdafb57b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["bid_won", "sale"], "column_name": "EVENT_TYPE", "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ec8069cdf5fd976e801b4e81bdafb57b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_set_silver_nft__opensea_sales_EVENT_TYPE__bid_won__sale"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__opensea_sales_EVENT_TYPE__bid_won__sale.ac2374f4eb", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_ec8069cdf5fd976e801b4e81bdafb57b.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_silver_nft__opensea_sales_EVENT_TYPE__bid_won__sale", "alias": "opensea_sales_EVENT_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/dbt_expectations_expect_column_ec8069cdf5fd976e801b4e81bdafb57b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_ec8069cdf5fd976e801b4e81bdafb57b"}, "created_at": 1654351203.881782, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        EVENT_TYPE as value_field\n\n    from ETHEREUM_DEV.silver_nft.opensea_sales\n    \n\n),\nset_values as (\n\n    select\n        cast('bid_won' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('sale' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EVENT_TYPE", "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver_nft__opensea_sales__log_id.77cdbe7222": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_4e407ccd9fdd95aaebb2cb3e39999f4b\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_log_id"], "model": "{{ get_where_subquery(ref('silver_nft__opensea_sales')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__opensea_sales"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_4e407ccd9fdd95aaebb2cb3e39999f4b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_utils_unique_combination_of_columns_silver_nft__opensea_sales__log_id"], "unique_id": "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver_nft__opensea_sales__log_id.77cdbe7222", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_utils_unique_combination_o_4e407ccd9fdd95aaebb2cb3e39999f4b.sql", "original_file_path": "models/silver/nft/silver_nft__opensea_sales.yml", "name": "dbt_utils_unique_combination_of_columns_silver_nft__opensea_sales__log_id", "alias": "opensea_sales", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__opensea_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__opensea_sales.yml/dbt_utils_unique_combination_o_4e407ccd9fdd95aaebb2cb3e39999f4b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_4e407ccd9fdd95aaebb2cb3e39999f4b"}, "created_at": 1654351203.888075, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _log_id\n    from ETHEREUM_DEV.silver_nft.opensea_sales\n    group by _log_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver_nft__opensea_sales"}, "test.ethereum_models.not_null_silver_dex__v2_swaps_BLOCK_NUMBER.36b3cfcc65": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver_dex__v2_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_dex__v2_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_dex", "fqn": ["ethereum_models", "silver", "dex", "not_null_silver_dex__v2_swaps_BLOCK_NUMBER"], "unique_id": "test.ethereum_models.not_null_silver_dex__v2_swaps_BLOCK_NUMBER.36b3cfcc65", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_dex__v2_swaps_BLOCK_NUMBER.sql", "original_file_path": "models/silver/dex/silver_dex__v2_swaps.yml", "name": "not_null_silver_dex__v2_swaps_BLOCK_NUMBER", "alias": "v2_swaps_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_dex__v2_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/dex/silver_dex__v2_swaps.yml/not_null_silver_dex__v2_swaps_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.1237628, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_dex.v2_swaps\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver_dex__v2_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_BLOCK_NUMBER__NUMBER__FLOAT.d06b454912": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_74d7122368940fc7b74d186705fb77fe\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver_dex__v2_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_dex__v2_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_74d7122368940fc7b74d186705fb77fe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex", "fqn": ["ethereum_models", "silver", "dex", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_BLOCK_NUMBER__NUMBER__FLOAT.d06b454912", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_74d7122368940fc7b74d186705fb77fe.sql", "original_file_path": "models/silver/dex/silver_dex__v2_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "v2_swaps_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_dex__v2_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/dex/silver_dex__v2_swaps.yml/dbt_expectations_expect_column_74d7122368940fc7b74d186705fb77fe.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_74d7122368940fc7b74d186705fb77fe"}, "created_at": 1654351204.1264489, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver_dex__v2_swaps"}, "test.ethereum_models.not_null_silver_dex__v2_swaps_BLOCK_TIMESTAMP.567573ecfd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_dex__v2_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_dex__v2_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_dex", "fqn": ["ethereum_models", "silver", "dex", "not_null_silver_dex__v2_swaps_BLOCK_TIMESTAMP"], "unique_id": "test.ethereum_models.not_null_silver_dex__v2_swaps_BLOCK_TIMESTAMP.567573ecfd", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_dex__v2_swaps_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/dex/silver_dex__v2_swaps.yml", "name": "not_null_silver_dex__v2_swaps_BLOCK_TIMESTAMP", "alias": "v2_swaps_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_dex__v2_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/dex/silver_dex__v2_swaps.yml/not_null_silver_dex__v2_swaps_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.132642, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_dex.v2_swaps\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver_dex__v2_swaps"}, "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_dex__v2_swaps_BLOCK_TIMESTAMP__day__1.0bd7deb591": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_4fbf6d0952695f039b2dcfc6a88a12af\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_dex__v2_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_dex__v2_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_4fbf6d0952695f039b2dcfc6a88a12af", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver_dex", "fqn": ["ethereum_models", "silver", "dex", "dbt_expectations_expect_row_values_to_have_recent_data_silver_dex__v2_swaps_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_dex__v2_swaps_BLOCK_TIMESTAMP__day__1.0bd7deb591", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_row_va_4fbf6d0952695f039b2dcfc6a88a12af.sql", "original_file_path": "models/silver/dex/silver_dex__v2_swaps.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver_dex__v2_swaps_BLOCK_TIMESTAMP__day__1", "alias": "v2_swaps_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_dex__v2_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/dex/silver_dex__v2_swaps.yml/dbt_expectations_expect_row_va_4fbf6d0952695f039b2dcfc6a88a12af.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_4fbf6d0952695f039b2dcfc6a88a12af"}, "created_at": 1654351204.1348119, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        ETHEREUM_DEV.silver_dex.v2_swaps\n    where\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver_dex__v2_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c46321a153": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b1d17aac27d6c11520f190b52958cc1c\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_dex__v2_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_dex__v2_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b1d17aac27d6c11520f190b52958cc1c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex", "fqn": ["ethereum_models", "silver", "dex", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c46321a153", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_b1d17aac27d6c11520f190b52958cc1c.sql", "original_file_path": "models/silver/dex/silver_dex__v2_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "v2_swaps_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_dex__v2_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/dex/silver_dex__v2_swaps.yml/dbt_expectations_expect_column_b1d17aac27d6c11520f190b52958cc1c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_b1d17aac27d6c11520f190b52958cc1c"}, "created_at": 1654351204.141429, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver_dex__v2_swaps"}, "test.ethereum_models.not_null_silver_dex__v2_swaps_TX_HASH.d5c22e2447": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver_dex__v2_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_dex__v2_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_dex", "fqn": ["ethereum_models", "silver", "dex", "not_null_silver_dex__v2_swaps_TX_HASH"], "unique_id": "test.ethereum_models.not_null_silver_dex__v2_swaps_TX_HASH.d5c22e2447", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_dex__v2_swaps_TX_HASH.sql", "original_file_path": "models/silver/dex/silver_dex__v2_swaps.yml", "name": "not_null_silver_dex__v2_swaps_TX_HASH", "alias": "v2_swaps_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_dex__v2_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/dex/silver_dex__v2_swaps.yml/not_null_silver_dex__v2_swaps_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.1478589, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_dex.v2_swaps\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.silver_dex__v2_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_TX_HASH__0_xX_0_9a_fA_F_.c48f9b7af0": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2e1e71a30e34ac17df0aa54fd47968af\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver_dex__v2_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_dex__v2_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2e1e71a30e34ac17df0aa54fd47968af", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_dex", "fqn": ["ethereum_models", "silver", "dex", "dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_TX_HASH__0_xX_0_9a_fA_F_.c48f9b7af0", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_2e1e71a30e34ac17df0aa54fd47968af.sql", "original_file_path": "models/silver/dex/silver_dex__v2_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_TX_HASH__0_xX_0_9a_fA_F_", "alias": "v2_swaps_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_dex__v2_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/dex/silver_dex__v2_swaps.yml/dbt_expectations_expect_column_2e1e71a30e34ac17df0aa54fd47968af.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_2e1e71a30e34ac17df0aa54fd47968af"}, "created_at": 1654351204.1496599, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_dex.v2_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.silver_dex__v2_swaps"}, "test.ethereum_models.not_null_silver_dex__v2_swaps_CONTRACT_ADDRESS.ba47556f4f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('silver_dex__v2_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_dex__v2_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_dex", "fqn": ["ethereum_models", "silver", "dex", "not_null_silver_dex__v2_swaps_CONTRACT_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver_dex__v2_swaps_CONTRACT_ADDRESS.ba47556f4f", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_dex__v2_swaps_CONTRACT_ADDRESS.sql", "original_file_path": "models/silver/dex/silver_dex__v2_swaps.yml", "name": "not_null_silver_dex__v2_swaps_CONTRACT_ADDRESS", "alias": "v2_swaps_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_dex__v2_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/dex/silver_dex__v2_swaps.yml/not_null_silver_dex__v2_swaps_CONTRACT_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.154916, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_dex.v2_swaps\nwhere CONTRACT_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.silver_dex__v2_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.9044abb286": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5b0b120918a2e703f81ae9eb5d403601\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('silver_dex__v2_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_dex__v2_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5b0b120918a2e703f81ae9eb5d403601", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_dex", "fqn": ["ethereum_models", "silver", "dex", "dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.9044abb286", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_5b0b120918a2e703f81ae9eb5d403601.sql", "original_file_path": "models/silver/dex/silver_dex__v2_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_", "alias": "v2_swaps_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_dex__v2_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/dex/silver_dex__v2_swaps.yml/dbt_expectations_expect_column_5b0b120918a2e703f81ae9eb5d403601.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_5b0b120918a2e703f81ae9eb5d403601"}, "created_at": 1654351204.156744, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(CONTRACT_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_dex.v2_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.silver_dex__v2_swaps"}, "test.ethereum_models.not_null_silver_dex__v2_swaps_EVENT_NAME.66b664caa4": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVENT_NAME", "model": "{{ get_where_subquery(ref('silver_dex__v2_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_dex__v2_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_dex", "fqn": ["ethereum_models", "silver", "dex", "not_null_silver_dex__v2_swaps_EVENT_NAME"], "unique_id": "test.ethereum_models.not_null_silver_dex__v2_swaps_EVENT_NAME.66b664caa4", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_dex__v2_swaps_EVENT_NAME.sql", "original_file_path": "models/silver/dex/silver_dex__v2_swaps.yml", "name": "not_null_silver_dex__v2_swaps_EVENT_NAME", "alias": "v2_swaps_EVENT_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_dex__v2_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/dex/silver_dex__v2_swaps.yml/not_null_silver_dex__v2_swaps_EVENT_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.164604, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_dex.v2_swaps\nwhere EVENT_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EVENT_NAME", "file_key_name": "models.silver_dex__v2_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_EVENT_NAME__STRING__VARCHAR.906c317369": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6d21bc199291b144433a7cbbe92f6a38\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "EVENT_NAME", "model": "{{ get_where_subquery(ref('silver_dex__v2_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_dex__v2_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6d21bc199291b144433a7cbbe92f6a38", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex", "fqn": ["ethereum_models", "silver", "dex", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_EVENT_NAME__STRING__VARCHAR"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_EVENT_NAME__STRING__VARCHAR.906c317369", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_6d21bc199291b144433a7cbbe92f6a38.sql", "original_file_path": "models/silver/dex/silver_dex__v2_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_EVENT_NAME__STRING__VARCHAR", "alias": "v2_swaps_EVENT_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_dex__v2_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/dex/silver_dex__v2_swaps.yml/dbt_expectations_expect_column_6d21bc199291b144433a7cbbe92f6a38.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_6d21bc199291b144433a7cbbe92f6a38"}, "created_at": 1654351204.166703, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVENT_NAME'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EVENT_NAME", "file_key_name": "models.silver_dex__v2_swaps"}, "test.ethereum_models.not_null_silver_dex__v2_swaps_AMOUNT_IN.7362af5d9f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT_IN", "model": "{{ get_where_subquery(ref('silver_dex__v2_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_dex__v2_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_dex", "fqn": ["ethereum_models", "silver", "dex", "not_null_silver_dex__v2_swaps_AMOUNT_IN"], "unique_id": "test.ethereum_models.not_null_silver_dex__v2_swaps_AMOUNT_IN.7362af5d9f", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_dex__v2_swaps_AMOUNT_IN.sql", "original_file_path": "models/silver/dex/silver_dex__v2_swaps.yml", "name": "not_null_silver_dex__v2_swaps_AMOUNT_IN", "alias": "v2_swaps_AMOUNT_IN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_dex__v2_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/dex/silver_dex__v2_swaps.yml/not_null_silver_dex__v2_swaps_AMOUNT_IN.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.171805, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_dex.v2_swaps\nwhere AMOUNT_IN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT_IN", "file_key_name": "models.silver_dex__v2_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_AMOUNT_IN__NUMBER__FLOAT.752b8442d3": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8d63b4c433fbdbd4f13f352fa7d0e90e\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT_IN", "model": "{{ get_where_subquery(ref('silver_dex__v2_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_dex__v2_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8d63b4c433fbdbd4f13f352fa7d0e90e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex", "fqn": ["ethereum_models", "silver", "dex", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_AMOUNT_IN__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_AMOUNT_IN__NUMBER__FLOAT.752b8442d3", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_8d63b4c433fbdbd4f13f352fa7d0e90e.sql", "original_file_path": "models/silver/dex/silver_dex__v2_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_AMOUNT_IN__NUMBER__FLOAT", "alias": "v2_swaps_AMOUNT_IN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_dex__v2_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/dex/silver_dex__v2_swaps.yml/dbt_expectations_expect_column_8d63b4c433fbdbd4f13f352fa7d0e90e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_8d63b4c433fbdbd4f13f352fa7d0e90e"}, "created_at": 1654351204.173418, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT_IN'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT_IN", "file_key_name": "models.silver_dex__v2_swaps"}, "test.ethereum_models.not_null_silver_dex__v2_swaps_AMOUNT_OUT.4c690879c1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT_OUT", "model": "{{ get_where_subquery(ref('silver_dex__v2_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_dex__v2_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_dex", "fqn": ["ethereum_models", "silver", "dex", "not_null_silver_dex__v2_swaps_AMOUNT_OUT"], "unique_id": "test.ethereum_models.not_null_silver_dex__v2_swaps_AMOUNT_OUT.4c690879c1", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_dex__v2_swaps_AMOUNT_OUT.sql", "original_file_path": "models/silver/dex/silver_dex__v2_swaps.yml", "name": "not_null_silver_dex__v2_swaps_AMOUNT_OUT", "alias": "v2_swaps_AMOUNT_OUT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_dex__v2_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/dex/silver_dex__v2_swaps.yml/not_null_silver_dex__v2_swaps_AMOUNT_OUT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.179519, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_dex.v2_swaps\nwhere AMOUNT_OUT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT_OUT", "file_key_name": "models.silver_dex__v2_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_AMOUNT_OUT__NUMBER__FLOAT.27fcd6e1cd": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8a4d781cf25bbc55d4e0888847d9212f\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT_OUT", "model": "{{ get_where_subquery(ref('silver_dex__v2_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_dex__v2_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8a4d781cf25bbc55d4e0888847d9212f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex", "fqn": ["ethereum_models", "silver", "dex", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_AMOUNT_OUT__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_AMOUNT_OUT__NUMBER__FLOAT.27fcd6e1cd", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_8a4d781cf25bbc55d4e0888847d9212f.sql", "original_file_path": "models/silver/dex/silver_dex__v2_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_AMOUNT_OUT__NUMBER__FLOAT", "alias": "v2_swaps_AMOUNT_OUT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_dex__v2_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/dex/silver_dex__v2_swaps.yml/dbt_expectations_expect_column_8a4d781cf25bbc55d4e0888847d9212f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_8a4d781cf25bbc55d4e0888847d9212f"}, "created_at": 1654351204.181777, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT_OUT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT_OUT", "file_key_name": "models.silver_dex__v2_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_AMOUNT_IN_USD__NUMBER__FLOAT.9271e7fe2b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f5a159374327b32da91c0cb1154f2991\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT_IN_USD", "model": "{{ get_where_subquery(ref('silver_dex__v2_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_dex__v2_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f5a159374327b32da91c0cb1154f2991", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex", "fqn": ["ethereum_models", "silver", "dex", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_AMOUNT_IN_USD__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_AMOUNT_IN_USD__NUMBER__FLOAT.9271e7fe2b", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_f5a159374327b32da91c0cb1154f2991.sql", "original_file_path": "models/silver/dex/silver_dex__v2_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_AMOUNT_IN_USD__NUMBER__FLOAT", "alias": "v2_swaps_AMOUNT_IN_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_dex__v2_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/dex/silver_dex__v2_swaps.yml/dbt_expectations_expect_column_f5a159374327b32da91c0cb1154f2991.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_f5a159374327b32da91c0cb1154f2991"}, "created_at": 1654351204.187451, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT_IN_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT_IN_USD", "file_key_name": "models.silver_dex__v2_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT.a9986bca1a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6413df2aa9dc0098f4094aa89152c793\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT_OUT_USD", "model": "{{ get_where_subquery(ref('silver_dex__v2_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_dex__v2_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6413df2aa9dc0098f4094aa89152c793", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex", "fqn": ["ethereum_models", "silver", "dex", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT.a9986bca1a", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_6413df2aa9dc0098f4094aa89152c793.sql", "original_file_path": "models/silver/dex/silver_dex__v2_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT", "alias": "v2_swaps_AMOUNT_OUT_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_dex__v2_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/dex/silver_dex__v2_swaps.yml/dbt_expectations_expect_column_6413df2aa9dc0098f4094aa89152c793.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_6413df2aa9dc0098f4094aa89152c793"}, "created_at": 1654351204.1921742, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT_OUT_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT_OUT_USD", "file_key_name": "models.silver_dex__v2_swaps"}, "test.ethereum_models.not_null_silver_dex__v2_swaps_TOKEN_IN.e41b5ca91a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_IN", "model": "{{ get_where_subquery(ref('silver_dex__v2_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_dex__v2_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_dex", "fqn": ["ethereum_models", "silver", "dex", "not_null_silver_dex__v2_swaps_TOKEN_IN"], "unique_id": "test.ethereum_models.not_null_silver_dex__v2_swaps_TOKEN_IN.e41b5ca91a", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_dex__v2_swaps_TOKEN_IN.sql", "original_file_path": "models/silver/dex/silver_dex__v2_swaps.yml", "name": "not_null_silver_dex__v2_swaps_TOKEN_IN", "alias": "v2_swaps_TOKEN_IN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_dex__v2_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/dex/silver_dex__v2_swaps.yml/not_null_silver_dex__v2_swaps_TOKEN_IN.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.199475, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_dex.v2_swaps\nwhere TOKEN_IN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOKEN_IN", "file_key_name": "models.silver_dex__v2_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_TOKEN_IN__0_xX_0_9a_fA_F_.3e32dc1d9b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_79534755f2b1e805eca3fb70a8dae3b6\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TOKEN_IN", "model": "{{ get_where_subquery(ref('silver_dex__v2_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_dex__v2_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_79534755f2b1e805eca3fb70a8dae3b6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_dex", "fqn": ["ethereum_models", "silver", "dex", "dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_TOKEN_IN__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_TOKEN_IN__0_xX_0_9a_fA_F_.3e32dc1d9b", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_79534755f2b1e805eca3fb70a8dae3b6.sql", "original_file_path": "models/silver/dex/silver_dex__v2_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_TOKEN_IN__0_xX_0_9a_fA_F_", "alias": "v2_swaps_TOKEN_IN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_dex__v2_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/dex/silver_dex__v2_swaps.yml/dbt_expectations_expect_column_79534755f2b1e805eca3fb70a8dae3b6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_79534755f2b1e805eca3fb70a8dae3b6"}, "created_at": 1654351204.201432, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TOKEN_IN, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_dex.v2_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOKEN_IN", "file_key_name": "models.silver_dex__v2_swaps"}, "test.ethereum_models.not_null_silver_dex__v2_swaps_TOKEN_OUT.baa114db6e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_OUT", "model": "{{ get_where_subquery(ref('silver_dex__v2_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_dex__v2_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_dex", "fqn": ["ethereum_models", "silver", "dex", "not_null_silver_dex__v2_swaps_TOKEN_OUT"], "unique_id": "test.ethereum_models.not_null_silver_dex__v2_swaps_TOKEN_OUT.baa114db6e", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_dex__v2_swaps_TOKEN_OUT.sql", "original_file_path": "models/silver/dex/silver_dex__v2_swaps.yml", "name": "not_null_silver_dex__v2_swaps_TOKEN_OUT", "alias": "v2_swaps_TOKEN_OUT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_dex__v2_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/dex/silver_dex__v2_swaps.yml/not_null_silver_dex__v2_swaps_TOKEN_OUT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.206176, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_dex.v2_swaps\nwhere TOKEN_OUT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOKEN_OUT", "file_key_name": "models.silver_dex__v2_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_.11c94debef": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_dedb7a5749e43f2c88912b75c8ba0b3f\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TOKEN_OUT", "model": "{{ get_where_subquery(ref('silver_dex__v2_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_dex__v2_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_dedb7a5749e43f2c88912b75c8ba0b3f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_dex", "fqn": ["ethereum_models", "silver", "dex", "dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_.11c94debef", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_dedb7a5749e43f2c88912b75c8ba0b3f.sql", "original_file_path": "models/silver/dex/silver_dex__v2_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_", "alias": "v2_swaps_TOKEN_OUT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_dex__v2_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/dex/silver_dex__v2_swaps.yml/dbt_expectations_expect_column_dedb7a5749e43f2c88912b75c8ba0b3f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_dedb7a5749e43f2c88912b75c8ba0b3f"}, "created_at": 1654351204.207726, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TOKEN_OUT, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_dex.v2_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOKEN_OUT", "file_key_name": "models.silver_dex__v2_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_SYMBOL_IN__STRING__VARCHAR.0fafbb5667": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d27d3cd17fb504bca57e46ac86abaa9b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "SYMBOL_IN", "model": "{{ get_where_subquery(ref('silver_dex__v2_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_dex__v2_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d27d3cd17fb504bca57e46ac86abaa9b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex", "fqn": ["ethereum_models", "silver", "dex", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_SYMBOL_IN__STRING__VARCHAR"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_SYMBOL_IN__STRING__VARCHAR.0fafbb5667", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_d27d3cd17fb504bca57e46ac86abaa9b.sql", "original_file_path": "models/silver/dex/silver_dex__v2_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_SYMBOL_IN__STRING__VARCHAR", "alias": "v2_swaps_SYMBOL_IN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_dex__v2_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/dex/silver_dex__v2_swaps.yml/dbt_expectations_expect_column_d27d3cd17fb504bca57e46ac86abaa9b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d27d3cd17fb504bca57e46ac86abaa9b"}, "created_at": 1654351204.2143948, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SYMBOL_IN'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SYMBOL_IN", "file_key_name": "models.silver_dex__v2_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_SYMBOL_OUT__STRING__VARCHAR.459b1e10ed": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6c8fc30977383402544d512617f1be1c\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "SYMBOL_OUT", "model": "{{ get_where_subquery(ref('silver_dex__v2_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_dex__v2_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6c8fc30977383402544d512617f1be1c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex", "fqn": ["ethereum_models", "silver", "dex", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_SYMBOL_OUT__STRING__VARCHAR"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_SYMBOL_OUT__STRING__VARCHAR.459b1e10ed", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_6c8fc30977383402544d512617f1be1c.sql", "original_file_path": "models/silver/dex/silver_dex__v2_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_SYMBOL_OUT__STRING__VARCHAR", "alias": "v2_swaps_SYMBOL_OUT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_dex__v2_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/dex/silver_dex__v2_swaps.yml/dbt_expectations_expect_column_6c8fc30977383402544d512617f1be1c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_6c8fc30977383402544d512617f1be1c"}, "created_at": 1654351204.219174, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SYMBOL_OUT'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SYMBOL_OUT", "file_key_name": "models.silver_dex__v2_swaps"}, "test.ethereum_models.not_null_silver_dex__v2_swaps_SENDER.679f0122aa": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP > '2021-08-01'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SENDER", "model": "{{ get_where_subquery(ref('silver_dex__v2_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_dex__v2_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCK_TIMESTAMP > '2021-08-01'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_dex", "fqn": ["ethereum_models", "silver", "dex", "not_null_silver_dex__v2_swaps_SENDER"], "unique_id": "test.ethereum_models.not_null_silver_dex__v2_swaps_SENDER.679f0122aa", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_dex__v2_swaps_SENDER.sql", "original_file_path": "models/silver/dex/silver_dex__v2_swaps.yml", "name": "not_null_silver_dex__v2_swaps_SENDER", "alias": "v2_swaps_SENDER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_dex__v2_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/dex/silver_dex__v2_swaps.yml/not_null_silver_dex__v2_swaps_SENDER.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "BLOCK_TIMESTAMP > '2021-08-01'"}, "created_at": 1654351204.224051, "compiled_sql": "\n    \n    \n\nselect *\nfrom (select * from ETHEREUM_DEV.silver_dex.v2_swaps where BLOCK_TIMESTAMP > '2021-08-01') dbt_subquery\nwhere SENDER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SENDER", "file_key_name": "models.silver_dex__v2_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_SENDER__0_xX_0_9a_fA_F_.d1fb465aee": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f1d7babd4c93a6da6328cab4ed5c755d\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "SENDER", "model": "{{ get_where_subquery(ref('silver_dex__v2_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_dex__v2_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f1d7babd4c93a6da6328cab4ed5c755d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_dex", "fqn": ["ethereum_models", "silver", "dex", "dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_SENDER__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_SENDER__0_xX_0_9a_fA_F_.d1fb465aee", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_f1d7babd4c93a6da6328cab4ed5c755d.sql", "original_file_path": "models/silver/dex/silver_dex__v2_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_SENDER__0_xX_0_9a_fA_F_", "alias": "v2_swaps_SENDER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_dex__v2_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/dex/silver_dex__v2_swaps.yml/dbt_expectations_expect_column_f1d7babd4c93a6da6328cab4ed5c755d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_f1d7babd4c93a6da6328cab4ed5c755d"}, "created_at": 1654351204.226241, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(SENDER, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_dex.v2_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SENDER", "file_key_name": "models.silver_dex__v2_swaps"}, "test.ethereum_models.not_null_silver_dex__v2_swaps_TX_TO.4391a065dd": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_TO", "model": "{{ get_where_subquery(ref('silver_dex__v2_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_dex__v2_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_dex", "fqn": ["ethereum_models", "silver", "dex", "not_null_silver_dex__v2_swaps_TX_TO"], "unique_id": "test.ethereum_models.not_null_silver_dex__v2_swaps_TX_TO.4391a065dd", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_dex__v2_swaps_TX_TO.sql", "original_file_path": "models/silver/dex/silver_dex__v2_swaps.yml", "name": "not_null_silver_dex__v2_swaps_TX_TO", "alias": "v2_swaps_TX_TO", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_dex__v2_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/dex/silver_dex__v2_swaps.yml/not_null_silver_dex__v2_swaps_TX_TO.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.2311401, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_dex.v2_swaps\nwhere TX_TO is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_TO", "file_key_name": "models.silver_dex__v2_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_TX_TO__0_xX_0_9a_fA_F_.34807c7eba": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5062925e00ba1ca493313e9f16ab8ffd\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_TO", "model": "{{ get_where_subquery(ref('silver_dex__v2_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_dex__v2_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5062925e00ba1ca493313e9f16ab8ffd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_dex", "fqn": ["ethereum_models", "silver", "dex", "dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_TX_TO__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_TX_TO__0_xX_0_9a_fA_F_.34807c7eba", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_5062925e00ba1ca493313e9f16ab8ffd.sql", "original_file_path": "models/silver/dex/silver_dex__v2_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_TX_TO__0_xX_0_9a_fA_F_", "alias": "v2_swaps_TX_TO", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_dex__v2_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/dex/silver_dex__v2_swaps.yml/dbt_expectations_expect_column_5062925e00ba1ca493313e9f16ab8ffd.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_5062925e00ba1ca493313e9f16ab8ffd"}, "created_at": 1654351204.23278, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TX_TO, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_dex.v2_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_TO", "file_key_name": "models.silver_dex__v2_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_PLATFORM__STRING__VARCHAR.863f80b5ff": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7c12f6c9683f07967678532f6772e950\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "PLATFORM", "model": "{{ get_where_subquery(ref('silver_dex__v2_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_dex__v2_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7c12f6c9683f07967678532f6772e950", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex", "fqn": ["ethereum_models", "silver", "dex", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_PLATFORM__STRING__VARCHAR"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_PLATFORM__STRING__VARCHAR.863f80b5ff", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_7c12f6c9683f07967678532f6772e950.sql", "original_file_path": "models/silver/dex/silver_dex__v2_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_PLATFORM__STRING__VARCHAR", "alias": "v2_swaps_PLATFORM", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_dex__v2_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/dex/silver_dex__v2_swaps.yml/dbt_expectations_expect_column_7c12f6c9683f07967678532f6772e950.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_7c12f6c9683f07967678532f6772e950"}, "created_at": 1654351204.237362, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PLATFORM'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM", "file_key_name": "models.silver_dex__v2_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_EVENT_INDEX__NUMBER__FLOAT.b6d6b46e86": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a2d5bfed23e72644305f58616c18f196\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "EVENT_INDEX", "model": "{{ get_where_subquery(ref('silver_dex__v2_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_dex__v2_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a2d5bfed23e72644305f58616c18f196", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex", "fqn": ["ethereum_models", "silver", "dex", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_EVENT_INDEX__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_EVENT_INDEX__NUMBER__FLOAT.b6d6b46e86", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_a2d5bfed23e72644305f58616c18f196.sql", "original_file_path": "models/silver/dex/silver_dex__v2_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_EVENT_INDEX__NUMBER__FLOAT", "alias": "v2_swaps_EVENT_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_dex__v2_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/dex/silver_dex__v2_swaps.yml/dbt_expectations_expect_column_a2d5bfed23e72644305f58616c18f196.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_a2d5bfed23e72644305f58616c18f196"}, "created_at": 1654351204.242899, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVENT_INDEX'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EVENT_INDEX", "file_key_name": "models.silver_dex__v2_swaps"}, "test.ethereum_models.not_null_silver_dex__v2_swaps__LOG_ID.459aa805b5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_LOG_ID", "model": "{{ get_where_subquery(ref('silver_dex__v2_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_dex__v2_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_dex", "fqn": ["ethereum_models", "silver", "dex", "not_null_silver_dex__v2_swaps__LOG_ID"], "unique_id": "test.ethereum_models.not_null_silver_dex__v2_swaps__LOG_ID.459aa805b5", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_dex__v2_swaps__LOG_ID.sql", "original_file_path": "models/silver/dex/silver_dex__v2_swaps.yml", "name": "not_null_silver_dex__v2_swaps__LOG_ID", "alias": "v2_swaps", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_dex__v2_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/dex/silver_dex__v2_swaps.yml/not_null_silver_dex__v2_swaps__LOG_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.2480798, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_dex.v2_swaps\nwhere _LOG_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_LOG_ID", "file_key_name": "models.silver_dex__v2_swaps"}, "test.ethereum_models.not_null_silver_dex__v2_swaps_ORIGIN_FUNCTION_SIGNATURE.30b61017af": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FUNCTION_SIGNATURE", "model": "{{ get_where_subquery(ref('silver_dex__v2_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_dex__v2_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_dex", "fqn": ["ethereum_models", "silver", "dex", "not_null_silver_dex__v2_swaps_ORIGIN_FUNCTION_SIGNATURE"], "unique_id": "test.ethereum_models.not_null_silver_dex__v2_swaps_ORIGIN_FUNCTION_SIGNATURE.30b61017af", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_dex__v2_swaps_ORIGIN_FUNCTION_SIGNATURE.sql", "original_file_path": "models/silver/dex/silver_dex__v2_swaps.yml", "name": "not_null_silver_dex__v2_swaps_ORIGIN_FUNCTION_SIGNATURE", "alias": "v2_swaps_ORIGIN_FUNCTION_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_dex__v2_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/dex/silver_dex__v2_swaps.yml/not_null_silver_dex__v2_swaps_ORIGIN_FUNCTION_SIGNATURE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.2496488, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_dex.v2_swaps\nwhere ORIGIN_FUNCTION_SIGNATURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FUNCTION_SIGNATURE", "file_key_name": "models.silver_dex__v2_swaps"}, "test.ethereum_models.not_null_silver_dex__v2_swaps_ORIGIN_FROM_ADDRESS.43bc581e8d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver_dex__v2_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_dex__v2_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_dex", "fqn": ["ethereum_models", "silver", "dex", "not_null_silver_dex__v2_swaps_ORIGIN_FROM_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver_dex__v2_swaps_ORIGIN_FROM_ADDRESS.43bc581e8d", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_dex__v2_swaps_ORIGIN_FROM_ADDRESS.sql", "original_file_path": "models/silver/dex/silver_dex__v2_swaps.yml", "name": "not_null_silver_dex__v2_swaps_ORIGIN_FROM_ADDRESS", "alias": "v2_swaps_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_dex__v2_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/dex/silver_dex__v2_swaps.yml/not_null_silver_dex__v2_swaps_ORIGIN_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.251266, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_dex.v2_swaps\nwhere ORIGIN_FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.silver_dex__v2_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.515968e4c3": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_07897b520f3718483f20be7693f2441e\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver_dex__v2_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_dex__v2_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_07897b520f3718483f20be7693f2441e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_dex", "fqn": ["ethereum_models", "silver", "dex", "dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.515968e4c3", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_07897b520f3718483f20be7693f2441e.sql", "original_file_path": "models/silver/dex/silver_dex__v2_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "v2_swaps_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_dex__v2_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/dex/silver_dex__v2_swaps.yml/dbt_expectations_expect_column_07897b520f3718483f20be7693f2441e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_07897b520f3718483f20be7693f2441e"}, "created_at": 1654351204.253006, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_dex.v2_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.silver_dex__v2_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.650cdd680a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0e7e1990810663f97ad9e968d39dec5e\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver_dex__v2_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_dex__v2_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0e7e1990810663f97ad9e968d39dec5e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_dex", "fqn": ["ethereum_models", "silver", "dex", "dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.650cdd680a", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_0e7e1990810663f97ad9e968d39dec5e.sql", "original_file_path": "models/silver/dex/silver_dex__v2_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "v2_swaps_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_dex__v2_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/dex/silver_dex__v2_swaps.yml/dbt_expectations_expect_column_0e7e1990810663f97ad9e968d39dec5e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_0e7e1990810663f97ad9e968d39dec5e"}, "created_at": 1654351204.257426, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_dex.v2_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.silver_dex__v2_swaps"}, "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver_dex__v2_swaps__LOG_ID.0563845eec": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_7c23d04e8eb085c424bf25f36ce431ee\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_LOG_ID"], "model": "{{ get_where_subquery(ref('silver_dex__v2_swaps')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_dex__v2_swaps"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_7c23d04e8eb085c424bf25f36ce431ee", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver_dex", "fqn": ["ethereum_models", "silver", "dex", "dbt_utils_unique_combination_of_columns_silver_dex__v2_swaps__LOG_ID"], "unique_id": "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver_dex__v2_swaps__LOG_ID.0563845eec", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_utils_unique_combination_o_7c23d04e8eb085c424bf25f36ce431ee.sql", "original_file_path": "models/silver/dex/silver_dex__v2_swaps.yml", "name": "dbt_utils_unique_combination_of_columns_silver_dex__v2_swaps__LOG_ID", "alias": "v2_swaps", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_dex__v2_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/dex/silver_dex__v2_swaps.yml/dbt_utils_unique_combination_o_7c23d04e8eb085c424bf25f36ce431ee.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_7c23d04e8eb085c424bf25f36ce431ee"}, "created_at": 1654351204.2628531, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _LOG_ID\n    from ETHEREUM_DEV.silver_dex.v2_swaps\n    group by _LOG_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver_dex__v2_swaps"}, "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver_dex__pools_POOL_ADDRESS.83afc7f284": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_3eb55b02ddabb1f993f696fb4a3931ad\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["POOL_ADDRESS"], "model": "{{ get_where_subquery(ref('silver_dex__pools')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_dex__pools"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_3eb55b02ddabb1f993f696fb4a3931ad", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver_dex", "fqn": ["ethereum_models", "silver", "dex", "dbt_utils_unique_combination_of_columns_silver_dex__pools_POOL_ADDRESS"], "unique_id": "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver_dex__pools_POOL_ADDRESS.83afc7f284", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_utils_unique_combination_o_3eb55b02ddabb1f993f696fb4a3931ad.sql", "original_file_path": "models/silver/dex/silver_dex__pools.yml", "name": "dbt_utils_unique_combination_of_columns_silver_dex__pools_POOL_ADDRESS", "alias": "pools_POOL_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_dex__pools"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/dex/silver_dex__pools.yml/dbt_utils_unique_combination_o_3eb55b02ddabb1f993f696fb4a3931ad.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_3eb55b02ddabb1f993f696fb4a3931ad"}, "created_at": 1654351204.268028, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        POOL_ADDRESS\n    from ETHEREUM_DEV.silver_dex.pools\n    group by POOL_ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver_dex__pools"}, "test.ethereum_models.not_null_core__ez_dex_swaps_BLOCK_NUMBER.3b2b1633f1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('core__ez_dex_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_dex_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_core", "fqn": ["ethereum_models", "gold", "not_null_core__ez_dex_swaps_BLOCK_NUMBER"], "unique_id": "test.ethereum_models.not_null_core__ez_dex_swaps_BLOCK_NUMBER.3b2b1633f1", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_core__ez_dex_swaps_BLOCK_NUMBER.sql", "original_file_path": "models/gold/core__ez_dex_swaps.yml", "name": "not_null_core__ez_dex_swaps_BLOCK_NUMBER", "alias": "ez_dex_swaps_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_dex_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_dex_swaps.yml/not_null_core__ez_dex_swaps_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.280761, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.core.ez_dex_swaps\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.core__ez_dex_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_BLOCK_NUMBER__NUMBER__FLOAT.fe4c8e9e74": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_81ae327c3ddc1dd3273de36530e16829\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('core__ez_dex_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_dex_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_81ae327c3ddc1dd3273de36530e16829", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_BLOCK_NUMBER__NUMBER__FLOAT.fe4c8e9e74", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_81ae327c3ddc1dd3273de36530e16829.sql", "original_file_path": "models/gold/core__ez_dex_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "ez_dex_swaps_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_dex_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_dex_swaps.yml/dbt_expectations_expect_column_81ae327c3ddc1dd3273de36530e16829.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_81ae327c3ddc1dd3273de36530e16829"}, "created_at": 1654351204.282758, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.core__ez_dex_swaps"}, "test.ethereum_models.not_null_core__ez_dex_swaps_BLOCK_TIMESTAMP.929581fe29": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__ez_dex_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_dex_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_core", "fqn": ["ethereum_models", "gold", "not_null_core__ez_dex_swaps_BLOCK_TIMESTAMP"], "unique_id": "test.ethereum_models.not_null_core__ez_dex_swaps_BLOCK_TIMESTAMP.929581fe29", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_core__ez_dex_swaps_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/core__ez_dex_swaps.yml", "name": "not_null_core__ez_dex_swaps_BLOCK_TIMESTAMP", "alias": "ez_dex_swaps_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_dex_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_dex_swaps.yml/not_null_core__ez_dex_swaps_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.2872782, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.core.ez_dex_swaps\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__ez_dex_swaps"}, "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_dex_swaps_BLOCK_TIMESTAMP__day__1.8f881aae37": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_e05f57dc86a656f578f92b93dbf2f50f\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__ez_dex_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_dex_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_e05f57dc86a656f578f92b93dbf2f50f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_row_values_to_have_recent_data_core__ez_dex_swaps_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_dex_swaps_BLOCK_TIMESTAMP__day__1.8f881aae37", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_row_va_e05f57dc86a656f578f92b93dbf2f50f.sql", "original_file_path": "models/gold/core__ez_dex_swaps.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_core__ez_dex_swaps_BLOCK_TIMESTAMP__day__1", "alias": "ez_dex_swaps_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_dex_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_dex_swaps.yml/dbt_expectations_expect_row_va_e05f57dc86a656f578f92b93dbf2f50f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_e05f57dc86a656f578f92b93dbf2f50f"}, "created_at": 1654351204.289061, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        ETHEREUM_DEV.core.ez_dex_swaps\n    where\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__ez_dex_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.53f946e5f7": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_70bb932a839c9eb67b328e54f0cca386\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__ez_dex_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_dex_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_70bb932a839c9eb67b328e54f0cca386", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.53f946e5f7", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_70bb932a839c9eb67b328e54f0cca386.sql", "original_file_path": "models/gold/core__ez_dex_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "ez_dex_swaps_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_dex_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_dex_swaps.yml/dbt_expectations_expect_column_70bb932a839c9eb67b328e54f0cca386.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_70bb932a839c9eb67b328e54f0cca386"}, "created_at": 1654351204.2948768, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__ez_dex_swaps"}, "test.ethereum_models.not_null_core__ez_dex_swaps_TX_HASH.20543d789e": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('core__ez_dex_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_dex_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_core", "fqn": ["ethereum_models", "gold", "not_null_core__ez_dex_swaps_TX_HASH"], "unique_id": "test.ethereum_models.not_null_core__ez_dex_swaps_TX_HASH.20543d789e", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_core__ez_dex_swaps_TX_HASH.sql", "original_file_path": "models/gold/core__ez_dex_swaps.yml", "name": "not_null_core__ez_dex_swaps_TX_HASH", "alias": "ez_dex_swaps_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_dex_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_dex_swaps.yml/not_null_core__ez_dex_swaps_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.299198, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.core.ez_dex_swaps\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.core__ez_dex_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_TX_HASH__0_xX_0_9a_fA_F_.d4d2dd8d38": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7a130959c563725f2fe87cbb4b82416e\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('core__ez_dex_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_dex_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7a130959c563725f2fe87cbb4b82416e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_TX_HASH__0_xX_0_9a_fA_F_.d4d2dd8d38", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_7a130959c563725f2fe87cbb4b82416e.sql", "original_file_path": "models/gold/core__ez_dex_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_TX_HASH__0_xX_0_9a_fA_F_", "alias": "ez_dex_swaps_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_dex_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_dex_swaps.yml/dbt_expectations_expect_column_7a130959c563725f2fe87cbb4b82416e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_7a130959c563725f2fe87cbb4b82416e"}, "created_at": 1654351204.300768, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.core.ez_dex_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.core__ez_dex_swaps"}, "test.ethereum_models.not_null_core__ez_dex_swaps_CONTRACT_ADDRESS.af7c3bd430": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('core__ez_dex_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_dex_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_core", "fqn": ["ethereum_models", "gold", "not_null_core__ez_dex_swaps_CONTRACT_ADDRESS"], "unique_id": "test.ethereum_models.not_null_core__ez_dex_swaps_CONTRACT_ADDRESS.af7c3bd430", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_core__ez_dex_swaps_CONTRACT_ADDRESS.sql", "original_file_path": "models/gold/core__ez_dex_swaps.yml", "name": "not_null_core__ez_dex_swaps_CONTRACT_ADDRESS", "alias": "ez_dex_swaps_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_dex_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_dex_swaps.yml/not_null_core__ez_dex_swaps_CONTRACT_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.305396, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.core.ez_dex_swaps\nwhere CONTRACT_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.core__ez_dex_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.d7efe8e576": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_346ddbbac429653b86c8d7eaab9e25e2\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('core__ez_dex_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_dex_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_346ddbbac429653b86c8d7eaab9e25e2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.d7efe8e576", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_346ddbbac429653b86c8d7eaab9e25e2.sql", "original_file_path": "models/gold/core__ez_dex_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_", "alias": "ez_dex_swaps_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_dex_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_dex_swaps.yml/dbt_expectations_expect_column_346ddbbac429653b86c8d7eaab9e25e2.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_346ddbbac429653b86c8d7eaab9e25e2"}, "created_at": 1654351204.3071811, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(CONTRACT_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.core.ez_dex_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.core__ez_dex_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_EVENT_NAME__STRING__VARCHAR.fa12481d21": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_04866d7c33cdf4c844b59265996c2d1f\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "EVENT_NAME", "model": "{{ get_where_subquery(ref('core__ez_dex_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_dex_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_04866d7c33cdf4c844b59265996c2d1f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_EVENT_NAME__STRING__VARCHAR"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_EVENT_NAME__STRING__VARCHAR.fa12481d21", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_04866d7c33cdf4c844b59265996c2d1f.sql", "original_file_path": "models/gold/core__ez_dex_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_EVENT_NAME__STRING__VARCHAR", "alias": "ez_dex_swaps_EVENT_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_dex_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_dex_swaps.yml/dbt_expectations_expect_column_04866d7c33cdf4c844b59265996c2d1f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_04866d7c33cdf4c844b59265996c2d1f"}, "created_at": 1654351204.312758, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVENT_NAME'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EVENT_NAME", "file_key_name": "models.core__ez_dex_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_AMOUNT_IN__NUMBER__FLOAT.cf58ec2f14": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fc10ed3c9cf4676ebaaa1d40382532b9\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT_IN", "model": "{{ get_where_subquery(ref('core__ez_dex_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_dex_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fc10ed3c9cf4676ebaaa1d40382532b9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_AMOUNT_IN__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_AMOUNT_IN__NUMBER__FLOAT.cf58ec2f14", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_fc10ed3c9cf4676ebaaa1d40382532b9.sql", "original_file_path": "models/gold/core__ez_dex_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_AMOUNT_IN__NUMBER__FLOAT", "alias": "ez_dex_swaps_AMOUNT_IN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_dex_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_dex_swaps.yml/dbt_expectations_expect_column_fc10ed3c9cf4676ebaaa1d40382532b9.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_fc10ed3c9cf4676ebaaa1d40382532b9"}, "created_at": 1654351204.317406, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT_IN'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT_IN", "file_key_name": "models.core__ez_dex_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_AMOUNT_OUT__NUMBER__FLOAT.1953480d73": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_4d1bfab59a79a1622400760f78a46260\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT_OUT", "model": "{{ get_where_subquery(ref('core__ez_dex_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_dex_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_4d1bfab59a79a1622400760f78a46260", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_AMOUNT_OUT__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_AMOUNT_OUT__NUMBER__FLOAT.1953480d73", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_4d1bfab59a79a1622400760f78a46260.sql", "original_file_path": "models/gold/core__ez_dex_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_AMOUNT_OUT__NUMBER__FLOAT", "alias": "ez_dex_swaps_AMOUNT_OUT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_dex_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_dex_swaps.yml/dbt_expectations_expect_column_4d1bfab59a79a1622400760f78a46260.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_4d1bfab59a79a1622400760f78a46260"}, "created_at": 1654351204.3219478, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT_OUT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT_OUT", "file_key_name": "models.core__ez_dex_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_AMOUNT_IN_USD__NUMBER__FLOAT.b565b7ded2": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3dc2930088411d1cdf44066bde8475d1\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT_IN_USD", "model": "{{ get_where_subquery(ref('core__ez_dex_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_dex_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3dc2930088411d1cdf44066bde8475d1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_AMOUNT_IN_USD__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_AMOUNT_IN_USD__NUMBER__FLOAT.b565b7ded2", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_3dc2930088411d1cdf44066bde8475d1.sql", "original_file_path": "models/gold/core__ez_dex_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_AMOUNT_IN_USD__NUMBER__FLOAT", "alias": "ez_dex_swaps_AMOUNT_IN_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_dex_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_dex_swaps.yml/dbt_expectations_expect_column_3dc2930088411d1cdf44066bde8475d1.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_3dc2930088411d1cdf44066bde8475d1"}, "created_at": 1654351204.3263621, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT_IN_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT_IN_USD", "file_key_name": "models.core__ez_dex_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT.d321ebbe3c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d04fafa568f0bc2e83ab25873d49e6bb\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT_OUT_USD", "model": "{{ get_where_subquery(ref('core__ez_dex_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_dex_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d04fafa568f0bc2e83ab25873d49e6bb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT.d321ebbe3c", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_d04fafa568f0bc2e83ab25873d49e6bb.sql", "original_file_path": "models/gold/core__ez_dex_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT", "alias": "ez_dex_swaps_AMOUNT_OUT_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_dex_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_dex_swaps.yml/dbt_expectations_expect_column_d04fafa568f0bc2e83ab25873d49e6bb.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d04fafa568f0bc2e83ab25873d49e6bb"}, "created_at": 1654351204.331031, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT_OUT_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT_OUT_USD", "file_key_name": "models.core__ez_dex_swaps"}, "test.ethereum_models.not_null_core__ez_dex_swaps_TOKEN_IN.dcf4834d74": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_IN", "model": "{{ get_where_subquery(ref('core__ez_dex_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_dex_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_core", "fqn": ["ethereum_models", "gold", "not_null_core__ez_dex_swaps_TOKEN_IN"], "unique_id": "test.ethereum_models.not_null_core__ez_dex_swaps_TOKEN_IN.dcf4834d74", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_core__ez_dex_swaps_TOKEN_IN.sql", "original_file_path": "models/gold/core__ez_dex_swaps.yml", "name": "not_null_core__ez_dex_swaps_TOKEN_IN", "alias": "ez_dex_swaps_TOKEN_IN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_dex_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_dex_swaps.yml/not_null_core__ez_dex_swaps_TOKEN_IN.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.335558, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.core.ez_dex_swaps\nwhere TOKEN_IN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOKEN_IN", "file_key_name": "models.core__ez_dex_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_TOKEN_IN__0_xX_0_9a_fA_F_.f4139933b0": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6ac0a049979be95d41676fed5deb8f79\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TOKEN_IN", "model": "{{ get_where_subquery(ref('core__ez_dex_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_dex_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6ac0a049979be95d41676fed5deb8f79", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_TOKEN_IN__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_TOKEN_IN__0_xX_0_9a_fA_F_.f4139933b0", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_6ac0a049979be95d41676fed5deb8f79.sql", "original_file_path": "models/gold/core__ez_dex_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_TOKEN_IN__0_xX_0_9a_fA_F_", "alias": "ez_dex_swaps_TOKEN_IN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_dex_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_dex_swaps.yml/dbt_expectations_expect_column_6ac0a049979be95d41676fed5deb8f79.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_6ac0a049979be95d41676fed5deb8f79"}, "created_at": 1654351204.337122, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TOKEN_IN, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.core.ez_dex_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOKEN_IN", "file_key_name": "models.core__ez_dex_swaps"}, "test.ethereum_models.not_null_core__ez_dex_swaps_TOKEN_OUT.a17febc2f5": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_OUT", "model": "{{ get_where_subquery(ref('core__ez_dex_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_dex_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_core", "fqn": ["ethereum_models", "gold", "not_null_core__ez_dex_swaps_TOKEN_OUT"], "unique_id": "test.ethereum_models.not_null_core__ez_dex_swaps_TOKEN_OUT.a17febc2f5", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_core__ez_dex_swaps_TOKEN_OUT.sql", "original_file_path": "models/gold/core__ez_dex_swaps.yml", "name": "not_null_core__ez_dex_swaps_TOKEN_OUT", "alias": "ez_dex_swaps_TOKEN_OUT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_dex_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_dex_swaps.yml/not_null_core__ez_dex_swaps_TOKEN_OUT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.341652, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.core.ez_dex_swaps\nwhere TOKEN_OUT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOKEN_OUT", "file_key_name": "models.core__ez_dex_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_.942a1810b7": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_04dddeb2a2cc0e3af530b51a073c313d\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TOKEN_OUT", "model": "{{ get_where_subquery(ref('core__ez_dex_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_dex_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_04dddeb2a2cc0e3af530b51a073c313d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_.942a1810b7", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_04dddeb2a2cc0e3af530b51a073c313d.sql", "original_file_path": "models/gold/core__ez_dex_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_", "alias": "ez_dex_swaps_TOKEN_OUT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_dex_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_dex_swaps.yml/dbt_expectations_expect_column_04dddeb2a2cc0e3af530b51a073c313d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_04dddeb2a2cc0e3af530b51a073c313d"}, "created_at": 1654351204.343323, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TOKEN_OUT, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.core.ez_dex_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOKEN_OUT", "file_key_name": "models.core__ez_dex_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_SYMBOL_IN__STRING__VARCHAR.98d21a7e6b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_709b7a874c96f57ac3e3948a67fb157b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "SYMBOL_IN", "model": "{{ get_where_subquery(ref('core__ez_dex_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_dex_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_709b7a874c96f57ac3e3948a67fb157b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_SYMBOL_IN__STRING__VARCHAR"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_SYMBOL_IN__STRING__VARCHAR.98d21a7e6b", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_709b7a874c96f57ac3e3948a67fb157b.sql", "original_file_path": "models/gold/core__ez_dex_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_SYMBOL_IN__STRING__VARCHAR", "alias": "ez_dex_swaps_SYMBOL_IN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_dex_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_dex_swaps.yml/dbt_expectations_expect_column_709b7a874c96f57ac3e3948a67fb157b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_709b7a874c96f57ac3e3948a67fb157b"}, "created_at": 1654351204.350871, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SYMBOL_IN'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SYMBOL_IN", "file_key_name": "models.core__ez_dex_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_SYMBOL_OUT__STRING__VARCHAR.94e5ffc1f8": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_956802d30bdccded3175dec2b0b76e5d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "SYMBOL_OUT", "model": "{{ get_where_subquery(ref('core__ez_dex_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_dex_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_956802d30bdccded3175dec2b0b76e5d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_SYMBOL_OUT__STRING__VARCHAR"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_SYMBOL_OUT__STRING__VARCHAR.94e5ffc1f8", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_956802d30bdccded3175dec2b0b76e5d.sql", "original_file_path": "models/gold/core__ez_dex_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_SYMBOL_OUT__STRING__VARCHAR", "alias": "ez_dex_swaps_SYMBOL_OUT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_dex_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_dex_swaps.yml/dbt_expectations_expect_column_956802d30bdccded3175dec2b0b76e5d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_956802d30bdccded3175dec2b0b76e5d"}, "created_at": 1654351204.3557398, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SYMBOL_OUT'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SYMBOL_OUT", "file_key_name": "models.core__ez_dex_swaps"}, "test.ethereum_models.not_null_core__ez_dex_swaps_SENDER.09a5f2a1d3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP > '2021-08-01'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SENDER", "model": "{{ get_where_subquery(ref('core__ez_dex_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_dex_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCK_TIMESTAMP > '2021-08-01'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_core", "fqn": ["ethereum_models", "gold", "not_null_core__ez_dex_swaps_SENDER"], "unique_id": "test.ethereum_models.not_null_core__ez_dex_swaps_SENDER.09a5f2a1d3", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_core__ez_dex_swaps_SENDER.sql", "original_file_path": "models/gold/core__ez_dex_swaps.yml", "name": "not_null_core__ez_dex_swaps_SENDER", "alias": "ez_dex_swaps_SENDER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_dex_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_dex_swaps.yml/not_null_core__ez_dex_swaps_SENDER.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "BLOCK_TIMESTAMP > '2021-08-01'"}, "created_at": 1654351204.360727, "compiled_sql": "\n    \n    \n\nselect *\nfrom (select * from ETHEREUM_DEV.core.ez_dex_swaps where BLOCK_TIMESTAMP > '2021-08-01') dbt_subquery\nwhere SENDER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SENDER", "file_key_name": "models.core__ez_dex_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_SENDER__0_xX_0_9a_fA_F_.fcc46d5e93": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cdc855f3f9fb969fdfd09c8185380b38\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "SENDER", "model": "{{ get_where_subquery(ref('core__ez_dex_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_dex_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cdc855f3f9fb969fdfd09c8185380b38", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_SENDER__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_SENDER__0_xX_0_9a_fA_F_.fcc46d5e93", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_cdc855f3f9fb969fdfd09c8185380b38.sql", "original_file_path": "models/gold/core__ez_dex_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_SENDER__0_xX_0_9a_fA_F_", "alias": "ez_dex_swaps_SENDER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_dex_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_dex_swaps.yml/dbt_expectations_expect_column_cdc855f3f9fb969fdfd09c8185380b38.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_cdc855f3f9fb969fdfd09c8185380b38"}, "created_at": 1654351204.362276, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(SENDER, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.core.ez_dex_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SENDER", "file_key_name": "models.core__ez_dex_swaps"}, "test.ethereum_models.not_null_core__ez_dex_swaps_TX_TO.91ff48bd55": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_TO", "model": "{{ get_where_subquery(ref('core__ez_dex_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_dex_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_core", "fqn": ["ethereum_models", "gold", "not_null_core__ez_dex_swaps_TX_TO"], "unique_id": "test.ethereum_models.not_null_core__ez_dex_swaps_TX_TO.91ff48bd55", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_core__ez_dex_swaps_TX_TO.sql", "original_file_path": "models/gold/core__ez_dex_swaps.yml", "name": "not_null_core__ez_dex_swaps_TX_TO", "alias": "ez_dex_swaps_TX_TO", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_dex_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_dex_swaps.yml/not_null_core__ez_dex_swaps_TX_TO.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.367187, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.core.ez_dex_swaps\nwhere TX_TO is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_TO", "file_key_name": "models.core__ez_dex_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_PLATFORM__STRING__VARCHAR.045b7f587a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2a97d3b332f6eb080c6ee502b8a8d446\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "PLATFORM", "model": "{{ get_where_subquery(ref('core__ez_dex_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_dex_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2a97d3b332f6eb080c6ee502b8a8d446", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_PLATFORM__STRING__VARCHAR"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_PLATFORM__STRING__VARCHAR.045b7f587a", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_2a97d3b332f6eb080c6ee502b8a8d446.sql", "original_file_path": "models/gold/core__ez_dex_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_PLATFORM__STRING__VARCHAR", "alias": "ez_dex_swaps_PLATFORM", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_dex_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_dex_swaps.yml/dbt_expectations_expect_column_2a97d3b332f6eb080c6ee502b8a8d446.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_2a97d3b332f6eb080c6ee502b8a8d446"}, "created_at": 1654351204.3737202, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PLATFORM'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM", "file_key_name": "models.core__ez_dex_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_EVENT_INDEX__NUMBER__FLOAT.eeb957bb0a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_44b038ffe8f91f3cc43cedd69abde2b4\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "EVENT_INDEX", "model": "{{ get_where_subquery(ref('core__ez_dex_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_dex_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_44b038ffe8f91f3cc43cedd69abde2b4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_EVENT_INDEX__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_EVENT_INDEX__NUMBER__FLOAT.eeb957bb0a", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_44b038ffe8f91f3cc43cedd69abde2b4.sql", "original_file_path": "models/gold/core__ez_dex_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_EVENT_INDEX__NUMBER__FLOAT", "alias": "ez_dex_swaps_EVENT_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_dex_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_dex_swaps.yml/dbt_expectations_expect_column_44b038ffe8f91f3cc43cedd69abde2b4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_44b038ffe8f91f3cc43cedd69abde2b4"}, "created_at": 1654351204.378544, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVENT_INDEX'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EVENT_INDEX", "file_key_name": "models.core__ez_dex_swaps"}, "test.ethereum_models.not_null_core__ez_dex_swaps__LOG_ID.54305ad02d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_LOG_ID", "model": "{{ get_where_subquery(ref('core__ez_dex_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_dex_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_core", "fqn": ["ethereum_models", "gold", "not_null_core__ez_dex_swaps__LOG_ID"], "unique_id": "test.ethereum_models.not_null_core__ez_dex_swaps__LOG_ID.54305ad02d", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_core__ez_dex_swaps__LOG_ID.sql", "original_file_path": "models/gold/core__ez_dex_swaps.yml", "name": "not_null_core__ez_dex_swaps__LOG_ID", "alias": "ez_dex_swaps", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_dex_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_dex_swaps.yml/not_null_core__ez_dex_swaps__LOG_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.3842251, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.core.ez_dex_swaps\nwhere _LOG_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_LOG_ID", "file_key_name": "models.core__ez_dex_swaps"}, "test.ethereum_models.not_null_core__ez_dex_swaps_ORIGIN_FUNCTION_SIGNATURE.26fd2bdff6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FUNCTION_SIGNATURE", "model": "{{ get_where_subquery(ref('core__ez_dex_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_dex_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_core", "fqn": ["ethereum_models", "gold", "not_null_core__ez_dex_swaps_ORIGIN_FUNCTION_SIGNATURE"], "unique_id": "test.ethereum_models.not_null_core__ez_dex_swaps_ORIGIN_FUNCTION_SIGNATURE.26fd2bdff6", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_core__ez_dex_swaps_ORIGIN_FUNCTION_SIGNATURE.sql", "original_file_path": "models/gold/core__ez_dex_swaps.yml", "name": "not_null_core__ez_dex_swaps_ORIGIN_FUNCTION_SIGNATURE", "alias": "ez_dex_swaps_ORIGIN_FUNCTION_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_dex_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_dex_swaps.yml/not_null_core__ez_dex_swaps_ORIGIN_FUNCTION_SIGNATURE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.385849, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.core.ez_dex_swaps\nwhere ORIGIN_FUNCTION_SIGNATURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FUNCTION_SIGNATURE", "file_key_name": "models.core__ez_dex_swaps"}, "test.ethereum_models.not_null_core__ez_dex_swaps_ORIGIN_FROM_ADDRESS.9574e82f5a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('core__ez_dex_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_dex_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_core", "fqn": ["ethereum_models", "gold", "not_null_core__ez_dex_swaps_ORIGIN_FROM_ADDRESS"], "unique_id": "test.ethereum_models.not_null_core__ez_dex_swaps_ORIGIN_FROM_ADDRESS.9574e82f5a", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_core__ez_dex_swaps_ORIGIN_FROM_ADDRESS.sql", "original_file_path": "models/gold/core__ez_dex_swaps.yml", "name": "not_null_core__ez_dex_swaps_ORIGIN_FROM_ADDRESS", "alias": "ez_dex_swaps_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_dex_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_dex_swaps.yml/not_null_core__ez_dex_swaps_ORIGIN_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.387491, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.core.ez_dex_swaps\nwhere ORIGIN_FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.core__ez_dex_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.08cb184de7": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0c2ae9df44be81029bed5c6ae6191a09\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('core__ez_dex_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_dex_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0c2ae9df44be81029bed5c6ae6191a09", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.08cb184de7", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_0c2ae9df44be81029bed5c6ae6191a09.sql", "original_file_path": "models/gold/core__ez_dex_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "ez_dex_swaps_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_dex_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_dex_swaps.yml/dbt_expectations_expect_column_0c2ae9df44be81029bed5c6ae6191a09.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_0c2ae9df44be81029bed5c6ae6191a09"}, "created_at": 1654351204.3891551, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.core.ez_dex_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.core__ez_dex_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.f94db051a4": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9d0dd5e3b7de80ecb5f513bc0adea7c5\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('core__ez_dex_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_dex_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9d0dd5e3b7de80ecb5f513bc0adea7c5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.f94db051a4", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_9d0dd5e3b7de80ecb5f513bc0adea7c5.sql", "original_file_path": "models/gold/core__ez_dex_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "ez_dex_swaps_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_dex_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_dex_swaps.yml/dbt_expectations_expect_column_9d0dd5e3b7de80ecb5f513bc0adea7c5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_9d0dd5e3b7de80ecb5f513bc0adea7c5"}, "created_at": 1654351204.393657, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.core.ez_dex_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.core__ez_dex_swaps"}, "test.ethereum_models.dbt_utils_unique_combination_of_columns_core__ez_dex_swaps__LOG_ID.e945fa690a": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_996dc8fb53113869dd74a043731cbc6b\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_LOG_ID"], "model": "{{ get_where_subquery(ref('core__ez_dex_swaps')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_dex_swaps"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_996dc8fb53113869dd74a043731cbc6b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["ethereum_models", "gold", "dbt_utils_unique_combination_of_columns_core__ez_dex_swaps__LOG_ID"], "unique_id": "test.ethereum_models.dbt_utils_unique_combination_of_columns_core__ez_dex_swaps__LOG_ID.e945fa690a", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_utils_unique_combination_o_996dc8fb53113869dd74a043731cbc6b.sql", "original_file_path": "models/gold/core__ez_dex_swaps.yml", "name": "dbt_utils_unique_combination_of_columns_core__ez_dex_swaps__LOG_ID", "alias": "ez_dex_swaps", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_dex_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_dex_swaps.yml/dbt_utils_unique_combination_o_996dc8fb53113869dd74a043731cbc6b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_996dc8fb53113869dd74a043731cbc6b"}, "created_at": 1654351204.398072, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _LOG_ID\n    from ETHEREUM_DEV.core.ez_dex_swaps\n    group by _LOG_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__ez_dex_swaps"}, "test.ethereum_models.not_null_core__ez_token_transfers_BLOCK_NUMBER.f76d8950d3": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('core__ez_token_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_token_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_core", "fqn": ["ethereum_models", "gold", "not_null_core__ez_token_transfers_BLOCK_NUMBER"], "unique_id": "test.ethereum_models.not_null_core__ez_token_transfers_BLOCK_NUMBER.f76d8950d3", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_core__ez_token_transfers_BLOCK_NUMBER.sql", "original_file_path": "models/gold/core__ez_token_transfers.yml", "name": "not_null_core__ez_token_transfers_BLOCK_NUMBER", "alias": "ez_token_transfers_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_token_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_token_transfers.yml/not_null_core__ez_token_transfers_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.44278, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.core.ez_token_transfers\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.core__ez_token_transfers"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_BLOCK_NUMBER__NUMBER__FLOAT.5677fb7a33": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5fbfdf60406aa179d44fe8bf1913dabc\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('core__ez_token_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_token_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5fbfdf60406aa179d44fe8bf1913dabc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_BLOCK_NUMBER__NUMBER__FLOAT.5677fb7a33", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_5fbfdf60406aa179d44fe8bf1913dabc.sql", "original_file_path": "models/gold/core__ez_token_transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "ez_token_transfers_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_token_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_token_transfers.yml/dbt_expectations_expect_column_5fbfdf60406aa179d44fe8bf1913dabc.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_5fbfdf60406aa179d44fe8bf1913dabc"}, "created_at": 1654351204.444671, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HAS_DECIMAL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.core__ez_token_transfers"}, "test.ethereum_models.not_null_core__ez_token_transfers_BLOCK_TIMESTAMP.ac73bae239": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__ez_token_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_token_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_core", "fqn": ["ethereum_models", "gold", "not_null_core__ez_token_transfers_BLOCK_TIMESTAMP"], "unique_id": "test.ethereum_models.not_null_core__ez_token_transfers_BLOCK_TIMESTAMP.ac73bae239", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_core__ez_token_transfers_BLOCK_TIMESTAMP.sql", "original_file_path": "models/gold/core__ez_token_transfers.yml", "name": "not_null_core__ez_token_transfers_BLOCK_TIMESTAMP", "alias": "ez_token_transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_token_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_token_transfers.yml/not_null_core__ez_token_transfers_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.4494772, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.core.ez_token_transfers\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__ez_token_transfers"}, "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_token_transfers_BLOCK_TIMESTAMP__day__1.1d56697ce2": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_b59ff48dc15b5dc0d925417a979dd806\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__ez_token_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_token_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_b59ff48dc15b5dc0d925417a979dd806", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_row_values_to_have_recent_data_core__ez_token_transfers_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_token_transfers_BLOCK_TIMESTAMP__day__1.1d56697ce2", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_row_va_b59ff48dc15b5dc0d925417a979dd806.sql", "original_file_path": "models/gold/core__ez_token_transfers.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_core__ez_token_transfers_BLOCK_TIMESTAMP__day__1", "alias": "ez_token_transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_token_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_token_transfers.yml/dbt_expectations_expect_row_va_b59ff48dc15b5dc0d925417a979dd806.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_b59ff48dc15b5dc0d925417a979dd806"}, "created_at": 1654351204.451097, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        ETHEREUM_DEV.core.ez_token_transfers\n    where\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__ez_token_transfers"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.74e36526fa": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_96e2fa7b96a9b0652d5e529ea98dc862\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__ez_token_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_token_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_96e2fa7b96a9b0652d5e529ea98dc862", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.74e36526fa", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_96e2fa7b96a9b0652d5e529ea98dc862.sql", "original_file_path": "models/gold/core__ez_token_transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "ez_token_transfers_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_token_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_token_transfers.yml/dbt_expectations_expect_column_96e2fa7b96a9b0652d5e529ea98dc862.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_96e2fa7b96a9b0652d5e529ea98dc862"}, "created_at": 1654351204.457315, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HAS_DECIMAL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__ez_token_transfers"}, "test.ethereum_models.not_null_core__ez_token_transfers_TX_HASH.8d54870f53": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('core__ez_token_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_token_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_core", "fqn": ["ethereum_models", "gold", "not_null_core__ez_token_transfers_TX_HASH"], "unique_id": "test.ethereum_models.not_null_core__ez_token_transfers_TX_HASH.8d54870f53", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_core__ez_token_transfers_TX_HASH.sql", "original_file_path": "models/gold/core__ez_token_transfers.yml", "name": "not_null_core__ez_token_transfers_TX_HASH", "alias": "ez_token_transfers_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_token_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_token_transfers.yml/not_null_core__ez_token_transfers_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.462025, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.core.ez_token_transfers\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.core__ez_token_transfers"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_token_transfers_TX_HASH__0_xX_0_9a_fA_F_.2ed20e4304": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_00cadf379c143c291584770ef260105a\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('core__ez_token_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_token_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_00cadf379c143c291584770ef260105a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_match_regex_core__ez_token_transfers_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_token_transfers_TX_HASH__0_xX_0_9a_fA_F_.2ed20e4304", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_00cadf379c143c291584770ef260105a.sql", "original_file_path": "models/gold/core__ez_token_transfers.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_core__ez_token_transfers_TX_HASH__0_xX_0_9a_fA_F_", "alias": "ez_token_transfers_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_token_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_token_transfers.yml/dbt_expectations_expect_column_00cadf379c143c291584770ef260105a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_00cadf379c143c291584770ef260105a"}, "created_at": 1654351204.464205, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.core.ez_token_transfers\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.core__ez_token_transfers"}, "test.ethereum_models.not_null_core__ez_token_transfers_CONTRACT_ADDRESS.006c65a449": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('core__ez_token_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_token_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_core", "fqn": ["ethereum_models", "gold", "not_null_core__ez_token_transfers_CONTRACT_ADDRESS"], "unique_id": "test.ethereum_models.not_null_core__ez_token_transfers_CONTRACT_ADDRESS.006c65a449", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_core__ez_token_transfers_CONTRACT_ADDRESS.sql", "original_file_path": "models/gold/core__ez_token_transfers.yml", "name": "not_null_core__ez_token_transfers_CONTRACT_ADDRESS", "alias": "ez_token_transfers_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_token_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_token_transfers.yml/not_null_core__ez_token_transfers_CONTRACT_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.469213, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.core.ez_token_transfers\nwhere CONTRACT_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.core__ez_token_transfers"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_token_transfers_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.6c5f384aea": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_7132a933ef1d80de35f7545bc65531e8\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('core__ez_token_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_token_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_7132a933ef1d80de35f7545bc65531e8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_match_regex_core__ez_token_transfers_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_token_transfers_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.6c5f384aea", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_7132a933ef1d80de35f7545bc65531e8.sql", "original_file_path": "models/gold/core__ez_token_transfers.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_core__ez_token_transfers_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_", "alias": "ez_token_transfers_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_token_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_token_transfers.yml/dbt_expectations_expect_column_7132a933ef1d80de35f7545bc65531e8.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_7132a933ef1d80de35f7545bc65531e8"}, "created_at": 1654351204.471353, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(CONTRACT_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.core.ez_token_transfers\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.core__ez_token_transfers"}, "test.ethereum_models.not_null_core__ez_token_transfers_FROM_ADDRESS.1eeb23e280": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP > '2021-08-01'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('core__ez_token_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_token_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCK_TIMESTAMP > '2021-08-01'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_core", "fqn": ["ethereum_models", "gold", "not_null_core__ez_token_transfers_FROM_ADDRESS"], "unique_id": "test.ethereum_models.not_null_core__ez_token_transfers_FROM_ADDRESS.1eeb23e280", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_core__ez_token_transfers_FROM_ADDRESS.sql", "original_file_path": "models/gold/core__ez_token_transfers.yml", "name": "not_null_core__ez_token_transfers_FROM_ADDRESS", "alias": "ez_token_transfers_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_token_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_token_transfers.yml/not_null_core__ez_token_transfers_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "BLOCK_TIMESTAMP > '2021-08-01'"}, "created_at": 1654351204.476387, "compiled_sql": "\n    \n    \n\nselect *\nfrom (select * from ETHEREUM_DEV.core.ez_token_transfers where BLOCK_TIMESTAMP > '2021-08-01') dbt_subquery\nwhere FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FROM_ADDRESS", "file_key_name": "models.core__ez_token_transfers"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_token_transfers_FROM_ADDRESS__0_xX_0_9a_fA_F_.9fadb81646": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c572143270736986036bcd8c845b98fc\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "FROM_ADDRESS", "model": "{{ get_where_subquery(ref('core__ez_token_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_token_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c572143270736986036bcd8c845b98fc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_match_regex_core__ez_token_transfers_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_token_transfers_FROM_ADDRESS__0_xX_0_9a_fA_F_.9fadb81646", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_c572143270736986036bcd8c845b98fc.sql", "original_file_path": "models/gold/core__ez_token_transfers.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_core__ez_token_transfers_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "ez_token_transfers_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_token_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_token_transfers.yml/dbt_expectations_expect_column_c572143270736986036bcd8c845b98fc.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c572143270736986036bcd8c845b98fc"}, "created_at": 1654351204.4785411, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.core.ez_token_transfers\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "FROM_ADDRESS", "file_key_name": "models.core__ez_token_transfers"}, "test.ethereum_models.not_null_core__ez_token_transfers_TO_ADDRESS.1645d36f89": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('core__ez_token_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_token_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_core", "fqn": ["ethereum_models", "gold", "not_null_core__ez_token_transfers_TO_ADDRESS"], "unique_id": "test.ethereum_models.not_null_core__ez_token_transfers_TO_ADDRESS.1645d36f89", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_core__ez_token_transfers_TO_ADDRESS.sql", "original_file_path": "models/gold/core__ez_token_transfers.yml", "name": "not_null_core__ez_token_transfers_TO_ADDRESS", "alias": "ez_token_transfers_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_token_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_token_transfers.yml/not_null_core__ez_token_transfers_TO_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.483186, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.core.ez_token_transfers\nwhere TO_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TO_ADDRESS", "file_key_name": "models.core__ez_token_transfers"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_token_transfers_TO_ADDRESS__0_xX_0_9a_fA_F_.1da4143081": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2b83935daee4b746f1c14e5fa4d68467\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TO_ADDRESS", "model": "{{ get_where_subquery(ref('core__ez_token_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_token_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2b83935daee4b746f1c14e5fa4d68467", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_match_regex_core__ez_token_transfers_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_token_transfers_TO_ADDRESS__0_xX_0_9a_fA_F_.1da4143081", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_2b83935daee4b746f1c14e5fa4d68467.sql", "original_file_path": "models/gold/core__ez_token_transfers.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_core__ez_token_transfers_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "ez_token_transfers_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_token_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_token_transfers.yml/dbt_expectations_expect_column_2b83935daee4b746f1c14e5fa4d68467.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_2b83935daee4b746f1c14e5fa4d68467"}, "created_at": 1654351204.4849632, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.core.ez_token_transfers\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TO_ADDRESS", "file_key_name": "models.core__ez_token_transfers"}, "test.ethereum_models.not_null_core__ez_token_transfers_RAW_AMOUNT.a3646396ec": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "RAW_AMOUNT", "model": "{{ get_where_subquery(ref('core__ez_token_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_token_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_core", "fqn": ["ethereum_models", "gold", "not_null_core__ez_token_transfers_RAW_AMOUNT"], "unique_id": "test.ethereum_models.not_null_core__ez_token_transfers_RAW_AMOUNT.a3646396ec", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_core__ez_token_transfers_RAW_AMOUNT.sql", "original_file_path": "models/gold/core__ez_token_transfers.yml", "name": "not_null_core__ez_token_transfers_RAW_AMOUNT", "alias": "ez_token_transfers_RAW_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_token_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_token_transfers.yml/not_null_core__ez_token_transfers_RAW_AMOUNT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.489999, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.core.ez_token_transfers\nwhere RAW_AMOUNT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RAW_AMOUNT", "file_key_name": "models.core__ez_token_transfers"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_RAW_AMOUNT__NUMBER__FLOAT.f16ebc3c1c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9c99c318e8f3ba82efd41d8500e23c73\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "RAW_AMOUNT", "model": "{{ get_where_subquery(ref('core__ez_token_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_token_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9c99c318e8f3ba82efd41d8500e23c73", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_RAW_AMOUNT__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_RAW_AMOUNT__NUMBER__FLOAT.f16ebc3c1c", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_9c99c318e8f3ba82efd41d8500e23c73.sql", "original_file_path": "models/gold/core__ez_token_transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_RAW_AMOUNT__NUMBER__FLOAT", "alias": "ez_token_transfers_RAW_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_token_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_token_transfers.yml/dbt_expectations_expect_column_9c99c318e8f3ba82efd41d8500e23c73.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_9c99c318e8f3ba82efd41d8500e23c73"}, "created_at": 1654351204.491911, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HAS_DECIMAL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'RAW_AMOUNT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "RAW_AMOUNT", "file_key_name": "models.core__ez_token_transfers"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_DECIMALS__NUMBER__FLOAT.bf814784ea": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ad804f0e9caf0d1dcd75d02b08a9b65e\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "DECIMALS", "model": "{{ get_where_subquery(ref('core__ez_token_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_token_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ad804f0e9caf0d1dcd75d02b08a9b65e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_DECIMALS__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_DECIMALS__NUMBER__FLOAT.bf814784ea", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_ad804f0e9caf0d1dcd75d02b08a9b65e.sql", "original_file_path": "models/gold/core__ez_token_transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_DECIMALS__NUMBER__FLOAT", "alias": "ez_token_transfers_DECIMALS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_token_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_token_transfers.yml/dbt_expectations_expect_column_ad804f0e9caf0d1dcd75d02b08a9b65e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_ad804f0e9caf0d1dcd75d02b08a9b65e"}, "created_at": 1654351204.49737, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HAS_DECIMAL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'DECIMALS'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "DECIMALS", "file_key_name": "models.core__ez_token_transfers"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_SYMBOL__STRING__VARCHAR.2fe518e35d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d26dd03b259950a4ade8f6a95384d565\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "SYMBOL", "model": "{{ get_where_subquery(ref('core__ez_token_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_token_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d26dd03b259950a4ade8f6a95384d565", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_SYMBOL__STRING__VARCHAR"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_SYMBOL__STRING__VARCHAR.2fe518e35d", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_d26dd03b259950a4ade8f6a95384d565.sql", "original_file_path": "models/gold/core__ez_token_transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_SYMBOL__STRING__VARCHAR", "alias": "ez_token_transfers_SYMBOL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_token_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_token_transfers.yml/dbt_expectations_expect_column_d26dd03b259950a4ade8f6a95384d565.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d26dd03b259950a4ade8f6a95384d565"}, "created_at": 1654351204.501688, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HAS_DECIMAL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SYMBOL'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SYMBOL", "file_key_name": "models.core__ez_token_transfers"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_TOKEN_PRICE__NUMBER__FLOAT.c860fdba6e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0d6c0b6473050123112f865502014bbf\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TOKEN_PRICE", "model": "{{ get_where_subquery(ref('core__ez_token_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_token_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0d6c0b6473050123112f865502014bbf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_TOKEN_PRICE__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_TOKEN_PRICE__NUMBER__FLOAT.c860fdba6e", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_0d6c0b6473050123112f865502014bbf.sql", "original_file_path": "models/gold/core__ez_token_transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_TOKEN_PRICE__NUMBER__FLOAT", "alias": "ez_token_transfers_TOKEN_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_token_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_token_transfers.yml/dbt_expectations_expect_column_0d6c0b6473050123112f865502014bbf.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_0d6c0b6473050123112f865502014bbf"}, "created_at": 1654351204.50695, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HAS_DECIMAL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TOKEN_PRICE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOKEN_PRICE", "file_key_name": "models.core__ez_token_transfers"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_AMOUNT__NUMBER__FLOAT.ef74453dc7": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_38b495909a32fa5d4b0d75913ddb9e09\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT", "model": "{{ get_where_subquery(ref('core__ez_token_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_token_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_38b495909a32fa5d4b0d75913ddb9e09", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_AMOUNT__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_AMOUNT__NUMBER__FLOAT.ef74453dc7", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_38b495909a32fa5d4b0d75913ddb9e09.sql", "original_file_path": "models/gold/core__ez_token_transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_AMOUNT__NUMBER__FLOAT", "alias": "ez_token_transfers_AMOUNT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_token_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_token_transfers.yml/dbt_expectations_expect_column_38b495909a32fa5d4b0d75913ddb9e09.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_38b495909a32fa5d4b0d75913ddb9e09"}, "created_at": 1654351204.512168, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HAS_DECIMAL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT", "file_key_name": "models.core__ez_token_transfers"}, "test.ethereum_models.not_null_core__ez_token_transfers_AMOUNT_USD.399f4c1d66": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"CONTRACT_ADDRESS in ('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2', '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48') AND block_timestamp >= '2020-05-05' AND BLOCK_TIMESTAMP < CURRENT_DATE - 2\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "AMOUNT_USD", "model": "{{ get_where_subquery(ref('core__ez_token_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_token_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "CONTRACT_ADDRESS in ('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2', '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48') AND block_timestamp >= '2020-05-05' AND BLOCK_TIMESTAMP < CURRENT_DATE - 2", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_core", "fqn": ["ethereum_models", "gold", "not_null_core__ez_token_transfers_AMOUNT_USD"], "unique_id": "test.ethereum_models.not_null_core__ez_token_transfers_AMOUNT_USD.399f4c1d66", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_core__ez_token_transfers_AMOUNT_USD.sql", "original_file_path": "models/gold/core__ez_token_transfers.yml", "name": "not_null_core__ez_token_transfers_AMOUNT_USD", "alias": "ez_token_transfers_AMOUNT_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_token_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_token_transfers.yml/not_null_core__ez_token_transfers_AMOUNT_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "CONTRACT_ADDRESS in ('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2', '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48') AND block_timestamp >= '2020-05-05' AND BLOCK_TIMESTAMP < CURRENT_DATE - 2"}, "created_at": 1654351204.51757, "compiled_sql": "\n    \n    \n\nselect *\nfrom (select * from ETHEREUM_DEV.core.ez_token_transfers where CONTRACT_ADDRESS in ('0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2', '0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48') AND block_timestamp >= '2020-05-05' AND BLOCK_TIMESTAMP < CURRENT_DATE - 2) dbt_subquery\nwhere AMOUNT_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT_USD", "file_key_name": "models.core__ez_token_transfers"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_AMOUNT_USD__NUMBER__FLOAT.41b94e4dfd": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9a46a4075011ea88e96f5f2f894d3a65\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT_USD", "model": "{{ get_where_subquery(ref('core__ez_token_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_token_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9a46a4075011ea88e96f5f2f894d3a65", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_AMOUNT_USD__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_AMOUNT_USD__NUMBER__FLOAT.41b94e4dfd", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_9a46a4075011ea88e96f5f2f894d3a65.sql", "original_file_path": "models/gold/core__ez_token_transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_AMOUNT_USD__NUMBER__FLOAT", "alias": "ez_token_transfers_AMOUNT_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_token_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_token_transfers.yml/dbt_expectations_expect_column_9a46a4075011ea88e96f5f2f894d3a65.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_9a46a4075011ea88e96f5f2f894d3a65"}, "created_at": 1654351204.519737, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HAS_DECIMAL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT_USD", "file_key_name": "models.core__ez_token_transfers"}, "test.ethereum_models.not_null_core__ez_token_transfers_HAS_PRICE.9b0670c203": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "HAS_PRICE", "model": "{{ get_where_subquery(ref('core__ez_token_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_token_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_core", "fqn": ["ethereum_models", "gold", "not_null_core__ez_token_transfers_HAS_PRICE"], "unique_id": "test.ethereum_models.not_null_core__ez_token_transfers_HAS_PRICE.9b0670c203", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_core__ez_token_transfers_HAS_PRICE.sql", "original_file_path": "models/gold/core__ez_token_transfers.yml", "name": "not_null_core__ez_token_transfers_HAS_PRICE", "alias": "ez_token_transfers_HAS_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_token_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_token_transfers.yml/not_null_core__ez_token_transfers_HAS_PRICE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.524506, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.core.ez_token_transfers\nwhere HAS_PRICE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "HAS_PRICE", "file_key_name": "models.core__ez_token_transfers"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_core__ez_token_transfers_HAS_PRICE__true__false.c77e1cdb74": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1fab67459e78f90e8170162f856ed813\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["true", "false"], "column_name": "HAS_PRICE", "model": "{{ get_where_subquery(ref('core__ez_token_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_token_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1fab67459e78f90e8170162f856ed813", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_be_in_set_core__ez_token_transfers_HAS_PRICE__true__false"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_core__ez_token_transfers_HAS_PRICE__true__false.c77e1cdb74", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_1fab67459e78f90e8170162f856ed813.sql", "original_file_path": "models/gold/core__ez_token_transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_core__ez_token_transfers_HAS_PRICE__true__false", "alias": "ez_token_transfers_HAS_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_token_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_token_transfers.yml/dbt_expectations_expect_column_1fab67459e78f90e8170162f856ed813.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_1fab67459e78f90e8170162f856ed813"}, "created_at": 1654351204.526371, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        HAS_PRICE as value_field\n\n    from ETHEREUM_DEV.core.ez_token_transfers\n    \n\n),\nset_values as (\n\n    select\n        cast('true' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('false' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "HAS_PRICE", "file_key_name": "models.core__ez_token_transfers"}, "test.ethereum_models.not_null_core__ez_token_transfers_HAS_DECIMAL.05d2a91a21": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "HAS_DECIMAL", "model": "{{ get_where_subquery(ref('core__ez_token_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_token_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_core", "fqn": ["ethereum_models", "gold", "not_null_core__ez_token_transfers_HAS_DECIMAL"], "unique_id": "test.ethereum_models.not_null_core__ez_token_transfers_HAS_DECIMAL.05d2a91a21", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_core__ez_token_transfers_HAS_DECIMAL.sql", "original_file_path": "models/gold/core__ez_token_transfers.yml", "name": "not_null_core__ez_token_transfers_HAS_DECIMAL", "alias": "ez_token_transfers_HAS_DECIMAL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_token_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_token_transfers.yml/not_null_core__ez_token_transfers_HAS_DECIMAL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.532279, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.core.ez_token_transfers\nwhere HAS_DECIMAL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "HAS_DECIMAL", "file_key_name": "models.core__ez_token_transfers"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_core__ez_token_transfers_HAS_DECIMAL__true__false.77a32ba9f8": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c50a072716ed0e1eba2cbd9e2f2a2fac\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["true", "false"], "column_name": "HAS_DECIMAL", "model": "{{ get_where_subquery(ref('core__ez_token_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_token_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c50a072716ed0e1eba2cbd9e2f2a2fac", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_be_in_set_core__ez_token_transfers_HAS_DECIMAL__true__false"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_core__ez_token_transfers_HAS_DECIMAL__true__false.77a32ba9f8", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_c50a072716ed0e1eba2cbd9e2f2a2fac.sql", "original_file_path": "models/gold/core__ez_token_transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_core__ez_token_transfers_HAS_DECIMAL__true__false", "alias": "ez_token_transfers_HAS_DECIMAL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_token_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_token_transfers.yml/dbt_expectations_expect_column_c50a072716ed0e1eba2cbd9e2f2a2fac.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c50a072716ed0e1eba2cbd9e2f2a2fac"}, "created_at": 1654351204.533756, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        HAS_DECIMAL as value_field\n\n    from ETHEREUM_DEV.core.ez_token_transfers\n    \n\n),\nset_values as (\n\n    select\n        cast('true' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('false' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "HAS_DECIMAL", "file_key_name": "models.core__ez_token_transfers"}, "test.ethereum_models.not_null_core__ez_token_transfers__LOG_ID.0ec836c5f8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_LOG_ID", "model": "{{ get_where_subquery(ref('core__ez_token_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_token_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_core", "fqn": ["ethereum_models", "gold", "not_null_core__ez_token_transfers__LOG_ID"], "unique_id": "test.ethereum_models.not_null_core__ez_token_transfers__LOG_ID.0ec836c5f8", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_core__ez_token_transfers__LOG_ID.sql", "original_file_path": "models/gold/core__ez_token_transfers.yml", "name": "not_null_core__ez_token_transfers__LOG_ID", "alias": "ez_token_transfers", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_token_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_token_transfers.yml/not_null_core__ez_token_transfers__LOG_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.539325, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.core.ez_token_transfers\nwhere _LOG_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_LOG_ID", "file_key_name": "models.core__ez_token_transfers"}, "test.ethereum_models.not_null_core__ez_token_transfers_INGESTED_AT.15d2e566e7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('core__ez_token_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_token_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_core", "fqn": ["ethereum_models", "gold", "not_null_core__ez_token_transfers_INGESTED_AT"], "unique_id": "test.ethereum_models.not_null_core__ez_token_transfers_INGESTED_AT.15d2e566e7", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_core__ez_token_transfers_INGESTED_AT.sql", "original_file_path": "models/gold/core__ez_token_transfers.yml", "name": "not_null_core__ez_token_transfers_INGESTED_AT", "alias": "ez_token_transfers_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_token_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_token_transfers.yml/not_null_core__ez_token_transfers_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.5408168, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.core.ez_token_transfers\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.core__ez_token_transfers"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_INGESTED_AT__TIMESTAMP_NTZ.a0e512a16d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_01480f78264d29f8aec228f709cb87bc\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('core__ez_token_transfers')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_token_transfers"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_01480f78264d29f8aec228f709cb87bc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_INGESTED_AT__TIMESTAMP_NTZ"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_INGESTED_AT__TIMESTAMP_NTZ.a0e512a16d", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_01480f78264d29f8aec228f709cb87bc.sql", "original_file_path": "models/gold/core__ez_token_transfers.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_INGESTED_AT__TIMESTAMP_NTZ", "alias": "ez_token_transfers_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_token_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_token_transfers.yml/dbt_expectations_expect_column_01480f78264d29f8aec228f709cb87bc.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_01480f78264d29f8aec228f709cb87bc"}, "created_at": 1654351204.543342, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('RAW_AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('DECIMALS' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HAS_DECIMAL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('HAS_PRICE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'INGESTED_AT'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.core__ez_token_transfers"}, "test.ethereum_models.not_null_core__ez_token_transfers_ORIGIN_FUNCTION_SIGNATURE.817f71c121": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FUNCTION_SIGNATURE", "model": "{{ get_where_subquery(ref('core__ez_token_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_token_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_core", "fqn": ["ethereum_models", "gold", "not_null_core__ez_token_transfers_ORIGIN_FUNCTION_SIGNATURE"], "unique_id": "test.ethereum_models.not_null_core__ez_token_transfers_ORIGIN_FUNCTION_SIGNATURE.817f71c121", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_core__ez_token_transfers_ORIGIN_FUNCTION_SIGNATURE.sql", "original_file_path": "models/gold/core__ez_token_transfers.yml", "name": "not_null_core__ez_token_transfers_ORIGIN_FUNCTION_SIGNATURE", "alias": "ez_token_transfers_ORIGIN_FUNCTION_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_token_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_token_transfers.yml/not_null_core__ez_token_transfers_ORIGIN_FUNCTION_SIGNATURE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.547806, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.core.ez_token_transfers\nwhere ORIGIN_FUNCTION_SIGNATURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FUNCTION_SIGNATURE", "file_key_name": "models.core__ez_token_transfers"}, "test.ethereum_models.not_null_core__ez_token_transfers_ORIGIN_FROM_ADDRESS.9fe38480be": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('core__ez_token_transfers')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_token_transfers"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_core", "fqn": ["ethereum_models", "gold", "not_null_core__ez_token_transfers_ORIGIN_FROM_ADDRESS"], "unique_id": "test.ethereum_models.not_null_core__ez_token_transfers_ORIGIN_FROM_ADDRESS.9fe38480be", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_core__ez_token_transfers_ORIGIN_FROM_ADDRESS.sql", "original_file_path": "models/gold/core__ez_token_transfers.yml", "name": "not_null_core__ez_token_transfers_ORIGIN_FROM_ADDRESS", "alias": "ez_token_transfers_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_token_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_token_transfers.yml/not_null_core__ez_token_transfers_ORIGIN_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.5495281, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.core.ez_token_transfers\nwhere ORIGIN_FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.core__ez_token_transfers"}, "test.ethereum_models.dbt_utils_unique_combination_of_columns_core__ez_token_transfers__LOG_ID.e8a3ff1d6e": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_29eb6740769be2f25a2e5357da46c05f\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_LOG_ID"], "model": "{{ get_where_subquery(ref('core__ez_token_transfers')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_token_transfers"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_29eb6740769be2f25a2e5357da46c05f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["ethereum_models", "gold", "dbt_utils_unique_combination_of_columns_core__ez_token_transfers__LOG_ID"], "unique_id": "test.ethereum_models.dbt_utils_unique_combination_of_columns_core__ez_token_transfers__LOG_ID.e8a3ff1d6e", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_utils_unique_combination_o_29eb6740769be2f25a2e5357da46c05f.sql", "original_file_path": "models/gold/core__ez_token_transfers.yml", "name": "dbt_utils_unique_combination_of_columns_core__ez_token_transfers__LOG_ID", "alias": "ez_token_transfers", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_token_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_token_transfers.yml/dbt_utils_unique_combination_o_29eb6740769be2f25a2e5357da46c05f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_29eb6740769be2f25a2e5357da46c05f"}, "created_at": 1654351204.551739, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _LOG_ID\n    from ETHEREUM_DEV.core.ez_token_transfers\n    group by _LOG_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__ez_token_transfers"}, "test.ethereum_models.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_core", "fqn": ["ethereum_models", "gold", "not_null_core__dim_labels_BLOCKCHAIN"], "unique_id": "test.ethereum_models.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_core__dim_labels_BLOCKCHAIN.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "not_null_core__dim_labels_BLOCKCHAIN", "alias": "dim_labels_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__dim_labels.yml/not_null_core__dim_labels_BLOCKCHAIN.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.581008, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.core.dim_labels\nwhere BLOCKCHAIN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCKCHAIN", "file_key_name": "models.core__dim_labels"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_BLOCKCHAIN__ethereum.d8a6eb03b5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_14c66c36d1c8bb2901a57f73036c5944\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["ethereum"], "column_name": "BLOCKCHAIN", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__dim_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_14c66c36d1c8bb2901a57f73036c5944", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_BLOCKCHAIN__ethereum"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_BLOCKCHAIN__ethereum.d8a6eb03b5", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_14c66c36d1c8bb2901a57f73036c5944.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_BLOCKCHAIN__ethereum", "alias": "dim_labels_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__dim_labels.yml/dbt_expectations_expect_column_14c66c36d1c8bb2901a57f73036c5944.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_14c66c36d1c8bb2901a57f73036c5944"}, "created_at": 1654351204.583864, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        BLOCKCHAIN as value_field\n\n    from ETHEREUM_DEV.core.dim_labels\n    \n\n),\nset_values as (\n\n    select\n        cast('ethereum' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCKCHAIN", "file_key_name": "models.core__dim_labels"}, "test.ethereum_models.not_null_core__dim_labels_CREATOR.0c77d5749c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATOR", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_core", "fqn": ["ethereum_models", "gold", "not_null_core__dim_labels_CREATOR"], "unique_id": "test.ethereum_models.not_null_core__dim_labels_CREATOR.0c77d5749c", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_core__dim_labels_CREATOR.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "not_null_core__dim_labels_CREATOR", "alias": "dim_labels_CREATOR", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__dim_labels.yml/not_null_core__dim_labels_CREATOR.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.5881758, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.core.dim_labels\nwhere CREATOR is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATOR", "file_key_name": "models.core__dim_labels"}, "test.ethereum_models.not_null_core__dim_labels_ADDRESS.ddf35f62af": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_core", "fqn": ["ethereum_models", "gold", "not_null_core__dim_labels_ADDRESS"], "unique_id": "test.ethereum_models.not_null_core__dim_labels_ADDRESS.ddf35f62af", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_core__dim_labels_ADDRESS.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "not_null_core__dim_labels_ADDRESS", "alias": "dim_labels_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__dim_labels.yml/not_null_core__dim_labels_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.590039, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.core.dim_labels\nwhere ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.core__dim_labels"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__dim_labels_ADDRESS__0_xX_0_9a_fA_F_.52c2534d6a": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_e990285a86f4dce4c3da26f6932752bc\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ADDRESS", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__dim_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_e990285a86f4dce4c3da26f6932752bc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_match_regex_core__dim_labels_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__dim_labels_ADDRESS__0_xX_0_9a_fA_F_.52c2534d6a", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_e990285a86f4dce4c3da26f6932752bc.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_core__dim_labels_ADDRESS__0_xX_0_9a_fA_F_", "alias": "dim_labels_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__dim_labels.yml/dbt_expectations_expect_column_e990285a86f4dce4c3da26f6932752bc.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_e990285a86f4dce4c3da26f6932752bc"}, "created_at": 1654351204.592306, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.core.dim_labels\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS", "file_key_name": "models.core__dim_labels"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_ADDRESS_NAME__STRING__VARCHAR.7747aa45d1": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0157bb28d9599f33d4efbe0a75260f3b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "ADDRESS_NAME", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__dim_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0157bb28d9599f33d4efbe0a75260f3b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_ADDRESS_NAME__STRING__VARCHAR"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_ADDRESS_NAME__STRING__VARCHAR.7747aa45d1", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_0157bb28d9599f33d4efbe0a75260f3b.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_ADDRESS_NAME__STRING__VARCHAR", "alias": "dim_labels_ADDRESS_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__dim_labels.yml/dbt_expectations_expect_column_0157bb28d9599f33d4efbe0a75260f3b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_0157bb28d9599f33d4efbe0a75260f3b"}, "created_at": 1654351204.597232, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_SUBTYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'ADDRESS_NAME'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ADDRESS_NAME", "file_key_name": "models.core__dim_labels"}, "test.ethereum_models.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LABEL_TYPE", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_core", "fqn": ["ethereum_models", "gold", "not_null_core__dim_labels_LABEL_TYPE"], "unique_id": "test.ethereum_models.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_core__dim_labels_LABEL_TYPE.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "not_null_core__dim_labels_LABEL_TYPE", "alias": "dim_labels_LABEL_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__dim_labels.yml/not_null_core__dim_labels_LABEL_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.6023822, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.core.dim_labels\nwhere LABEL_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LABEL_TYPE", "file_key_name": "models.core__dim_labels"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin__project.145ec1d947": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9218b3ba70968c098bf5a126b21109bf\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["flotsam", "nft", "defi", "dex", "cex", "dapp", "token", "operator", "layer2", "chadmin", "project"], "column_name": "LABEL_TYPE", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__dim_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9218b3ba70968c098bf5a126b21109bf", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin__project"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin__project.145ec1d947", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_9218b3ba70968c098bf5a126b21109bf.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin__project", "alias": "dim_labels_LABEL_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__dim_labels.yml/dbt_expectations_expect_column_9218b3ba70968c098bf5a126b21109bf.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_9218b3ba70968c098bf5a126b21109bf"}, "created_at": 1654351204.6041238, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        LABEL_TYPE as value_field\n\n    from ETHEREUM_DEV.core.dim_labels\n    \n\n),\nset_values as (\n\n    select\n        cast('flotsam' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('nft' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('defi' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('dex' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('cex' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('dapp' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('token' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('operator' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('layer2' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('chadmin' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('project' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LABEL_TYPE", "file_key_name": "models.core__dim_labels"}, "test.ethereum_models.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LABEL_SUBTYPE", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_core", "fqn": ["ethereum_models", "gold", "not_null_core__dim_labels_LABEL_SUBTYPE"], "unique_id": "test.ethereum_models.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_core__dim_labels_LABEL_SUBTYPE.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "not_null_core__dim_labels_LABEL_SUBTYPE", "alias": "dim_labels_LABEL_SUBTYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__dim_labels.yml/not_null_core__dim_labels_LABEL_SUBTYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.6142552, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.core.dim_labels\nwhere LABEL_SUBTYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LABEL_SUBTYPE", "file_key_name": "models.core__dim_labels"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_LABEL_SUBTYPE__STRING__VARCHAR.80b827b7f5": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d519d707a433e06c1d79b58bc3bb7d6f\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "LABEL_SUBTYPE", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__dim_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d519d707a433e06c1d79b58bc3bb7d6f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_LABEL_SUBTYPE__STRING__VARCHAR"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_LABEL_SUBTYPE__STRING__VARCHAR.80b827b7f5", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_d519d707a433e06c1d79b58bc3bb7d6f.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_LABEL_SUBTYPE__STRING__VARCHAR", "alias": "dim_labels_LABEL_SUBTYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__dim_labels.yml/dbt_expectations_expect_column_d519d707a433e06c1d79b58bc3bb7d6f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d519d707a433e06c1d79b58bc3bb7d6f"}, "created_at": 1654351204.616572, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_SUBTYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LABEL_SUBTYPE'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LABEL_SUBTYPE", "file_key_name": "models.core__dim_labels"}, "test.ethereum_models.not_null_core__dim_labels_LABEL.05696d692d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "LABEL", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__dim_labels"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_core", "fqn": ["ethereum_models", "gold", "not_null_core__dim_labels_LABEL"], "unique_id": "test.ethereum_models.not_null_core__dim_labels_LABEL.05696d692d", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_core__dim_labels_LABEL.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "not_null_core__dim_labels_LABEL", "alias": "dim_labels_LABEL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__dim_labels.yml/not_null_core__dim_labels_LABEL.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.621697, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.core.dim_labels\nwhere LABEL is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LABEL", "file_key_name": "models.core__dim_labels"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_LABEL__STRING__VARCHAR.541a605c84": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2e33d53b4d8844955796a70fcdf19357\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "LABEL", "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__dim_labels"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2e33d53b4d8844955796a70fcdf19357", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_LABEL__STRING__VARCHAR"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_LABEL__STRING__VARCHAR.541a605c84", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_2e33d53b4d8844955796a70fcdf19357.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_LABEL__STRING__VARCHAR", "alias": "dim_labels_LABEL", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__dim_labels.yml/dbt_expectations_expect_column_2e33d53b4d8844955796a70fcdf19357.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_2e33d53b4d8844955796a70fcdf19357"}, "created_at": 1654351204.623658, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCKCHAIN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ADDRESS_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL_SUBTYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('LABEL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'LABEL'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "LABEL", "file_key_name": "models.core__dim_labels"}, "test.ethereum_models.dbt_utils_unique_combination_of_columns_core__dim_labels_BLOCKCHAIN__CREATOR__ADDRESS.de325ffec9": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_8a7e229c14095011e4d56d1d71aa4845\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["BLOCKCHAIN", "CREATOR", "ADDRESS"], "model": "{{ get_where_subquery(ref('core__dim_labels')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__dim_labels"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_8a7e229c14095011e4d56d1d71aa4845", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["ethereum_models", "gold", "dbt_utils_unique_combination_of_columns_core__dim_labels_BLOCKCHAIN__CREATOR__ADDRESS"], "unique_id": "test.ethereum_models.dbt_utils_unique_combination_of_columns_core__dim_labels_BLOCKCHAIN__CREATOR__ADDRESS.de325ffec9", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_utils_unique_combination_o_8a7e229c14095011e4d56d1d71aa4845.sql", "original_file_path": "models/gold/core__dim_labels.yml", "name": "dbt_utils_unique_combination_of_columns_core__dim_labels_BLOCKCHAIN__CREATOR__ADDRESS", "alias": "dim_labels_BLOCKCHAIN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__dim_labels"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__dim_labels.yml/dbt_utils_unique_combination_o_8a7e229c14095011e4d56d1d71aa4845.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_8a7e229c14095011e4d56d1d71aa4845"}, "created_at": 1654351204.62883, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        BLOCKCHAIN, CREATOR, ADDRESS\n    from ETHEREUM_DEV.core.dim_labels\n    group by BLOCKCHAIN, CREATOR, ADDRESS\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__dim_labels"}, "test.ethereum_models.not_null_sushi__ez_swaps_BLOCK_NUMBER.4da3b3d654": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_sushi", "fqn": ["ethereum_models", "Sushi", "not_null_sushi__ez_swaps_BLOCK_NUMBER"], "unique_id": "test.ethereum_models.not_null_sushi__ez_swaps_BLOCK_NUMBER.4da3b3d654", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_sushi__ez_swaps_BLOCK_NUMBER.sql", "original_file_path": "models/Sushi/sushi__ez_swaps.yml", "name": "not_null_sushi__ez_swaps_BLOCK_NUMBER", "alias": "ez_swaps_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/Sushi/sushi__ez_swaps.yml/not_null_sushi__ez_swaps_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.668221, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.sushi.ez_swaps\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.sushi__ez_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_NUMBER__NUMBER__FLOAT.7b69aae0de": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0d1bebae3419b1f597277d114f4999ad\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0d1bebae3419b1f597277d114f4999ad", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["ethereum_models", "Sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_NUMBER__NUMBER__FLOAT.7b69aae0de", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_0d1bebae3419b1f597277d114f4999ad.sql", "original_file_path": "models/Sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "ez_swaps_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/Sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_0d1bebae3419b1f597277d114f4999ad.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_0d1bebae3419b1f597277d114f4999ad"}, "created_at": 1654351204.670385, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.sushi__ez_swaps"}, "test.ethereum_models.not_null_sushi__ez_swaps_BLOCK_TIMESTAMP.64d0de4b09": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_sushi", "fqn": ["ethereum_models", "Sushi", "not_null_sushi__ez_swaps_BLOCK_TIMESTAMP"], "unique_id": "test.ethereum_models.not_null_sushi__ez_swaps_BLOCK_TIMESTAMP.64d0de4b09", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_sushi__ez_swaps_BLOCK_TIMESTAMP.sql", "original_file_path": "models/Sushi/sushi__ez_swaps.yml", "name": "not_null_sushi__ez_swaps_BLOCK_TIMESTAMP", "alias": "ez_swaps_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/Sushi/sushi__ez_swaps.yml/not_null_sushi__ez_swaps_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.675781, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.sushi.ez_swaps\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.sushi__ez_swaps"}, "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_swaps_BLOCK_TIMESTAMP__day__1.ccd4b95299": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_fba99a4d962c16acbcae70cfb735399d\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_fba99a4d962c16acbcae70cfb735399d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_sushi", "fqn": ["ethereum_models", "Sushi", "dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_swaps_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_swaps_BLOCK_TIMESTAMP__day__1.ccd4b95299", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_row_va_fba99a4d962c16acbcae70cfb735399d.sql", "original_file_path": "models/Sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_swaps_BLOCK_TIMESTAMP__day__1", "alias": "ez_swaps_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/Sushi/sushi__ez_swaps.yml/dbt_expectations_expect_row_va_fba99a4d962c16acbcae70cfb735399d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_fba99a4d962c16acbcae70cfb735399d"}, "created_at": 1654351204.677643, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        ETHEREUM_DEV.sushi.ez_swaps\n    where\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.sushi__ez_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c09d40c178": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a13829dd693c406675a79859aaaf8ea1\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a13829dd693c406675a79859aaaf8ea1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["ethereum_models", "Sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c09d40c178", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_a13829dd693c406675a79859aaaf8ea1.sql", "original_file_path": "models/Sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "ez_swaps_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/Sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_a13829dd693c406675a79859aaaf8ea1.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_a13829dd693c406675a79859aaaf8ea1"}, "created_at": 1654351204.684245, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.sushi__ez_swaps"}, "test.ethereum_models.not_null_sushi__ez_swaps_TX_HASH.5c71b07498": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_sushi", "fqn": ["ethereum_models", "Sushi", "not_null_sushi__ez_swaps_TX_HASH"], "unique_id": "test.ethereum_models.not_null_sushi__ez_swaps_TX_HASH.5c71b07498", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_sushi__ez_swaps_TX_HASH.sql", "original_file_path": "models/Sushi/sushi__ez_swaps.yml", "name": "not_null_sushi__ez_swaps_TX_HASH", "alias": "ez_swaps_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/Sushi/sushi__ez_swaps.yml/not_null_sushi__ez_swaps_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.689551, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.sushi.ez_swaps\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.sushi__ez_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_HASH__0_xX_0_9a_fA_F_.15d478c09c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_20637e8aec991d2e7a6da871dabc7bbb\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_20637e8aec991d2e7a6da871dabc7bbb", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["ethereum_models", "Sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_HASH__0_xX_0_9a_fA_F_.15d478c09c", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_20637e8aec991d2e7a6da871dabc7bbb.sql", "original_file_path": "models/Sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_HASH__0_xX_0_9a_fA_F_", "alias": "ez_swaps_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/Sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_20637e8aec991d2e7a6da871dabc7bbb.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_20637e8aec991d2e7a6da871dabc7bbb"}, "created_at": 1654351204.691385, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.sushi.ez_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.sushi__ez_swaps"}, "test.ethereum_models.not_null_sushi__ez_swaps_CONTRACT_ADDRESS.f4cd976e06": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_sushi", "fqn": ["ethereum_models", "Sushi", "not_null_sushi__ez_swaps_CONTRACT_ADDRESS"], "unique_id": "test.ethereum_models.not_null_sushi__ez_swaps_CONTRACT_ADDRESS.f4cd976e06", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_sushi__ez_swaps_CONTRACT_ADDRESS.sql", "original_file_path": "models/Sushi/sushi__ez_swaps.yml", "name": "not_null_sushi__ez_swaps_CONTRACT_ADDRESS", "alias": "ez_swaps_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/Sushi/sushi__ez_swaps.yml/not_null_sushi__ez_swaps_CONTRACT_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.696521, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.sushi.ez_swaps\nwhere CONTRACT_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.sushi__ez_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.d6ed59e98b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_3124928ea29d4d2d4ca74f173edf79f4\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "CONTRACT_ADDRESS", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_3124928ea29d4d2d4ca74f173edf79f4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["ethereum_models", "Sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.d6ed59e98b", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_3124928ea29d4d2d4ca74f173edf79f4.sql", "original_file_path": "models/Sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_", "alias": "ez_swaps_CONTRACT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/Sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_3124928ea29d4d2d4ca74f173edf79f4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_3124928ea29d4d2d4ca74f173edf79f4"}, "created_at": 1654351204.6982772, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(CONTRACT_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.sushi.ez_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CONTRACT_ADDRESS", "file_key_name": "models.sushi__ez_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_EVENT_NAME__STRING__VARCHAR.9c08c6c888": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_57dde4bb0e94f4fa928f8d4d48f12c01\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "EVENT_NAME", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_57dde4bb0e94f4fa928f8d4d48f12c01", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["ethereum_models", "Sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_EVENT_NAME__STRING__VARCHAR"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_EVENT_NAME__STRING__VARCHAR.9c08c6c888", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_57dde4bb0e94f4fa928f8d4d48f12c01.sql", "original_file_path": "models/Sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_EVENT_NAME__STRING__VARCHAR", "alias": "ez_swaps_EVENT_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/Sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_57dde4bb0e94f4fa928f8d4d48f12c01.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_57dde4bb0e94f4fa928f8d4d48f12c01"}, "created_at": 1654351204.70311, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVENT_NAME'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EVENT_NAME", "file_key_name": "models.sushi__ez_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN__NUMBER__FLOAT.ce483aa368": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_07850b04dfdbeda7b8a1c2fcbf422efe\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT_IN", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_07850b04dfdbeda7b8a1c2fcbf422efe", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["ethereum_models", "Sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN__NUMBER__FLOAT.ce483aa368", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_07850b04dfdbeda7b8a1c2fcbf422efe.sql", "original_file_path": "models/Sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN__NUMBER__FLOAT", "alias": "ez_swaps_AMOUNT_IN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/Sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_07850b04dfdbeda7b8a1c2fcbf422efe.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_07850b04dfdbeda7b8a1c2fcbf422efe"}, "created_at": 1654351204.708693, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT_IN'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT_IN", "file_key_name": "models.sushi__ez_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT__NUMBER__FLOAT.6028b5385f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1ea95f689a0a0d76b9936262483dcf06\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT_OUT", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1ea95f689a0a0d76b9936262483dcf06", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["ethereum_models", "Sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT__NUMBER__FLOAT.6028b5385f", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_1ea95f689a0a0d76b9936262483dcf06.sql", "original_file_path": "models/Sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT__NUMBER__FLOAT", "alias": "ez_swaps_AMOUNT_OUT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/Sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_1ea95f689a0a0d76b9936262483dcf06.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_1ea95f689a0a0d76b9936262483dcf06"}, "created_at": 1654351204.7141042, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT_OUT'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT_OUT", "file_key_name": "models.sushi__ez_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN_USD__NUMBER__FLOAT.9a8b1e0480": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_590932661a0605b27523ee9de68a5fab\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT_IN_USD", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_590932661a0605b27523ee9de68a5fab", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["ethereum_models", "Sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN_USD__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN_USD__NUMBER__FLOAT.9a8b1e0480", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_590932661a0605b27523ee9de68a5fab.sql", "original_file_path": "models/Sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN_USD__NUMBER__FLOAT", "alias": "ez_swaps_AMOUNT_IN_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/Sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_590932661a0605b27523ee9de68a5fab.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_590932661a0605b27523ee9de68a5fab"}, "created_at": 1654351204.7187982, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT_IN_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT_IN_USD", "file_key_name": "models.sushi__ez_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT.a061b70981": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f8b8baa2ef40f88b54230265ed701d42\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "AMOUNT_OUT_USD", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f8b8baa2ef40f88b54230265ed701d42", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["ethereum_models", "Sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT.a061b70981", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_f8b8baa2ef40f88b54230265ed701d42.sql", "original_file_path": "models/Sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT", "alias": "ez_swaps_AMOUNT_OUT_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/Sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_f8b8baa2ef40f88b54230265ed701d42.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_f8b8baa2ef40f88b54230265ed701d42"}, "created_at": 1654351204.724451, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'AMOUNT_OUT_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "AMOUNT_OUT_USD", "file_key_name": "models.sushi__ez_swaps"}, "test.ethereum_models.not_null_sushi__ez_swaps_TOKEN_IN.8093c41dbe": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_IN", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_sushi", "fqn": ["ethereum_models", "Sushi", "not_null_sushi__ez_swaps_TOKEN_IN"], "unique_id": "test.ethereum_models.not_null_sushi__ez_swaps_TOKEN_IN.8093c41dbe", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_sushi__ez_swaps_TOKEN_IN.sql", "original_file_path": "models/Sushi/sushi__ez_swaps.yml", "name": "not_null_sushi__ez_swaps_TOKEN_IN", "alias": "ez_swaps_TOKEN_IN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/Sushi/sushi__ez_swaps.yml/not_null_sushi__ez_swaps_TOKEN_IN.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.7299352, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.sushi.ez_swaps\nwhere TOKEN_IN is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOKEN_IN", "file_key_name": "models.sushi__ez_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_IN__0_xX_0_9a_fA_F_.ae96a38071": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a83e8ef42a5c728c43663e412d1b8a6a\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TOKEN_IN", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a83e8ef42a5c728c43663e412d1b8a6a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["ethereum_models", "Sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_IN__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_IN__0_xX_0_9a_fA_F_.ae96a38071", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_a83e8ef42a5c728c43663e412d1b8a6a.sql", "original_file_path": "models/Sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_IN__0_xX_0_9a_fA_F_", "alias": "ez_swaps_TOKEN_IN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/Sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_a83e8ef42a5c728c43663e412d1b8a6a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_a83e8ef42a5c728c43663e412d1b8a6a"}, "created_at": 1654351204.731594, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TOKEN_IN, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.sushi.ez_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOKEN_IN", "file_key_name": "models.sushi__ez_swaps"}, "test.ethereum_models.not_null_sushi__ez_swaps_TOKEN_OUT.68f3f9aac2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKEN_OUT", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_sushi", "fqn": ["ethereum_models", "Sushi", "not_null_sushi__ez_swaps_TOKEN_OUT"], "unique_id": "test.ethereum_models.not_null_sushi__ez_swaps_TOKEN_OUT.68f3f9aac2", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_sushi__ez_swaps_TOKEN_OUT.sql", "original_file_path": "models/Sushi/sushi__ez_swaps.yml", "name": "not_null_sushi__ez_swaps_TOKEN_OUT", "alias": "ez_swaps_TOKEN_OUT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/Sushi/sushi__ez_swaps.yml/not_null_sushi__ez_swaps_TOKEN_OUT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.736877, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.sushi.ez_swaps\nwhere TOKEN_OUT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOKEN_OUT", "file_key_name": "models.sushi__ez_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_.a99f33851e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_be638137de4adae51304e1be121986ed\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TOKEN_OUT", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_be638137de4adae51304e1be121986ed", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["ethereum_models", "Sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_.a99f33851e", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_be638137de4adae51304e1be121986ed.sql", "original_file_path": "models/Sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_", "alias": "ez_swaps_TOKEN_OUT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/Sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_be638137de4adae51304e1be121986ed.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_be638137de4adae51304e1be121986ed"}, "created_at": 1654351204.738821, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TOKEN_OUT, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.sushi.ez_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOKEN_OUT", "file_key_name": "models.sushi__ez_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_IN__STRING__VARCHAR.b1aea9c82f": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_abaf45ee3ec758f86a85905c8f0b1930\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "SYMBOL_IN", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_abaf45ee3ec758f86a85905c8f0b1930", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["ethereum_models", "Sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_IN__STRING__VARCHAR"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_IN__STRING__VARCHAR.b1aea9c82f", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_abaf45ee3ec758f86a85905c8f0b1930.sql", "original_file_path": "models/Sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_IN__STRING__VARCHAR", "alias": "ez_swaps_SYMBOL_IN", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/Sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_abaf45ee3ec758f86a85905c8f0b1930.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_abaf45ee3ec758f86a85905c8f0b1930"}, "created_at": 1654351204.7437031, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SYMBOL_IN'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SYMBOL_IN", "file_key_name": "models.sushi__ez_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_OUT__STRING__VARCHAR.9fa7d6e04c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f5fdb44514baccadc81da07bd9bec58f\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "SYMBOL_OUT", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f5fdb44514baccadc81da07bd9bec58f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["ethereum_models", "Sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_OUT__STRING__VARCHAR"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_OUT__STRING__VARCHAR.9fa7d6e04c", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_f5fdb44514baccadc81da07bd9bec58f.sql", "original_file_path": "models/Sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_OUT__STRING__VARCHAR", "alias": "ez_swaps_SYMBOL_OUT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/Sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_f5fdb44514baccadc81da07bd9bec58f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_f5fdb44514baccadc81da07bd9bec58f"}, "created_at": 1654351204.749015, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'SYMBOL_OUT'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SYMBOL_OUT", "file_key_name": "models.sushi__ez_swaps"}, "test.ethereum_models.not_null_sushi__ez_swaps_SENDER.b76baa207c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"BLOCK_TIMESTAMP > '2021-08-01'\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SENDER", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "BLOCK_TIMESTAMP > '2021-08-01'", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_sushi", "fqn": ["ethereum_models", "Sushi", "not_null_sushi__ez_swaps_SENDER"], "unique_id": "test.ethereum_models.not_null_sushi__ez_swaps_SENDER.b76baa207c", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_sushi__ez_swaps_SENDER.sql", "original_file_path": "models/Sushi/sushi__ez_swaps.yml", "name": "not_null_sushi__ez_swaps_SENDER", "alias": "ez_swaps_SENDER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/Sushi/sushi__ez_swaps.yml/not_null_sushi__ez_swaps_SENDER.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "BLOCK_TIMESTAMP > '2021-08-01'"}, "created_at": 1654351204.754922, "compiled_sql": "\n    \n    \n\nselect *\nfrom (select * from ETHEREUM_DEV.sushi.ez_swaps where BLOCK_TIMESTAMP > '2021-08-01') dbt_subquery\nwhere SENDER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SENDER", "file_key_name": "models.sushi__ez_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_SENDER__0_xX_0_9a_fA_F_.b8de01d1db": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d8af66b62e6c6112b1c0510eac50f6d8\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "SENDER", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d8af66b62e6c6112b1c0510eac50f6d8", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["ethereum_models", "Sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_SENDER__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_SENDER__0_xX_0_9a_fA_F_.b8de01d1db", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_d8af66b62e6c6112b1c0510eac50f6d8.sql", "original_file_path": "models/Sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_SENDER__0_xX_0_9a_fA_F_", "alias": "ez_swaps_SENDER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/Sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_d8af66b62e6c6112b1c0510eac50f6d8.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d8af66b62e6c6112b1c0510eac50f6d8"}, "created_at": 1654351204.756681, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(SENDER, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.sushi.ez_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SENDER", "file_key_name": "models.sushi__ez_swaps"}, "test.ethereum_models.not_null_sushi__ez_swaps_TX_TO.1c512c542a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_TO", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_sushi", "fqn": ["ethereum_models", "Sushi", "not_null_sushi__ez_swaps_TX_TO"], "unique_id": "test.ethereum_models.not_null_sushi__ez_swaps_TX_TO.1c512c542a", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_sushi__ez_swaps_TX_TO.sql", "original_file_path": "models/Sushi/sushi__ez_swaps.yml", "name": "not_null_sushi__ez_swaps_TX_TO", "alias": "ez_swaps_TX_TO", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/Sushi/sushi__ez_swaps.yml/not_null_sushi__ez_swaps_TX_TO.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.762638, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.sushi.ez_swaps\nwhere TX_TO is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_TO", "file_key_name": "models.sushi__ez_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_TO__0_xX_0_9a_fA_F_.81a6e2ad45": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9a85c3009a01a0f64bc589287812f943\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_TO", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9a85c3009a01a0f64bc589287812f943", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["ethereum_models", "Sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_TO__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_TO__0_xX_0_9a_fA_F_.81a6e2ad45", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_9a85c3009a01a0f64bc589287812f943.sql", "original_file_path": "models/Sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_TO__0_xX_0_9a_fA_F_", "alias": "ez_swaps_TX_TO", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/Sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_9a85c3009a01a0f64bc589287812f943.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_9a85c3009a01a0f64bc589287812f943"}, "created_at": 1654351204.764222, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TX_TO, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.sushi.ez_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_TO", "file_key_name": "models.sushi__ez_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_PLATFORM__STRING__VARCHAR.55fbd4c7c1": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_42dcd4cff101a1305320df8731943ff4\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["STRING", "VARCHAR"], "column_name": "PLATFORM", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_42dcd4cff101a1305320df8731943ff4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["ethereum_models", "Sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_PLATFORM__STRING__VARCHAR"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_PLATFORM__STRING__VARCHAR.55fbd4c7c1", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_42dcd4cff101a1305320df8731943ff4.sql", "original_file_path": "models/Sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_PLATFORM__STRING__VARCHAR", "alias": "ez_swaps_PLATFORM", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/Sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_42dcd4cff101a1305320df8731943ff4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_42dcd4cff101a1305320df8731943ff4"}, "created_at": 1654351204.7698529, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PLATFORM'\n            and\n            relation_column_type not in ('STRING', 'VARCHAR')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM", "file_key_name": "models.sushi__ez_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_EVENT_INDEX__NUMBER__FLOAT.311b76dea2": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5f25f73b18e8b3db560f292103412648\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "EVENT_INDEX", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5f25f73b18e8b3db560f292103412648", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi", "fqn": ["ethereum_models", "Sushi", "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_EVENT_INDEX__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_EVENT_INDEX__NUMBER__FLOAT.311b76dea2", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_5f25f73b18e8b3db560f292103412648.sql", "original_file_path": "models/Sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_EVENT_INDEX__NUMBER__FLOAT", "alias": "ez_swaps_EVENT_INDEX", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/Sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_5f25f73b18e8b3db560f292103412648.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_5f25f73b18e8b3db560f292103412648"}, "created_at": 1654351204.774879, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CONTRACT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('POOL_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SENDER' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_TO' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_INDEX' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_IN' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SYMBOL_OUT' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_IN_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('AMOUNT_OUT_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'EVENT_INDEX'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EVENT_INDEX", "file_key_name": "models.sushi__ez_swaps"}, "test.ethereum_models.not_null_sushi__ez_swaps__LOG_ID.3bc8eb295f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_LOG_ID", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_sushi", "fqn": ["ethereum_models", "Sushi", "not_null_sushi__ez_swaps__LOG_ID"], "unique_id": "test.ethereum_models.not_null_sushi__ez_swaps__LOG_ID.3bc8eb295f", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_sushi__ez_swaps__LOG_ID.sql", "original_file_path": "models/Sushi/sushi__ez_swaps.yml", "name": "not_null_sushi__ez_swaps__LOG_ID", "alias": "ez_swaps", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/Sushi/sushi__ez_swaps.yml/not_null_sushi__ez_swaps__LOG_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.780214, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.sushi.ez_swaps\nwhere _LOG_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_LOG_ID", "file_key_name": "models.sushi__ez_swaps"}, "test.ethereum_models.not_null_sushi__ez_swaps_ORIGIN_FUNCTION_SIGNATURE.681d6adb74": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FUNCTION_SIGNATURE", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_sushi", "fqn": ["ethereum_models", "Sushi", "not_null_sushi__ez_swaps_ORIGIN_FUNCTION_SIGNATURE"], "unique_id": "test.ethereum_models.not_null_sushi__ez_swaps_ORIGIN_FUNCTION_SIGNATURE.681d6adb74", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_sushi__ez_swaps_ORIGIN_FUNCTION_SIGNATURE.sql", "original_file_path": "models/Sushi/sushi__ez_swaps.yml", "name": "not_null_sushi__ez_swaps_ORIGIN_FUNCTION_SIGNATURE", "alias": "ez_swaps_ORIGIN_FUNCTION_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/Sushi/sushi__ez_swaps.yml/not_null_sushi__ez_swaps_ORIGIN_FUNCTION_SIGNATURE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.781993, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.sushi.ez_swaps\nwhere ORIGIN_FUNCTION_SIGNATURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FUNCTION_SIGNATURE", "file_key_name": "models.sushi__ez_swaps"}, "test.ethereum_models.not_null_sushi__ez_swaps_ORIGIN_FROM_ADDRESS.128c7fd237": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_sushi", "fqn": ["ethereum_models", "Sushi", "not_null_sushi__ez_swaps_ORIGIN_FROM_ADDRESS"], "unique_id": "test.ethereum_models.not_null_sushi__ez_swaps_ORIGIN_FROM_ADDRESS.128c7fd237", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_sushi__ez_swaps_ORIGIN_FROM_ADDRESS.sql", "original_file_path": "models/Sushi/sushi__ez_swaps.yml", "name": "not_null_sushi__ez_swaps_ORIGIN_FROM_ADDRESS", "alias": "ez_swaps_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/Sushi/sushi__ez_swaps.yml/not_null_sushi__ez_swaps_ORIGIN_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.783494, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.sushi.ez_swaps\nwhere ORIGIN_FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.sushi__ez_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.d35c7fe495": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5b91569cc99fc548dbde14b89e4bdc4c\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5b91569cc99fc548dbde14b89e4bdc4c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["ethereum_models", "Sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.d35c7fe495", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_5b91569cc99fc548dbde14b89e4bdc4c.sql", "original_file_path": "models/Sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "ez_swaps_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/Sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_5b91569cc99fc548dbde14b89e4bdc4c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_5b91569cc99fc548dbde14b89e4bdc4c"}, "created_at": 1654351204.785834, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.sushi.ez_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.sushi__ez_swaps"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.dd5a907c68": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_d095642d0be5e3782b153a015c161725\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_d095642d0be5e3782b153a015c161725", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_sushi", "fqn": ["ethereum_models", "Sushi", "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.dd5a907c68", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_d095642d0be5e3782b153a015c161725.sql", "original_file_path": "models/Sushi/sushi__ez_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "ez_swaps_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/Sushi/sushi__ez_swaps.yml/dbt_expectations_expect_column_d095642d0be5e3782b153a015c161725.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_d095642d0be5e3782b153a015c161725"}, "created_at": 1654351204.7904608, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.sushi.ez_swaps\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.sushi__ez_swaps"}, "test.ethereum_models.dbt_utils_unique_combination_of_columns_sushi__ez_swaps__LOG_ID.cebe0de5a1": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_LOG_ID"], "model": "{{ get_where_subquery(ref('sushi__ez_swaps')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.sushi__ez_swaps"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_utils_unique_combination_of_columns_sushi", "fqn": ["ethereum_models", "Sushi", "dbt_utils_unique_combination_of_columns_sushi__ez_swaps__LOG_ID"], "unique_id": "test.ethereum_models.dbt_utils_unique_combination_of_columns_sushi__ez_swaps__LOG_ID.cebe0de5a1", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_utils_unique_combination_of_columns_sushi__ez_swaps__LOG_ID.sql", "original_file_path": "models/Sushi/sushi__ez_swaps.yml", "name": "dbt_utils_unique_combination_of_columns_sushi__ez_swaps__LOG_ID", "alias": "ez_swaps", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["sushi__ez_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/Sushi/sushi__ez_swaps.yml/dbt_utils_unique_combination_of_columns_sushi__ez_swaps__LOG_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351204.7959812, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _LOG_ID\n    from ETHEREUM_DEV.sushi.ez_swaps\n    group by _LOG_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.sushi__ez_swaps"}, "model.ethereum_models.silver_nft__x2y2_sales": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = '_log_id',\n    cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH x2y2_txs AS (\n\n    SELECT\n        tx_hash,\n        CONCAT('0x', SUBSTR(DATA, 1115, 40)) AS nft_address,\n        CONCAT('0x', SUBSTR(DATA, 27, 40)) AS to_address,\n        udf_hex_to_int(SUBSTR(DATA, 1186, 33)) AS tokenid,\n        ROW_NUMBER() over(\n            PARTITION BY tx_hash\n            ORDER BY\n                event_index ASC\n        ) AS agg_id,\n        CONCAT('0x', SUBSTR(DATA, 91, 40)) AS to_address_token\n    FROM\n        {{ ref('silver__logs') }}\n    WHERE\n        tx_status = 'SUCCESS'\n        AND contract_address = '0x74312363e45dcaba76c59ec49a7aa8a65a67eed3'\n        AND topics [0] = '0x3cbb63f144840e5b1b0a38a7c19211d2e89de4d7c5faf8b2d3c1776c302d1d33'\n\n{% if is_incremental() %}\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\nlast_nft_transfer AS (\n    SELECT\n        nft.tx_hash,\n        nft.contract_address,\n        nft.tokenid,\n        nft.to_address,\n        nft.project_name,\n        nft.from_address,\n        nft.event_index,\n        nft.token_metadata,\n        nft.erc1155_value,\n        nft.ingested_at,\n        nft._log_id\n    FROM\n        {{ ref('silver__nft_transfers') }}\n        nft\n        INNER JOIN x2y2_txs\n        ON x2y2_txs.tx_hash = nft.tx_hash\n        AND x2y2_txs.nft_address = nft.contract_address\n        AND x2y2_txs.tokenid = nft.tokenid qualify(ROW_NUMBER() over(PARTITION BY nft.tx_hash, nft.contract_address, nft.tokenid\n    ORDER BY\n        event_index DESC)) = 1\n),\nfirst_nft_transfer AS (\n    SELECT\n        nft.tx_hash,\n        nft.contract_address,\n        nft.tokenid,\n        nft.to_address,\n        nft.from_address AS nft_seller,\n        nft.event_index,\n        nft.token_metadata,\n        nft.erc1155_value,\n        nft.ingested_at,\n        nft._log_id\n    FROM\n        {{ ref('silver__nft_transfers') }}\n        nft\n        INNER JOIN x2y2_txs\n        ON x2y2_txs.tx_hash = nft.tx_hash\n        AND x2y2_txs.nft_address = nft.contract_address\n        AND x2y2_txs.tokenid = nft.tokenid qualify(ROW_NUMBER() over(PARTITION BY nft.tx_hash, nft.contract_address, nft.tokenid\n    ORDER BY\n        event_index ASC)) = 1\n),\nrelevant_transfers AS (\n    SELECT\n        A.tx_hash,\n        A.contract_address,\n        A.project_name,\n        A.tokenid,\n        A.to_address AS buyer_address,\n        b.nft_seller AS seller_address,\n        A.event_index,\n        A.token_metadata,\n        A.erc1155_value,\n        A.ingested_at,\n        A._log_id\n    FROM\n        last_nft_transfer A\n        JOIN first_nft_transfer b\n        ON A.tx_hash = b.tx_hash\n        AND A.contract_address = b.contract_address\n        AND A.tokenid = b.tokenid\n),\nnft_base AS (\n    SELECT\n        tx_hash,\n        contract_address,\n        project_name,\n        tokenid,\n        buyer_address,\n        seller_address,\n        event_index,\n        token_metadata,\n        erc1155_value,\n        ingested_at,\n        _log_id,\n        ROW_NUMBER() over(\n            PARTITION BY tx_hash\n            ORDER BY\n                event_index ASC\n        ) AS agg_id\n    FROM\n        relevant_transfers\n),\ntraces_base_data AS (\n    SELECT\n        tx_hash,\n        from_address,\n        to_address,\n        eth_value AS amount,\n        CASE\n            WHEN to_address = '0xd823c605807cc5e6bd6fc0d7e4eea50d3e2d66cd' THEN 'fee' --fee managment contract\n            ELSE 'other'\n        END AS payment_type,\n        SPLIT(\n            identifier,\n            '_'\n        ) AS split_id,\n        split_id [1] :: INTEGER AS level1,\n        split_id [2] :: INTEGER AS level2,\n        split_id [3] :: INTEGER AS level3,\n        split_id [4] :: INTEGER AS level4,\n        split_id [5] :: INTEGER AS level5,\n        split_id [6] :: INTEGER AS level6,\n        split_id [7] :: INTEGER AS level7,\n        split_id [8] :: INTEGER AS level8,\n        'ETH' AS currency_symbol,\n        'ETH' AS currency_address\n    FROM\n        {{ ref('silver__traces') }}\n    WHERE\n        eth_value > 0\n        AND TYPE = 'CALL'\n        AND tx_hash IN (\n            SELECT\n                DISTINCT tx_hash\n            FROM\n                x2y2_txs\n        )\n        AND from_address = '0x74312363e45dcaba76c59ec49a7aa8a65a67eed3' --exchange contract\n),\nid_sales_traces AS (\n    SELECT\n        A.*,\n        ROW_NUMBER() over(\n            PARTITION BY A.tx_hash\n            ORDER BY\n                level1 ASC,\n                level2 ASC,\n                level3 ASC,\n                level4 ASC,\n                level5 ASC,\n                level6 ASC,\n                level7 ASC,\n                level8 ASC\n        ) AS sale_id\n    FROM\n        traces_base_data A\n        INNER JOIN (\n            SELECT\n                DISTINCT tx_hash,\n                seller_address\n            FROM\n                nft_base\n        ) b\n        ON b.tx_hash = A.tx_hash\n        AND A.to_address = b.seller_address\n    WHERE\n        payment_type = 'other'\n),\ntraces_group_id AS (\n    SELECT\n        A.*,\n        b.sale_id,\n        CASE\n            WHEN A.level8 IS NOT NULL THEN CONCAT(\n                A.level7,\n                '-',\n                A.level6,\n                '-',\n                A.level5,\n                '-',\n                A.level4,\n                '-',\n                A.level3,\n                '-',\n                A.level2,\n                '-',\n                A.level1\n            ) :: STRING\n            WHEN A.level7 IS NOT NULL THEN CONCAT(\n                A.level6,\n                '-',\n                A.level5,\n                '-',\n                A.level4,\n                '-',\n                A.level3,\n                '-',\n                A.level2,\n                '-',\n                A.level1\n            ) :: STRING\n            WHEN A.level6 IS NOT NULL THEN CONCAT(\n                A.level5,\n                '-',\n                A.level4,\n                '-',\n                A.level3,\n                '-',\n                A.level2,\n                '-',\n                A.level1\n            ) :: STRING\n            WHEN A.level5 IS NOT NULL THEN CONCAT(\n                A.level4,\n                '-',\n                A.level3,\n                '-',\n                A.level2,\n                '-',\n                A.level1\n            ) :: STRING\n            WHEN A.level4 IS NOT NULL THEN CONCAT(\n                A.level3,\n                '-',\n                A.level2,\n                '-',\n                A.level1\n            ) :: STRING\n            WHEN A.level3 IS NOT NULL THEN CONCAT(\n                A.level2,\n                '-',\n                A.level1\n            ) :: STRING\n            WHEN A.level2 IS NOT NULL THEN A.level1 :: STRING\n        END AS group_id\n    FROM\n        traces_base_data AS A\n        LEFT JOIN id_sales_traces b\n        ON A.tx_hash = b.tx_hash\n        AND A.split_id = b.split_id\n),\ntraces_agg_id AS (\n    SELECT\n        *,\n        LAST_VALUE(sale_id) over(\n            PARTITION BY tx_hash,\n            group_id\n            ORDER BY\n                level1 ASC,\n                level2 ASC,\n                level3 ASC,\n                level4 ASC,\n                level5 ASC,\n                level6 ASC,\n                level7 ASC,\n                level8 ASC,\n                amount ASC\n        ) AS agg_id\n    FROM\n        traces_group_id\n),\ntraces_payment_data AS (\n    SELECT\n        A.tx_hash,\n        A.from_address,\n        A.to_address,\n        A.amount,\n        A.currency_symbol,\n        A.currency_address,\n        A.agg_id,\n        b.seller_address AS nft_seller,\n        CASE\n            WHEN payment_type = 'fee' THEN 'platform_fee'\n            WHEN payment_type = 'other'\n            AND nft_seller = A.to_address THEN 'to_seller'\n            WHEN payment_type = 'other'\n            AND nft_seller <> A.to_address THEN 'creator_fee'\n        END AS payment_type\n    FROM\n        traces_agg_id A\n        LEFT JOIN nft_base b\n        ON b.tx_hash = A.tx_hash\n        AND A.agg_id = b.agg_id\n),\ntoken_transfer_data_data AS (\n    SELECT\n        *,\n        CASE\n            WHEN to_address = '0xd823c605807cc5e6bd6fc0d7e4eea50d3e2d66cd' THEN 'fee'\n            ELSE 'other'\n        END AS payment_type,\n        SPLIT_PART(\n            _log_id,\n            '-',\n            2\n        ) AS event_index\n    FROM\n        {{ ref('core__ez_token_transfers') }}\n    WHERE\n        tx_hash IN (\n            SELECT\n                DISTINCT tx_hash\n            FROM\n                x2y2_txs\n        )\n        AND from_address = '0x74312363e45dcaba76c59ec49a7aa8a65a67eed3'\n),\ntoken_transfer_agg AS (\n    SELECT\n        tx_hash,\n        contract_address AS currency_address,\n        from_address,\n        to_address,\n        symbol AS currency_symbol,\n        amount,\n        payment_type,\n        event_index,\n        ROW_NUMBER() over(\n            PARTITION BY tx_hash\n            ORDER BY\n                event_index ASC\n        ) AS agg_id,\n        CEIL(\n            agg_id / 2\n        ) AS join_id,\n        CEIL(\n            agg_id / 3\n        ) AS join_id2\n    FROM\n        token_transfer_data_data\n),\ntoken_payment_type AS (\n    SELECT\n        tx_hash,\n        SUM(\n            CASE\n                WHEN payment_type = 'fee' THEN 1\n            END\n        ) AS fees_paid,\n        SUM(\n            CASE\n                WHEN payment_type = 'other' THEN 1\n            END\n        ) AS other_payments,\n        CASE\n            WHEN fees_paid = other_payments THEN 'join_id1'\n            WHEN (\n                fees_paid * 2\n            ) = other_payments THEN 'join_id2'\n            WHEN fees_paid IS NULL THEN 'agg_id'\n            WHEN other_payments * 2 = fees_paid THEN 'join_id2'\n        END AS join_type\n    FROM\n        token_transfer_agg\n    GROUP BY\n        tx_hash\n),\ntoken_join_type AS (\n    SELECT\n        A.*,\n        b.join_type,\n        CASE\n            WHEN join_type = 'join_id1' THEN join_id\n            WHEN join_type = 'join_id2' THEN join_id2\n            WHEN join_type = 'agg_id' THEN agg_id\n        END AS final_join_id\n    FROM\n        token_transfer_agg AS A\n        LEFT JOIN token_payment_type AS b\n        ON A.tx_hash = b.tx_hash\n),\ntoken_payment_data AS (\n    SELECT\n        A.tx_hash,\n        A.from_address,\n        A.to_address,\n        A.amount,\n        A.currency_symbol,\n        A.currency_address,\n        A.final_join_id,\n        b.to_address AS nft_seller,\n        b.to_address_token AS to_address_token,\n        CASE\n            WHEN A.currency_address = 'ETH' THEN nft_seller\n            ELSE to_address_token\n        END AS seller_address,\n        CASE\n            WHEN payment_type = 'fee' THEN 'platform_fee'\n            WHEN payment_type = 'other'\n            AND seller_address = A.to_address THEN 'to_seller'\n            WHEN payment_type = 'other'\n            AND seller_address <> A.to_address THEN 'creator_fee'\n        END AS payment_type\n    FROM\n        token_join_type A\n        LEFT JOIN x2y2_txs b\n        ON b.tx_hash = A.tx_hash\n        AND A.final_join_id = b.agg_id\n),\nall_paymemts AS (\n    SELECT\n        tx_hash,\n        from_address,\n        nft_seller,\n        amount,\n        currency_address,\n        currency_symbol,\n        payment_type,\n        final_join_id\n    FROM\n        token_payment_data\n    UNION ALL\n    SELECT\n        tx_hash,\n        from_address,\n        nft_seller,\n        amount,\n        currency_address,\n        currency_symbol,\n        payment_type,\n        agg_id AS final_join_id\n    FROM\n        traces_payment_data\n),\nsale_amount AS (\n    SELECT\n        tx_hash,\n        final_join_id,\n        currency_address,\n        currency_symbol,\n        SUM(amount) AS sale_amount\n    FROM\n        all_paymemts\n    GROUP BY\n        tx_hash,\n        final_join_id,\n        currency_address,\n        currency_symbol\n),\nplatform_fees AS (\n    SELECT\n        tx_hash,\n        final_join_id,\n        currency_address,\n        currency_symbol,\n        SUM(amount) AS platform_fee\n    FROM\n        all_paymemts\n    WHERE\n        payment_type = 'platform_fee'\n    GROUP BY\n        tx_hash,\n        final_join_id,\n        currency_address,\n        currency_symbol\n),\ncreator_fees AS (\n    SELECT\n        tx_hash,\n        final_join_id,\n        currency_address,\n        currency_symbol,\n        SUM(amount) AS creator_fee\n    FROM\n        all_paymemts\n    WHERE\n        payment_type = 'creator_fee'\n    GROUP BY\n        tx_hash,\n        final_join_id,\n        currency_address,\n        currency_symbol\n),\ntransaction_data AS (\n    SELECT\n        tx_hash,\n        block_timestamp,\n        block_number,\n        to_address AS origin_to_address,\n        from_address AS origin_from_address,\n        tx_fee,\n        origin_function_signature\n    FROM\n        {{ ref('silver__transactions') }}\n    WHERE\n        tx_hash IN (\n            SELECT\n                tx_hash\n            FROM\n                x2y2_txs\n        )\n\n{% if is_incremental() %}\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\ntoken_prices AS (\n    SELECT\n        HOUR,\n        CASE\n            WHEN LOWER(token_address) IS NULL THEN 'ETH'\n            ELSE LOWER(token_address)\n        END AS token_address,\n        AVG(price) AS token_price\n    FROM\n        {{ ref('core__fact_hourly_token_prices') }}\n    WHERE\n        (\n            token_address IN (\n                SELECT\n                    DISTINCT LOWER(currency_address)\n                FROM\n                    all_paymemts\n            )\n            OR (\n                token_address IS NULL\n                AND symbol IS NULL\n            )\n        )\n        AND HOUR :: DATE IN (\n            SELECT\n                DISTINCT block_timestamp :: DATE\n            FROM\n                transaction_data\n        )\n    GROUP BY\n        HOUR,\n        token_address\n),\neth_prices AS (\n    SELECT\n        HOUR,\n        token_address,\n        token_price AS eth_price\n    FROM\n        token_prices\n    WHERE\n        token_address = 'ETH'\n),\nfinal_nft_data AS (\n    SELECT\n        A.tx_hash AS tx_hash,\n        t.block_number AS block_number,\n        t.block_timestamp AS block_timestamp,\n        A._log_id AS _log_id,\n        A.ingested_at AS ingested_at,\n        A.contract_address AS nft_address,\n        'sale' AS event_type,\n        '0x74312363e45dcaba76c59ec49a7aa8a65a67eed3' AS platform_address,\n        'x2y2' AS platform_name,\n        A.project_name AS project_name,\n        A.seller_address AS seller_address,\n        A.buyer_address AS buyer_address,\n        A.tokenid AS tokenId,\n        A.erc1155_value AS erc1155_value,\n        A.token_metadata AS token_metadata,\n        b.currency_address AS currency_address,\n        b.currency_symbol AS currency_symbol,\n        b.sale_amount AS price,\n        COALESCE(\n            d.platform_fee,\n            0\n        ) AS platform_fee,\n        COALESCE(\n            C.creator_fee,\n            0\n        ) AS creator_fee,\n        COALESCE(\n            d.platform_fee,\n            0\n        ) + COALESCE(\n            C.creator_fee,\n            0\n        ) AS total_fees,\n        t.origin_to_address AS origin_to_address,\n        t.origin_from_address AS origin_from_address,\n        t.origin_function_signature AS origin_function_signature,\n        t.tx_fee AS tx_fee,\n        ROUND(\n            tx_fee * eth_price,\n            2\n        ) AS tx_fee_usd,\n        ROUND(\n            price * prices.token_price,\n            2\n        ) AS price_usd,\n        ROUND(\n            total_fees * prices.token_price,\n            2\n        ) AS total_fees_usd,\n        ROUND(\n            COALESCE(\n                d.platform_fee,\n                0\n            ) * prices.token_price,\n            2\n        ) AS platform_fee_usd,\n        ROUND(\n            COALESCE(\n                C.creator_fee,\n                0\n            ) * prices.token_price,\n            2\n        ) AS creator_fee_usd\n    FROM\n        nft_base A\n        LEFT JOIN sale_amount b\n        ON A.tx_hash = b.tx_hash\n        AND A.agg_id = b.final_join_id\n        LEFT JOIN creator_fees C\n        ON A.tx_hash = C.tx_hash\n        AND A.agg_id = C.final_join_id\n        LEFT JOIN platform_fees d\n        ON A.tx_hash = d.tx_hash\n        AND A.agg_id = d.final_join_id\n        LEFT JOIN transaction_data t\n        ON A.tx_hash = t.tx_hash\n        LEFT JOIN token_prices prices\n        ON prices.hour = DATE_TRUNC(\n            'HOUR',\n            t.block_timestamp\n        )\n        AND b.currency_address = prices.token_address\n        LEFT JOIN eth_prices\n        ON eth_prices.hour = DATE_TRUNC(\n            'HOUR',\n            t.block_timestamp\n        )\n)\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_to_address,\n    origin_from_address,\n    origin_function_signature,\n    event_type,\n    platform_address,\n    platform_name,\n    buyer_address,\n    seller_address,\n    nft_address,\n    project_name,\n    erc1155_value,\n    tokenId,\n    token_metadata,\n    currency_symbol,\n    currency_address,\n    price,\n    price_usd,\n    total_fees,\n    platform_fee,\n    creator_fee,\n    total_fees_usd,\n    platform_fee_usd,\n    creator_fee_usd,\n    tx_fee,\n    tx_fee_usd,\n    _log_id,\n    ingested_at\nFROM\n    final_nft_data qualify(ROW_NUMBER() over(PARTITION BY _log_id\nORDER BY\n    ingested_at DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_models.silver__logs", "model.ethereum_models.silver__nft_transfers", "model.ethereum_models.silver__nft_transfers", "model.ethereum_models.silver__traces", "model.ethereum_models.core__ez_token_transfers", "model.ethereum_models.silver__transactions", "model.ethereum_models.core__fact_hourly_token_prices"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "cluster_by": ["block_timestamp::DATE"], "unique_key": "_log_id", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "silver_nft", "fqn": ["ethereum_models", "silver", "nft", "silver_nft__x2y2_sales"], "unique_id": "model.ethereum_models.silver_nft__x2y2_sales", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "silver/nft/silver_nft__x2y2_sales.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.sql", "name": "silver_nft__x2y2_sales", "alias": "x2y2_sales", "checksum": {"name": "sha256", "checksum": "c65ddd7f5ed069c85217b4851e099f83d12894f94fea93cc785c2255a27b11f0"}, "tags": [], "refs": [["silver__logs"], ["silver__nft_transfers"], ["silver__nft_transfers"], ["silver__traces"], ["core__ez_token_transfers"], ["silver__transactions"], ["core__fact_hourly_token_prices"]], "sources": [], "description": "", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM_ADDRESS": {"name": "PLATFORM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM_NAME": {"name": "PLATFORM_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SELLER_ADDRESS": {"name": "SELLER_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BUYER_ADDRESS": {"name": "BUYER_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_ADDRESS": {"name": "NFT_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKENID": {"name": "TOKENID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CURRENCY_ADDRESS": {"name": "CURRENCY_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRICE": {"name": "PRICE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRICE_USD": {"name": "PRICE_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_FEES": {"name": "TOTAL_FEES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM_FEE": {"name": "PLATFORM_FEE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR_FEE": {"name": "CREATOR_FEE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_FEES_USD": {"name": "TOTAL_FEES_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM_FEE_USD": {"name": "PLATFORM_FEE_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR_FEE_USD": {"name": "CREATOR_FEE_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_FEE": {"name": "TX_FEE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_FEE_USD": {"name": "TX_FEE_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_LOG_ID": {"name": "_LOG_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_TYPE": {"name": "EVENT_TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_models://models/silver/nft/silver_nft__x2y2_sales.yml", "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "_log_id", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1654351383.440532, "compiled_sql": "\n\nWITH x2y2_txs AS (\n\n    SELECT\n        tx_hash,\n        CONCAT('0x', SUBSTR(DATA, 1115, 40)) AS nft_address,\n        CONCAT('0x', SUBSTR(DATA, 27, 40)) AS to_address,\n        udf_hex_to_int(SUBSTR(DATA, 1186, 33)) AS tokenid,\n        ROW_NUMBER() over(\n            PARTITION BY tx_hash\n            ORDER BY\n                event_index ASC\n        ) AS agg_id,\n        CONCAT('0x', SUBSTR(DATA, 91, 40)) AS to_address_token\n    FROM\n        ETHEREUM_DEV.silver.logs\n    WHERE\n        tx_status = 'SUCCESS'\n        AND contract_address = '0x74312363e45dcaba76c59ec49a7aa8a65a67eed3'\n        AND topics [0] = '0x3cbb63f144840e5b1b0a38a7c19211d2e89de4d7c5faf8b2d3c1776c302d1d33'\n\n\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        ETHEREUM_DEV.silver_nft.x2y2_sales\n)\n\n),\nlast_nft_transfer AS (\n    SELECT\n        nft.tx_hash,\n        nft.contract_address,\n        nft.tokenid,\n        nft.to_address,\n        nft.project_name,\n        nft.from_address,\n        nft.event_index,\n        nft.token_metadata,\n        nft.erc1155_value,\n        nft.ingested_at,\n        nft._log_id\n    FROM\n        ETHEREUM_DEV.silver.nft_transfers\n        nft\n        INNER JOIN x2y2_txs\n        ON x2y2_txs.tx_hash = nft.tx_hash\n        AND x2y2_txs.nft_address = nft.contract_address\n        AND x2y2_txs.tokenid = nft.tokenid qualify(ROW_NUMBER() over(PARTITION BY nft.tx_hash, nft.contract_address, nft.tokenid\n    ORDER BY\n        event_index DESC)) = 1\n),\nfirst_nft_transfer AS (\n    SELECT\n        nft.tx_hash,\n        nft.contract_address,\n        nft.tokenid,\n        nft.to_address,\n        nft.from_address AS nft_seller,\n        nft.event_index,\n        nft.token_metadata,\n        nft.erc1155_value,\n        nft.ingested_at,\n        nft._log_id\n    FROM\n        ETHEREUM_DEV.silver.nft_transfers\n        nft\n        INNER JOIN x2y2_txs\n        ON x2y2_txs.tx_hash = nft.tx_hash\n        AND x2y2_txs.nft_address = nft.contract_address\n        AND x2y2_txs.tokenid = nft.tokenid qualify(ROW_NUMBER() over(PARTITION BY nft.tx_hash, nft.contract_address, nft.tokenid\n    ORDER BY\n        event_index ASC)) = 1\n),\nrelevant_transfers AS (\n    SELECT\n        A.tx_hash,\n        A.contract_address,\n        A.project_name,\n        A.tokenid,\n        A.to_address AS buyer_address,\n        b.nft_seller AS seller_address,\n        A.event_index,\n        A.token_metadata,\n        A.erc1155_value,\n        A.ingested_at,\n        A._log_id\n    FROM\n        last_nft_transfer A\n        JOIN first_nft_transfer b\n        ON A.tx_hash = b.tx_hash\n        AND A.contract_address = b.contract_address\n        AND A.tokenid = b.tokenid\n),\nnft_base AS (\n    SELECT\n        tx_hash,\n        contract_address,\n        project_name,\n        tokenid,\n        buyer_address,\n        seller_address,\n        event_index,\n        token_metadata,\n        erc1155_value,\n        ingested_at,\n        _log_id,\n        ROW_NUMBER() over(\n            PARTITION BY tx_hash\n            ORDER BY\n                event_index ASC\n        ) AS agg_id\n    FROM\n        relevant_transfers\n),\ntraces_base_data AS (\n    SELECT\n        tx_hash,\n        from_address,\n        to_address,\n        eth_value AS amount,\n        CASE\n            WHEN to_address = '0xd823c605807cc5e6bd6fc0d7e4eea50d3e2d66cd' THEN 'fee' --fee managment contract\n            ELSE 'other'\n        END AS payment_type,\n        SPLIT(\n            identifier,\n            '_'\n        ) AS split_id,\n        split_id [1] :: INTEGER AS level1,\n        split_id [2] :: INTEGER AS level2,\n        split_id [3] :: INTEGER AS level3,\n        split_id [4] :: INTEGER AS level4,\n        split_id [5] :: INTEGER AS level5,\n        split_id [6] :: INTEGER AS level6,\n        split_id [7] :: INTEGER AS level7,\n        split_id [8] :: INTEGER AS level8,\n        'ETH' AS currency_symbol,\n        'ETH' AS currency_address\n    FROM\n        ETHEREUM_DEV.silver.traces\n    WHERE\n        eth_value > 0\n        AND TYPE = 'CALL'\n        AND tx_hash IN (\n            SELECT\n                DISTINCT tx_hash\n            FROM\n                x2y2_txs\n        )\n        AND from_address = '0x74312363e45dcaba76c59ec49a7aa8a65a67eed3' --exchange contract\n),\nid_sales_traces AS (\n    SELECT\n        A.*,\n        ROW_NUMBER() over(\n            PARTITION BY A.tx_hash\n            ORDER BY\n                level1 ASC,\n                level2 ASC,\n                level3 ASC,\n                level4 ASC,\n                level5 ASC,\n                level6 ASC,\n                level7 ASC,\n                level8 ASC\n        ) AS sale_id\n    FROM\n        traces_base_data A\n        INNER JOIN (\n            SELECT\n                DISTINCT tx_hash,\n                seller_address\n            FROM\n                nft_base\n        ) b\n        ON b.tx_hash = A.tx_hash\n        AND A.to_address = b.seller_address\n    WHERE\n        payment_type = 'other'\n),\ntraces_group_id AS (\n    SELECT\n        A.*,\n        b.sale_id,\n        CASE\n            WHEN A.level8 IS NOT NULL THEN CONCAT(\n                A.level7,\n                '-',\n                A.level6,\n                '-',\n                A.level5,\n                '-',\n                A.level4,\n                '-',\n                A.level3,\n                '-',\n                A.level2,\n                '-',\n                A.level1\n            ) :: STRING\n            WHEN A.level7 IS NOT NULL THEN CONCAT(\n                A.level6,\n                '-',\n                A.level5,\n                '-',\n                A.level4,\n                '-',\n                A.level3,\n                '-',\n                A.level2,\n                '-',\n                A.level1\n            ) :: STRING\n            WHEN A.level6 IS NOT NULL THEN CONCAT(\n                A.level5,\n                '-',\n                A.level4,\n                '-',\n                A.level3,\n                '-',\n                A.level2,\n                '-',\n                A.level1\n            ) :: STRING\n            WHEN A.level5 IS NOT NULL THEN CONCAT(\n                A.level4,\n                '-',\n                A.level3,\n                '-',\n                A.level2,\n                '-',\n                A.level1\n            ) :: STRING\n            WHEN A.level4 IS NOT NULL THEN CONCAT(\n                A.level3,\n                '-',\n                A.level2,\n                '-',\n                A.level1\n            ) :: STRING\n            WHEN A.level3 IS NOT NULL THEN CONCAT(\n                A.level2,\n                '-',\n                A.level1\n            ) :: STRING\n            WHEN A.level2 IS NOT NULL THEN A.level1 :: STRING\n        END AS group_id\n    FROM\n        traces_base_data AS A\n        LEFT JOIN id_sales_traces b\n        ON A.tx_hash = b.tx_hash\n        AND A.split_id = b.split_id\n),\ntraces_agg_id AS (\n    SELECT\n        *,\n        LAST_VALUE(sale_id) over(\n            PARTITION BY tx_hash,\n            group_id\n            ORDER BY\n                level1 ASC,\n                level2 ASC,\n                level3 ASC,\n                level4 ASC,\n                level5 ASC,\n                level6 ASC,\n                level7 ASC,\n                level8 ASC,\n                amount ASC\n        ) AS agg_id\n    FROM\n        traces_group_id\n),\ntraces_payment_data AS (\n    SELECT\n        A.tx_hash,\n        A.from_address,\n        A.to_address,\n        A.amount,\n        A.currency_symbol,\n        A.currency_address,\n        A.agg_id,\n        b.seller_address AS nft_seller,\n        CASE\n            WHEN payment_type = 'fee' THEN 'platform_fee'\n            WHEN payment_type = 'other'\n            AND nft_seller = A.to_address THEN 'to_seller'\n            WHEN payment_type = 'other'\n            AND nft_seller <> A.to_address THEN 'creator_fee'\n        END AS payment_type\n    FROM\n        traces_agg_id A\n        LEFT JOIN nft_base b\n        ON b.tx_hash = A.tx_hash\n        AND A.agg_id = b.agg_id\n),\ntoken_transfer_data_data AS (\n    SELECT\n        *,\n        CASE\n            WHEN to_address = '0xd823c605807cc5e6bd6fc0d7e4eea50d3e2d66cd' THEN 'fee'\n            ELSE 'other'\n        END AS payment_type,\n        SPLIT_PART(\n            _log_id,\n            '-',\n            2\n        ) AS event_index\n    FROM\n        ETHEREUM_DEV.core.ez_token_transfers\n    WHERE\n        tx_hash IN (\n            SELECT\n                DISTINCT tx_hash\n            FROM\n                x2y2_txs\n        )\n        AND from_address = '0x74312363e45dcaba76c59ec49a7aa8a65a67eed3'\n),\ntoken_transfer_agg AS (\n    SELECT\n        tx_hash,\n        contract_address AS currency_address,\n        from_address,\n        to_address,\n        symbol AS currency_symbol,\n        amount,\n        payment_type,\n        event_index,\n        ROW_NUMBER() over(\n            PARTITION BY tx_hash\n            ORDER BY\n                event_index ASC\n        ) AS agg_id,\n        CEIL(\n            agg_id / 2\n        ) AS join_id,\n        CEIL(\n            agg_id / 3\n        ) AS join_id2\n    FROM\n        token_transfer_data_data\n),\ntoken_payment_type AS (\n    SELECT\n        tx_hash,\n        SUM(\n            CASE\n                WHEN payment_type = 'fee' THEN 1\n            END\n        ) AS fees_paid,\n        SUM(\n            CASE\n                WHEN payment_type = 'other' THEN 1\n            END\n        ) AS other_payments,\n        CASE\n            WHEN fees_paid = other_payments THEN 'join_id1'\n            WHEN (\n                fees_paid * 2\n            ) = other_payments THEN 'join_id2'\n            WHEN fees_paid IS NULL THEN 'agg_id'\n            WHEN other_payments * 2 = fees_paid THEN 'join_id2'\n        END AS join_type\n    FROM\n        token_transfer_agg\n    GROUP BY\n        tx_hash\n),\ntoken_join_type AS (\n    SELECT\n        A.*,\n        b.join_type,\n        CASE\n            WHEN join_type = 'join_id1' THEN join_id\n            WHEN join_type = 'join_id2' THEN join_id2\n            WHEN join_type = 'agg_id' THEN agg_id\n        END AS final_join_id\n    FROM\n        token_transfer_agg AS A\n        LEFT JOIN token_payment_type AS b\n        ON A.tx_hash = b.tx_hash\n),\ntoken_payment_data AS (\n    SELECT\n        A.tx_hash,\n        A.from_address,\n        A.to_address,\n        A.amount,\n        A.currency_symbol,\n        A.currency_address,\n        A.final_join_id,\n        b.to_address AS nft_seller,\n        b.to_address_token AS to_address_token,\n        CASE\n            WHEN A.currency_address = 'ETH' THEN nft_seller\n            ELSE to_address_token\n        END AS seller_address,\n        CASE\n            WHEN payment_type = 'fee' THEN 'platform_fee'\n            WHEN payment_type = 'other'\n            AND seller_address = A.to_address THEN 'to_seller'\n            WHEN payment_type = 'other'\n            AND seller_address <> A.to_address THEN 'creator_fee'\n        END AS payment_type\n    FROM\n        token_join_type A\n        LEFT JOIN x2y2_txs b\n        ON b.tx_hash = A.tx_hash\n        AND A.final_join_id = b.agg_id\n),\nall_paymemts AS (\n    SELECT\n        tx_hash,\n        from_address,\n        nft_seller,\n        amount,\n        currency_address,\n        currency_symbol,\n        payment_type,\n        final_join_id\n    FROM\n        token_payment_data\n    UNION ALL\n    SELECT\n        tx_hash,\n        from_address,\n        nft_seller,\n        amount,\n        currency_address,\n        currency_symbol,\n        payment_type,\n        agg_id AS final_join_id\n    FROM\n        traces_payment_data\n),\nsale_amount AS (\n    SELECT\n        tx_hash,\n        final_join_id,\n        currency_address,\n        currency_symbol,\n        SUM(amount) AS sale_amount\n    FROM\n        all_paymemts\n    GROUP BY\n        tx_hash,\n        final_join_id,\n        currency_address,\n        currency_symbol\n),\nplatform_fees AS (\n    SELECT\n        tx_hash,\n        final_join_id,\n        currency_address,\n        currency_symbol,\n        SUM(amount) AS platform_fee\n    FROM\n        all_paymemts\n    WHERE\n        payment_type = 'platform_fee'\n    GROUP BY\n        tx_hash,\n        final_join_id,\n        currency_address,\n        currency_symbol\n),\ncreator_fees AS (\n    SELECT\n        tx_hash,\n        final_join_id,\n        currency_address,\n        currency_symbol,\n        SUM(amount) AS creator_fee\n    FROM\n        all_paymemts\n    WHERE\n        payment_type = 'creator_fee'\n    GROUP BY\n        tx_hash,\n        final_join_id,\n        currency_address,\n        currency_symbol\n),\ntransaction_data AS (\n    SELECT\n        tx_hash,\n        block_timestamp,\n        block_number,\n        to_address AS origin_to_address,\n        from_address AS origin_from_address,\n        tx_fee,\n        origin_function_signature\n    FROM\n        ETHEREUM_DEV.silver.transactions\n    WHERE\n        tx_hash IN (\n            SELECT\n                tx_hash\n            FROM\n                x2y2_txs\n        )\n\n\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        ETHEREUM_DEV.silver_nft.x2y2_sales\n)\n\n),\ntoken_prices AS (\n    SELECT\n        HOUR,\n        CASE\n            WHEN LOWER(token_address) IS NULL THEN 'ETH'\n            ELSE LOWER(token_address)\n        END AS token_address,\n        AVG(price) AS token_price\n    FROM\n        ETHEREUM_DEV.core.fact_hourly_token_prices\n    WHERE\n        (\n            token_address IN (\n                SELECT\n                    DISTINCT LOWER(currency_address)\n                FROM\n                    all_paymemts\n            )\n            OR (\n                token_address IS NULL\n                AND symbol IS NULL\n            )\n        )\n        AND HOUR :: DATE IN (\n            SELECT\n                DISTINCT block_timestamp :: DATE\n            FROM\n                transaction_data\n        )\n    GROUP BY\n        HOUR,\n        token_address\n),\neth_prices AS (\n    SELECT\n        HOUR,\n        token_address,\n        token_price AS eth_price\n    FROM\n        token_prices\n    WHERE\n        token_address = 'ETH'\n),\nfinal_nft_data AS (\n    SELECT\n        A.tx_hash AS tx_hash,\n        t.block_number AS block_number,\n        t.block_timestamp AS block_timestamp,\n        A._log_id AS _log_id,\n        A.ingested_at AS ingested_at,\n        A.contract_address AS nft_address,\n        'sale' AS event_type,\n        '0x74312363e45dcaba76c59ec49a7aa8a65a67eed3' AS platform_address,\n        'x2y2' AS platform_name,\n        A.project_name AS project_name,\n        A.seller_address AS seller_address,\n        A.buyer_address AS buyer_address,\n        A.tokenid AS tokenId,\n        A.erc1155_value AS erc1155_value,\n        A.token_metadata AS token_metadata,\n        b.currency_address AS currency_address,\n        b.currency_symbol AS currency_symbol,\n        b.sale_amount AS price,\n        COALESCE(\n            d.platform_fee,\n            0\n        ) AS platform_fee,\n        COALESCE(\n            C.creator_fee,\n            0\n        ) AS creator_fee,\n        COALESCE(\n            d.platform_fee,\n            0\n        ) + COALESCE(\n            C.creator_fee,\n            0\n        ) AS total_fees,\n        t.origin_to_address AS origin_to_address,\n        t.origin_from_address AS origin_from_address,\n        t.origin_function_signature AS origin_function_signature,\n        t.tx_fee AS tx_fee,\n        ROUND(\n            tx_fee * eth_price,\n            2\n        ) AS tx_fee_usd,\n        ROUND(\n            price * prices.token_price,\n            2\n        ) AS price_usd,\n        ROUND(\n            total_fees * prices.token_price,\n            2\n        ) AS total_fees_usd,\n        ROUND(\n            COALESCE(\n                d.platform_fee,\n                0\n            ) * prices.token_price,\n            2\n        ) AS platform_fee_usd,\n        ROUND(\n            COALESCE(\n                C.creator_fee,\n                0\n            ) * prices.token_price,\n            2\n        ) AS creator_fee_usd\n    FROM\n        nft_base A\n        LEFT JOIN sale_amount b\n        ON A.tx_hash = b.tx_hash\n        AND A.agg_id = b.final_join_id\n        LEFT JOIN creator_fees C\n        ON A.tx_hash = C.tx_hash\n        AND A.agg_id = C.final_join_id\n        LEFT JOIN platform_fees d\n        ON A.tx_hash = d.tx_hash\n        AND A.agg_id = d.final_join_id\n        LEFT JOIN transaction_data t\n        ON A.tx_hash = t.tx_hash\n        LEFT JOIN token_prices prices\n        ON prices.hour = DATE_TRUNC(\n            'HOUR',\n            t.block_timestamp\n        )\n        AND b.currency_address = prices.token_address\n        LEFT JOIN eth_prices\n        ON eth_prices.hour = DATE_TRUNC(\n            'HOUR',\n            t.block_timestamp\n        )\n)\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_to_address,\n    origin_from_address,\n    origin_function_signature,\n    event_type,\n    platform_address,\n    platform_name,\n    buyer_address,\n    seller_address,\n    nft_address,\n    project_name,\n    erc1155_value,\n    tokenId,\n    token_metadata,\n    currency_symbol,\n    currency_address,\n    price,\n    price_usd,\n    total_fees,\n    platform_fee,\n    creator_fee,\n    total_fees_usd,\n    platform_fee_usd,\n    creator_fee_usd,\n    tx_fee,\n    tx_fee_usd,\n    _log_id,\n    ingested_at\nFROM\n    final_nft_data qualify(ROW_NUMBER() over(PARTITION BY _log_id\nORDER BY\n    ingested_at DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.silver_nft.x2y2_sales"}, "test.ethereum_models.not_null_silver_nft__x2y2_sales_BLOCK_NUMBER.4f007c8c44": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__x2y2_sales_BLOCK_NUMBER"], "unique_id": "test.ethereum_models.not_null_silver_nft__x2y2_sales_BLOCK_NUMBER.4f007c8c44", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__x2y2_sales_BLOCK_NUMBER.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "not_null_silver_nft__x2y2_sales_BLOCK_NUMBER", "alias": "x2y2_sales_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/not_null_silver_nft__x2y2_sales_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351383.450142, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.x2y2_sales\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_BLOCK_NUMBER__NUMBER__FLOAT.2cc39910e2": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2f27fe5b37c6bf12e9978537d905550e\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2f27fe5b37c6bf12e9978537d905550e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_BLOCK_NUMBER__NUMBER__FLOAT.2cc39910e2", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_2f27fe5b37c6bf12e9978537d905550e.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "x2y2_sales_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/dbt_expectations_expect_column_2f27fe5b37c6bf12e9978537d905550e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_2f27fe5b37c6bf12e9978537d905550e"}, "created_at": 1654351383.452081, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.not_null_silver_nft__x2y2_sales_BLOCK_TIMESTAMP.14d5ad71f9": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__x2y2_sales_BLOCK_TIMESTAMP"], "unique_id": "test.ethereum_models.not_null_silver_nft__x2y2_sales_BLOCK_TIMESTAMP.14d5ad71f9", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__x2y2_sales_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "not_null_silver_nft__x2y2_sales_BLOCK_TIMESTAMP", "alias": "x2y2_sales_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/not_null_silver_nft__x2y2_sales_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351383.4666328, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.x2y2_sales\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__x2y2_sales_BLOCK_TIMESTAMP__day__1.c8150df2c0": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_191296b83fb259ee2924fdb043b52203\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_191296b83fb259ee2924fdb043b52203", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__x2y2_sales_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__x2y2_sales_BLOCK_TIMESTAMP__day__1.c8150df2c0", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_row_va_191296b83fb259ee2924fdb043b52203.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__x2y2_sales_BLOCK_TIMESTAMP__day__1", "alias": "x2y2_sales_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/dbt_expectations_expect_row_va_191296b83fb259ee2924fdb043b52203.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_191296b83fb259ee2924fdb043b52203"}, "created_at": 1654351383.468524, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        ETHEREUM_DEV.silver_nft.x2y2_sales\n    where\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bdc6444f67": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0153d7829293a334f6eabd9ed48e7b52\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0153d7829293a334f6eabd9ed48e7b52", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bdc6444f67", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_0153d7829293a334f6eabd9ed48e7b52.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "x2y2_sales_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/dbt_expectations_expect_column_0153d7829293a334f6eabd9ed48e7b52.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_0153d7829293a334f6eabd9ed48e7b52"}, "created_at": 1654351383.4937322, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.not_null_silver_nft__x2y2_sales_TX_HASH.d621a10c0f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__x2y2_sales_TX_HASH"], "unique_id": "test.ethereum_models.not_null_silver_nft__x2y2_sales_TX_HASH.d621a10c0f", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__x2y2_sales_TX_HASH.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "not_null_silver_nft__x2y2_sales_TX_HASH", "alias": "x2y2_sales_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/not_null_silver_nft__x2y2_sales_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351383.499615, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.x2y2_sales\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_TX_HASH__0_xX_0_9a_fA_F_.2b5b006991": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6ae02da4a690166a7c6a48a09edb7a0f\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6ae02da4a690166a7c6a48a09edb7a0f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_TX_HASH__0_xX_0_9a_fA_F_.2b5b006991", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_6ae02da4a690166a7c6a48a09edb7a0f.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_TX_HASH__0_xX_0_9a_fA_F_", "alias": "x2y2_sales_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/dbt_expectations_expect_column_6ae02da4a690166a7c6a48a09edb7a0f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_6ae02da4a690166a7c6a48a09edb7a0f"}, "created_at": 1654351383.5019221, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.x2y2_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.not_null_silver_nft__x2y2_sales_PLATFORM_ADDRESS.daded37cb8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PLATFORM_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__x2y2_sales_PLATFORM_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver_nft__x2y2_sales_PLATFORM_ADDRESS.daded37cb8", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__x2y2_sales_PLATFORM_ADDRESS.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "not_null_silver_nft__x2y2_sales_PLATFORM_ADDRESS", "alias": "x2y2_sales_PLATFORM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/not_null_silver_nft__x2y2_sales_PLATFORM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351383.520946, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.x2y2_sales\nwhere PLATFORM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM_ADDRESS", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_.ccafb39a75": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_aa2cc5dc51f409b6d0697987955fcf4d\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "PLATFORM_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_aa2cc5dc51f409b6d0697987955fcf4d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_.ccafb39a75", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_aa2cc5dc51f409b6d0697987955fcf4d.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "x2y2_sales_PLATFORM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/dbt_expectations_expect_column_aa2cc5dc51f409b6d0697987955fcf4d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_aa2cc5dc51f409b6d0697987955fcf4d"}, "created_at": 1654351383.523356, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(PLATFORM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.x2y2_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM_ADDRESS", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.not_null_silver_nft__x2y2_sales_PLATFORM_NAME.810306ba1c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PLATFORM_NAME", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__x2y2_sales_PLATFORM_NAME"], "unique_id": "test.ethereum_models.not_null_silver_nft__x2y2_sales_PLATFORM_NAME.810306ba1c", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__x2y2_sales_PLATFORM_NAME.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "not_null_silver_nft__x2y2_sales_PLATFORM_NAME", "alias": "x2y2_sales_PLATFORM_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/not_null_silver_nft__x2y2_sales_PLATFORM_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351383.528863, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.x2y2_sales\nwhere PLATFORM_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM_NAME", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__x2y2_sales_PLATFORM_NAME__x2y2.cfc6a32585": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_45f814572d58f7b48a035ed6f5e48ae5\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["x2y2"], "column_name": "PLATFORM_NAME", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_45f814572d58f7b48a035ed6f5e48ae5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_set_silver_nft__x2y2_sales_PLATFORM_NAME__x2y2"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__x2y2_sales_PLATFORM_NAME__x2y2.cfc6a32585", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_45f814572d58f7b48a035ed6f5e48ae5.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_silver_nft__x2y2_sales_PLATFORM_NAME__x2y2", "alias": "x2y2_sales_PLATFORM_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/dbt_expectations_expect_column_45f814572d58f7b48a035ed6f5e48ae5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_45f814572d58f7b48a035ed6f5e48ae5"}, "created_at": 1654351383.5314429, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        PLATFORM_NAME as value_field\n\n    from ETHEREUM_DEV.silver_nft.x2y2_sales\n    \n\n),\nset_values as (\n\n    select\n        cast('x2y2' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM_NAME", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.not_null_silver_nft__x2y2_sales_SELLER_ADDRESS.cb600d47fc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SELLER_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__x2y2_sales_SELLER_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver_nft__x2y2_sales_SELLER_ADDRESS.cb600d47fc", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__x2y2_sales_SELLER_ADDRESS.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "not_null_silver_nft__x2y2_sales_SELLER_ADDRESS", "alias": "x2y2_sales_SELLER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/not_null_silver_nft__x2y2_sales_SELLER_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351383.54145, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.x2y2_sales\nwhere SELLER_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SELLER_ADDRESS", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_SELLER_ADDRESS__0_xX_0_9a_fA_F_.9df0803116": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6e0409cddb65d5904cf9252a971e64b7\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "SELLER_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6e0409cddb65d5904cf9252a971e64b7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_SELLER_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_SELLER_ADDRESS__0_xX_0_9a_fA_F_.9df0803116", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_6e0409cddb65d5904cf9252a971e64b7.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_SELLER_ADDRESS__0_xX_0_9a_fA_F_", "alias": "x2y2_sales_SELLER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/dbt_expectations_expect_column_6e0409cddb65d5904cf9252a971e64b7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_6e0409cddb65d5904cf9252a971e64b7"}, "created_at": 1654351383.5429912, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(SELLER_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.x2y2_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SELLER_ADDRESS", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.not_null_silver_nft__x2y2_sales_BUYER_ADDRESS.2591f8ab2f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BUYER_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__x2y2_sales_BUYER_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver_nft__x2y2_sales_BUYER_ADDRESS.2591f8ab2f", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__x2y2_sales_BUYER_ADDRESS.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "not_null_silver_nft__x2y2_sales_BUYER_ADDRESS", "alias": "x2y2_sales_BUYER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/not_null_silver_nft__x2y2_sales_BUYER_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351383.549393, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.x2y2_sales\nwhere BUYER_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BUYER_ADDRESS", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_BUYER_ADDRESS__0_xX_0_9a_fA_F_.d9fa031635": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5ad008df306244ea9ff9761299faa137\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "BUYER_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5ad008df306244ea9ff9761299faa137", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_BUYER_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_BUYER_ADDRESS__0_xX_0_9a_fA_F_.d9fa031635", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_5ad008df306244ea9ff9761299faa137.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_BUYER_ADDRESS__0_xX_0_9a_fA_F_", "alias": "x2y2_sales_BUYER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/dbt_expectations_expect_column_5ad008df306244ea9ff9761299faa137.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_5ad008df306244ea9ff9761299faa137"}, "created_at": 1654351383.551268, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(BUYER_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.x2y2_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BUYER_ADDRESS", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.not_null_silver_nft__x2y2_sales_NFT_ADDRESS.20f944d1ac": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NFT_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__x2y2_sales_NFT_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver_nft__x2y2_sales_NFT_ADDRESS.20f944d1ac", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__x2y2_sales_NFT_ADDRESS.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "not_null_silver_nft__x2y2_sales_NFT_ADDRESS", "alias": "x2y2_sales_NFT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/not_null_silver_nft__x2y2_sales_NFT_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351383.5575318, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.x2y2_sales\nwhere NFT_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NFT_ADDRESS", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_.9425f12c11": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_417f4309f480a284ea6392339a9c19ae\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "NFT_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_417f4309f480a284ea6392339a9c19ae", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_.9425f12c11", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_417f4309f480a284ea6392339a9c19ae.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_", "alias": "x2y2_sales_NFT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/dbt_expectations_expect_column_417f4309f480a284ea6392339a9c19ae.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_417f4309f480a284ea6392339a9c19ae"}, "created_at": 1654351383.559472, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(NFT_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.x2y2_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NFT_ADDRESS", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.not_null_silver_nft__x2y2_sales_TOKENID.5f96ea498c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKENID", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__x2y2_sales_TOKENID"], "unique_id": "test.ethereum_models.not_null_silver_nft__x2y2_sales_TOKENID.5f96ea498c", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__x2y2_sales_TOKENID.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "not_null_silver_nft__x2y2_sales_TOKENID", "alias": "x2y2_sales_TOKENID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/not_null_silver_nft__x2y2_sales_TOKENID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351383.565093, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.x2y2_sales\nwhere TOKENID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOKENID", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.not_null_silver_nft__x2y2_sales_CURRENCY_ADDRESS.a3da81cf6f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CURRENCY_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__x2y2_sales_CURRENCY_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver_nft__x2y2_sales_CURRENCY_ADDRESS.a3da81cf6f", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__x2y2_sales_CURRENCY_ADDRESS.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "not_null_silver_nft__x2y2_sales_CURRENCY_ADDRESS", "alias": "x2y2_sales_CURRENCY_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/not_null_silver_nft__x2y2_sales_CURRENCY_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351383.568668, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.x2y2_sales\nwhere CURRENCY_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CURRENCY_ADDRESS", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.not_null_silver_nft__x2y2_sales_PRICE.3af510cd06": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PRICE", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__x2y2_sales_PRICE"], "unique_id": "test.ethereum_models.not_null_silver_nft__x2y2_sales_PRICE.3af510cd06", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__x2y2_sales_PRICE.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "not_null_silver_nft__x2y2_sales_PRICE", "alias": "x2y2_sales_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/not_null_silver_nft__x2y2_sales_PRICE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351383.571852, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.x2y2_sales\nwhere PRICE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PRICE", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_PRICE__NUMBER__FLOAT.bfa6fec79d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ca7351d554dda3c47f4f5790bbc53e3b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "PRICE", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ca7351d554dda3c47f4f5790bbc53e3b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_PRICE__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_PRICE__NUMBER__FLOAT.bfa6fec79d", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_ca7351d554dda3c47f4f5790bbc53e3b.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_PRICE__NUMBER__FLOAT", "alias": "x2y2_sales_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/dbt_expectations_expect_column_ca7351d554dda3c47f4f5790bbc53e3b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_ca7351d554dda3c47f4f5790bbc53e3b"}, "created_at": 1654351383.5748742, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PRICE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PRICE", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_PRICE_USD__NUMBER__FLOAT.c971c47c2d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_1c776a4c88bd01d367f7c19789d5eeec\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "PRICE_USD", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_1c776a4c88bd01d367f7c19789d5eeec", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_PRICE_USD__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_PRICE_USD__NUMBER__FLOAT.c971c47c2d", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_1c776a4c88bd01d367f7c19789d5eeec.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_PRICE_USD__NUMBER__FLOAT", "alias": "x2y2_sales_PRICE_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/dbt_expectations_expect_column_1c776a4c88bd01d367f7c19789d5eeec.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_1c776a4c88bd01d367f7c19789d5eeec"}, "created_at": 1654351383.584259, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PRICE_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PRICE_USD", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.not_null_silver_nft__x2y2_sales_TOTAL_FEES.f91a4c9d1b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_FEES", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__x2y2_sales_TOTAL_FEES"], "unique_id": "test.ethereum_models.not_null_silver_nft__x2y2_sales_TOTAL_FEES.f91a4c9d1b", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__x2y2_sales_TOTAL_FEES.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "not_null_silver_nft__x2y2_sales_TOTAL_FEES", "alias": "x2y2_sales_TOTAL_FEES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/not_null_silver_nft__x2y2_sales_TOTAL_FEES.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351383.5909278, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.x2y2_sales\nwhere TOTAL_FEES is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOTAL_FEES", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_TOTAL_FEES__NUMBER__FLOAT.9407bd9f47": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8d99740813ff555455117809fbbeb0f9\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TOTAL_FEES", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8d99740813ff555455117809fbbeb0f9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_TOTAL_FEES__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_TOTAL_FEES__NUMBER__FLOAT.9407bd9f47", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_8d99740813ff555455117809fbbeb0f9.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_TOTAL_FEES__NUMBER__FLOAT", "alias": "x2y2_sales_TOTAL_FEES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/dbt_expectations_expect_column_8d99740813ff555455117809fbbeb0f9.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_8d99740813ff555455117809fbbeb0f9"}, "created_at": 1654351383.594848, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TOTAL_FEES'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOTAL_FEES", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.not_null_silver_nft__x2y2_sales_PLATFORM_FEE.2c7a3e610f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PLATFORM_FEE", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__x2y2_sales_PLATFORM_FEE"], "unique_id": "test.ethereum_models.not_null_silver_nft__x2y2_sales_PLATFORM_FEE.2c7a3e610f", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__x2y2_sales_PLATFORM_FEE.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "not_null_silver_nft__x2y2_sales_PLATFORM_FEE", "alias": "x2y2_sales_PLATFORM_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/not_null_silver_nft__x2y2_sales_PLATFORM_FEE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351383.600836, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.x2y2_sales\nwhere PLATFORM_FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM_FEE", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_PLATFORM_FEE__NUMBER__FLOAT.8eb2d43fb2": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_edaec3a308fd7694293fb50e5c6a78dc\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "PLATFORM_FEE", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_edaec3a308fd7694293fb50e5c6a78dc", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_PLATFORM_FEE__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_PLATFORM_FEE__NUMBER__FLOAT.8eb2d43fb2", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_edaec3a308fd7694293fb50e5c6a78dc.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_PLATFORM_FEE__NUMBER__FLOAT", "alias": "x2y2_sales_PLATFORM_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/dbt_expectations_expect_column_edaec3a308fd7694293fb50e5c6a78dc.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_edaec3a308fd7694293fb50e5c6a78dc"}, "created_at": 1654351383.6030679, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PLATFORM_FEE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM_FEE", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.not_null_silver_nft__x2y2_sales_CREATOR_FEE.26da310e90": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATOR_FEE", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__x2y2_sales_CREATOR_FEE"], "unique_id": "test.ethereum_models.not_null_silver_nft__x2y2_sales_CREATOR_FEE.26da310e90", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__x2y2_sales_CREATOR_FEE.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "not_null_silver_nft__x2y2_sales_CREATOR_FEE", "alias": "x2y2_sales_CREATOR_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/not_null_silver_nft__x2y2_sales_CREATOR_FEE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351383.609472, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.x2y2_sales\nwhere CREATOR_FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATOR_FEE", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_CREATOR_FEE__NUMBER__FLOAT.54e1aca021": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_dbe48be464e303e26e3a6c7cedd69480\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "CREATOR_FEE", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_dbe48be464e303e26e3a6c7cedd69480", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_CREATOR_FEE__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_CREATOR_FEE__NUMBER__FLOAT.54e1aca021", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_dbe48be464e303e26e3a6c7cedd69480.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_CREATOR_FEE__NUMBER__FLOAT", "alias": "x2y2_sales_CREATOR_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/dbt_expectations_expect_column_dbe48be464e303e26e3a6c7cedd69480.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_dbe48be464e303e26e3a6c7cedd69480"}, "created_at": 1654351383.6129699, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CREATOR_FEE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATOR_FEE", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_TOTAL_FEES_USD__NUMBER__FLOAT.eb14207648": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6a2973b7de1ed34cda4b010fbc11ca88\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TOTAL_FEES_USD", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6a2973b7de1ed34cda4b010fbc11ca88", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_TOTAL_FEES_USD__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_TOTAL_FEES_USD__NUMBER__FLOAT.eb14207648", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_6a2973b7de1ed34cda4b010fbc11ca88.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_TOTAL_FEES_USD__NUMBER__FLOAT", "alias": "x2y2_sales_TOTAL_FEES_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/dbt_expectations_expect_column_6a2973b7de1ed34cda4b010fbc11ca88.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_6a2973b7de1ed34cda4b010fbc11ca88"}, "created_at": 1654351383.6193368, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TOTAL_FEES_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOTAL_FEES_USD", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_PLATFORM_FEE_USD__NUMBER__FLOAT.9bf179fde9": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0ee4aa2ddeb8ef4ddee59cbef8e73595\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "PLATFORM_FEE_USD", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0ee4aa2ddeb8ef4ddee59cbef8e73595", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_PLATFORM_FEE_USD__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_PLATFORM_FEE_USD__NUMBER__FLOAT.9bf179fde9", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_0ee4aa2ddeb8ef4ddee59cbef8e73595.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_PLATFORM_FEE_USD__NUMBER__FLOAT", "alias": "x2y2_sales_PLATFORM_FEE_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/dbt_expectations_expect_column_0ee4aa2ddeb8ef4ddee59cbef8e73595.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_0ee4aa2ddeb8ef4ddee59cbef8e73595"}, "created_at": 1654351383.676366, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PLATFORM_FEE_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM_FEE_USD", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_CREATOR_FEE_USD__NUMBER__FLOAT.2ac3fcffcf": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_26986e8c90b17651bd529035ebd25970\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "CREATOR_FEE_USD", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_26986e8c90b17651bd529035ebd25970", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_CREATOR_FEE_USD__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_CREATOR_FEE_USD__NUMBER__FLOAT.2ac3fcffcf", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_26986e8c90b17651bd529035ebd25970.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_CREATOR_FEE_USD__NUMBER__FLOAT", "alias": "x2y2_sales_CREATOR_FEE_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/dbt_expectations_expect_column_26986e8c90b17651bd529035ebd25970.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_26986e8c90b17651bd529035ebd25970"}, "created_at": 1654351383.682794, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CREATOR_FEE_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATOR_FEE_USD", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.not_null_silver_nft__x2y2_sales_TX_FEE.9408e64b38": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_FEE", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__x2y2_sales_TX_FEE"], "unique_id": "test.ethereum_models.not_null_silver_nft__x2y2_sales_TX_FEE.9408e64b38", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__x2y2_sales_TX_FEE.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "not_null_silver_nft__x2y2_sales_TX_FEE", "alias": "x2y2_sales_TX_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/not_null_silver_nft__x2y2_sales_TX_FEE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351383.689301, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.x2y2_sales\nwhere TX_FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_FEE", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_TX_FEE__NUMBER__FLOAT.60877f1f13": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_dce9e77458800252c59dac8f40497a03\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TX_FEE", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_dce9e77458800252c59dac8f40497a03", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_TX_FEE__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_TX_FEE__NUMBER__FLOAT.60877f1f13", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_dce9e77458800252c59dac8f40497a03.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_TX_FEE__NUMBER__FLOAT", "alias": "x2y2_sales_TX_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/dbt_expectations_expect_column_dce9e77458800252c59dac8f40497a03.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_dce9e77458800252c59dac8f40497a03"}, "created_at": 1654351383.692089, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_FEE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_FEE", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.not_null_silver_nft__x2y2_sales_TX_FEE_USD.767e895763": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"block_timestamp >= '2020-05-05' AND BLOCK_TIMESTAMP < CURRENT_DATE - 2\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_FEE_USD", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "block_timestamp >= '2020-05-05' AND BLOCK_TIMESTAMP < CURRENT_DATE - 2", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__x2y2_sales_TX_FEE_USD"], "unique_id": "test.ethereum_models.not_null_silver_nft__x2y2_sales_TX_FEE_USD.767e895763", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__x2y2_sales_TX_FEE_USD.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "not_null_silver_nft__x2y2_sales_TX_FEE_USD", "alias": "x2y2_sales_TX_FEE_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/not_null_silver_nft__x2y2_sales_TX_FEE_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "block_timestamp >= '2020-05-05' AND BLOCK_TIMESTAMP < CURRENT_DATE - 2"}, "created_at": 1654351383.69982, "compiled_sql": "\n    \n    \n\nselect *\nfrom (select * from ETHEREUM_DEV.silver_nft.x2y2_sales where block_timestamp >= '2020-05-05' AND BLOCK_TIMESTAMP < CURRENT_DATE - 2) dbt_subquery\nwhere TX_FEE_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_FEE_USD", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_TX_FEE_USD__NUMBER__FLOAT.f08cf2a35b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f0f6c740479db2ed8610937cd28c99d6\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TX_FEE_USD", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f0f6c740479db2ed8610937cd28c99d6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_TX_FEE_USD__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_TX_FEE_USD__NUMBER__FLOAT.f08cf2a35b", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_f0f6c740479db2ed8610937cd28c99d6.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_TX_FEE_USD__NUMBER__FLOAT", "alias": "x2y2_sales_TX_FEE_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/dbt_expectations_expect_column_f0f6c740479db2ed8610937cd28c99d6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_f0f6c740479db2ed8610937cd28c99d6"}, "created_at": 1654351383.7025762, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_FEE_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_FEE_USD", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.not_null_silver_nft__x2y2_sales__LOG_ID.f0d0dc9fe6": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_LOG_ID", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__x2y2_sales__LOG_ID"], "unique_id": "test.ethereum_models.not_null_silver_nft__x2y2_sales__LOG_ID.f0d0dc9fe6", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__x2y2_sales__LOG_ID.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "not_null_silver_nft__x2y2_sales__LOG_ID", "alias": "x2y2_sales", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/not_null_silver_nft__x2y2_sales__LOG_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351383.712957, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.x2y2_sales\nwhere _LOG_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_LOG_ID", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.not_null_silver_nft__x2y2_sales_INGESTED_AT.46520403cc": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__x2y2_sales_INGESTED_AT"], "unique_id": "test.ethereum_models.not_null_silver_nft__x2y2_sales_INGESTED_AT.46520403cc", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__x2y2_sales_INGESTED_AT.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "not_null_silver_nft__x2y2_sales_INGESTED_AT", "alias": "x2y2_sales_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/not_null_silver_nft__x2y2_sales_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351383.71727, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.x2y2_sales\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__x2y2_sales_INGESTED_AT__day__1.92056ec4c5": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_f73dad97443e0af56bb85b3d9397157d\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_f73dad97443e0af56bb85b3d9397157d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__x2y2_sales_INGESTED_AT__day__1"], "unique_id": "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__x2y2_sales_INGESTED_AT__day__1.92056ec4c5", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_row_va_f73dad97443e0af56bb85b3d9397157d.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__x2y2_sales_INGESTED_AT__day__1", "alias": "x2y2_sales_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/dbt_expectations_expect_row_va_f73dad97443e0af56bb85b3d9397157d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_f73dad97443e0af56bb85b3d9397157d"}, "created_at": 1654351383.721453, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(INGESTED_AT as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        ETHEREUM_DEV.silver_nft.x2y2_sales\n    where\n        cast(INGESTED_AT as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_INGESTED_AT__TIMESTAMP_NTZ.d78ceb4a04": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_8e96a2fe14a3dac207c4dc32df16372e\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_8e96a2fe14a3dac207c4dc32df16372e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_INGESTED_AT__TIMESTAMP_NTZ"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_INGESTED_AT__TIMESTAMP_NTZ.d78ceb4a04", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_8e96a2fe14a3dac207c4dc32df16372e.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_INGESTED_AT__TIMESTAMP_NTZ", "alias": "x2y2_sales_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/dbt_expectations_expect_column_8e96a2fe14a3dac207c4dc32df16372e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_8e96a2fe14a3dac207c4dc32df16372e"}, "created_at": 1654351383.731664, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'INGESTED_AT'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.not_null_silver_nft__x2y2_sales_ORIGIN_FROM_ADDRESS.124398d0de": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__x2y2_sales_ORIGIN_FROM_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver_nft__x2y2_sales_ORIGIN_FROM_ADDRESS.124398d0de", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__x2y2_sales_ORIGIN_FROM_ADDRESS.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "not_null_silver_nft__x2y2_sales_ORIGIN_FROM_ADDRESS", "alias": "x2y2_sales_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/not_null_silver_nft__x2y2_sales_ORIGIN_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351383.7396, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.x2y2_sales\nwhere ORIGIN_FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.850781869b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_50bd1d8c93d7b95e04cbd7c85e7fb60e\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_50bd1d8c93d7b95e04cbd7c85e7fb60e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.850781869b", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_50bd1d8c93d7b95e04cbd7c85e7fb60e.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "x2y2_sales_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/dbt_expectations_expect_column_50bd1d8c93d7b95e04cbd7c85e7fb60e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_50bd1d8c93d7b95e04cbd7c85e7fb60e"}, "created_at": 1654351383.741816, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.x2y2_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.not_null_silver_nft__x2y2_sales_ORIGIN_TO_ADDRESS.c2a9b80698": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__x2y2_sales_ORIGIN_TO_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver_nft__x2y2_sales_ORIGIN_TO_ADDRESS.c2a9b80698", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__x2y2_sales_ORIGIN_TO_ADDRESS.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "not_null_silver_nft__x2y2_sales_ORIGIN_TO_ADDRESS", "alias": "x2y2_sales_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/not_null_silver_nft__x2y2_sales_ORIGIN_TO_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351383.7477078, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.x2y2_sales\nwhere ORIGIN_TO_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.79abf2b6f6": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c8ef779cc91fc2d667cf6979bf9d3dd6\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c8ef779cc91fc2d667cf6979bf9d3dd6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.79abf2b6f6", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_c8ef779cc91fc2d667cf6979bf9d3dd6.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "x2y2_sales_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/dbt_expectations_expect_column_c8ef779cc91fc2d667cf6979bf9d3dd6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c8ef779cc91fc2d667cf6979bf9d3dd6"}, "created_at": 1654351383.750061, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.x2y2_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.not_null_silver_nft__x2y2_sales_ORIGIN_FUNCTION_SIGNATURE.aefb1b395b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FUNCTION_SIGNATURE", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__x2y2_sales_ORIGIN_FUNCTION_SIGNATURE"], "unique_id": "test.ethereum_models.not_null_silver_nft__x2y2_sales_ORIGIN_FUNCTION_SIGNATURE.aefb1b395b", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__x2y2_sales_ORIGIN_FUNCTION_SIGNATURE.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "not_null_silver_nft__x2y2_sales_ORIGIN_FUNCTION_SIGNATURE", "alias": "x2y2_sales_ORIGIN_FUNCTION_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/not_null_silver_nft__x2y2_sales_ORIGIN_FUNCTION_SIGNATURE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351383.757826, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.x2y2_sales\nwhere ORIGIN_FUNCTION_SIGNATURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FUNCTION_SIGNATURE", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.4495a35fb1": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_9c9bd6393fa01736b98439f4ff7bc42c\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FUNCTION_SIGNATURE", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_9c9bd6393fa01736b98439f4ff7bc42c", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.4495a35fb1", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_9c9bd6393fa01736b98439f4ff7bc42c.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_", "alias": "x2y2_sales_ORIGIN_FUNCTION_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/dbt_expectations_expect_column_9c9bd6393fa01736b98439f4ff7bc42c.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_9c9bd6393fa01736b98439f4ff7bc42c"}, "created_at": 1654351383.760822, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_FUNCTION_SIGNATURE, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.x2y2_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FUNCTION_SIGNATURE", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.not_null_silver_nft__x2y2_sales_EVENT_TYPE.7650a16b69": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVENT_TYPE", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__x2y2_sales_EVENT_TYPE"], "unique_id": "test.ethereum_models.not_null_silver_nft__x2y2_sales_EVENT_TYPE.7650a16b69", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__x2y2_sales_EVENT_TYPE.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "not_null_silver_nft__x2y2_sales_EVENT_TYPE", "alias": "x2y2_sales_EVENT_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/not_null_silver_nft__x2y2_sales_EVENT_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654351383.767435, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.x2y2_sales\nwhere EVENT_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EVENT_TYPE", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__x2y2_sales_EVENT_TYPE__bid_won__sale.9cbf01638e": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_ccfb032317e01f302c3d274f0a60fe71\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["bid_won", "sale"], "column_name": "EVENT_TYPE", "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_ccfb032317e01f302c3d274f0a60fe71", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_set_silver_nft__x2y2_sales_EVENT_TYPE__bid_won__sale"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__x2y2_sales_EVENT_TYPE__bid_won__sale.9cbf01638e", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_ccfb032317e01f302c3d274f0a60fe71.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_silver_nft__x2y2_sales_EVENT_TYPE__bid_won__sale", "alias": "x2y2_sales_EVENT_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/dbt_expectations_expect_column_ccfb032317e01f302c3d274f0a60fe71.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_ccfb032317e01f302c3d274f0a60fe71"}, "created_at": 1654351383.770118, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        EVENT_TYPE as value_field\n\n    from ETHEREUM_DEV.silver_nft.x2y2_sales\n    \n\n),\nset_values as (\n\n    select\n        cast('bid_won' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('sale' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EVENT_TYPE", "file_key_name": "models.silver_nft__x2y2_sales"}, "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver_nft__x2y2_sales__log_id.d1e345a564": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_988031a5f6ea1499337400608bedf791\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_log_id"], "model": "{{ get_where_subquery(ref('silver_nft__x2y2_sales')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__x2y2_sales"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_988031a5f6ea1499337400608bedf791", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_utils_unique_combination_of_columns_silver_nft__x2y2_sales__log_id"], "unique_id": "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver_nft__x2y2_sales__log_id.d1e345a564", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_utils_unique_combination_o_988031a5f6ea1499337400608bedf791.sql", "original_file_path": "models/silver/nft/silver_nft__x2y2_sales.yml", "name": "dbt_utils_unique_combination_of_columns_silver_nft__x2y2_sales__log_id", "alias": "x2y2_sales", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__x2y2_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__x2y2_sales.yml/dbt_utils_unique_combination_o_988031a5f6ea1499337400608bedf791.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_988031a5f6ea1499337400608bedf791"}, "created_at": 1654351383.778326, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _log_id\n    from ETHEREUM_DEV.silver_nft.x2y2_sales\n    group by _log_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver_nft__x2y2_sales"}, "model.ethereum_models.silver_nft__nftx_sales": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    unique_key = '_log_id',\n    cluster_by = ['block_timestamp::DATE']\n) }}\n\nWITH vaults AS (\n\n    SELECT\n        event_inputs :assetAddress :: STRING AS nft_address,\n        event_inputs :vaultAddress :: STRING AS nftx_token_address\n    FROM\n        {{ ref('silver__logs') }}\n    WHERE\n        event_name = 'NewVault'\n        AND contract_address = '0xbe86f647b167567525ccaafcd6f881f1ee558216'\n),\nnftx_token_swaps AS (\n    SELECT\n        block_timestamp,\n        tx_hash,\n        CASE\n            WHEN symbol_in = 'WETH' THEN token_out\n            ELSE token_in\n        END AS nftx_token,\n        CASE\n            WHEN symbol_in = 'WETH'\n            AND amount_out_usd IS NOT NULL THEN amount_out\n            WHEN symbol_in = 'WETH'\n            AND amount_out_usd IS NULL\n            AND amount_out < 500 THEN amount_out\n            WHEN symbol_in = 'WETH'\n            AND amount_out_usd IS NULL\n            AND amount_out > 500 THEN amount_out / pow(\n                10,\n                18\n            )\n            WHEN symbol_in <> 'WETH'\n            AND amount_in_usd IS NOT NULL THEN amount_in\n            WHEN symbol_in <> 'WETH'\n            AND amount_in_usd IS NULL\n            AND amount_in < 500 THEN amount_in\n            ELSE amount_in / pow(\n                10,\n                18\n            )\n        END AS nftx_tokens,\n        ROUND(\n            CASE\n                WHEN symbol_in = 'WETH' THEN amount_in_usd / nftx_tokens\n                ELSE amount_out_usd / nftx_tokens\n            END,\n            2\n        ) AS usd_price_per_token\n    FROM\n        {{ ref('silver_dex__v2_swaps') }}\n    WHERE\n        nftx_tokens >.05\n        AND (\n            token_out IN (\n                SELECT\n                    nftx_token_address\n                FROM\n                    vaults\n            )\n            OR token_in IN (\n                SELECT\n                    nftx_token_address\n                FROM\n                    vaults\n            )\n        )\n        AND (\n            symbol_in = 'WETH'\n            OR symbol_out = 'WETH'\n        )\n\n{% if is_incremental() %}\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\ndate_spine AS (\n    SELECT\n        DISTINCT HOUR,\n        nftx_token_address\n    FROM\n        {{ ref('core__fact_hourly_token_prices') }}\n        LEFT JOIN vaults\n),\njoin_dates AS (\n    SELECT\n        HOUR AS nftx_date,\n        date_spine.nftx_token_address AS token,\n        usd_price_per_token\n    FROM\n        date_spine\n        LEFT JOIN nftx_token_swaps A\n        ON HOUR = DATE_TRUNC(\n            'hour',\n            block_timestamp\n        )\n        AND date_spine.nftx_token_address = A.nftx_token\n),\nfill_dates AS (\n    SELECT\n        nftx_date,\n        token AS nftx_token_address,\n        CASE\n            WHEN usd_price_per_token IS NULL THEN LAG(usd_price_per_token) ignore nulls over (\n                PARTITION BY token\n                ORDER BY\n                    nftx_date\n            )\n            ELSE usd_price_per_token\n        END AS nftx_token_price\n    FROM\n        join_dates\n),\nfull_fill_dates AS (\n    SELECT\n        nftx_date,\n        nftx_token_address,\n        COALESCE(\n            CASE\n                WHEN nftx_token_price IS NULL THEN FIRST_VALUE(\n                    nftx_token_price ignore nulls\n                ) over (\n                    PARTITION BY nftx_token_address\n                    ORDER BY\n                        nftx_date\n                )\n                ELSE nftx_token_price\n            END,\n            0\n        ) AS nftx_token_price\n    FROM\n        fill_dates\n),\nbase_sale_logs AS (\n    SELECT\n        _log_id,\n        block_timestamp,\n        tx_hash,\n        event_inputs,\n        contract_address AS platform_address,\n        nft_address,\n        nftx_token_address\n    FROM\n        {{ ref('silver__logs') }}\n        LEFT JOIN vaults\n        ON contract_address = nftx_token_address\n    WHERE\n        event_name = 'Redeemed'\n        AND contract_address IN (\n            SELECT\n                nftx_token_address\n            FROM\n                vaults\n        )\n\n{% if is_incremental() %}\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\nflat_sales_logs AS (\n    SELECT\n        _log_id,\n        block_timestamp,\n        tx_hash,\n        nft_address,\n        nftx_token_address,\n        platform_address,\n        f.value :: STRING AS tokenId\n    FROM\n        base_sale_logs,\n        TABLE(FLATTEN(base_sale_logs.event_inputs :nftIds)) f\n),\nlast_nft_transfer AS (\n    SELECT\n        A._log_id,\n        A.tx_hash,\n        A.block_timestamp,\n        A.contract_address,\n        A.project_name,\n        A.from_address,\n        A.to_address,\n        A.tokenid,\n        A.erc1155_value,\n        A.token_metadata,\n        A.ingested_at,\n        A.event_index,\n        b.nftx_token_address,\n        b.platform_address\n    FROM\n        {{ ref('silver__nft_transfers') }} A\n        INNER JOIN flat_sales_logs b\n        ON A.tx_hash = b.tx_hash\n        AND A.contract_address = b.nft_address\n        AND A.tokenId = b.tokenId\n\n{% if is_incremental() %}\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n\nqualify(ROW_NUMBER() over(PARTITION BY A.tx_hash, A.contract_address, A.tokenid\nORDER BY\n    event_index DESC)) = 1\n),\nfirst_nft_transfer AS (\n    SELECT\n        A._log_id,\n        A.tx_hash,\n        A.block_timestamp,\n        A.contract_address,\n        A.project_name,\n        A.from_address,\n        A.to_address,\n        A.tokenid,\n        A.erc1155_value,\n        A.token_metadata,\n        A.ingested_at,\n        A.event_index,\n        b.nftx_token_address,\n        b.platform_address\n    FROM\n        {{ ref('silver__nft_transfers') }} A\n        INNER JOIN flat_sales_logs b\n        ON A.tx_hash = b.tx_hash\n        AND A.contract_address = b.nft_address\n        AND A.tokenId = b.tokenId\n\n{% if is_incremental() %}\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n\nqualify(ROW_NUMBER() over(PARTITION BY A.tx_hash, A.contract_address, A.tokenid\nORDER BY\n    event_index ASC)) = 1\n),\nnft_transfers AS (\n    SELECT\n        A._log_id,\n        A.tx_hash,\n        A.block_timestamp,\n        A.contract_address,\n        A.project_name,\n        b.from_address,\n        A.to_address,\n        A.tokenid,\n        A.erc1155_value,\n        A.token_metadata,\n        A.ingested_at,\n        A.event_index,\n        b.nftx_token_address,\n        b.platform_address\n    FROM\n        last_nft_transfer A\n        JOIN first_nft_transfer b\n        ON A.tx_hash = b.tx_hash\n        AND A.contract_address = b.contract_address\n        AND A.tokenid = b.tokenid\n),\ntoken_transfers AS (\n    SELECT\n        block_timestamp,\n        tx_hash,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        from_address,\n        to_address,\n        raw_amount / pow(\n            10,\n            18\n        ) AS adj_amount,\n        CASE\n            WHEN to_address = '0x0000000000000000000000000000000000000000' THEN 'sale_amt'\n            WHEN to_address IN (\n                '0xfd8a76dc204e461db5da4f38687adc9cc5ae4a86',\n                '0x40d73df4f99bae688ce3c23a01022224fe16c7b2',\n                '0x7ae9d7ee8489cad7afc84111b8b185ee594ae090'\n            ) THEN 'fees'\n        END AS token_type,\n        b.nft_address\n    FROM\n        {{ ref('silver__transfers') }}\n        LEFT JOIN vaults b\n        ON contract_address = b.nftx_token_address\n    WHERE\n        adj_amount < 500\n        AND tx_hash IN (\n            SELECT\n                DISTINCT tx_hash\n            FROM\n                nft_transfers\n        )\n        AND contract_address IN (\n            SELECT\n                DISTINCT nftx_token_address\n            FROM\n                nft_transfers\n        )\n        AND token_type IS NOT NULL\n\n{% if is_incremental() %}\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\nsale_count AS (\n    SELECT\n        tx_hash,\n        contract_address,\n        COUNT(*) AS nft_transfers\n    FROM\n        nft_transfers\n    GROUP BY\n        tx_hash,\n        contract_address\n),\ntotal_sales AS (\n    SELECT\n        tx_hash,\n        contract_address,\n        SUM(adj_amount) AS sale_amount\n    FROM\n        token_transfers\n    WHERE\n        token_type = 'sale_amt'\n    GROUP BY\n        tx_hash,\n        contract_address\n),\ntotal_fees AS (\n    SELECT\n        tx_hash,\n        contract_address,\n        AVG(adj_amount) AS fee_amount\n    FROM\n        token_transfers\n    WHERE\n        token_type = 'fees'\n    GROUP BY\n        tx_hash,\n        contract_address\n),\nfinal_base AS (\n    SELECT\n        A.*,\n        b.nft_transfers,\n        (COALESCE(C.sale_amount, 0) + COALESCE(d.fee_amount, 0)) / b.nft_transfers AS price,\n        COALESCE(\n            d.fee_amount,\n            0\n        ) / b.nft_transfers AS fees\n    FROM\n        nft_transfers A\n        LEFT JOIN sale_count b\n        ON A.tx_hash = b.tx_hash\n        AND A.contract_address = b.contract_address\n        LEFT JOIN total_sales C\n        ON A.tx_hash = C.tx_hash\n        AND A.nftx_token_address = C.contract_address\n        LEFT JOIN total_fees d\n        ON A.tx_hash = d.tx_hash\n        AND A.nftx_token_address = d.contract_address\n),\ntx_data AS (\n    SELECT\n        tx_hash,\n        block_timestamp,\n        block_number,\n        to_address,\n        from_address,\n        eth_value,\n        tx_fee,\n        origin_function_signature,\n        ingested_at\n    FROM\n        {{ ref('silver__transactions') }}\n    WHERE\n        tx_hash IN (\n            SELECT\n                tx_hash\n            FROM\n                final_base\n        )\n\n{% if is_incremental() %}\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\neth_token_price AS (\n    SELECT\n        HOUR,\n        AVG(price) AS eth_price\n    FROM\n        {{ ref('core__fact_hourly_token_prices') }}\n    WHERE\n        token_address IS NULL\n        AND symbol IS NULL\n        AND HOUR :: DATE IN (\n            SELECT\n                DISTINCT block_timestamp :: DATE\n            FROM\n                tx_data\n        )\n    GROUP BY\n        HOUR,\n        token_address\n),\nfinal_table AS (\n    SELECT\n        A._log_id AS _log_id,\n        A.tx_hash AS tx_hash,\n        A.block_timestamp AS block_timestamp,\n        A.contract_address AS nft_address,\n        A.project_name AS project_name,\n        A.from_address AS seller_address,\n        A.to_address AS buyer_address,\n        A.tokenid AS tokenId,\n        A.erc1155_value AS erc1155_value,\n        A.token_metadata AS token_metadata,\n        A.ingested_at AS ingested_at,\n        A.price AS price,\n        COALESCE(\n            A.fees,\n            0\n        ) AS total_fees,\n        COALESCE(\n            A.fees,\n            0\n        ) AS platform_fee,\n        0 AS creator_fee,\n        0 AS creator_fee_usd,\n        tx.to_address AS origin_to_address,\n        tx.from_address AS origin_from_address,\n        tx.origin_function_signature AS origin_function_signature,\n        tx.tx_fee AS tx_fee,\n        ROUND(\n            tx.tx_fee * eth_price,\n            2\n        ) AS tx_fee_usd,\n        A.nftx_token_address AS currency_address,\n        'nftx_token' AS currency_symbol,\n        'redeem' AS event_type,\n        tx.block_number,\n        'nftx' AS platform_name,\n        A.platform_address AS platform_address,\n        ROUND(\n            nftx_token_price * A.price,\n            2\n        ) AS price_usd,\n        ROUND(nftx_token_price * COALESCE(A.fees, 0), 2) AS total_fees_usd,\n        ROUND(nftx_token_price * COALESCE(A.fees, 0), 2) AS platform_fee_usd\n    FROM\n        final_base A\n        LEFT JOIN tx_data tx\n        ON A.tx_hash = tx.tx_hash\n        LEFT JOIN eth_token_price\n        ON DATE_TRUNC(\n            'hour',\n            A.block_timestamp\n        ) = eth_token_price.hour\n        LEFT JOIN full_fill_dates f\n        ON DATE_TRUNC(\n            'hour',\n            A.block_timestamp\n        ) = f.nftx_date\n        AND A.nftx_token_address = f.nftx_token_address\n)\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_to_address,\n    origin_from_address,\n    origin_function_signature,\n    event_type,\n    platform_address,\n    platform_name,\n    buyer_address,\n    seller_address,\n    nft_address,\n    project_name,\n    erc1155_value,\n    tokenId,\n    token_metadata,\n    currency_symbol,\n    currency_address,\n    price,\n    price_usd,\n    total_fees,\n    platform_fee,\n    creator_fee,\n    total_fees_usd,\n    platform_fee_usd,\n    creator_fee_usd,\n    tx_fee,\n    tx_fee_usd,\n    _log_id,\n    ingested_at\nFROM\n    final_table qualify(ROW_NUMBER() over(PARTITION BY _log_id\nORDER BY\n    ingested_at DESC)) = 1", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental"], "nodes": ["model.ethereum_models.silver__logs", "model.ethereum_models.silver_dex__v2_swaps", "model.ethereum_models.core__fact_hourly_token_prices", "model.ethereum_models.silver__logs", "model.ethereum_models.silver__nft_transfers", "model.ethereum_models.silver__nft_transfers", "model.ethereum_models.silver__transfers", "model.ethereum_models.silver__transactions", "model.ethereum_models.core__fact_hourly_token_prices"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "cluster_by": ["block_timestamp::DATE"], "unique_key": "_log_id", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "silver_nft", "fqn": ["ethereum_models", "silver", "nft", "silver_nft__nftx_sales"], "unique_id": "model.ethereum_models.silver_nft__nftx_sales", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "silver/nft/silver_nft__nftx_sales.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.sql", "name": "silver_nft__nftx_sales", "alias": "nftx_sales", "checksum": {"name": "sha256", "checksum": "46a9991bb60aa6dc5f3796be44f8f2c6be9333cbcae98aca2bbc3aecb0db1f29"}, "tags": [], "refs": [["silver__logs"], ["silver_dex__v2_swaps"], ["core__fact_hourly_token_prices"], ["silver__logs"], ["silver__nft_transfers"], ["silver__nft_transfers"], ["silver__transfers"], ["silver__transactions"], ["core__fact_hourly_token_prices"]], "sources": [], "description": "", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM_ADDRESS": {"name": "PLATFORM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM_NAME": {"name": "PLATFORM_NAME", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BUYER_ADDRESS": {"name": "BUYER_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SELLER_ADDRESS": {"name": "SELLER_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_ADDRESS": {"name": "NFT_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKENID": {"name": "TOKENID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CURRENCY_ADDRESS": {"name": "CURRENCY_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRICE": {"name": "PRICE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRICE_USD": {"name": "PRICE_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_FEES": {"name": "TOTAL_FEES", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM_FEE": {"name": "PLATFORM_FEE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR_FEE": {"name": "CREATOR_FEE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_FEES_USD": {"name": "TOTAL_FEES_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM_FEE_USD": {"name": "PLATFORM_FEE_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR_FEE_USD": {"name": "CREATOR_FEE_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_FEE": {"name": "TX_FEE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_FEE_USD": {"name": "TX_FEE_USD", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "_LOG_ID": {"name": "_LOG_ID", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "INGESTED_AT": {"name": "INGESTED_AT", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_TYPE": {"name": "EVENT_TYPE", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_models://models/silver/nft/silver_nft__nftx_sales.yml", "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "_log_id", "cluster_by": ["block_timestamp::DATE"]}, "created_at": 1654440530.0166929, "compiled_sql": "\n\nWITH vaults AS (\n\n    SELECT\n        event_inputs :assetAddress :: STRING AS nft_address,\n        event_inputs :vaultAddress :: STRING AS nftx_token_address\n    FROM\n        ETHEREUM_DEV.silver.logs\n    WHERE\n        event_name = 'NewVault'\n        AND contract_address = '0xbe86f647b167567525ccaafcd6f881f1ee558216'\n),\nnftx_token_swaps AS (\n    SELECT\n        block_timestamp,\n        tx_hash,\n        CASE\n            WHEN symbol_in = 'WETH' THEN token_out\n            ELSE token_in\n        END AS nftx_token,\n        CASE\n            WHEN symbol_in = 'WETH'\n            AND amount_out_usd IS NOT NULL THEN amount_out\n            WHEN symbol_in = 'WETH'\n            AND amount_out_usd IS NULL\n            AND amount_out < 500 THEN amount_out\n            WHEN symbol_in = 'WETH'\n            AND amount_out_usd IS NULL\n            AND amount_out > 500 THEN amount_out / pow(\n                10,\n                18\n            )\n            WHEN symbol_in <> 'WETH'\n            AND amount_in_usd IS NOT NULL THEN amount_in\n            WHEN symbol_in <> 'WETH'\n            AND amount_in_usd IS NULL\n            AND amount_in < 500 THEN amount_in\n            ELSE amount_in / pow(\n                10,\n                18\n            )\n        END AS nftx_tokens,\n        ROUND(\n            CASE\n                WHEN symbol_in = 'WETH' THEN amount_in_usd / nftx_tokens\n                ELSE amount_out_usd / nftx_tokens\n            END,\n            2\n        ) AS usd_price_per_token\n    FROM\n        ETHEREUM_DEV.silver_dex.v2_swaps\n    WHERE\n        nftx_tokens >.05\n        AND (\n            token_out IN (\n                SELECT\n                    nftx_token_address\n                FROM\n                    vaults\n            )\n            OR token_in IN (\n                SELECT\n                    nftx_token_address\n                FROM\n                    vaults\n            )\n        )\n        AND (\n            symbol_in = 'WETH'\n            OR symbol_out = 'WETH'\n        )\n\n\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        ETHEREUM_DEV.silver_nft.nftx_sales\n)\n\n),\ndate_spine AS (\n    SELECT\n        DISTINCT HOUR,\n        nftx_token_address\n    FROM\n        ETHEREUM_DEV.core.fact_hourly_token_prices\n        LEFT JOIN vaults\n),\njoin_dates AS (\n    SELECT\n        HOUR AS nftx_date,\n        date_spine.nftx_token_address AS token,\n        usd_price_per_token\n    FROM\n        date_spine\n        LEFT JOIN nftx_token_swaps A\n        ON HOUR = DATE_TRUNC(\n            'hour',\n            block_timestamp\n        )\n        AND date_spine.nftx_token_address = A.nftx_token\n),\nfill_dates AS (\n    SELECT\n        nftx_date,\n        token AS nftx_token_address,\n        CASE\n            WHEN usd_price_per_token IS NULL THEN LAG(usd_price_per_token) ignore nulls over (\n                PARTITION BY token\n                ORDER BY\n                    nftx_date\n            )\n            ELSE usd_price_per_token\n        END AS nftx_token_price\n    FROM\n        join_dates\n),\nfull_fill_dates AS (\n    SELECT\n        nftx_date,\n        nftx_token_address,\n        COALESCE(\n            CASE\n                WHEN nftx_token_price IS NULL THEN FIRST_VALUE(\n                    nftx_token_price ignore nulls\n                ) over (\n                    PARTITION BY nftx_token_address\n                    ORDER BY\n                        nftx_date\n                )\n                ELSE nftx_token_price\n            END,\n            0\n        ) AS nftx_token_price\n    FROM\n        fill_dates\n),\nbase_sale_logs AS (\n    SELECT\n        _log_id,\n        block_timestamp,\n        tx_hash,\n        event_inputs,\n        contract_address AS platform_address,\n        nft_address,\n        nftx_token_address\n    FROM\n        ETHEREUM_DEV.silver.logs\n        LEFT JOIN vaults\n        ON contract_address = nftx_token_address\n    WHERE\n        event_name = 'Redeemed'\n        AND contract_address IN (\n            SELECT\n                nftx_token_address\n            FROM\n                vaults\n        )\n\n\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        ETHEREUM_DEV.silver_nft.nftx_sales\n)\n\n),\nflat_sales_logs AS (\n    SELECT\n        _log_id,\n        block_timestamp,\n        tx_hash,\n        nft_address,\n        nftx_token_address,\n        platform_address,\n        f.value :: STRING AS tokenId\n    FROM\n        base_sale_logs,\n        TABLE(FLATTEN(base_sale_logs.event_inputs :nftIds)) f\n),\nlast_nft_transfer AS (\n    SELECT\n        A._log_id,\n        A.tx_hash,\n        A.block_timestamp,\n        A.contract_address,\n        A.project_name,\n        A.from_address,\n        A.to_address,\n        A.tokenid,\n        A.erc1155_value,\n        A.token_metadata,\n        A.ingested_at,\n        A.event_index,\n        b.nftx_token_address,\n        b.platform_address\n    FROM\n        ETHEREUM_DEV.silver.nft_transfers A\n        INNER JOIN flat_sales_logs b\n        ON A.tx_hash = b.tx_hash\n        AND A.contract_address = b.nft_address\n        AND A.tokenId = b.tokenId\n\n\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        ETHEREUM_DEV.silver_nft.nftx_sales\n)\n\n\nqualify(ROW_NUMBER() over(PARTITION BY A.tx_hash, A.contract_address, A.tokenid\nORDER BY\n    event_index DESC)) = 1\n),\nfirst_nft_transfer AS (\n    SELECT\n        A._log_id,\n        A.tx_hash,\n        A.block_timestamp,\n        A.contract_address,\n        A.project_name,\n        A.from_address,\n        A.to_address,\n        A.tokenid,\n        A.erc1155_value,\n        A.token_metadata,\n        A.ingested_at,\n        A.event_index,\n        b.nftx_token_address,\n        b.platform_address\n    FROM\n        ETHEREUM_DEV.silver.nft_transfers A\n        INNER JOIN flat_sales_logs b\n        ON A.tx_hash = b.tx_hash\n        AND A.contract_address = b.nft_address\n        AND A.tokenId = b.tokenId\n\n\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        ETHEREUM_DEV.silver_nft.nftx_sales\n)\n\n\nqualify(ROW_NUMBER() over(PARTITION BY A.tx_hash, A.contract_address, A.tokenid\nORDER BY\n    event_index ASC)) = 1\n),\nnft_transfers AS (\n    SELECT\n        A._log_id,\n        A.tx_hash,\n        A.block_timestamp,\n        A.contract_address,\n        A.project_name,\n        b.from_address,\n        A.to_address,\n        A.tokenid,\n        A.erc1155_value,\n        A.token_metadata,\n        A.ingested_at,\n        A.event_index,\n        b.nftx_token_address,\n        b.platform_address\n    FROM\n        last_nft_transfer A\n        JOIN first_nft_transfer b\n        ON A.tx_hash = b.tx_hash\n        AND A.contract_address = b.contract_address\n        AND A.tokenid = b.tokenid\n),\ntoken_transfers AS (\n    SELECT\n        block_timestamp,\n        tx_hash,\n        origin_from_address,\n        origin_to_address,\n        contract_address,\n        from_address,\n        to_address,\n        raw_amount / pow(\n            10,\n            18\n        ) AS adj_amount,\n        CASE\n            WHEN to_address = '0x0000000000000000000000000000000000000000' THEN 'sale_amt'\n            WHEN to_address IN (\n                '0xfd8a76dc204e461db5da4f38687adc9cc5ae4a86',\n                '0x40d73df4f99bae688ce3c23a01022224fe16c7b2',\n                '0x7ae9d7ee8489cad7afc84111b8b185ee594ae090'\n            ) THEN 'fees'\n        END AS token_type,\n        b.nft_address\n    FROM\n        ETHEREUM_DEV.silver.transfers\n        LEFT JOIN vaults b\n        ON contract_address = b.nftx_token_address\n    WHERE\n        adj_amount < 500\n        AND tx_hash IN (\n            SELECT\n                DISTINCT tx_hash\n            FROM\n                nft_transfers\n        )\n        AND contract_address IN (\n            SELECT\n                DISTINCT nftx_token_address\n            FROM\n                nft_transfers\n        )\n        AND token_type IS NOT NULL\n\n\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        ETHEREUM_DEV.silver_nft.nftx_sales\n)\n\n),\nsale_count AS (\n    SELECT\n        tx_hash,\n        contract_address,\n        COUNT(*) AS nft_transfers\n    FROM\n        nft_transfers\n    GROUP BY\n        tx_hash,\n        contract_address\n),\ntotal_sales AS (\n    SELECT\n        tx_hash,\n        contract_address,\n        SUM(adj_amount) AS sale_amount\n    FROM\n        token_transfers\n    WHERE\n        token_type = 'sale_amt'\n    GROUP BY\n        tx_hash,\n        contract_address\n),\ntotal_fees AS (\n    SELECT\n        tx_hash,\n        contract_address,\n        AVG(adj_amount) AS fee_amount\n    FROM\n        token_transfers\n    WHERE\n        token_type = 'fees'\n    GROUP BY\n        tx_hash,\n        contract_address\n),\nfinal_base AS (\n    SELECT\n        A.*,\n        b.nft_transfers,\n        (COALESCE(C.sale_amount, 0) + COALESCE(d.fee_amount, 0)) / b.nft_transfers AS price,\n        COALESCE(\n            d.fee_amount,\n            0\n        ) / b.nft_transfers AS fees\n    FROM\n        nft_transfers A\n        LEFT JOIN sale_count b\n        ON A.tx_hash = b.tx_hash\n        AND A.contract_address = b.contract_address\n        LEFT JOIN total_sales C\n        ON A.tx_hash = C.tx_hash\n        AND A.nftx_token_address = C.contract_address\n        LEFT JOIN total_fees d\n        ON A.tx_hash = d.tx_hash\n        AND A.nftx_token_address = d.contract_address\n),\ntx_data AS (\n    SELECT\n        tx_hash,\n        block_timestamp,\n        block_number,\n        to_address,\n        from_address,\n        eth_value,\n        tx_fee,\n        origin_function_signature,\n        ingested_at\n    FROM\n        ETHEREUM_DEV.silver.transactions\n    WHERE\n        tx_hash IN (\n            SELECT\n                tx_hash\n            FROM\n                final_base\n        )\n\n\nAND ingested_at >= (\n    SELECT\n        MAX(\n            ingested_at\n        ) :: DATE - 2\n    FROM\n        ETHEREUM_DEV.silver_nft.nftx_sales\n)\n\n),\neth_token_price AS (\n    SELECT\n        HOUR,\n        AVG(price) AS eth_price\n    FROM\n        ETHEREUM_DEV.core.fact_hourly_token_prices\n    WHERE\n        token_address IS NULL\n        AND symbol IS NULL\n        AND HOUR :: DATE IN (\n            SELECT\n                DISTINCT block_timestamp :: DATE\n            FROM\n                tx_data\n        )\n    GROUP BY\n        HOUR,\n        token_address\n),\nfinal_table AS (\n    SELECT\n        A._log_id AS _log_id,\n        A.tx_hash AS tx_hash,\n        A.block_timestamp AS block_timestamp,\n        A.contract_address AS nft_address,\n        A.project_name AS project_name,\n        A.from_address AS seller_address,\n        A.to_address AS buyer_address,\n        A.tokenid AS tokenId,\n        A.erc1155_value AS erc1155_value,\n        A.token_metadata AS token_metadata,\n        A.ingested_at AS ingested_at,\n        A.price AS price,\n        COALESCE(\n            A.fees,\n            0\n        ) AS total_fees,\n        COALESCE(\n            A.fees,\n            0\n        ) AS platform_fee,\n        0 AS creator_fee,\n        0 AS creator_fee_usd,\n        tx.to_address AS origin_to_address,\n        tx.from_address AS origin_from_address,\n        tx.origin_function_signature AS origin_function_signature,\n        tx.tx_fee AS tx_fee,\n        ROUND(\n            tx.tx_fee * eth_price,\n            2\n        ) AS tx_fee_usd,\n        A.nftx_token_address AS currency_address,\n        'nftx_token' AS currency_symbol,\n        'redeem' AS event_type,\n        tx.block_number,\n        'nftx' AS platform_name,\n        A.platform_address AS platform_address,\n        ROUND(\n            nftx_token_price * A.price,\n            2\n        ) AS price_usd,\n        ROUND(nftx_token_price * COALESCE(A.fees, 0), 2) AS total_fees_usd,\n        ROUND(nftx_token_price * COALESCE(A.fees, 0), 2) AS platform_fee_usd\n    FROM\n        final_base A\n        LEFT JOIN tx_data tx\n        ON A.tx_hash = tx.tx_hash\n        LEFT JOIN eth_token_price\n        ON DATE_TRUNC(\n            'hour',\n            A.block_timestamp\n        ) = eth_token_price.hour\n        LEFT JOIN full_fill_dates f\n        ON DATE_TRUNC(\n            'hour',\n            A.block_timestamp\n        ) = f.nftx_date\n        AND A.nftx_token_address = f.nftx_token_address\n)\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    origin_to_address,\n    origin_from_address,\n    origin_function_signature,\n    event_type,\n    platform_address,\n    platform_name,\n    buyer_address,\n    seller_address,\n    nft_address,\n    project_name,\n    erc1155_value,\n    tokenId,\n    token_metadata,\n    currency_symbol,\n    currency_address,\n    price,\n    price_usd,\n    total_fees,\n    platform_fee,\n    creator_fee,\n    total_fees_usd,\n    platform_fee_usd,\n    creator_fee_usd,\n    tx_fee,\n    tx_fee_usd,\n    _log_id,\n    ingested_at\nFROM\n    final_table qualify(ROW_NUMBER() over(PARTITION BY _log_id\nORDER BY\n    ingested_at DESC)) = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.silver_nft.nftx_sales"}, "model.ethereum_models.core__sv_ez_nft_sales": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = true,\n    post_hook = \"{{ grant_data_share_statement('SV_EZ_NFT_SALES', 'VIEW') }}\"\n) }}\n\nSELECT\n    *\nFROM\n    {{ ref('core__ez_nft_sales') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.ethereum_models.grant_data_share_statement"], "nodes": ["model.ethereum_models.core__ez_nft_sales"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "secure": true, "post-hook": [{"sql": "{{ grant_data_share_statement('SV_EZ_NFT_SALES', 'VIEW') }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "core", "fqn": ["ethereum_models", "gold", "secure_views", "core__sv_ez_nft_sales"], "unique_id": "model.ethereum_models.core__sv_ez_nft_sales", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "gold/secure_views/core__sv_ez_nft_sales.sql", "original_file_path": "models/gold/secure_views/core__sv_ez_nft_sales.sql", "name": "core__sv_ez_nft_sales", "alias": "sv_ez_nft_sales", "checksum": {"name": "sha256", "checksum": "c1693381d34fe06312b9eb76a01d1c6bc88573a58c460ee74d10fabf078084b4"}, "tags": [], "refs": [["core__ez_nft_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/secure_views/core__sv_ez_nft_sales.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "secure": true, "post-hook": ["{{ grant_data_share_statement('SV_EZ_NFT_SALES', 'VIEW') }}"]}, "created_at": 1654440529.964312, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    ETHEREUM_DEV.core.ez_nft_sales", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.core.sv_ez_nft_sales"}, "model.ethereum_models.core__ez_nft_sales": {"raw_sql": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true }\n) }}\n\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    event_type,\n    platform_address,\n    platform_name,\n    nft_from_address AS seller_address,\n    nft_to_address AS buyer_address,\n    nft_address,\n    project_name,\n    erc1155_value,\n    tokenId,\n    token_metadata,\n    currency_symbol,\n    currency_address,\n    price,\n    price_usd,\n    total_fees,\n    platform_fee,\n    creator_fee,\n    total_fees_usd,\n    platform_fee_usd,\n    creator_fee_usd,\n    tx_fee,\n    tx_fee_usd,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature\nFROM\n    {{ ref('silver_nft__opensea_sales') }}\nUNION ALL\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    event_type,\n    platform_address,\n    platform_name,\n    nft_from_address AS seller_address,\n    nft_to_address AS buyer_address,\n    nft_address,\n    project_name,\n    erc1155_value,\n    tokenId,\n    token_metadata,\n    currency_symbol,\n    currency_address,\n    price,\n    price_usd,\n    total_fees,\n    platform_fee,\n    creator_fee,\n    total_fees_usd,\n    platform_fee_usd,\n    creator_fee_usd,\n    tx_fee,\n    tx_fee_usd,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature\nFROM\n    {{ ref('silver_nft__looksrare_sales') }}\nUNION ALL\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    event_type,\n    platform_address,\n    platform_name,\n    seller_address,\n    buyer_address,\n    nft_address,\n    project_name,\n    erc1155_value,\n    tokenId,\n    token_metadata,\n    currency_symbol,\n    currency_address,\n    price,\n    price_usd,\n    total_fees,\n    platform_fee,\n    creator_fee,\n    total_fees_usd,\n    platform_fee_usd,\n    creator_fee_usd,\n    tx_fee,\n    tx_fee_usd,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature\nFROM\n    {{ ref('silver_nft__rarible_sales') }}\nUNION ALL\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    event_type,\n    platform_address,\n    platform_name,\n    seller_address,\n    buyer_address,\n    nft_address,\n    project_name,\n    erc1155_value,\n    tokenId,\n    token_metadata,\n    currency_symbol,\n    currency_address,\n    price,\n    price_usd,\n    total_fees,\n    platform_fee,\n    creator_fee,\n    total_fees_usd,\n    platform_fee_usd,\n    creator_fee_usd,\n    tx_fee,\n    tx_fee_usd,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature\nFROM\n    {{ ref('silver_nft__x2y2_sales') }}\nUNION ALL\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    event_type,\n    platform_address,\n    platform_name,\n    seller_address,\n    buyer_address,\n    nft_address,\n    project_name,\n    erc1155_value,\n    tokenId,\n    token_metadata,\n    currency_symbol,\n    currency_address,\n    price,\n    price_usd,\n    total_fees,\n    platform_fee,\n    creator_fee,\n    total_fees_usd,\n    platform_fee_usd,\n    creator_fee_usd,\n    tx_fee,\n    tx_fee_usd,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature\nFROM\n    {{ ref('silver_nft__nftx_sales') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.ethereum_models.silver_nft__opensea_sales", "model.ethereum_models.silver_nft__looksrare_sales", "model.ethereum_models.silver_nft__rarible_sales", "model.ethereum_models.silver_nft__x2y2_sales", "model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "core", "fqn": ["ethereum_models", "gold", "core__ez_nft_sales"], "unique_id": "model.ethereum_models.core__ez_nft_sales", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "gold/core__ez_nft_sales.sql", "original_file_path": "models/gold/core__ez_nft_sales.sql", "name": "core__ez_nft_sales", "alias": "ez_nft_sales", "checksum": {"name": "sha256", "checksum": "292d8d2ac033d0f2e84c3dff56f84260377a22c2621c9fba00aefabd07af25bf"}, "tags": [], "refs": [["silver_nft__opensea_sales"], ["silver_nft__looksrare_sales"], ["silver_nft__rarible_sales"], ["silver_nft__x2y2_sales"], ["silver_nft__nftx_sales"]], "sources": [], "description": "This table contains NFT events on the Ethereum blockchain. It currently supports sales on Opensea, LooksRare, Rarible, x2y2, and NFTX. More data and exchanges will be added over time.", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "The block number at which the NFT event occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The block timestamp at which the NFT event occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "The transaction hash for the NFT event. This is not necessarily unique in this table as a transaction may contain multiple NFT events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_TYPE": {"name": "EVENT_TYPE", "description": "The type of NFT event in this transaction, either `sale`,  `bid_won` or `redeem`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM_ADDRESS": {"name": "PLATFORM_ADDRESS", "description": "The address of the exchange used for the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM_NAME": {"name": "PLATFORM_NAME", "description": "The name of the exchange used for the trade. Currently, the exchanges supported are `opensea`, `looksrare`, `rarible`, `x2y2`, and `nftx`. More exchanges will be added over time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "SELLER_ADDRESS": {"name": "SELLER_ADDRESS", "description": "The address of the seller of the NFT in the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BUYER_ADDRESS": {"name": "BUYER_ADDRESS", "description": "The address of the buyer of the NFT in the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_ADDRESS": {"name": "NFT_ADDRESS", "description": "The contract address of the NFT.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROJECT_NAME": {"name": "PROJECT_NAME", "description": "The name of the NFT project. This field, along with metadata, will be filled in over time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ERC1155_VALUE": {"name": "ERC1155_VALUE", "description": "If the NFT is an ERC-1155 contract, this field may be one or greater, representing the number of tokens.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKENID": {"name": "TOKENID", "description": "The token ID for this NFT contract.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_METADATA": {"name": "TOKEN_METADATA", "description": "The token metadata for this NFT. This may be blank for many NFTs. We are working to expand this field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CURRENCY_SYMBOL": {"name": "CURRENCY_SYMBOL", "description": "The token symbol for this NFT event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CURRENCY_ADDRESS": {"name": "CURRENCY_ADDRESS", "description": "The token contract address for this NFT event. This will be `ETH` for native ETH transactions.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRICE": {"name": "PRICE", "description": "The amount of the NFT event in the currency in which the transaction occurred, decimal adjusted where possible.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PRICE_USD": {"name": "PRICE_USD", "description": "The amount of the NFT event in US dollars. This will be null for tokens without a decimal adjustment or hourly price.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_FEES": {"name": "TOTAL_FEES", "description": "The total amount of fees paid relating to the NFT purchase in the transaction currency. This includes royalty payments to creators and platform fees. Please note, this does not include the gas fee.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM_FEE": {"name": "PLATFORM_FEE", "description": "The decimal adjusted amount of fees paid to the platform for this NFT event in the transaction's currency. For Opensea, we assume a 2.5% fee on all marketplace purchases, per their docs. Private sales do not have platform or creator fees on Opensea.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR_FEE": {"name": "CREATOR_FEE", "description": "The decimal adjusted amount of fees paid to the NFT collection as royalty payments for this NFT event in the transaction's currency. For Opensea, this is the difference between the total fees paid and a 2.5% Opensea platform fee.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOTAL_FEES_USD": {"name": "TOTAL_FEES_USD", "description": "The total amount of fees paid relating to the NFT purchase in US dollars. This includes royalty payments to creators and platform fees. Please note, this does not include the gas fee.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PLATFORM_FEE_USD": {"name": "PLATFORM_FEE_USD", "description": "The amount of fees paid to the platform for this NFT event in US dollars. For Opensea, we assume a 2.5% fee on all marketplace purchases, per their docs. Private sales do not have platform or creator fees on Opensea.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "CREATOR_FEE_USD": {"name": "CREATOR_FEE_USD", "description": "The amount of fees paid to the NFT collection as royalty payments for this NFT event in US dollars. For Opensea, this is the difference between the total fees paid and a 2.5% Opensea platform fee.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_FEE": {"name": "TX_FEE", "description": "The gas fee for this transaction in ETH.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_FEE_USD": {"name": "TX_FEE_USD", "description": "The gas fee for this transaction in US dollars.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FROM_ADDRESS": {"name": "ORIGIN_FROM_ADDRESS", "description": "The from address of this transaction. In most cases, this is the NFT buyer. However, for some more complex transactions, it may not be the NFT buyer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_TO_ADDRESS": {"name": "ORIGIN_TO_ADDRESS", "description": "The to address of this transaction. In most cases, this is the exchange contract. However, for some more complex NFT events, such as aggregate buys with tools such as Gem and Genie, this may not be the exchange address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ORIGIN_FUNCTION_SIGNATURE": {"name": "ORIGIN_FUNCTION_SIGNATURE", "description": "The function signature of this transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_models://models/gold/core__ez_nft_sales.yml", "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_nft_sales.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1654440530.272001, "compiled_sql": "\n\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    event_type,\n    platform_address,\n    platform_name,\n    nft_from_address AS seller_address,\n    nft_to_address AS buyer_address,\n    nft_address,\n    project_name,\n    erc1155_value,\n    tokenId,\n    token_metadata,\n    currency_symbol,\n    currency_address,\n    price,\n    price_usd,\n    total_fees,\n    platform_fee,\n    creator_fee,\n    total_fees_usd,\n    platform_fee_usd,\n    creator_fee_usd,\n    tx_fee,\n    tx_fee_usd,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature\nFROM\n    ETHEREUM_DEV.silver_nft.opensea_sales\nUNION ALL\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    event_type,\n    platform_address,\n    platform_name,\n    nft_from_address AS seller_address,\n    nft_to_address AS buyer_address,\n    nft_address,\n    project_name,\n    erc1155_value,\n    tokenId,\n    token_metadata,\n    currency_symbol,\n    currency_address,\n    price,\n    price_usd,\n    total_fees,\n    platform_fee,\n    creator_fee,\n    total_fees_usd,\n    platform_fee_usd,\n    creator_fee_usd,\n    tx_fee,\n    tx_fee_usd,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature\nFROM\n    ETHEREUM_DEV.silver_nft.looksrare_sales\nUNION ALL\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    event_type,\n    platform_address,\n    platform_name,\n    seller_address,\n    buyer_address,\n    nft_address,\n    project_name,\n    erc1155_value,\n    tokenId,\n    token_metadata,\n    currency_symbol,\n    currency_address,\n    price,\n    price_usd,\n    total_fees,\n    platform_fee,\n    creator_fee,\n    total_fees_usd,\n    platform_fee_usd,\n    creator_fee_usd,\n    tx_fee,\n    tx_fee_usd,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature\nFROM\n    ETHEREUM_DEV.silver_nft.rarible_sales\nUNION ALL\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    event_type,\n    platform_address,\n    platform_name,\n    seller_address,\n    buyer_address,\n    nft_address,\n    project_name,\n    erc1155_value,\n    tokenId,\n    token_metadata,\n    currency_symbol,\n    currency_address,\n    price,\n    price_usd,\n    total_fees,\n    platform_fee,\n    creator_fee,\n    total_fees_usd,\n    platform_fee_usd,\n    creator_fee_usd,\n    tx_fee,\n    tx_fee_usd,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature\nFROM\n    ETHEREUM_DEV.silver_nft.x2y2_sales\nUNION ALL\nSELECT\n    block_number,\n    block_timestamp,\n    tx_hash,\n    event_type,\n    platform_address,\n    platform_name,\n    seller_address,\n    buyer_address,\n    nft_address,\n    project_name,\n    erc1155_value,\n    tokenId,\n    token_metadata,\n    currency_symbol,\n    currency_address,\n    price,\n    price_usd,\n    total_fees,\n    platform_fee,\n    creator_fee,\n    total_fees_usd,\n    platform_fee_usd,\n    creator_fee_usd,\n    tx_fee,\n    tx_fee_usd,\n    origin_from_address,\n    origin_to_address,\n    origin_function_signature\nFROM\n    ETHEREUM_DEV.silver_nft.nftx_sales", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.core.ez_nft_sales"}, "model.ethereum_models.core__sv_ez_nft_transfers": {"raw_sql": "{{ config(\n    materialized = 'view',\n    secure = true,\n    post_hook = \"{{ grant_data_share_statement('SV_EZ_NFT_TRANSFERS', 'VIEW') }}\"\n) }}\n\nSELECT\n    *\nFROM\n    {{ ref('core__ez_nft_transfers') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.ethereum_models.grant_data_share_statement"], "nodes": ["model.ethereum_models.core__ez_nft_transfers"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "secure": true, "post-hook": [{"sql": "{{ grant_data_share_statement('SV_EZ_NFT_TRANSFERS', 'VIEW') }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "core", "fqn": ["ethereum_models", "gold", "secure_views", "core__sv_ez_nft_transfers"], "unique_id": "model.ethereum_models.core__sv_ez_nft_transfers", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "gold/secure_views/core__sv_ez_nft_transfers.sql", "original_file_path": "models/gold/secure_views/core__sv_ez_nft_transfers.sql", "name": "core__sv_ez_nft_transfers", "alias": "sv_ez_nft_transfers", "checksum": {"name": "sha256", "checksum": "2541110a1b59226358dfce2711701a9fed9c9826e00a571e56e94df6a0967556"}, "tags": [], "refs": [["core__ez_nft_transfers"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/secure_views/core__sv_ez_nft_transfers.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "secure": true, "post-hook": ["{{ grant_data_share_statement('SV_EZ_NFT_TRANSFERS', 'VIEW') }}"]}, "created_at": 1654440529.978244, "compiled_sql": "\n\nSELECT\n    *\nFROM\n    ETHEREUM_DEV.core.ez_nft_transfers", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.core.sv_ez_nft_transfers"}, "model.ethereum_models.core__ez_nft_transfers": {"raw_sql": "{{ config(\n    materialized = 'view',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true }\n) }}\n\nSELECT\n    block_timestamp,\n    block_number,\n    tx_hash,\n    event_index,\n    event_type,\n    contract_address AS nft_address,\n    project_name,\n    from_address AS nft_from_address,\n    to_address AS nft_to_address,\n    tokenId,\n    token_metadata,\n    erc1155_value\nFROM\n    {{ ref('silver__nft_transfers') }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.ethereum_models.silver__nft_transfers"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "core", "fqn": ["ethereum_models", "gold", "core__ez_nft_transfers"], "unique_id": "model.ethereum_models.core__ez_nft_transfers", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "gold/core__ez_nft_transfers.sql", "original_file_path": "models/gold/core__ez_nft_transfers.sql", "name": "core__ez_nft_transfers", "alias": "ez_nft_transfers", "checksum": {"name": "sha256", "checksum": "1112810c3ee899bc0ee58eb4eca7ff1e526cb6ec401ae2ce29990101febc06a6"}, "tags": [], "refs": [["silver__nft_transfers"]], "sources": [], "description": "This table contains NFT transfer events on the Ethereum blockchain.", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "The block number at which the NFT event occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The block timestamp at which the NFT event occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "The transaction hash for the NFT event. This is not necessarily unique in this table as a transaction may contain multiple NFT events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_TYPE": {"name": "EVENT_TYPE", "description": "The type of NFT event in this transaction, either `sale`,  `bid_won` or `redeem`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_ADDRESS": {"name": "NFT_ADDRESS", "description": "The contract address of the NFT.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROJECT_NAME": {"name": "PROJECT_NAME", "description": "The name of the NFT project. This field, along with metadata, will be filled in over time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ERC1155_VALUE": {"name": "ERC1155_VALUE", "description": "If the NFT is an ERC-1155 contract, this field may be one or greater, representing the number of tokens.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_FROM_ADDRESS": {"name": "NFT_FROM_ADDRESS", "description": "The sending address of the NFT in the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_TO_ADDRESS": {"name": "NFT_TO_ADDRESS", "description": "The receiving address of the NFT in the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKENID": {"name": "TOKENID", "description": "The token ID for this NFT contract.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_METADATA": {"name": "TOKEN_METADATA", "description": "The token metadata for this NFT. This may be blank for many NFTs. We are working to expand this field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_INDEX": {"name": "EVENT_INDEX", "description": "Event number within a transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_models://models/gold/core__ez_nft_transfers.yml", "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_nft_transfers.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "persist_docs": {"relation": true, "columns": true}}, "created_at": 1654440530.275968, "compiled_sql": "\n\nSELECT\n    block_timestamp,\n    block_number,\n    tx_hash,\n    event_index,\n    event_type,\n    contract_address AS nft_address,\n    project_name,\n    from_address AS nft_from_address,\n    to_address AS nft_to_address,\n    tokenId,\n    token_metadata,\n    erc1155_value\nFROM\n    ETHEREUM_DEV.silver.nft_transfers", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.core.ez_nft_transfers"}, "model.ethereum_models.core__ez_nft_mints": {"raw_sql": "{{ config(\n    materialized = 'incremental',\n    persist_docs ={ \"relation\": true,\n    \"columns\": true },\n    unique_key = '_log_id',\n    cluster_by = ['block_timestamp::DATE'],\n    post_hook = \"{{ grant_data_share_statement('EZ_NFT_MINTS', 'TABLE') }}\"\n) }}\n\nWITH nft_mints AS (\n\n    SELECT\n        _log_id,\n        block_number,\n        tx_hash,\n        block_timestamp,\n        contract_address,\n        project_name,\n        from_address,\n        to_address,\n        tokenId,\n        token_metadata,\n        erc1155_value,\n        'nft_mint' AS event_type,\n        ingested_at\n    FROM\n        {{ ref('silver__nft_transfers') }}\n    WHERE\n        event_type = 'mint'\n\n{% if is_incremental() %}\nAND ingested_at >= (\n    SELECT\n        MAX(ingested_at) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\nmint_price AS (\n    SELECT\n        tx_hash,\n        eth_value,\n        tx_fee\n    FROM\n        {{ ref('silver__transactions') }}\n    WHERE\n        status = 'SUCCESS'\n        AND tx_hash IN (\n            SELECT\n                tx_hash\n            FROM\n                nft_mints\n        )\n\n{% if is_incremental() %}\nAND ingested_at >= (\n    SELECT\n        MAX(ingested_at) :: DATE - 2\n    FROM\n        {{ this }}\n)\n{% endif %}\n),\ntokens_per_tx AS (\n    SELECT\n        tx_hash,\n        COUNT(\n            DISTINCT tokenId\n        ) AS nft_count\n    FROM\n        nft_mints\n    GROUP BY\n        tx_hash\n),\ntokens_moved AS (\n    SELECT\n        tx_hash,\n        _log_id,\n        from_address,\n        to_address,\n        contract_address,\n        raw_amount\n    FROM\n        {{ ref('silver__transfers') }}\n    WHERE\n        tx_hash IN (\n            SELECT\n                DISTINCT tx_hash\n            FROM\n                nft_mints\n        ) qualify(ROW_NUMBER() over(PARTITION BY tx_hash\n    ORDER BY\n        raw_amount DESC)) = 1\n),\ntoken_prices AS (\n    SELECT\n        HOUR,\n        CASE\n            WHEN LOWER(token_address) IS NULL THEN 'ETH'\n            ELSE LOWER(token_address)\n        END AS token_address,\n        AVG(price) AS price\n    FROM\n        {{ ref('core__fact_hourly_token_prices') }}\n    WHERE\n        (\n            token_address IN (\n                SELECT\n                    DISTINCT LOWER(contract_address)\n                FROM\n                    tokens_moved\n            )\n            OR (\n                token_address IS NULL\n                AND symbol IS NULL\n            )\n        )\n        AND HOUR :: DATE IN (\n            SELECT\n                DISTINCT block_timestamp :: DATE\n            FROM\n                nft_mints\n        )\n    GROUP BY\n        HOUR,\n        token_address\n),\nmetadata AS (\n    SELECT\n        LOWER(address) AS address,\n        symbol,\n        NAME,\n        decimals\n    FROM\n        {{ ref('core__dim_contracts') }}\n    WHERE\n        decimals IS NOT NULL\n),\neth_prices AS (\n    SELECT\n        HOUR,\n        token_address,\n        price AS eth_price\n    FROM\n        token_prices\n    WHERE\n        token_address = 'ETH'\n),\nFINAL AS (\n    SELECT\n        block_timestamp,\n        block_number,\n        nft_mints.tx_hash AS tx_hash,\n        event_type,\n        nft_mints.contract_address AS nft_address,\n        project_name,\n        nft_mints.from_address AS nft_from_address,\n        nft_mints.to_address AS nft_to_address,\n        tokenId,\n        token_metadata,\n        erc1155_value,\n        eth_value / nft_count AS mint_price_eth,\n        ROUND(\n            eth_value * eth_price,\n            2\n        ) AS mint_price_usd,\n        nft_count,\n        raw_amount,\n        CASE\n            WHEN metadata.decimals IS NOT NULL THEN raw_amount / pow(\n                10,\n                metadata.decimals\n            )\n            ELSE raw_amount\n        END AS amount,\n        CASE\n            WHEN metadata.decimals IS NOT NULL THEN amount * price\n            ELSE NULL\n        END AS amount_usd,\n        amount / nft_count AS mint_price_tokens,\n        ROUND(\n            amount_usd / nft_count,\n            2\n        ) AS mint_price_tokens_usd,\n        symbol AS mint_token_symbol,\n        tokens_moved.contract_address AS mint_token_address,\n        tx_fee,\n        ROUND(\n            tx_fee * eth_price,\n            2\n        ) AS tx_fee_usd,\n        nft_mints.ingested_at,\n        nft_mints._log_id\n    FROM\n        nft_mints\n        JOIN mint_price\n        ON nft_mints.tx_hash = mint_price.tx_hash\n        JOIN tokens_per_tx\n        ON nft_mints.tx_hash = tokens_per_tx.tx_hash\n        LEFT JOIN tokens_moved\n        ON tokens_moved.tx_hash = nft_mints.tx_hash\n        LEFT JOIN token_prices\n        ON DATE_TRUNC(\n            'hour',\n            nft_mints.block_timestamp\n        ) = token_prices.hour\n        AND token_prices.token_address = tokens_moved.contract_address\n        LEFT JOIN eth_prices\n        ON DATE_TRUNC(\n            'hour',\n            nft_mints.block_timestamp\n        ) = eth_prices.hour\n        LEFT JOIN metadata\n        ON metadata.address = tokens_moved.contract_address\n)\nSELECT\n    block_timestamp,\n    block_number,\n    tx_hash,\n    event_type,\n    nft_address,\n    project_name,\n    nft_from_address,\n    nft_to_address,\n    tokenId,\n    token_metadata,\n    erc1155_value,\n    mint_price_eth,\n    mint_price_usd,\n    nft_count,\n    amount,\n    amount_usd,\n    mint_price_tokens,\n    mint_price_tokens_usd,\n    mint_token_symbol,\n    mint_token_address,\n    tx_fee,\n    ingested_at,\n    _log_id\nFROM\n    FINAL", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.ethereum_models.grant_data_share_statement"], "nodes": ["model.ethereum_models.silver__nft_transfers", "model.ethereum_models.silver__transactions", "model.ethereum_models.silver__transfers", "model.ethereum_models.core__fact_hourly_token_prices", "model.ethereum_models.core__dim_contracts"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "cluster_by": ["block_timestamp::DATE"], "unique_key": "_log_id", "post-hook": [{"sql": "{{ grant_data_share_statement('EZ_NFT_MINTS', 'TABLE') }}", "transaction": true, "index": null}], "pre-hook": []}, "database": "ETHEREUM_DEV", "schema": "core", "fqn": ["ethereum_models", "gold", "core__ez_nft_mints"], "unique_id": "model.ethereum_models.core__ez_nft_mints", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "gold/core__ez_nft_mints.sql", "original_file_path": "models/gold/core__ez_nft_mints.sql", "name": "core__ez_nft_mints", "alias": "ez_nft_mints", "checksum": {"name": "sha256", "checksum": "1374de799750d0b91e478624754a63968e59e2f137d0557a73e7ad579c4864a5"}, "tags": [], "refs": [["silver__nft_transfers"], ["silver__transactions"], ["silver__transfers"], ["core__fact_hourly_token_prices"], ["core__dim_contracts"]], "sources": [], "description": "This table contains NFT mint events, defined as an NFT transfers from a burn address to an address, on the ethereum blockchain.", "columns": {"BLOCK_NUMBER": {"name": "BLOCK_NUMBER", "description": "The block number at which the NFT event occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "BLOCK_TIMESTAMP": {"name": "BLOCK_TIMESTAMP", "description": "The block timestamp at which the NFT event occurred.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_HASH": {"name": "TX_HASH", "description": "The transaction hash for the NFT event. This is not necessarily unique in this table as a transaction may contain multiple NFT events.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "EVENT_TYPE": {"name": "EVENT_TYPE", "description": "The type of NFT event in this transaction, either `sale`,  `bid_won` or `redeem`.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_ADDRESS": {"name": "NFT_ADDRESS", "description": "The contract address of the NFT.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "PROJECT_NAME": {"name": "PROJECT_NAME", "description": "The name of the NFT project. This field, along with metadata, will be filled in over time.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ERC1155_VALUE": {"name": "ERC1155_VALUE", "description": "If the NFT is an ERC-1155 contract, this field may be one or greater, representing the number of tokens.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_FROM_ADDRESS": {"name": "NFT_FROM_ADDRESS", "description": "The sending address of the NFT in the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_TO_ADDRESS": {"name": "NFT_TO_ADDRESS", "description": "The receiving address of the NFT in the transaction.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKENID": {"name": "TOKENID", "description": "The token ID for this NFT contract.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TOKEN_METADATA": {"name": "TOKEN_METADATA", "description": "The token metadata for this NFT. This may be blank for many NFTs. We are working to expand this field.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT_PRICE_ETH": {"name": "MINT_PRICE_ETH", "description": "The price paid in ETH to mint the NFT(s).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT_PRICE_USD": {"name": "MINT_PRICE_USD", "description": "The price paid in US dollars to mint the NFT(s).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "NFT_COUNT": {"name": "NFT_COUNT", "description": "The number of NFTs minted in this event.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_FEE": {"name": "TX_FEE", "description": "The gas fee for this transaction in ETH.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "TX_FEE_USD": {"name": "TX_FEE_USD", "description": "The gas fee for this transaction in US dollars.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT_PRICE_TOKENS": {"name": "MINT_PRICE_TOKENS", "description": "The decimal adjusted amount of tokens supplied within the same transaction to mint the NFT. This field may not handle all edge cases.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT_PRICE_TOKENS_USD": {"name": "MINT_PRICE_TOKENS_USD", "description": "The amount of tokens supplied in US dollars within the same transaction to mint the NFT. This field may not handle all edge cases.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT_TOKEN_SYMBOL": {"name": "MINT_TOKEN_SYMBOL", "description": "The symbol of the token supplied to mint the NFT, if applicable. This field may not handle all edge cases.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "MINT_TOKEN_ADDRESS": {"name": "MINT_TOKEN_ADDRESS", "description": "The contract address of the token supplied to mint the NFT, if applicable. This field may not handle all edge cases.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true}, "patch_path": "ethereum_models://models/gold/core__ez_nft_mints.yml", "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_nft_mints.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "persist_docs": {"relation": true, "columns": true}, "unique_key": "_log_id", "cluster_by": ["block_timestamp::DATE"], "post-hook": ["{{ grant_data_share_statement('EZ_NFT_MINTS', 'TABLE') }}"]}, "created_at": 1654440530.282254, "compiled_sql": "\n\nWITH nft_mints AS (\n\n    SELECT\n        _log_id,\n        block_number,\n        tx_hash,\n        block_timestamp,\n        contract_address,\n        project_name,\n        from_address,\n        to_address,\n        tokenId,\n        token_metadata,\n        erc1155_value,\n        'nft_mint' AS event_type,\n        ingested_at\n    FROM\n        ETHEREUM_DEV.silver.nft_transfers\n    WHERE\n        event_type = 'mint'\n\n\nAND ingested_at >= (\n    SELECT\n        MAX(ingested_at) :: DATE - 2\n    FROM\n        ETHEREUM_DEV.core.ez_nft_mints\n)\n\n),\nmint_price AS (\n    SELECT\n        tx_hash,\n        eth_value,\n        tx_fee\n    FROM\n        ETHEREUM_DEV.silver.transactions\n    WHERE\n        status = 'SUCCESS'\n        AND tx_hash IN (\n            SELECT\n                tx_hash\n            FROM\n                nft_mints\n        )\n\n\nAND ingested_at >= (\n    SELECT\n        MAX(ingested_at) :: DATE - 2\n    FROM\n        ETHEREUM_DEV.core.ez_nft_mints\n)\n\n),\ntokens_per_tx AS (\n    SELECT\n        tx_hash,\n        COUNT(\n            DISTINCT tokenId\n        ) AS nft_count\n    FROM\n        nft_mints\n    GROUP BY\n        tx_hash\n),\ntokens_moved AS (\n    SELECT\n        tx_hash,\n        _log_id,\n        from_address,\n        to_address,\n        contract_address,\n        raw_amount\n    FROM\n        ETHEREUM_DEV.silver.transfers\n    WHERE\n        tx_hash IN (\n            SELECT\n                DISTINCT tx_hash\n            FROM\n                nft_mints\n        ) qualify(ROW_NUMBER() over(PARTITION BY tx_hash\n    ORDER BY\n        raw_amount DESC)) = 1\n),\ntoken_prices AS (\n    SELECT\n        HOUR,\n        CASE\n            WHEN LOWER(token_address) IS NULL THEN 'ETH'\n            ELSE LOWER(token_address)\n        END AS token_address,\n        AVG(price) AS price\n    FROM\n        ETHEREUM_DEV.core.fact_hourly_token_prices\n    WHERE\n        (\n            token_address IN (\n                SELECT\n                    DISTINCT LOWER(contract_address)\n                FROM\n                    tokens_moved\n            )\n            OR (\n                token_address IS NULL\n                AND symbol IS NULL\n            )\n        )\n        AND HOUR :: DATE IN (\n            SELECT\n                DISTINCT block_timestamp :: DATE\n            FROM\n                nft_mints\n        )\n    GROUP BY\n        HOUR,\n        token_address\n),\nmetadata AS (\n    SELECT\n        LOWER(address) AS address,\n        symbol,\n        NAME,\n        decimals\n    FROM\n        ETHEREUM_DEV.core.dim_contracts\n    WHERE\n        decimals IS NOT NULL\n),\neth_prices AS (\n    SELECT\n        HOUR,\n        token_address,\n        price AS eth_price\n    FROM\n        token_prices\n    WHERE\n        token_address = 'ETH'\n),\nFINAL AS (\n    SELECT\n        block_timestamp,\n        block_number,\n        nft_mints.tx_hash AS tx_hash,\n        event_type,\n        nft_mints.contract_address AS nft_address,\n        project_name,\n        nft_mints.from_address AS nft_from_address,\n        nft_mints.to_address AS nft_to_address,\n        tokenId,\n        token_metadata,\n        erc1155_value,\n        eth_value / nft_count AS mint_price_eth,\n        ROUND(\n            eth_value * eth_price,\n            2\n        ) AS mint_price_usd,\n        nft_count,\n        raw_amount,\n        CASE\n            WHEN metadata.decimals IS NOT NULL THEN raw_amount / pow(\n                10,\n                metadata.decimals\n            )\n            ELSE raw_amount\n        END AS amount,\n        CASE\n            WHEN metadata.decimals IS NOT NULL THEN amount * price\n            ELSE NULL\n        END AS amount_usd,\n        amount / nft_count AS mint_price_tokens,\n        ROUND(\n            amount_usd / nft_count,\n            2\n        ) AS mint_price_tokens_usd,\n        symbol AS mint_token_symbol,\n        tokens_moved.contract_address AS mint_token_address,\n        tx_fee,\n        ROUND(\n            tx_fee * eth_price,\n            2\n        ) AS tx_fee_usd,\n        nft_mints.ingested_at,\n        nft_mints._log_id\n    FROM\n        nft_mints\n        JOIN mint_price\n        ON nft_mints.tx_hash = mint_price.tx_hash\n        JOIN tokens_per_tx\n        ON nft_mints.tx_hash = tokens_per_tx.tx_hash\n        LEFT JOIN tokens_moved\n        ON tokens_moved.tx_hash = nft_mints.tx_hash\n        LEFT JOIN token_prices\n        ON DATE_TRUNC(\n            'hour',\n            nft_mints.block_timestamp\n        ) = token_prices.hour\n        AND token_prices.token_address = tokens_moved.contract_address\n        LEFT JOIN eth_prices\n        ON DATE_TRUNC(\n            'hour',\n            nft_mints.block_timestamp\n        ) = eth_prices.hour\n        LEFT JOIN metadata\n        ON metadata.address = tokens_moved.contract_address\n)\nSELECT\n    block_timestamp,\n    block_number,\n    tx_hash,\n    event_type,\n    nft_address,\n    project_name,\n    nft_from_address,\n    nft_to_address,\n    tokenId,\n    token_metadata,\n    erc1155_value,\n    mint_price_eth,\n    mint_price_usd,\n    nft_count,\n    amount,\n    amount_usd,\n    mint_price_tokens,\n    mint_price_tokens_usd,\n    mint_token_symbol,\n    mint_token_address,\n    tx_fee,\n    ingested_at,\n    _log_id\nFROM\n    FINAL", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "ETHEREUM_DEV.core.ez_nft_mints"}, "test.ethereum_models.not_null_silver_nft__nftx_sales_BLOCK_NUMBER.a6c03abb23": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__nftx_sales_BLOCK_NUMBER"], "unique_id": "test.ethereum_models.not_null_silver_nft__nftx_sales_BLOCK_NUMBER.a6c03abb23", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__nftx_sales_BLOCK_NUMBER.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "not_null_silver_nft__nftx_sales_BLOCK_NUMBER", "alias": "nftx_sales_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/not_null_silver_nft__nftx_sales_BLOCK_NUMBER.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654440530.023956, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.nftx_sales\nwhere BLOCK_NUMBER is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_BLOCK_NUMBER__NUMBER__FLOAT.80b0b9ff84": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_c1d5b2724bd5ceb4a2a161700a14882b\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "BLOCK_NUMBER", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_c1d5b2724bd5ceb4a2a161700a14882b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_BLOCK_NUMBER__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_BLOCK_NUMBER__NUMBER__FLOAT.80b0b9ff84", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_c1d5b2724bd5ceb4a2a161700a14882b.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_BLOCK_NUMBER__NUMBER__FLOAT", "alias": "nftx_sales_BLOCK_NUMBER", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/dbt_expectations_expect_column_c1d5b2724bd5ceb4a2a161700a14882b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_c1d5b2724bd5ceb4a2a161700a14882b"}, "created_at": 1654440530.026169, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_NUMBER'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_NUMBER", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.not_null_silver_nft__nftx_sales_BLOCK_TIMESTAMP.407a253fab": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__nftx_sales_BLOCK_TIMESTAMP"], "unique_id": "test.ethereum_models.not_null_silver_nft__nftx_sales_BLOCK_TIMESTAMP.407a253fab", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__nftx_sales_BLOCK_TIMESTAMP.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "not_null_silver_nft__nftx_sales_BLOCK_TIMESTAMP", "alias": "nftx_sales_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/not_null_silver_nft__nftx_sales_BLOCK_TIMESTAMP.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654440530.0387409, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.nftx_sales\nwhere BLOCK_TIMESTAMP is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__nftx_sales_BLOCK_TIMESTAMP__day__1.d23cd81f40": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_91f99dde41cc8ed0959f223144d23f8d\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_91f99dde41cc8ed0959f223144d23f8d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__nftx_sales_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__nftx_sales_BLOCK_TIMESTAMP__day__1.d23cd81f40", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_row_va_91f99dde41cc8ed0959f223144d23f8d.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__nftx_sales_BLOCK_TIMESTAMP__day__1", "alias": "nftx_sales_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/dbt_expectations_expect_row_va_91f99dde41cc8ed0959f223144d23f8d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_91f99dde41cc8ed0959f223144d23f8d"}, "created_at": 1654440530.040488, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        ETHEREUM_DEV.silver_nft.nftx_sales\n    where\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.7b707ae4c6": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_645595b88b15631c7a59efe3d43321a1\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_645595b88b15631c7a59efe3d43321a1", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.7b707ae4c6", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_645595b88b15631c7a59efe3d43321a1.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ", "alias": "nftx_sales_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/dbt_expectations_expect_column_645595b88b15631c7a59efe3d43321a1.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_645595b88b15631c7a59efe3d43321a1"}, "created_at": 1654440530.100959, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'BLOCK_TIMESTAMP'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.not_null_silver_nft__nftx_sales_TX_HASH.28602c9645": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__nftx_sales_TX_HASH"], "unique_id": "test.ethereum_models.not_null_silver_nft__nftx_sales_TX_HASH.28602c9645", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__nftx_sales_TX_HASH.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "not_null_silver_nft__nftx_sales_TX_HASH", "alias": "nftx_sales_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/not_null_silver_nft__nftx_sales_TX_HASH.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654440530.105363, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.nftx_sales\nwhere TX_HASH is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_TX_HASH__0_xX_0_9a_fA_F_.abb6961580": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_861a7ded53a7429551e8cc08626306f7\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_HASH", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_861a7ded53a7429551e8cc08626306f7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_TX_HASH__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_TX_HASH__0_xX_0_9a_fA_F_.abb6961580", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_861a7ded53a7429551e8cc08626306f7.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_TX_HASH__0_xX_0_9a_fA_F_", "alias": "nftx_sales_TX_HASH", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/dbt_expectations_expect_column_861a7ded53a7429551e8cc08626306f7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_861a7ded53a7429551e8cc08626306f7"}, "created_at": 1654440530.106876, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(TX_HASH, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.nftx_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_HASH", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.not_null_silver_nft__nftx_sales_PLATFORM_ADDRESS.02cd3a8016": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PLATFORM_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__nftx_sales_PLATFORM_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver_nft__nftx_sales_PLATFORM_ADDRESS.02cd3a8016", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__nftx_sales_PLATFORM_ADDRESS.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "not_null_silver_nft__nftx_sales_PLATFORM_ADDRESS", "alias": "nftx_sales_PLATFORM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/not_null_silver_nft__nftx_sales_PLATFORM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654440530.122379, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.nftx_sales\nwhere PLATFORM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM_ADDRESS", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_.e2b6cae481": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_16cac554ba0b0960debfdec3b0acb91f\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "PLATFORM_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_16cac554ba0b0960debfdec3b0acb91f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_.e2b6cae481", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_16cac554ba0b0960debfdec3b0acb91f.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "nftx_sales_PLATFORM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/dbt_expectations_expect_column_16cac554ba0b0960debfdec3b0acb91f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_16cac554ba0b0960debfdec3b0acb91f"}, "created_at": 1654440530.123897, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(PLATFORM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.nftx_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM_ADDRESS", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.not_null_silver_nft__nftx_sales_PLATFORM_NAME.2123aa582d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PLATFORM_NAME", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__nftx_sales_PLATFORM_NAME"], "unique_id": "test.ethereum_models.not_null_silver_nft__nftx_sales_PLATFORM_NAME.2123aa582d", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__nftx_sales_PLATFORM_NAME.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "not_null_silver_nft__nftx_sales_PLATFORM_NAME", "alias": "nftx_sales_PLATFORM_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/not_null_silver_nft__nftx_sales_PLATFORM_NAME.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654440530.1284559, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.nftx_sales\nwhere PLATFORM_NAME is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM_NAME", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__nftx_sales_PLATFORM_NAME__nftx.ff46a06e13": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bca9a55866cb96b785da29933449f371\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["nftx"], "column_name": "PLATFORM_NAME", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bca9a55866cb96b785da29933449f371", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_set_silver_nft__nftx_sales_PLATFORM_NAME__nftx"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__nftx_sales_PLATFORM_NAME__nftx.ff46a06e13", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_bca9a55866cb96b785da29933449f371.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_silver_nft__nftx_sales_PLATFORM_NAME__nftx", "alias": "nftx_sales_PLATFORM_NAME", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/dbt_expectations_expect_column_bca9a55866cb96b785da29933449f371.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_bca9a55866cb96b785da29933449f371"}, "created_at": 1654440530.1299589, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        PLATFORM_NAME as value_field\n\n    from ETHEREUM_DEV.silver_nft.nftx_sales\n    \n\n),\nset_values as (\n\n    select\n        cast('nftx' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM_NAME", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.not_null_silver_nft__nftx_sales_BUYER_ADDRESS.e587ace7b8": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "BUYER_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__nftx_sales_BUYER_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver_nft__nftx_sales_BUYER_ADDRESS.e587ace7b8", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__nftx_sales_BUYER_ADDRESS.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "not_null_silver_nft__nftx_sales_BUYER_ADDRESS", "alias": "nftx_sales_BUYER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/not_null_silver_nft__nftx_sales_BUYER_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654440530.138597, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.nftx_sales\nwhere BUYER_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BUYER_ADDRESS", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_BUYER_ADDRESS__0_xX_0_9a_fA_F_.d151539a20": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_698167c0cd002be469fefedf7143bdce\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "BUYER_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_698167c0cd002be469fefedf7143bdce", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_BUYER_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_BUYER_ADDRESS__0_xX_0_9a_fA_F_.d151539a20", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_698167c0cd002be469fefedf7143bdce.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_BUYER_ADDRESS__0_xX_0_9a_fA_F_", "alias": "nftx_sales_BUYER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/dbt_expectations_expect_column_698167c0cd002be469fefedf7143bdce.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_698167c0cd002be469fefedf7143bdce"}, "created_at": 1654440530.14013, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(BUYER_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.nftx_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BUYER_ADDRESS", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.not_null_silver_nft__nftx_sales_SELLER_ADDRESS.32ef90769b": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "SELLER_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__nftx_sales_SELLER_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver_nft__nftx_sales_SELLER_ADDRESS.32ef90769b", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__nftx_sales_SELLER_ADDRESS.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "not_null_silver_nft__nftx_sales_SELLER_ADDRESS", "alias": "nftx_sales_SELLER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/not_null_silver_nft__nftx_sales_SELLER_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654440530.144595, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.nftx_sales\nwhere SELLER_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SELLER_ADDRESS", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_SELLER_ADDRESS__0_xX_0_9a_fA_F_.6d628e9bd9": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_6316ee47503419eef71920a059887b6e\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "SELLER_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_6316ee47503419eef71920a059887b6e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_SELLER_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_SELLER_ADDRESS__0_xX_0_9a_fA_F_.6d628e9bd9", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_6316ee47503419eef71920a059887b6e.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_SELLER_ADDRESS__0_xX_0_9a_fA_F_", "alias": "nftx_sales_SELLER_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/dbt_expectations_expect_column_6316ee47503419eef71920a059887b6e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_6316ee47503419eef71920a059887b6e"}, "created_at": 1654440530.146294, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(SELLER_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.nftx_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "SELLER_ADDRESS", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.not_null_silver_nft__nftx_sales_NFT_ADDRESS.c32a41c9cb": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "NFT_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__nftx_sales_NFT_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver_nft__nftx_sales_NFT_ADDRESS.c32a41c9cb", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__nftx_sales_NFT_ADDRESS.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "not_null_silver_nft__nftx_sales_NFT_ADDRESS", "alias": "nftx_sales_NFT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/not_null_silver_nft__nftx_sales_NFT_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654440530.150818, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.nftx_sales\nwhere NFT_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NFT_ADDRESS", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_.0358077c70": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_5d4613ac1a61d383905f88e57f96b877\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "NFT_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_5d4613ac1a61d383905f88e57f96b877", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_.0358077c70", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_5d4613ac1a61d383905f88e57f96b877.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_", "alias": "nftx_sales_NFT_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/dbt_expectations_expect_column_5d4613ac1a61d383905f88e57f96b877.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_5d4613ac1a61d383905f88e57f96b877"}, "created_at": 1654440530.152682, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(NFT_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.nftx_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "NFT_ADDRESS", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.not_null_silver_nft__nftx_sales_TOKENID.96b5b44a8a": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOKENID", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__nftx_sales_TOKENID"], "unique_id": "test.ethereum_models.not_null_silver_nft__nftx_sales_TOKENID.96b5b44a8a", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__nftx_sales_TOKENID.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "not_null_silver_nft__nftx_sales_TOKENID", "alias": "nftx_sales_TOKENID", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/not_null_silver_nft__nftx_sales_TOKENID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654440530.156847, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.nftx_sales\nwhere TOKENID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOKENID", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.not_null_silver_nft__nftx_sales_CURRENCY_ADDRESS.844deec13f": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CURRENCY_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__nftx_sales_CURRENCY_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver_nft__nftx_sales_CURRENCY_ADDRESS.844deec13f", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__nftx_sales_CURRENCY_ADDRESS.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "not_null_silver_nft__nftx_sales_CURRENCY_ADDRESS", "alias": "nftx_sales_CURRENCY_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/not_null_silver_nft__nftx_sales_CURRENCY_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654440530.158666, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.nftx_sales\nwhere CURRENCY_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CURRENCY_ADDRESS", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.not_null_silver_nft__nftx_sales_PRICE.901075a57c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PRICE", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__nftx_sales_PRICE"], "unique_id": "test.ethereum_models.not_null_silver_nft__nftx_sales_PRICE.901075a57c", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__nftx_sales_PRICE.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "not_null_silver_nft__nftx_sales_PRICE", "alias": "nftx_sales_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/not_null_silver_nft__nftx_sales_PRICE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654440530.160137, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.nftx_sales\nwhere PRICE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PRICE", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_PRICE__NUMBER__FLOAT.6816632f7b": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_02c3641bf43c0c87596441e748a34796\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "PRICE", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_02c3641bf43c0c87596441e748a34796", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_PRICE__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_PRICE__NUMBER__FLOAT.6816632f7b", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_02c3641bf43c0c87596441e748a34796.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_PRICE__NUMBER__FLOAT", "alias": "nftx_sales_PRICE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/dbt_expectations_expect_column_02c3641bf43c0c87596441e748a34796.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_02c3641bf43c0c87596441e748a34796"}, "created_at": 1654440530.1616268, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PRICE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PRICE", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.not_null_silver_nft__nftx_sales_PRICE_USD.18e5bb8d71": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PRICE_USD", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__nftx_sales_PRICE_USD"], "unique_id": "test.ethereum_models.not_null_silver_nft__nftx_sales_PRICE_USD.18e5bb8d71", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__nftx_sales_PRICE_USD.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "not_null_silver_nft__nftx_sales_PRICE_USD", "alias": "nftx_sales_PRICE_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/not_null_silver_nft__nftx_sales_PRICE_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654440530.166202, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.nftx_sales\nwhere PRICE_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PRICE_USD", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_PRICE_USD__NUMBER__FLOAT.6e269cbf60": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_f56e6ffa907683194714b6c1d1c348f9\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "PRICE_USD", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_f56e6ffa907683194714b6c1d1c348f9", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_PRICE_USD__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_PRICE_USD__NUMBER__FLOAT.6e269cbf60", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_f56e6ffa907683194714b6c1d1c348f9.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_PRICE_USD__NUMBER__FLOAT", "alias": "nftx_sales_PRICE_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/dbt_expectations_expect_column_f56e6ffa907683194714b6c1d1c348f9.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_f56e6ffa907683194714b6c1d1c348f9"}, "created_at": 1654440530.1677089, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PRICE_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PRICE_USD", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.not_null_silver_nft__nftx_sales_TOTAL_FEES.303da7e4ef": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TOTAL_FEES", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__nftx_sales_TOTAL_FEES"], "unique_id": "test.ethereum_models.not_null_silver_nft__nftx_sales_TOTAL_FEES.303da7e4ef", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__nftx_sales_TOTAL_FEES.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "not_null_silver_nft__nftx_sales_TOTAL_FEES", "alias": "nftx_sales_TOTAL_FEES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/not_null_silver_nft__nftx_sales_TOTAL_FEES.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654440530.1728399, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.nftx_sales\nwhere TOTAL_FEES is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOTAL_FEES", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_TOTAL_FEES__NUMBER__FLOAT.eacc4622d3": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_63a4328eb88a51b222e09ee0bde18e3d\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TOTAL_FEES", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_63a4328eb88a51b222e09ee0bde18e3d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_TOTAL_FEES__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_TOTAL_FEES__NUMBER__FLOAT.eacc4622d3", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_63a4328eb88a51b222e09ee0bde18e3d.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_TOTAL_FEES__NUMBER__FLOAT", "alias": "nftx_sales_TOTAL_FEES", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/dbt_expectations_expect_column_63a4328eb88a51b222e09ee0bde18e3d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_63a4328eb88a51b222e09ee0bde18e3d"}, "created_at": 1654440530.174639, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TOTAL_FEES'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOTAL_FEES", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.not_null_silver_nft__nftx_sales_PLATFORM_FEE.ec0fdca684": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "PLATFORM_FEE", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__nftx_sales_PLATFORM_FEE"], "unique_id": "test.ethereum_models.not_null_silver_nft__nftx_sales_PLATFORM_FEE.ec0fdca684", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__nftx_sales_PLATFORM_FEE.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "not_null_silver_nft__nftx_sales_PLATFORM_FEE", "alias": "nftx_sales_PLATFORM_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/not_null_silver_nft__nftx_sales_PLATFORM_FEE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654440530.179119, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.nftx_sales\nwhere PLATFORM_FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM_FEE", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_PLATFORM_FEE__NUMBER__FLOAT.d6469ce959": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_76971c2f53d915ee162189b901840142\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "PLATFORM_FEE", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_76971c2f53d915ee162189b901840142", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_PLATFORM_FEE__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_PLATFORM_FEE__NUMBER__FLOAT.d6469ce959", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_76971c2f53d915ee162189b901840142.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_PLATFORM_FEE__NUMBER__FLOAT", "alias": "nftx_sales_PLATFORM_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/dbt_expectations_expect_column_76971c2f53d915ee162189b901840142.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_76971c2f53d915ee162189b901840142"}, "created_at": 1654440530.180674, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PLATFORM_FEE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM_FEE", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.not_null_silver_nft__nftx_sales_CREATOR_FEE.802daae741": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "CREATOR_FEE", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__nftx_sales_CREATOR_FEE"], "unique_id": "test.ethereum_models.not_null_silver_nft__nftx_sales_CREATOR_FEE.802daae741", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__nftx_sales_CREATOR_FEE.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "not_null_silver_nft__nftx_sales_CREATOR_FEE", "alias": "nftx_sales_CREATOR_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/not_null_silver_nft__nftx_sales_CREATOR_FEE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654440530.185458, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.nftx_sales\nwhere CREATOR_FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATOR_FEE", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_CREATOR_FEE__NUMBER__FLOAT.f8b97ce082": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_a894679853aa8822f3ab4e105e0921de\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "CREATOR_FEE", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_a894679853aa8822f3ab4e105e0921de", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_CREATOR_FEE__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_CREATOR_FEE__NUMBER__FLOAT.f8b97ce082", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_a894679853aa8822f3ab4e105e0921de.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_CREATOR_FEE__NUMBER__FLOAT", "alias": "nftx_sales_CREATOR_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/dbt_expectations_expect_column_a894679853aa8822f3ab4e105e0921de.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_a894679853aa8822f3ab4e105e0921de"}, "created_at": 1654440530.18704, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CREATOR_FEE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATOR_FEE", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_TOTAL_FEES_USD__NUMBER__FLOAT.5df9ab741c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_bcf58c3a088a4b8736e5f305fdc5ed28\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TOTAL_FEES_USD", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_bcf58c3a088a4b8736e5f305fdc5ed28", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_TOTAL_FEES_USD__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_TOTAL_FEES_USD__NUMBER__FLOAT.5df9ab741c", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_bcf58c3a088a4b8736e5f305fdc5ed28.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_TOTAL_FEES_USD__NUMBER__FLOAT", "alias": "nftx_sales_TOTAL_FEES_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/dbt_expectations_expect_column_bcf58c3a088a4b8736e5f305fdc5ed28.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_bcf58c3a088a4b8736e5f305fdc5ed28"}, "created_at": 1654440530.191683, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TOTAL_FEES_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TOTAL_FEES_USD", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_PLATFORM_FEE_USD__NUMBER__FLOAT.6a7b2bb1f3": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_24a656e9535fd2eac9f7f1a65e8cb180\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "PLATFORM_FEE_USD", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_24a656e9535fd2eac9f7f1a65e8cb180", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_PLATFORM_FEE_USD__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_PLATFORM_FEE_USD__NUMBER__FLOAT.6a7b2bb1f3", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_24a656e9535fd2eac9f7f1a65e8cb180.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_PLATFORM_FEE_USD__NUMBER__FLOAT", "alias": "nftx_sales_PLATFORM_FEE_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/dbt_expectations_expect_column_24a656e9535fd2eac9f7f1a65e8cb180.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_24a656e9535fd2eac9f7f1a65e8cb180"}, "created_at": 1654440530.19614, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'PLATFORM_FEE_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "PLATFORM_FEE_USD", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_CREATOR_FEE_USD__NUMBER__FLOAT.dca5d94515": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_cd314f5a1359f1030ab03a02fd65c499\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "CREATOR_FEE_USD", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_cd314f5a1359f1030ab03a02fd65c499", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_CREATOR_FEE_USD__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_CREATOR_FEE_USD__NUMBER__FLOAT.dca5d94515", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_cd314f5a1359f1030ab03a02fd65c499.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_CREATOR_FEE_USD__NUMBER__FLOAT", "alias": "nftx_sales_CREATOR_FEE_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/dbt_expectations_expect_column_cd314f5a1359f1030ab03a02fd65c499.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_cd314f5a1359f1030ab03a02fd65c499"}, "created_at": 1654440530.2009249, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'CREATOR_FEE_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "CREATOR_FEE_USD", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.not_null_silver_nft__nftx_sales_TX_FEE.470c08a79d": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_FEE", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__nftx_sales_TX_FEE"], "unique_id": "test.ethereum_models.not_null_silver_nft__nftx_sales_TX_FEE.470c08a79d", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__nftx_sales_TX_FEE.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "not_null_silver_nft__nftx_sales_TX_FEE", "alias": "nftx_sales_TX_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/not_null_silver_nft__nftx_sales_TX_FEE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654440530.205421, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.nftx_sales\nwhere TX_FEE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_FEE", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_TX_FEE__NUMBER__FLOAT.2f867b06d9": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_32ac26c3af194afe740d88d94643ce46\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TX_FEE", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_32ac26c3af194afe740d88d94643ce46", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_TX_FEE__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_TX_FEE__NUMBER__FLOAT.2f867b06d9", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_32ac26c3af194afe740d88d94643ce46.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_TX_FEE__NUMBER__FLOAT", "alias": "nftx_sales_TX_FEE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/dbt_expectations_expect_column_32ac26c3af194afe740d88d94643ce46.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_32ac26c3af194afe740d88d94643ce46"}, "created_at": 1654440530.2070138, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_FEE'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_FEE", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.not_null_silver_nft__nftx_sales_TX_FEE_USD.ed0ec2916c": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(where=\"block_timestamp >= '2020-05-05' AND BLOCK_TIMESTAMP < CURRENT_DATE - 2\") }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "TX_FEE_USD", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "block_timestamp >= '2020-05-05' AND BLOCK_TIMESTAMP < CURRENT_DATE - 2", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__nftx_sales_TX_FEE_USD"], "unique_id": "test.ethereum_models.not_null_silver_nft__nftx_sales_TX_FEE_USD.ed0ec2916c", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__nftx_sales_TX_FEE_USD.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "not_null_silver_nft__nftx_sales_TX_FEE_USD", "alias": "nftx_sales_TX_FEE_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/not_null_silver_nft__nftx_sales_TX_FEE_USD.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "block_timestamp >= '2020-05-05' AND BLOCK_TIMESTAMP < CURRENT_DATE - 2"}, "created_at": 1654440530.211879, "compiled_sql": "\n    \n    \n\nselect *\nfrom (select * from ETHEREUM_DEV.silver_nft.nftx_sales where block_timestamp >= '2020-05-05' AND BLOCK_TIMESTAMP < CURRENT_DATE - 2) dbt_subquery\nwhere TX_FEE_USD is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_FEE_USD", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_TX_FEE_USD__NUMBER__FLOAT.1d23057903": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_fd9cb3b736c1dc2652bc040c686c2862\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["NUMBER", "FLOAT"], "column_name": "TX_FEE_USD", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_fd9cb3b736c1dc2652bc040c686c2862", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_TX_FEE_USD__NUMBER__FLOAT"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_TX_FEE_USD__NUMBER__FLOAT.1d23057903", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_fd9cb3b736c1dc2652bc040c686c2862.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_TX_FEE_USD__NUMBER__FLOAT", "alias": "nftx_sales_TX_FEE_USD", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/dbt_expectations_expect_column_fd9cb3b736c1dc2652bc040c686c2862.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_fd9cb3b736c1dc2652bc040c686c2862"}, "created_at": 1654440530.213496, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'TX_FEE_USD'\n            and\n            relation_column_type not in ('NUMBER', 'FLOAT')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "TX_FEE_USD", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.not_null_silver_nft__nftx_sales__LOG_ID.565ff32394": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "_LOG_ID", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__nftx_sales__LOG_ID"], "unique_id": "test.ethereum_models.not_null_silver_nft__nftx_sales__LOG_ID.565ff32394", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__nftx_sales__LOG_ID.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "not_null_silver_nft__nftx_sales__LOG_ID", "alias": "nftx_sales", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/not_null_silver_nft__nftx_sales__LOG_ID.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654440530.2180989, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.nftx_sales\nwhere _LOG_ID is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "_LOG_ID", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.not_null_silver_nft__nftx_sales_INGESTED_AT.fe4e1c0fe1": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__nftx_sales_INGESTED_AT"], "unique_id": "test.ethereum_models.not_null_silver_nft__nftx_sales_INGESTED_AT.fe4e1c0fe1", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__nftx_sales_INGESTED_AT.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "not_null_silver_nft__nftx_sales_INGESTED_AT", "alias": "nftx_sales_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/not_null_silver_nft__nftx_sales_INGESTED_AT.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654440530.219682, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.nftx_sales\nwhere INGESTED_AT is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__nftx_sales_INGESTED_AT__day__1.f965487553": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_cb769c06149e878563ae53982d3ec9ee\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_cb769c06149e878563ae53982d3ec9ee", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__nftx_sales_INGESTED_AT__day__1"], "unique_id": "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__nftx_sales_INGESTED_AT__day__1.f965487553", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_row_va_cb769c06149e878563ae53982d3ec9ee.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__nftx_sales_INGESTED_AT__day__1", "alias": "nftx_sales_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/dbt_expectations_expect_row_va_cb769c06149e878563ae53982d3ec9ee.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_cb769c06149e878563ae53982d3ec9ee"}, "created_at": 1654440530.221168, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(INGESTED_AT as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        ETHEREUM_DEV.silver_nft.nftx_sales\n    where\n        cast(INGESTED_AT as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_INGESTED_AT__TIMESTAMP_NTZ.9784903dde": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_b503375fa7e1442316eef241586ed6ae\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_type_list", "kwargs": {"column_type_list": ["TIMESTAMP_NTZ"], "column_name": "INGESTED_AT", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_b503375fa7e1442316eef241586ed6ae", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_INGESTED_AT__TIMESTAMP_NTZ"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_INGESTED_AT__TIMESTAMP_NTZ.9784903dde", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_b503375fa7e1442316eef241586ed6ae.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_INGESTED_AT__TIMESTAMP_NTZ", "alias": "nftx_sales_INGESTED_AT", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/dbt_expectations_expect_column_b503375fa7e1442316eef241586ed6ae.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_b503375fa7e1442316eef241586ed6ae"}, "created_at": 1654440530.227036, "compiled_sql": "with relation_columns as (\n\n        \n        select\n            cast('BLOCK_NUMBER' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BLOCK_TIMESTAMP' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_HASH' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_TO_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FROM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ORIGIN_FUNCTION_SIGNATURE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('EVENT_TYPE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('BUYER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('SELLER_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('NFT_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PROJECT_NAME' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('ERC1155_VALUE' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKENID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOKEN_METADATA' as \n    varchar\n) as relation_column,\n            cast('OBJECT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_SYMBOL' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CURRENCY_ADDRESS' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PRICE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TOTAL_FEES_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('PLATFORM_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('CREATOR_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('NUMBER' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('TX_FEE_USD' as \n    varchar\n) as relation_column,\n            cast('FLOAT' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('_LOG_ID' as \n    varchar\n) as relation_column,\n            cast('VARCHAR' as \n    varchar\n) as relation_column_type\n        union all\n        \n        select\n            cast('INGESTED_AT' as \n    varchar\n) as relation_column,\n            cast('TIMESTAMP_NTZ' as \n    varchar\n) as relation_column_type\n        \n        \n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = 'INGESTED_AT'\n            and\n            relation_column_type not in ('TIMESTAMP_NTZ')\n\n    )\n    select *\n    from test_data", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "INGESTED_AT", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.not_null_silver_nft__nftx_sales_ORIGIN_FROM_ADDRESS.862af0b4d2": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__nftx_sales_ORIGIN_FROM_ADDRESS"], "unique_id": "test.ethereum_models.not_null_silver_nft__nftx_sales_ORIGIN_FROM_ADDRESS.862af0b4d2", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__nftx_sales_ORIGIN_FROM_ADDRESS.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "not_null_silver_nft__nftx_sales_ORIGIN_FROM_ADDRESS", "alias": "nftx_sales_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/not_null_silver_nft__nftx_sales_ORIGIN_FROM_ADDRESS.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654440530.231164, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.nftx_sales\nwhere ORIGIN_FROM_ADDRESS is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.a779792f16": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_2a3b7ad91e533c45d7f54e85f22033c4\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FROM_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_2a3b7ad91e533c45d7f54e85f22033c4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.a779792f16", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_2a3b7ad91e533c45d7f54e85f22033c4.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_", "alias": "nftx_sales_ORIGIN_FROM_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/dbt_expectations_expect_column_2a3b7ad91e533c45d7f54e85f22033c4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_2a3b7ad91e533c45d7f54e85f22033c4"}, "created_at": 1654440530.232804, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_FROM_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.nftx_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FROM_ADDRESS", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.db9436489d": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(where=\"ORIGIN_TO_ADDRESS IS NOT NULL\",alias=\"dbt_expectations_expect_column_17026a682a220f7252b52a1a3ee94715\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_TO_ADDRESS", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_17026a682a220f7252b52a1a3ee94715", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": "ORIGIN_TO_ADDRESS IS NOT NULL", "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.db9436489d", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_17026a682a220f7252b52a1a3ee94715.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_", "alias": "nftx_sales_ORIGIN_TO_ADDRESS", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/dbt_expectations_expect_column_17026a682a220f7252b52a1a3ee94715.sql", "build_path": null, "deferred": false, "unrendered_config": {"where": "ORIGIN_TO_ADDRESS IS NOT NULL", "alias": "dbt_expectations_expect_column_17026a682a220f7252b52a1a3ee94715"}, "created_at": 1654440530.238009, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_TO_ADDRESS, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from (select * from ETHEREUM_DEV.silver_nft.nftx_sales where ORIGIN_TO_ADDRESS IS NOT NULL) dbt_subquery\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_TO_ADDRESS", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.not_null_silver_nft__nftx_sales_ORIGIN_FUNCTION_SIGNATURE.1b424dab06": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "ORIGIN_FUNCTION_SIGNATURE", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__nftx_sales_ORIGIN_FUNCTION_SIGNATURE"], "unique_id": "test.ethereum_models.not_null_silver_nft__nftx_sales_ORIGIN_FUNCTION_SIGNATURE.1b424dab06", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__nftx_sales_ORIGIN_FUNCTION_SIGNATURE.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "not_null_silver_nft__nftx_sales_ORIGIN_FUNCTION_SIGNATURE", "alias": "nftx_sales_ORIGIN_FUNCTION_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/not_null_silver_nft__nftx_sales_ORIGIN_FUNCTION_SIGNATURE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654440530.2423182, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.nftx_sales\nwhere ORIGIN_FUNCTION_SIGNATURE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FUNCTION_SIGNATURE", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.94f67071fd": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_19ade5ff936ec578f397043ccfba450b\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "ORIGIN_FUNCTION_SIGNATURE", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_19ade5ff936ec578f397043ccfba450b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.94f67071fd", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_19ade5ff936ec578f397043ccfba450b.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_", "alias": "nftx_sales_ORIGIN_FUNCTION_SIGNATURE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/dbt_expectations_expect_column_19ade5ff936ec578f397043ccfba450b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_19ade5ff936ec578f397043ccfba450b"}, "created_at": 1654440530.243953, "compiled_sql": "\n\n\n\n\n    with grouped_expression as (\n    select\n        \n        \n    \n  \n\n\n    \nregexp_instr(ORIGIN_FUNCTION_SIGNATURE, '0[xX][0-9a-fA-F]+', 1, 1)\n\n\n > 0\n as expression\n\n\n    from ETHEREUM_DEV.silver_nft.nftx_sales\n    \n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression = true)\n\n)\n\nselect *\nfrom validation_errors\n\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "ORIGIN_FUNCTION_SIGNATURE", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.not_null_silver_nft__nftx_sales_EVENT_TYPE.45e0aa2632": {"raw_sql": "{{ test_not_null(**_dbt_generic_test_kwargs) }}", "test_metadata": {"name": "not_null", "kwargs": {"column_name": "EVENT_TYPE", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "not_null_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "not_null_silver_nft__nftx_sales_EVENT_TYPE"], "unique_id": "test.ethereum_models.not_null_silver_nft__nftx_sales_EVENT_TYPE.45e0aa2632", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "not_null_silver_nft__nftx_sales_EVENT_TYPE.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "not_null_silver_nft__nftx_sales_EVENT_TYPE", "alias": "nftx_sales_EVENT_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/not_null_silver_nft__nftx_sales_EVENT_TYPE.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654440530.248393, "compiled_sql": "\n    \n    \n\nselect *\nfrom ETHEREUM_DEV.silver_nft.nftx_sales\nwhere EVENT_TYPE is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EVENT_TYPE", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__nftx_sales_EVENT_TYPE__bid_won__sale__redeem.9874ccb68c": {"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_be_in_set(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_column_0ff9099604e696b0ce996ce4116245f7\") }}", "test_metadata": {"name": "expect_column_values_to_be_in_set", "kwargs": {"value_set": ["bid_won", "sale", "redeem"], "column_name": "EVENT_TYPE", "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_set", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_column_0ff9099604e696b0ce996ce4116245f7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_be_in_set_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_expectations_expect_column_values_to_be_in_set_silver_nft__nftx_sales_EVENT_TYPE__bid_won__sale__redeem"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__nftx_sales_EVENT_TYPE__bid_won__sale__redeem.9874ccb68c", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_0ff9099604e696b0ce996ce4116245f7.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "dbt_expectations_expect_column_values_to_be_in_set_silver_nft__nftx_sales_EVENT_TYPE__bid_won__sale__redeem", "alias": "nftx_sales_EVENT_TYPE", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/dbt_expectations_expect_column_0ff9099604e696b0ce996ce4116245f7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_column_0ff9099604e696b0ce996ce4116245f7"}, "created_at": 1654440530.249961, "compiled_sql": "\n\nwith all_values as (\n\n    select\n        EVENT_TYPE as value_field\n\n    from ETHEREUM_DEV.silver_nft.nftx_sales\n    \n\n),\nset_values as (\n\n    select\n        cast('bid_won' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('sale' as \n    varchar\n) as value_field\n    union all\n    select\n        cast('redeem' as \n    varchar\n) as value_field\n    \n    \n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "EVENT_TYPE", "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver_nft__nftx_sales__log_id.dec5fb0811": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_9eb125f0b57a27dc43fad5e47bcaf113\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_log_id"], "model": "{{ get_where_subquery(ref('silver_nft__nftx_sales')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.silver_nft__nftx_sales"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_9eb125f0b57a27dc43fad5e47bcaf113", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_utils_unique_combination_of_columns_silver_nft", "fqn": ["ethereum_models", "silver", "nft", "dbt_utils_unique_combination_of_columns_silver_nft__nftx_sales__log_id"], "unique_id": "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver_nft__nftx_sales__log_id.dec5fb0811", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_utils_unique_combination_o_9eb125f0b57a27dc43fad5e47bcaf113.sql", "original_file_path": "models/silver/nft/silver_nft__nftx_sales.yml", "name": "dbt_utils_unique_combination_of_columns_silver_nft__nftx_sales__log_id", "alias": "nftx_sales", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["silver_nft__nftx_sales"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/silver/nft/silver_nft__nftx_sales.yml/dbt_utils_unique_combination_o_9eb125f0b57a27dc43fad5e47bcaf113.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_9eb125f0b57a27dc43fad5e47bcaf113"}, "created_at": 1654440530.25521, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _log_id\n    from ETHEREUM_DEV.silver_nft.nftx_sales\n    group by _log_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.silver_nft__nftx_sales"}, "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_nft_mints_BLOCK_TIMESTAMP__day__1.d4b6d94a29": {"raw_sql": "{{ dbt_expectations.test_expect_row_values_to_have_recent_data(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_expectations_expect_row_va_ce3866732c5ad6e6eeaad295ae9bbea7\") }}", "test_metadata": {"name": "expect_row_values_to_have_recent_data", "kwargs": {"datepart": "day", "interval": 1, "column_name": "BLOCK_TIMESTAMP", "model": "{{ get_where_subquery(ref('core__ez_nft_mints')) }}"}, "namespace": "dbt_expectations"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_nft_mints"]}, "config": {"enabled": true, "alias": "dbt_expectations_expect_row_va_ce3866732c5ad6e6eeaad295ae9bbea7", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_row_values_to_have_recent_data_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_row_values_to_have_recent_data_core__ez_nft_mints_BLOCK_TIMESTAMP__day__1"], "unique_id": "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_nft_mints_BLOCK_TIMESTAMP__day__1.d4b6d94a29", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_row_va_ce3866732c5ad6e6eeaad295ae9bbea7.sql", "original_file_path": "models/gold/core__ez_nft_mints.yml", "name": "dbt_expectations_expect_row_values_to_have_recent_data_core__ez_nft_mints_BLOCK_TIMESTAMP__day__1", "alias": "ez_nft_mints_BLOCK_TIMESTAMP", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_nft_mints"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_nft_mints.yml/dbt_expectations_expect_row_va_ce3866732c5ad6e6eeaad295ae9bbea7.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_expectations_expect_row_va_ce3866732c5ad6e6eeaad295ae9bbea7"}, "created_at": 1654440530.283241, "compiled_sql": "\n\n with max_recency as (\n\n    select max(cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n)) as max_timestamp\n    from\n        ETHEREUM_DEV.core.ez_nft_mints\n    where\n        cast(BLOCK_TIMESTAMP as \n    timestamp_ntz\n) <= cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        \n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('1970-01-01' as \n    timestamp_ntz\n))\n        <\n        cast(\n\n    dateadd(\n        day,\n        -1,\n        cast(convert_timezone('UTC', 'GMT', \n    current_timestamp::\n    timestamp_ntz\n\n) as \n    timestamp_ntz\n)\n        )\n\n as \n    timestamp_ntz\n)\n\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "BLOCK_TIMESTAMP", "file_key_name": "models.core__ez_nft_mints"}, "test.ethereum_models.dbt_utils_unique_combination_of_columns_core__ez_nft_mints__LOG_ID.7c541378be": {"raw_sql": "{{ dbt_utils.test_unique_combination_of_columns(**_dbt_generic_test_kwargs) }}{{ config(alias=\"dbt_utils_unique_combination_o_bd27f6ad567e96fe634364f41f77dc25\") }}", "test_metadata": {"name": "unique_combination_of_columns", "kwargs": {"combination_of_columns": ["_LOG_ID"], "model": "{{ get_where_subquery(ref('core__ez_nft_mints')) }}"}, "namespace": "dbt_utils"}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_utils.test_unique_combination_of_columns", "macro.dbt.get_where_subquery"], "nodes": ["model.ethereum_models.core__ez_nft_mints"]}, "config": {"enabled": true, "alias": "dbt_utils_unique_combination_o_bd27f6ad567e96fe634364f41f77dc25", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_utils_unique_combination_of_columns_core", "fqn": ["ethereum_models", "gold", "dbt_utils_unique_combination_of_columns_core__ez_nft_mints__LOG_ID"], "unique_id": "test.ethereum_models.dbt_utils_unique_combination_of_columns_core__ez_nft_mints__LOG_ID.7c541378be", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_utils_unique_combination_o_bd27f6ad567e96fe634364f41f77dc25.sql", "original_file_path": "models/gold/core__ez_nft_mints.yml", "name": "dbt_utils_unique_combination_of_columns_core__ez_nft_mints__LOG_ID", "alias": "ez_nft_mints", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_nft_mints"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/ethereum_models/models/gold/core__ez_nft_mints.yml/dbt_utils_unique_combination_o_bd27f6ad567e96fe634364f41f77dc25.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "dbt_utils_unique_combination_o_bd27f6ad567e96fe634364f41f77dc25"}, "created_at": 1654440530.288766, "compiled_sql": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        _LOG_ID\n    from ETHEREUM_DEV.core.ez_nft_mints\n    group by _LOG_ID\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.core__ez_nft_mints"}}, "sources": {"source.ethereum_models.prod.ethereum_blocks": {"fqn": ["ethereum_models", "prod", "ethereum_blocks"], "database": "chainwalkers", "schema": "prod", "unique_id": "source.ethereum_models.prod.ethereum_blocks", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "ethereum_blocks", "source_name": "prod", "source_description": "", "loader": "", "identifier": "ethereum_blocks", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "chainwalkers.prod.ethereum_blocks", "created_at": 1654351204.7995}, "source.ethereum_models.prod.ethereum_txs": {"fqn": ["ethereum_models", "prod", "ethereum_txs"], "database": "chainwalkers", "schema": "prod", "unique_id": "source.ethereum_models.prod.ethereum_txs", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "ethereum_txs", "source_name": "prod", "source_description": "", "loader": "", "identifier": "ethereum_txs", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "chainwalkers.prod.ethereum_txs", "created_at": 1654351204.799628}, "source.ethereum_models.flipside_gold_ethereum.contracts": {"fqn": ["ethereum_models", "flipside_gold_ethereum", "contracts"], "database": "flipside_prod_db", "schema": "ethereum", "unique_id": "source.ethereum_models.flipside_gold_ethereum.contracts", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "contracts", "source_name": "flipside_gold_ethereum", "source_description": "", "loader": "", "identifier": "contracts", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.ethereum.contracts", "created_at": 1654351204.799735}, "source.ethereum_models.flipside_gold_ethereum.labels": {"fqn": ["ethereum_models", "flipside_gold_ethereum", "labels"], "database": "flipside_prod_db", "schema": "ethereum", "unique_id": "source.ethereum_models.flipside_gold_ethereum.labels", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "labels", "source_name": "flipside_gold_ethereum", "source_description": "", "loader": "", "identifier": "labels", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.ethereum.labels", "created_at": 1654351204.799851}, "source.ethereum_models.flipside_gold_ethereum.token_prices_hourly": {"fqn": ["ethereum_models", "flipside_gold_ethereum", "token_prices_hourly"], "database": "flipside_prod_db", "schema": "ethereum", "unique_id": "source.ethereum_models.flipside_gold_ethereum.token_prices_hourly", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "token_prices_hourly", "source_name": "flipside_gold_ethereum", "source_description": "", "loader": "", "identifier": "token_prices_hourly", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.ethereum.token_prices_hourly", "created_at": 1654351204.799964}, "source.ethereum_models.flipside_gold_ethereum.dex_liquidity_pools": {"fqn": ["ethereum_models", "flipside_gold_ethereum", "dex_liquidity_pools"], "database": "flipside_prod_db", "schema": "ethereum", "unique_id": "source.ethereum_models.flipside_gold_ethereum.dex_liquidity_pools", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "dex_liquidity_pools", "source_name": "flipside_gold_ethereum", "source_description": "", "loader": "", "identifier": "dex_liquidity_pools", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.ethereum.dex_liquidity_pools", "created_at": 1654351204.800102}, "source.ethereum_models.flipside_gold_ethereum.nft_metadata": {"fqn": ["ethereum_models", "flipside_gold_ethereum", "nft_metadata"], "database": "flipside_prod_db", "schema": "ethereum", "unique_id": "source.ethereum_models.flipside_gold_ethereum.nft_metadata", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "nft_metadata", "source_name": "flipside_gold_ethereum", "source_description": "", "loader": "", "identifier": "nft_metadata", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.ethereum.nft_metadata", "created_at": 1654351204.800299}, "source.ethereum_models.flipside_silver_ethereum.contracts": {"fqn": ["ethereum_models", "flipside_silver_ethereum", "contracts"], "database": "flipside_prod_db", "schema": "silver_ethereum", "unique_id": "source.ethereum_models.flipside_silver_ethereum.contracts", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "contracts", "source_name": "flipside_silver_ethereum", "source_description": "", "loader": "", "identifier": "contracts", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.silver_ethereum.contracts", "created_at": 1654351204.800404}, "source.ethereum_models.flipside_silver_ethereum.reads": {"fqn": ["ethereum_models", "flipside_silver_ethereum", "reads"], "database": "flipside_prod_db", "schema": "silver_ethereum", "unique_id": "source.ethereum_models.flipside_silver_ethereum.reads", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "reads", "source_name": "flipside_silver_ethereum", "source_description": "", "loader": "", "identifier": "reads", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.silver_ethereum.reads", "created_at": 1654351204.80053}, "source.ethereum_models.flipside_silver.ethereum_contracts_backfill": {"fqn": ["ethereum_models", "flipside_silver", "ethereum_contracts_backfill"], "database": "flipside_prod_db", "schema": "silver", "unique_id": "source.ethereum_models.flipside_silver.ethereum_contracts_backfill", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "ethereum_contracts_backfill", "source_name": "flipside_silver", "source_description": "", "loader": "", "identifier": "ethereum_contracts_backfill", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.silver.ethereum_contracts_backfill", "created_at": 1654351204.8006778}, "source.ethereum_models.flipside_silver.ethereum_contracts": {"fqn": ["ethereum_models", "flipside_silver", "ethereum_contracts"], "database": "flipside_prod_db", "schema": "silver", "unique_id": "source.ethereum_models.flipside_silver.ethereum_contracts", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "ethereum_contracts", "source_name": "flipside_silver", "source_description": "", "loader": "", "identifier": "ethereum_contracts", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.silver.ethereum_contracts", "created_at": 1654351204.800777}, "source.ethereum_models.bronze.prod_ethereum_sink_407559501": {"fqn": ["ethereum_models", "bronze", "prod_ethereum_sink_407559501"], "database": "flipside_prod_db", "schema": "bronze", "unique_id": "source.ethereum_models.bronze.prod_ethereum_sink_407559501", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "prod_ethereum_sink_407559501", "source_name": "bronze", "source_description": "", "loader": "", "identifier": "prod_ethereum_sink_407559501", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "flipside_prod_db.bronze.prod_ethereum_sink_407559501", "created_at": 1654351204.8009331}, "source.ethereum_models.ethereum_silver.token_meta_backup": {"fqn": ["ethereum_models", "ethereum_silver", "token_meta_backup"], "database": "ethereum", "schema": "silver", "unique_id": "source.ethereum_models.ethereum_silver.token_meta_backup", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "token_meta_backup", "source_name": "ethereum_silver", "source_description": "", "loader": "", "identifier": "token_meta_backup", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum.silver.token_meta_backup", "created_at": 1654351204.80107}, "source.ethereum_models.ethereum_silver.signatures_backfill": {"fqn": ["ethereum_models", "ethereum_silver", "signatures_backfill"], "database": "ethereum", "schema": "silver", "unique_id": "source.ethereum_models.ethereum_silver.signatures_backfill", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "signatures_backfill", "source_name": "ethereum_silver", "source_description": "", "loader": "", "identifier": "signatures_backfill", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum.silver.signatures_backfill", "created_at": 1654351204.801169}, "source.ethereum_models.ethereum_silver.event_signatures_backfill": {"fqn": ["ethereum_models", "ethereum_silver", "event_signatures_backfill"], "database": "ethereum", "schema": "silver", "unique_id": "source.ethereum_models.ethereum_silver.event_signatures_backfill", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "event_signatures_backfill", "source_name": "ethereum_silver", "source_description": "", "loader": "", "identifier": "event_signatures_backfill", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ethereum.silver.event_signatures_backfill", "created_at": 1654351204.801259}, "source.ethereum_models.ethereum_share.token_prices_hourly": {"fqn": ["ethereum_models", "ethereum_share", "token_prices_hourly"], "database": "ETHEREUM_DEV", "schema": "silver", "unique_id": "source.ethereum_models.ethereum_share.token_prices_hourly", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "token_prices_hourly", "source_name": "ethereum_share", "source_description": "", "loader": "", "identifier": "token_prices_hourly", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ETHEREUM_DEV.silver.token_prices_hourly", "created_at": 1654351204.801374}, "source.ethereum_models.ethereum_share.dex_liquidity_pools": {"fqn": ["ethereum_models", "ethereum_share", "dex_liquidity_pools"], "database": "ETHEREUM_DEV", "schema": "silver", "unique_id": "source.ethereum_models.ethereum_share.dex_liquidity_pools", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "dex_liquidity_pools", "source_name": "ethereum_share", "source_description": "", "loader": "", "identifier": "dex_liquidity_pools", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ETHEREUM_DEV.silver.dex_liquidity_pools", "created_at": 1654351204.8014688}, "source.ethereum_models.ethereum_share.labels": {"fqn": ["ethereum_models", "ethereum_share", "labels"], "database": "ETHEREUM_DEV", "schema": "silver", "unique_id": "source.ethereum_models.ethereum_share.labels", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "labels", "source_name": "ethereum_share", "source_description": "", "loader": "", "identifier": "labels", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ETHEREUM_DEV.silver.labels", "created_at": 1654351204.8015602}, "source.ethereum_models.ethereum_external.nft_metadata_api": {"fqn": ["ethereum_models", "ethereum_external", "nft_metadata_api"], "database": "ETHEREUM_DEV", "schema": "silver", "unique_id": "source.ethereum_models.ethereum_external.nft_metadata_api", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "nft_metadata_api", "source_name": "ethereum_external", "source_description": "", "loader": "S3", "identifier": "nft_metadata_api", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "@ethereum.bronze.analytics_external_tables/ETHEREUM_DEV/NFT_METADATA_API", "file_format": "( type = json, strip_outer_array = TRUE )", "row_format": null, "tbl_properties": null, "partitions": null, "auto_refresh": true}, "description": "External table of NFT metadata files", "columns": {"system_created_at": {"name": "system_created_at", "description": "timestamp for when the record was loaded by api", "meta": {}, "data_type": "timestamp_ntz", "quote": null, "tags": [], "expression": "value:system_created_at::string::timestamp_ntz"}, "blockchain": {"name": "blockchain", "description": "name of blockchain a nft collection was created on. Will always be ethereum in this project", "meta": {}, "data_type": "string", "quote": null, "tags": [], "expression": "value:blockchain::string"}, "commission_rate": {"name": "commission_rate", "description": "commission rate for minting nft", "meta": {}, "data_type": "float", "quote": null, "tags": [], "expression": "value:commission_rate::float"}, "contract_address": {"name": "contract_address", "description": "address of nft collection", "meta": {}, "data_type": "string", "quote": null, "tags": [], "expression": "value:contract_address::string"}, "contract_name": {"name": "contract_name", "description": "name of nft collection", "meta": {}, "data_type": "string", "quote": null, "tags": [], "expression": "value:contract_name::string"}, "created_at_block_id": {"name": "created_at_block_id", "description": "block from which a specific nft was created", "meta": {}, "data_type": "number", "quote": null, "tags": [], "expression": "value:created_at_block_id::number"}, "created_at_timestamp": {"name": "created_at_timestamp", "description": "timestamp of nft mint", "meta": {}, "data_type": "timestamp_ntz", "quote": null, "tags": [], "expression": "value:created_at_timestamp::string::timestamp_ntz"}, "created_at_tx_id": {"name": "created_at_tx_id", "description": "transaction hash where nft was minted", "meta": {}, "data_type": "string", "quote": null, "tags": [], "expression": "value:created_at_tx_id::string"}, "creator_address": {"name": "creator_address", "description": "address of creator", "meta": {}, "data_type": "string", "quote": null, "tags": [], "expression": "value:creator_address::string"}, "creator_name": {"name": "creator_name", "description": "creator name", "meta": {}, "data_type": "string", "quote": null, "tags": [], "expression": "value:creator_name::string"}, "image_url": {"name": "image_url", "description": "cached url of nft image", "meta": {}, "data_type": "string", "quote": null, "tags": [], "expression": "value:image_url::string"}, "project_name": {"name": "project_name", "description": "project name", "meta": {}, "data_type": "string", "quote": null, "tags": [], "expression": "value:project_name::string"}, "token_id": {"name": "token_id", "description": "token id of the nft", "meta": {}, "data_type": "string", "quote": null, "tags": [], "expression": "value:token_id::string"}, "token_metadata": {"name": "token_metadata", "description": "attributes of the nft", "meta": {}, "data_type": "object", "quote": null, "tags": [], "expression": "value:token_metadata::object"}, "token_metadata_uri": {"name": "token_metadata_uri", "description": "link to raw nft metadata file", "meta": {}, "data_type": "string", "quote": null, "tags": [], "expression": "value:token_metadata_uri::string"}, "token_name": {"name": "token_name", "description": "name of the nft", "meta": {}, "data_type": "string", "quote": null, "tags": [], "expression": "value:token_name::string"}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ETHEREUM_DEV.silver.nft_metadata_api", "created_at": 1654351204.801694}, "source.ethereum_models.sushi_external.sushi_rewards_schedule": {"fqn": ["ethereum_models", "sushi_external", "sushi_rewards_schedule"], "database": "ETHEREUM_DEV", "schema": "silver", "unique_id": "source.ethereum_models.sushi_external.sushi_rewards_schedule", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "models/sources.yml", "original_file_path": "models/sources.yml", "name": "sushi_rewards_schedule", "source_name": "sushi_external", "source_description": "", "loader": "S3", "identifier": "sushi_rewards_schedule", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": {"location": "@ethereum.bronze.analytics_external_tables/ETHEREUM_DEV/SUSHI_REWARDS_SCHEDULE", "file_format": "( type = json )", "row_format": null, "tbl_properties": null, "partitions": null, "auto_refresh": true}, "description": "External table of sushi rewards schedule", "columns": {"merkle_root": {"name": "merkle_root", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [], "expression": "value:merkle_root::string"}, "token_total": {"name": "token_total", "description": "", "meta": {}, "data_type": "string", "quote": null, "tags": [], "expression": "value:token_total::string"}, "claims": {"name": "claims", "description": "", "meta": {}, "data_type": "variant", "quote": null, "tags": [], "expression": "value:claims::variant"}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "ETHEREUM_DEV.silver.sushi_rewards_schedule", "created_at": 1654351204.8017962}}, "macros": {"macro.ethereum_models.grant_data_share_statement": {"unique_id": "macro.ethereum_models.grant_data_share_statement", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "macros/grant_data_share_statement.sql", "original_file_path": "macros/grant_data_share_statement.sql", "name": "grant_data_share_statement", "macro_sql": "{% macro grant_data_share_statement(table_name, resource_type) %}\n  {% if target.database == 'ETHEREUM' %}\n    GRANT SELECT ON {{ resource_type }} ETHEREUM.CORE.{{ table_name }} TO SHARE \"FLIPSIDE_ETHEREUM\";\n  {% else %}\n    select 1; -- hooks will error if they don't have valid SQL in them, this handles that!\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.3484359}, "macro.ethereum_models.create_sps": {"unique_id": "macro.ethereum_models.create_sps", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "macros/create_sps.sql", "original_file_path": "macros/create_sps.sql", "name": "create_sps", "macro_sql": "{% macro create_sps() %}\n    {% if target.database == 'ETHEREUM' %}\n        CREATE SCHEMA IF NOT EXISTS _internal;\n        {{ sp_create_prod_clone('_internal') }};\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.ethereum_models.sp_create_prod_clone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.349461}, "macro.ethereum_models.generate_schema_name": {"unique_id": "macro.ethereum_models.generate_schema_name", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name[0] | trim }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.350548}, "macro.ethereum_models.generate_alias_name": {"unique_id": "macro.ethereum_models.generate_alias_name", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "macros/custom_naming_macros.sql", "original_file_path": "macros/custom_naming_macros.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% set node_name = node.name %}\n    {% set split_name = node_name.split('__') %}\n    {{ split_name[1] | trim }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.3511198}, "macro.ethereum_models.create_js_hex_to_int": {"unique_id": "macro.ethereum_models.create_js_hex_to_int", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "macros/js_hextoint.sql", "original_file_path": "macros/js_hextoint.sql", "name": "create_js_hex_to_int", "macro_sql": "{% macro create_js_hex_to_int() %}\n    CREATE\n    OR REPLACE FUNCTION {{ target.schema }}.js_hex_to_int (\n        s STRING\n    ) returns DOUBLE LANGUAGE javascript AS 'if (S !== null) { yourNumber = parseInt(S, 16); } return yourNumber'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.351628}, "macro.ethereum_models.run_sp_create_prod_clone": {"unique_id": "macro.ethereum_models.run_sp_create_prod_clone", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "macros/run_sp_create_prod_clone.sql", "original_file_path": "macros/run_sp_create_prod_clone.sql", "name": "run_sp_create_prod_clone", "macro_sql": "{% macro run_sp_create_prod_clone() %}\n{% set clone_query %}\ncall ethereum._internal.create_prod_clone('ethereum', 'ethereum_dev', 'internal_dev');\n{% endset %}\n\n{% do run_query(clone_query) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.352242}, "macro.ethereum_models.create_udfs": {"unique_id": "macro.ethereum_models.create_udfs", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "macros/create_udfs.sql", "original_file_path": "macros/create_udfs.sql", "name": "create_udfs", "macro_sql": "{% macro create_udfs() %}\n    {% set sql %}\n    CREATE schema if NOT EXISTS silver;\n{{ create_js_hex_to_int() }};\n{{ create_udf_load_nft_metadata() }};\n{{ create_udf_hex_to_int(\n        schema = \"public\"\n    ) }}\n\n    {% endset %}\n    {% do run_query(sql) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.ethereum_models.create_js_hex_to_int", "macro.ethereum_models.create_udf_load_nft_metadata", "macro.ethereum_models.create_udf_hex_to_int", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.353266}, "macro.ethereum_models.create_udf_load_nft_metadata": {"unique_id": "macro.ethereum_models.create_udf_load_nft_metadata", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "macros/udf_load_nft_metadata.sql", "original_file_path": "macros/udf_load_nft_metadata.sql", "name": "create_udf_load_nft_metadata", "macro_sql": "{% macro create_udf_load_nft_metadata() %}\n    CREATE\n    OR REPLACE EXTERNAL FUNCTION silver.udf_load_nft_metadata() returns text api_integration = aws_nft_metadata_api_dev AS {% if target.name == \"prod\" -%}\n        'https://6gh4ncj0ig.execute-api.us-east-1.amazonaws.com/prod/bulk_load_nft_metadata/ethereum'\n    {% else %}\n        'https://rtcsra1z35.execute-api.us-east-1.amazonaws.com/dev/bulk_load_nft_metadata/ethereum'\n    {%- endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.354402}, "macro.ethereum_models.sp_create_prod_clone": {"unique_id": "macro.ethereum_models.sp_create_prod_clone", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "macros/sp_create_prod_clone.sql", "original_file_path": "macros/sp_create_prod_clone.sql", "name": "sp_create_prod_clone", "macro_sql": "{% macro sp_create_prod_clone(target_schema) -%}\n\ncreate or replace procedure {{ target_schema }}.create_prod_clone(source_db_name string, destination_db_name string, role_name string)\nreturns boolean \nlanguage javascript\nexecute as caller\nas\n$$\n    snowflake.execute({sqlText: `BEGIN TRANSACTION;`});\n    try {\n        snowflake.execute({sqlText: `DROP DATABASE IF EXISTS ${DESTINATION_DB_NAME}`});\n        snowflake.execute({sqlText: `CREATE DATABASE ${DESTINATION_DB_NAME} CLONE ${SOURCE_DB_NAME}`});\n        snowflake.execute({sqlText: `DROP SCHEMA ${DESTINATION_DB_NAME}._INTERNAL`}); /* this only needs to be in prod */\n\n        var existing_schemas = snowflake.execute({sqlText: `SELECT table_schema\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.TABLE_PRIVILEGES\n            WHERE grantor IS NOT NULL\n            GROUP BY 1;`});\n\n        while (existing_schemas.next()) {\n            var schema = existing_schemas.getColumnValue(1)\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON SCHEMA ${DESTINATION_DB_NAME}.${schema} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\n        }\n\n        var existing_tables = snowflake.execute({sqlText: `SELECT table_schema, table_name\n            FROM ${DESTINATION_DB_NAME}.INFORMATION_SCHEMA.TABLE_PRIVILEGES\n            WHERE grantor IS NOT NULL\n            GROUP BY 1,2;`});\n\n        while (existing_tables.next()) {\n            var schema = existing_tables.getColumnValue(1)\n            var table_name = existing_tables.getColumnValue(2)\n            snowflake.execute({sqlText: `GRANT OWNERSHIP ON TABLE ${DESTINATION_DB_NAME}.${schema}.${table_name} TO ROLE ${ROLE_NAME} COPY CURRENT GRANTS;`});\n        }\n\n        snowflake.execute({sqlText: `GRANT OWNERSHIP ON DATABASE ${DESTINATION_DB_NAME} TO ROLE ${ROLE_NAME};`})\n        snowflake.execute({sqlText: `COMMIT;`});\n    } catch (err) {\n        snowflake.execute({sqlText: `ROLLBACK;`});\n        throw(err);\n    }\n    \n    return true\n$$\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.356758}, "macro.ethereum_models.sp_create_load_nft_metadata": {"unique_id": "macro.ethereum_models.sp_create_load_nft_metadata", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "macros/sp_create_load_nft_metadata.sql", "original_file_path": "macros/sp_create_load_nft_metadata.sql", "name": "sp_create_load_nft_metadata", "macro_sql": "{% macro sp_create_load_nft_metadata() %}\n{% set sql %}\nCREATE OR REPLACE PROCEDURE silver.sp_run_load_nft_metadata() \nRETURNS variant \nLANGUAGE SQL \nAS \n$$\n  DECLARE\n    RESULT VARCHAR;\n    row_cnt INTEGER;\n  BEGIN\n    row_cnt:= (\n      SELECT\n        COUNT(1)\n      FROM\n        silver.nft_metadata_api_requests\n    );\n    if (\n        row_cnt > 0\n      ) THEN RESULT:= (\n        SELECT\n          silver.udf_load_nft_metadata()\n      );\n      ELSE RESULT:= NULL;\n    END if;\n    RETURN RESULT;\n  END;\n$${% endset %}\n{% do run_query(sql) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.3578508}, "macro.ethereum_models.sp_create_cross_db_share_clones": {"unique_id": "macro.ethereum_models.sp_create_cross_db_share_clones", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "macros/sp_create_cross_db_share_clones.sql", "original_file_path": "macros/sp_create_cross_db_share_clones.sql", "name": "sp_create_cross_db_share_clones", "macro_sql": "{% macro sp_create_cross_db_share_clones() %}\n  {% set sql %}\n  CREATE\n  OR REPLACE PROCEDURE silver.sp_create_cross_db_share_clones() returns variant LANGUAGE SQL AS $$\nBEGIN\n    create or replace transient table silver.token_prices_hourly clone flipside_prod_db.ethereum.token_prices_hourly;\n    create or replace transient table silver.dex_liquidity_pools clone flipside_prod_db.ethereum.dex_liquidity_pools;\n    create or replace transient table silver.labels clone flipside_prod_db.silver_crosschain.address_labels;\nEND;$$ {% endset %}\n{% do run_query(sql) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.3588889}, "macro.ethereum_models.create_udf_hex_to_int": {"unique_id": "macro.ethereum_models.create_udf_hex_to_int", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "macros/python/udfs.sql", "original_file_path": "macros/python/udfs.sql", "name": "create_udf_hex_to_int", "macro_sql": "{% macro create_udf_hex_to_int(schema) %}\ncreate or replace function {{ schema }}.udf_hex_to_int(hex string)\nreturns string\nlanguage python\nruntime_version = '3.8'\nhandler = 'hex_to_int'\nas\n$$\ndef hex_to_int(hex) -> str:\n  \"\"\"\n  Converts hex (of any size) to int (as a string). Snowflake and java script can only handle up to 64-bit (38 digits of precision)\n\n  select hex_to_int('200000000000000000000000000000211');\n  >> 680564733841876926926749214863536423441\n  select hex_to_int('0x200000000000000000000000000000211');\n  >> 680564733841876926926749214863536423441\n  \"\"\"\n  return str(int(hex, 16))\n$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.35988}, "macro.ethereum_models.tx_gaps": {"unique_id": "macro.ethereum_models.tx_gaps", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "macros/tests/tx_gaps.sql", "original_file_path": "macros/tests/tx_gaps.sql", "name": "tx_gaps", "macro_sql": "{% macro tx_gaps(\n        model\n    ) %}\n    WITH block_base AS (\n        SELECT\n            block_number,\n            tx_count\n        FROM\n            {{ ref('silver__blocks') }}\n    ),\n    model_name AS (\n        SELECT\n            block_number,\n            COUNT(\n                DISTINCT tx_hash\n            ) AS model_tx_count\n        FROM\n            {{ model }}\n        GROUP BY\n            block_number\n    )\nSELECT\n    block_base.block_number,\n    tx_count,\n    model_name.block_number,\n    model_tx_count\nFROM\n    block_base\n    LEFT JOIN model_name\n    ON block_base.block_number = model_name.block_number\nWHERE\n    tx_count <> model_tx_count\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.360867}, "macro.ethereum_models.test_sequence_gaps": {"unique_id": "macro.ethereum_models.test_sequence_gaps", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "macros/tests/sequence_gaps.sql", "original_file_path": "macros/tests/sequence_gaps.sql", "name": "test_sequence_gaps", "macro_sql": "{% test sequence_gaps(\n    model,\n    partition_by,\n    column_name\n) %}\n{%- set partition_sql = partition_by | join(\", \") -%}\n{%- set previous_column = \"prev_\" ~ column_name -%}\nWITH source AS (\n    SELECT\n        {{ partition_sql + \",\" if partition_sql }}\n        {{ column_name }},\n        LAG(\n            {{ column_name }},\n            1\n        ) over (\n            {{ \"PARTITION BY \" ~ partition_sql if partition_sql }}\n            ORDER BY\n                {{ column_name }} ASC\n        ) AS {{ previous_column }}\n    FROM\n        {{ model }}\n)\nSELECT\n    {{ partition_sql + \",\" if partition_sql }}\n    {{ previous_column }},\n    {{ column_name }},\n    {{ column_name }} - {{ previous_column }}\n    - 1 AS gap\nFROM\n    source\nWHERE\n    {{ column_name }} - {{ previous_column }} <> 1\nORDER BY\n    gap DESC {% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.36319}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.365578}, "macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, sql) -%}\n  {%- set transient = config.get('transient', default=true) -%}\n  {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n  {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n  {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n    {%- set cluster_by_keys = [cluster_by_keys] -%}\n  {%- endif -%}\n  {%- if cluster_by_keys is not none -%}\n    {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n  {% else %}\n    {%- set cluster_by_string = none -%}\n  {%- endif -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n      create or replace {% if temporary -%}\n        temporary\n      {%- elif transient -%}\n        transient\n      {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n      (\n        {%- if cluster_by_string is not none -%}\n          select * from(\n            {{ sql }}\n            ) order by ({{ cluster_by_string }})\n        {%- else -%}\n          {{ sql }}\n        {%- endif %}\n      );\n    {% if cluster_by_string is not none and not temporary -%}\n      alter table {{relation}} cluster by ({{cluster_by_string}});\n    {%- endif -%}\n    {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n      alter table {{relation}} resume recluster;\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.38609}, "macro.dbt_snowflake.get_column_comment_sql": {"unique_id": "macro.dbt_snowflake.get_column_comment_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) %}\n  {{ adapter.quote(column_name) if column_dict[column_name]['quote'] else column_name }} COMMENT $${{ column_dict[column_name]['description'] | replace('$', '[$]') }}$$\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.3871381}, "macro.dbt_snowflake.get_persist_docs_column_list": {"unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {% if (column_name|upper in model_columns) or (column_name in model_columns) %}\n      {{ get_column_comment_sql(column_name, model_columns) }}\n    {% else %}\n      {{column_name}}\n    {% endif %}\n    {{ \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.38866}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }} \n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n    \n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.391273}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.39402}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.395457}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.397009}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.3981628}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.398358}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n    {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.398714}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.3990479}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.399484}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.399988}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.400414}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in column_dict if (column_name in existing_columns) or (column_name|upper in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{ ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.4014862}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.401841}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.40323}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.404667}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns %}\n    \n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n  \n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n    \n    {% do run_query(sql) %}\n    \n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.4079318}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE \n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n  \n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.4087129}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.409479}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n    \n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.412274}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.4130392}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/merge.sql", "original_file_path": "macros/materializations/merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.413794}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.418564}, "macro.dbt_snowflake.materialization_seed_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.4191968}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.420736}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake' %}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  --build model\n  {% call statement('main') -%}\n    {{ create_table_as(false, target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.424789}, "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_snowflake_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'delete+insert'\n  {%- endset %}\n  {% if strategy not in ['merge', 'delete+insert'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.428375}, "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_snowflake_get_incremental_sql", "macro_sql": "{% macro dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  {% if strategy == 'merge' %}\n    {% do return(get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% elif strategy == 'delete+insert' %}\n    {% do return(get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns)) %}\n  {% else %}\n    {% do exceptions.raise_compiler_error('invalid strategy: ' ~ strategy) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql", "macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.430264}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake' -%}\n   \n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_snowflake_validate_get_incremental_strategy(config) -%}\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif full_refresh_mode %}\n    {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = dbt_snowflake_get_incremental_sql(strategy, tmp_relation, target_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {%- endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_snowflake.dbt_snowflake_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt_snowflake.dbt_snowflake_get_incremental_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.4354901}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "package_name": "dbt_snowflake", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/snowflake", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.43662}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.4400299}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.440843}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.441243}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.441677}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.442125}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.443459}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.444175}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.44481}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.446372}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.447077}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.45428}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.45487}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.4564722}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.4569778}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.457247}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.504249}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.5046961}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.505358}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.50853}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.5131469}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.518966}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.519823}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.5202491}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.52062}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.52108}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.523606}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.524127}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.525075}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.5260758}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.539288}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.5455549}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.547442}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.548502}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.549772}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.55059}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    \n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.552257}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n   \n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n  \n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.553466}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n  \n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }} \n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.555407}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.5616488}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.564766}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.565533}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.566591}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.567143}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.5685818}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.570354}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                  schema=schema,\n                                                                  database=database) %}                                               \n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.5837362}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n   \n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n     \n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n     \n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n   \n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.592638}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n  \n  {% set schema_changed = False %}\n  \n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n  \n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.5954409}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  \n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n  \n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n  \n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %} \n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n  \n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(schema_change_message) %}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.5984828}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n    \n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n    \n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n      \n      {% if schema_changes_dict['schema_changed'] %}\n    \n        {% if on_schema_change == 'fail' %}\n        \n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways: \n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n          \n          {% do exceptions.raise_compiler_error(fail_msg) %}\n        \n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n          \n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n        \n        {% endif %}\n      \n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.600518}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.6086268}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.609791}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.610237}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.610859}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  \n  {{ sql_header if sql_header is not none }}\n  \n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.612211}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.621238}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.6228118}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.623457}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.626358}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.6273909}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.627902}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.628327}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.629128}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.635196}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.6425989}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.644675}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.645383}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.646637}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.646967}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.6472151}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.647707}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.6479511}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.649118}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.649627}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.652205}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.653322}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.65408}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.655693}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.6570292}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.6577861}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.6590421}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.6595929}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.660505}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.6610491}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.661723}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.6635149}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.666003}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.6672268}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.667816}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.6713548}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.674952}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.676515}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.677001}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.678087}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.6785018}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.679022}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.679622}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.680963}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.6814048}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.681741}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.682713}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.685781}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.686452}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.686882}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.687501}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.6878889}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.688619}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.689315}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.690007}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.690814}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.692379}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.692863}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.693279}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.6944451}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.694759}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.6952698}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.696496}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.6982331}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.698606}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.6992}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.699578}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.700117}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.701248}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.704313}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.7052548}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.70607}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.706711}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.70732}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.7079282}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.708616}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.7094378}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.709835}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.710164}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.7137852}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.7141361}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.7148008}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.715364}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.71612}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.716597}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.717837}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.718362}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n       \n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n            \n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n  \n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.7199879}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.72225}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.723213}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.723876}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.7246249}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.725461}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.725632}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.7257862}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.72659}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.726924}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.7276711}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.728409}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.730365}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.730535}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.730817}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.731008}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.731165}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.7316391}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.7318988}, "macro.dbt_utils.postgres__type_timestamp": {"unique_id": "macro.dbt_utils.postgres__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() %}\n    timestamp without time zone\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.732054}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.7322}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.7325492}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.732718}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.733011}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.733377}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.73353}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.7336771}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.7339892}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.734287}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.734455}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.734895}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.7350478}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.735191}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.736502}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.7376719}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.7379231}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.738391}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.740632}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.74108}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.74159}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.741947}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.74236}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.7431412}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.7433012}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.743448}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.744589}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.744892}, "macro.dbt_utils.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_utils.snowflake__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.7452302}, "macro.dbt_utils.bigquery__escape_single_quotes": {"unique_id": "macro.dbt_utils.bigquery__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.745547}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.7471051}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.7473931}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.7477171}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.7481768}, "macro.dbt_utils.listagg": {"unique_id": "macro.dbt_utils.listagg", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.75197}, "macro.dbt_utils.default__listagg": {"unique_id": "macro.dbt_utils.default__listagg", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.752883}, "macro.dbt_utils.bigquery__listagg": {"unique_id": "macro.dbt_utils.bigquery__listagg", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.7535691}, "macro.dbt_utils.postgres__listagg": {"unique_id": "macro.dbt_utils.postgres__listagg", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    \n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.755003}, "macro.dbt_utils.redshift__listagg": {"unique_id": "macro.dbt_utils.redshift__listagg", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "redshift__listagg", "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    {% set ns = namespace() %}\n    {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\n    {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %}  \n    {%- for char in special_chars.split(',') -%}\n        {% set escape_char %}\\\\{{ char }}{% endset %}\n        {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\n    {%- endfor -%}\n\n    {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\n    regexp_substr(\n        listagg(\n            {{ measure }},\n            {{ delimiter_text }}\n            )\n            {% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n        ,{{ regex }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.757695}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.762662}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.763335}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.763756}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.767887}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.768425}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.769403}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.769693}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.7699509}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.770349}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.7714088}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.772077}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.7725859}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.773858}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.774244}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.774528}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.775713}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.7759528}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.776164}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.776928}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    \n    any_value({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.7771468}, "macro.dbt_utils.postgres__any_value": {"unique_id": "macro.dbt_utils.postgres__any_value", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n    {#- /*Postgres doesn't support any_value, so we're using min() to get the same result*/ -#}\n    min({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.777364}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.778325}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.778783}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.779228}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.780432}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.780704}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.782209}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.782458}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.782609}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.7827551}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.783068}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.783285}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.783568}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.783812}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.78409}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.786607}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.7880058}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.7892952}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.7900531}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.791421}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    \n    bool_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.79181}, "macro.dbt_utils.snowflake__bool_or": {"unique_id": "macro.dbt_utils.snowflake__bool_or", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n    \n    boolor_agg({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.792053}, "macro.dbt_utils.bigquery__bool_or": {"unique_id": "macro.dbt_utils.bigquery__bool_or", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n    \n    logical_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.792267}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.793534}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.794396}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.794718}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.795734}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.796309}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.7993941}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.7997491}, "macro.dbt_utils._split_part_negative": {"unique_id": "macro.dbt_utils._split_part_negative", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.800205}, "macro.dbt_utils.postgres__split_part": {"unique_id": "macro.dbt_utils.postgres__split_part", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.80108}, "macro.dbt_utils.redshift__split_part": {"unique_id": "macro.dbt_utils.redshift__split_part", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "redshift__split_part", "macro_sql": "{% macro redshift__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.801839}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.802748}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.804055}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.8043678}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.80498}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.8083441}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.818505}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.819647}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.8203242}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.821694}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.833942}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.835095}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.836025}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.837107}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.838872}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.8404648}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.841302}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.842438}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.842884}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.843745}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.844446}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.846171}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.846996}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.847937}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.848661}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.8495638}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.84992}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.85119}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.852264}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.853374}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.854423}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.856231}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.856881}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.8579578}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.858455}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.859766}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.861242}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.862607}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.86354}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.864692}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.865355}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.866488}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.8675258}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.8687801}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, previous_column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.870661}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.8720798}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.8728268}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.87468}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.876466}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.8820028}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.885228}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.8861172}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.886442}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.887352}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.888097}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.8892832}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.889809}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.891528}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.8929448}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.894167}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.894628}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.8955011}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.896668}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.89792}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.89953}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.901221}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.902751}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.903647}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.9042501}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.905678}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.907721}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.9094558}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.910481}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.9111092}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.912521}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {% endif %}\n\n    {%- for col in dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.914732}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.918278}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.923906}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.92859}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.9348328}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.935861}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.936692}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.941491}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.9419599}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.9423842}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.942764}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.943088}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.943418}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.944779}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.9468958}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.947809}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.948373}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.9491441}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.949824}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.952229}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.9527628}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.9546041}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.955696}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.958011}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.960993}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.963136}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.964826}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.9659011}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.967365}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.968277}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.9694452}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.970308}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.970479}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.970674}, "macro.dbt_utils.bigquery__get_table_types_sql": {"unique_id": "macro.dbt_utils.bigquery__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "bigquery__get_table_types_sql", "macro_sql": "{% macro bigquery__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as `table_type`\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.9708748}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.973527}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.9746199}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.976232}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.978498}, "macro.dbt_date.get_date_dimension": {"unique_id": "macro.dbt_date.get_date_dimension", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "get_date_dimension", "macro_sql": "{% macro get_date_dimension(start_date, end_date) %}\n    {{ adapter.dispatch('get_date_dimension', 'dbt_date') (start_date, end_date) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_date_dimension"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.991029}, "macro.dbt_date.default__get_date_dimension": {"unique_id": "macro.dbt_date.default__get_date_dimension", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "default__get_date_dimension", "macro_sql": "{% macro default__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=false) }} as day_of_week,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week_iso,\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'quarter') }} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351200.995714}, "macro.dbt_date.postgres__get_date_dimension": {"unique_id": "macro.dbt_date.postgres__get_date_dimension", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/get_date_dimension.sql", "original_file_path": "macros/get_date_dimension.sql", "name": "postgres__get_date_dimension", "macro_sql": "{% macro postgres__get_date_dimension(start_date, end_date) %}\nwith base_dates as (\n    {{ dbt_date.get_base_dates(start_date, end_date) }}\n),\ndates_with_prior_year_dates as (\n\n    select\n        cast(d.date_day as date) as date_day,\n        cast({{ dbt_utils.dateadd('year', -1 , 'd.date_day') }} as date) as prior_year_date_day,\n        cast({{ dbt_utils.dateadd('day', -364 , 'd.date_day') }} as date) as prior_year_over_year_date_day\n    from\n    \tbase_dates d\n\n)\nselect\n    d.date_day,\n    {{ dbt_date.yesterday('d.date_day') }} as prior_date_day,\n    {{ dbt_date.tomorrow('d.date_day') }} as next_date_day,\n    d.prior_year_date_day as prior_year_date_day,\n    d.prior_year_over_year_date_day,\n    {{ dbt_date.day_of_week('d.date_day', isoweek=true) }} as day_of_week,\n\n    {{ dbt_date.day_name('d.date_day', short=false) }} as day_of_week_name,\n    {{ dbt_date.day_name('d.date_day', short=true) }} as day_of_week_name_short,\n    {{ dbt_date.day_of_month('d.date_day') }} as day_of_month,\n    {{ dbt_date.day_of_year('d.date_day') }} as day_of_year,\n\n    {{ dbt_date.week_start('d.date_day') }} as week_start_date,\n    {{ dbt_date.week_end('d.date_day') }} as week_end_date,\n    {{ dbt_date.week_start('d.prior_year_over_year_date_day') }} as prior_year_week_start_date,\n    {{ dbt_date.week_end('d.prior_year_over_year_date_day') }} as prior_year_week_end_date,\n    {{ dbt_date.week_of_year('d.date_day') }} as week_of_year,\n\n    {{ dbt_date.iso_week_start('d.date_day') }} as iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.date_day') }} as iso_week_end_date,\n    {{ dbt_date.iso_week_start('d.prior_year_over_year_date_day') }} as prior_year_iso_week_start_date,\n    {{ dbt_date.iso_week_end('d.prior_year_over_year_date_day') }} as prior_year_iso_week_end_date,\n    {{ dbt_date.iso_week_of_year('d.date_day') }} as iso_week_of_year,\n\n    {{ dbt_date.week_of_year('d.prior_year_over_year_date_day') }} as prior_year_week_of_year,\n    {{ dbt_date.iso_week_of_year('d.prior_year_over_year_date_day') }} as prior_year_iso_week_of_year,\n\n    cast({{ dbt_date.date_part('month', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as month_of_year,\n    {{ dbt_date.month_name('d.date_day', short=false) }}  as month_name,\n    {{ dbt_date.month_name('d.date_day', short=true) }}  as month_name_short,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.date_day') }} as date) as month_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'month') }} as date) as month_end_date,\n\n    cast({{ dbt_utils.date_trunc('month', 'd.prior_year_date_day') }} as date) as prior_year_month_start_date,\n    cast({{ dbt_utils.last_day('d.prior_year_date_day', 'month') }} as date) as prior_year_month_end_date,\n\n    cast({{ dbt_date.date_part('quarter', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as quarter_of_year,\n    cast({{ dbt_utils.date_trunc('quarter', 'd.date_day') }} as date) as quarter_start_date,\n    {# dbt_utils.last_day does not support quarter because postgresql does not support quarter interval. #}\n    cast({{dbt_utils.dateadd('day', '-1', dbt_utils.dateadd('month', '3', dbt_utils.date_trunc('quarter', 'd.date_day')))}} as date) as quarter_end_date,\n\n    cast({{ dbt_date.date_part('year', 'd.date_day') }} as {{ dbt_utils.type_int() }}) as year_number,\n    cast({{ dbt_utils.date_trunc('year', 'd.date_day') }} as date) as year_start_date,\n    cast({{ dbt_utils.last_day('d.date_day', 'year') }} as date) as year_end_date\nfrom\n    dates_with_prior_year_dates d\norder by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_base_dates", "macro.dbt_utils.dateadd", "macro.dbt_date.yesterday", "macro.dbt_date.tomorrow", "macro.dbt_date.day_of_week", "macro.dbt_date.day_name", "macro.dbt_date.day_of_month", "macro.dbt_date.day_of_year", "macro.dbt_date.week_start", "macro.dbt_date.week_end", "macro.dbt_date.week_of_year", "macro.dbt_date.iso_week_start", "macro.dbt_date.iso_week_end", "macro.dbt_date.iso_week_of_year", "macro.dbt_date.date_part", "macro.dbt_utils.type_int", "macro.dbt_date.month_name", "macro.dbt_utils.date_trunc", "macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.00091}, "macro.dbt_date.get_base_dates": {"unique_id": "macro.dbt_date.get_base_dates", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "get_base_dates", "macro_sql": "{% macro get_base_dates(start_date=None, end_date=None, n_dateparts=None, datepart=\"day\") %}\n    {{ adapter.dispatch('get_base_dates', 'dbt_date') (start_date, end_date, n_dateparts, datepart) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_base_dates"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.002867}, "macro.dbt_date.default__get_base_dates": {"unique_id": "macro.dbt_date.default__get_base_dates", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "default__get_base_dates", "macro_sql": "{% macro default__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as \" ~ dbt_utils.type_timestamp() ~ \")\"  -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.004382}, "macro.dbt_date.bigquery__get_base_dates": {"unique_id": "macro.dbt_date.bigquery__get_base_dates", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/get_base_dates.sql", "original_file_path": "macros/get_base_dates.sql", "name": "bigquery__get_base_dates", "macro_sql": "{% macro bigquery__get_base_dates(start_date, end_date, n_dateparts, datepart) %}\n\n{%- if start_date and end_date -%}\n{%- set start_date=\"cast('\" ~ start_date ~ \"' as date )\" -%}\n{%- set end_date=\"cast('\" ~ end_date ~ \"' as date )\" -%}\n\n{%- elif n_dateparts and datepart -%}\n\n{%- set start_date = dbt_utils.dateadd(datepart, -1 * n_dateparts, dbt_date.today()) -%}\n{%- set end_date = dbt_date.tomorrow() -%}\n{%- endif -%}\n\nwith date_spine as\n(\n\n    {{ dbt_utils.date_spine(\n        datepart=datepart,\n        start_date=start_date,\n        end_date=end_date,\n       )\n    }}\n\n)\nselect\n    cast(d.date_{{ datepart }} as {{ dbt_utils.type_timestamp() }}) as date_{{ datepart }}\nfrom\n    date_spine d\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_date.today", "macro.dbt_date.tomorrow", "macro.dbt_utils.date_spine", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.005963}, "macro.dbt_date.get_fiscal_year_dates": {"unique_id": "macro.dbt_date.get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "get_fiscal_year_dates", "macro_sql": "{% macro get_fiscal_year_dates(dates, year_end_month=12, week_start_day=1, shift_year=1) %}\n{{ adapter.dispatch('get_fiscal_year_dates', 'dbt_date') (dates, year_end_month, week_start_day, shift_year) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__get_fiscal_year_dates"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.008578}, "macro.dbt_date.default__get_fiscal_year_dates": {"unique_id": "macro.dbt_date.default__get_fiscal_year_dates", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_year_dates.sql", "original_file_path": "macros/fiscal_date/get_fiscal_year_dates.sql", "name": "default__get_fiscal_year_dates", "macro_sql": "{% macro default__get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) %}\n-- this gets all the dates within a fiscal year\n-- determined by the given year-end-month\n-- ending on the saturday closest to that month's end date\nwith date_dimension as (\n    select * from {{ dates }}\n),\nyear_month_end as (\n\n    select\n       d.year_number - {{ shift_year }} as fiscal_year_number,\n       d.month_end_date\n    from\n        date_dimension d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by 1,2\n\n),\nweeks as (\n\n    select\n        d.year_number,\n        d.month_of_year,\n        d.date_day as week_start_date,\n        cast({{ dbt_utils.dateadd('day', 6, 'd.date_day') }} as date) as week_end_date\n    from\n        date_dimension d\n    where\n        d.day_of_week = {{ week_start_day }}\n\n),\n-- get all the weeks that start in the month the year ends\nyear_week_ends as (\n\n    select\n        d.year_number - {{ shift_year }} as fiscal_year_number,\n        d.week_end_date\n    from\n        weeks d\n    where\n        d.month_of_year = {{ year_end_month }}\n    group by\n        1,2\n\n),\n-- then calculate which Saturday is closest to month end\nweeks_at_month_end as (\n\n    select\n        d.fiscal_year_number,\n        d.week_end_date,\n        m.month_end_date,\n        rank() over\n            (partition by d.fiscal_year_number\n                order by\n                abs({{ dbt_utils.datediff('d.week_end_date', 'm.month_end_date', 'day') }})\n\n            ) as closest_to_month_end\n    from\n        year_week_ends d\n        join\n        year_month_end m on d.fiscal_year_number = m.fiscal_year_number\n),\nfiscal_year_range as (\n\n    select\n        w.fiscal_year_number,\n        cast(\n            {{ dbt_utils.dateadd('day', 1,\n            'lag(w.week_end_date) over(order by w.week_end_date)') }}\n            as date) as fiscal_year_start_date,\n        w.week_end_date as fiscal_year_end_date\n    from\n        weeks_at_month_end w\n    where\n        w.closest_to_month_end = 1\n\n),\nfiscal_year_dates as (\n\n    select\n        d.date_day,\n        m.fiscal_year_number,\n        m.fiscal_year_start_date,\n        m.fiscal_year_end_date,\n        w.week_start_date,\n        w.week_end_date,\n        -- we reset the weeks of the year starting with the merch year start date\n        dense_rank()\n            over(\n                partition by m.fiscal_year_number\n                order by w.week_start_date\n                ) as fiscal_week_of_year\n    from\n        date_dimension d\n        join\n        fiscal_year_range m on d.date_day between m.fiscal_year_start_date and m.fiscal_year_end_date\n        join\n        weeks w on d.date_day between w.week_start_date and w.week_end_date\n\n)\nselect * from fiscal_year_dates order by 1\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.009641}, "macro.dbt_date.get_fiscal_periods": {"unique_id": "macro.dbt_date.get_fiscal_periods", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/fiscal_date/get_fiscal_periods.sql", "original_file_path": "macros/fiscal_date/get_fiscal_periods.sql", "name": "get_fiscal_periods", "macro_sql": "{% macro get_fiscal_periods(dates, year_end_month, week_start_day, shift_year=1) %}\n{# \nThis macro requires you to pass in a ref to a date dimension, created via\ndbt_date.get_date_dimension()s\n#}\nwith fscl_year_dates_for_periods as (\n    {{ dbt_date.get_fiscal_year_dates(dates, year_end_month, week_start_day, shift_year) }}\n),\nfscl_year_w13 as (\n\n    select\n        f.*,\n        -- We count the weeks in a 13 week period\n        -- and separate the 4-5-4 week sequences\n        mod(cast(\n            (f.fiscal_week_of_year-1) as {{ dbt_utils.type_int() }}\n            ), 13) as w13_number,\n        -- Chop weeks into 13 week merch quarters\n        cast(\n            least(\n                floor((f.fiscal_week_of_year-1)/13.0)\n                , 3)\n            as {{ dbt_utils.type_int() }}) as quarter_number\n    from\n        fscl_year_dates_for_periods f\n\n),\nfscl_periods as (\n\n    select\n        f.date_day,\n        f.fiscal_year_number,\n        f.week_start_date,\n        f.week_end_date,\n        f.fiscal_week_of_year,\n        case \n            -- we move week 53 into the 3rd period of the quarter\n            when f.fiscal_week_of_year = 53 then 3\n            when f.w13_number between 0 and 3 then 1\n            when f.w13_number between 4 and 8 then 2\n            when f.w13_number between 9 and 12 then 3\n        end as period_of_quarter,\n        f.quarter_number\n    from\n        fscl_year_w13 f\n\n),\nfscl_periods_quarters as (\n\n    select\n        f.*,\n        cast((\n            (f.quarter_number * 3) + f.period_of_quarter\n         ) as {{ dbt_utils.type_int() }}) as fiscal_period_number\n    from\n        fscl_periods f\n\n)\nselect\n    date_day,\n    fiscal_year_number,\n    week_start_date,\n    week_end_date,\n    fiscal_week_of_year, \n    dense_rank() over(partition by fiscal_period_number order by fiscal_week_of_year) as fiscal_week_of_period,\n    fiscal_period_number,\n    quarter_number+1 as fiscal_quarter_number,\n    period_of_quarter as fiscal_period_of_quarter\nfrom \n    fscl_periods_quarters \norder by 1,2\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.get_fiscal_year_dates", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.0112698}, "macro.dbt_date.tomorrow": {"unique_id": "macro.dbt_date.tomorrow", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/tomorrow.sql", "original_file_path": "macros/calendar_date/tomorrow.sql", "name": "tomorrow", "macro_sql": "{%- macro tomorrow(date=None, tz=None) -%}\n{{ dbt_date.n_days_away(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.0118668}, "macro.dbt_date.next_week": {"unique_id": "macro.dbt_date.next_week", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/next_week.sql", "original_file_path": "macros/calendar_date/next_week.sql", "name": "next_week", "macro_sql": "{%- macro next_week(tz=None) -%}\n{{ dbt_date.n_weeks_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.012398}, "macro.dbt_date.next_month_name": {"unique_id": "macro.dbt_date.next_month_name", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_name.sql", "original_file_path": "macros/calendar_date/next_month_name.sql", "name": "next_month_name", "macro_sql": "{%- macro next_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.next_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.0130181}, "macro.dbt_date.next_month": {"unique_id": "macro.dbt_date.next_month", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month.sql", "original_file_path": "macros/calendar_date/next_month.sql", "name": "next_month", "macro_sql": "{%- macro next_month(tz=None) -%}\n{{ dbt_date.n_months_away(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.013664}, "macro.dbt_date.day_name": {"unique_id": "macro.dbt_date.day_name", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "day_name", "macro_sql": "{%- macro day_name(date, short=True) -%}\n    {{ adapter.dispatch('day_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__day_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.0149078}, "macro.dbt_date.default__day_name": {"unique_id": "macro.dbt_date.default__day_name", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "default__day_name", "macro_sql": "\n\n{%- macro default__day_name(date, short) -%}\n{%- set f = 'Dy' if short else 'Day' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.015316}, "macro.dbt_date.snowflake__day_name": {"unique_id": "macro.dbt_date.snowflake__day_name", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "snowflake__day_name", "macro_sql": "\n\n{%- macro snowflake__day_name(date, short) -%}\n    {%- if short -%}\n    dayname({{ date }})\n    {%- else -%}\n    -- long version not implemented on Snowflake so we're doing it manually :/\n    case dayname({{ date }})\n        when 'Mon' then 'Monday'\n        when 'Tue' then 'Tuesday'\n        when 'Wed' then 'Wednesday'\n        when 'Thu' then 'Thursday'\n        when 'Fri' then 'Friday'\n        when 'Sat' then 'Saturday'\n        when 'Sun' then 'Sunday'\n    end\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.015979}, "macro.dbt_date.bigquery__day_name": {"unique_id": "macro.dbt_date.bigquery__day_name", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "bigquery__day_name", "macro_sql": "\n\n{%- macro bigquery__day_name(date, short) -%}\n{%- set f = '%a' if short else '%A' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.016421}, "macro.dbt_date.postgres__day_name": {"unique_id": "macro.dbt_date.postgres__day_name", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_name.sql", "original_file_path": "macros/calendar_date/day_name.sql", "name": "postgres__day_name", "macro_sql": "\n\n{%- macro postgres__day_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMDy' if short else 'FMDay' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.01683}, "macro.dbt_date.to_unixtimestamp": {"unique_id": "macro.dbt_date.to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "to_unixtimestamp", "macro_sql": "{%- macro to_unixtimestamp(timestamp) -%}\n    {{ adapter.dispatch('to_unixtimestamp', 'dbt_date') (timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__to_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.017555}, "macro.dbt_date.default__to_unixtimestamp": {"unique_id": "macro.dbt_date.default__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "default__to_unixtimestamp", "macro_sql": "\n\n{%- macro default__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.017836}, "macro.dbt_date.snowflake__to_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "snowflake__to_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__to_unixtimestamp(timestamp) -%}\n    {{ dbt_date.date_part('epoch_seconds', timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.018105}, "macro.dbt_date.bigquery__to_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__to_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/to_unixtimestamp.sql", "original_file_path": "macros/calendar_date/to_unixtimestamp.sql", "name": "bigquery__to_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__to_unixtimestamp(timestamp) -%}\n    unix_seconds({{ timestamp }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.018305}, "macro.dbt_date.n_days_away": {"unique_id": "macro.dbt_date.n_days_away", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_days_away.sql", "original_file_path": "macros/calendar_date/n_days_away.sql", "name": "n_days_away", "macro_sql": "{%- macro n_days_away(n, date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(-1 * n, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.01906}, "macro.dbt_date.week_start": {"unique_id": "macro.dbt_date.week_start", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "week_start", "macro_sql": "{%- macro week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.0201101}, "macro.dbt_date.default__week_start": {"unique_id": "macro.dbt_date.default__week_start", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "default__week_start", "macro_sql": "{%- macro default__week_start(date) -%}\ncast({{ dbt_utils.date_trunc('week', date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.020403}, "macro.dbt_date.snowflake__week_start": {"unique_id": "macro.dbt_date.snowflake__week_start", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "snowflake__week_start", "macro_sql": "\n\n{%- macro snowflake__week_start(date) -%}\n    {#\n        Get the day of week offset: e.g. if the date is a Sunday,\n        dbt_date.day_of_week returns 1, so we subtract 1 to get a 0 offset\n    #}\n    {% set off_set = dbt_date.day_of_week(date, isoweek=False) ~ \" - 1\" %}\n    cast({{ dbt_utils.dateadd(\"day\", \"-1 * (\" ~ off_set ~ \")\", date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.day_of_week", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.02103}, "macro.dbt_date.postgres__week_start": {"unique_id": "macro.dbt_date.postgres__week_start", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_start.sql", "original_file_path": "macros/calendar_date/week_start.sql", "name": "postgres__week_start", "macro_sql": "\n\n{%- macro postgres__week_start(date) -%}\n-- Sunday as week start date\ncast({{ dbt_utils.dateadd('day', -1, dbt_utils.date_trunc('week', dbt_utils.dateadd('day', 1, date))) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.021544}, "macro.dbt_date.iso_week_start": {"unique_id": "macro.dbt_date.iso_week_start", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "iso_week_start", "macro_sql": "{%- macro iso_week_start(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_start', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.02256}, "macro.dbt_date._iso_week_start": {"unique_id": "macro.dbt_date._iso_week_start", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "_iso_week_start", "macro_sql": "{%- macro _iso_week_start(date, week_type) -%}\ncast({{ dbt_utils.date_trunc(week_type, date) }} as date)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.0228648}, "macro.dbt_date.default__iso_week_start": {"unique_id": "macro.dbt_date.default__iso_week_start", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "default__iso_week_start", "macro_sql": "\n\n{%- macro default__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.023135}, "macro.dbt_date.snowflake__iso_week_start": {"unique_id": "macro.dbt_date.snowflake__iso_week_start", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "snowflake__iso_week_start", "macro_sql": "\n\n{%- macro snowflake__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.0233989}, "macro.dbt_date.postgres__iso_week_start": {"unique_id": "macro.dbt_date.postgres__iso_week_start", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_start.sql", "original_file_path": "macros/calendar_date/iso_week_start.sql", "name": "postgres__iso_week_start", "macro_sql": "\n\n{%- macro postgres__iso_week_start(date) -%}\n{{ dbt_date._iso_week_start(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_start"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.0236642}, "macro.dbt_date.n_days_ago": {"unique_id": "macro.dbt_date.n_days_ago", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_days_ago.sql", "original_file_path": "macros/calendar_date/n_days_ago.sql", "name": "n_days_ago", "macro_sql": "{%- macro n_days_ago(n, date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{%- set n = n|int -%}\ncast({{ dbt_utils.dateadd('day', -1 * n, dt) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.024658}, "macro.dbt_date.last_week": {"unique_id": "macro.dbt_date.last_week", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/last_week.sql", "original_file_path": "macros/calendar_date/last_week.sql", "name": "last_week", "macro_sql": "{%- macro last_week(tz=None) -%}\n{{ dbt_date.n_weeks_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_weeks_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.0251572}, "macro.dbt_date.now": {"unique_id": "macro.dbt_date.now", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/now.sql", "original_file_path": "macros/calendar_date/now.sql", "name": "now", "macro_sql": "{%- macro now(tz=None) -%}\n{{ dbt_date.convert_timezone(dbt_utils.current_timestamp(), tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.convert_timezone", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.0256891}, "macro.dbt_date.periods_since": {"unique_id": "macro.dbt_date.periods_since", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/periods_since.sql", "original_file_path": "macros/calendar_date/periods_since.sql", "name": "periods_since", "macro_sql": "{%- macro periods_since(date_col, period_name='day', tz=None) -%}\n{{ dbt_utils.datediff(date_col, dbt_date.now(tz), period_name) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.026429}, "macro.dbt_date.today": {"unique_id": "macro.dbt_date.today", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/today.sql", "original_file_path": "macros/calendar_date/today.sql", "name": "today", "macro_sql": "{%- macro today(tz=None) -%}\ncast({{ dbt_date.now(tz) }} as date)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.0269032}, "macro.dbt_date.last_month": {"unique_id": "macro.dbt_date.last_month", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month.sql", "original_file_path": "macros/calendar_date/last_month.sql", "name": "last_month", "macro_sql": "{%- macro last_month(tz=None) -%}\n{{ dbt_date.n_months_ago(1, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_months_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.0274189}, "macro.dbt_date.day_of_year": {"unique_id": "macro.dbt_date.day_of_year", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "day_of_year", "macro_sql": "{%- macro day_of_year(date) -%}\n{{ adapter.dispatch('day_of_year', 'dbt_date') (date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__day_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.0281038}, "macro.dbt_date.default__day_of_year": {"unique_id": "macro.dbt_date.default__day_of_year", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "default__day_of_year", "macro_sql": "\n\n{%- macro default__day_of_year(date) -%}\n    {{ dbt_date.date_part('dayofyear', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.02838}, "macro.dbt_date.postgres__day_of_year": {"unique_id": "macro.dbt_date.postgres__day_of_year", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "postgres__day_of_year", "macro_sql": "\n\n{%- macro postgres__day_of_year(date) -%}\n    {{ dbt_date.date_part('doy', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.028654}, "macro.dbt_date.redshift__day_of_year": {"unique_id": "macro.dbt_date.redshift__day_of_year", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_year.sql", "original_file_path": "macros/calendar_date/day_of_year.sql", "name": "redshift__day_of_year", "macro_sql": "\n\n{%- macro redshift__day_of_year(date) -%}\n    cast({{ dbt_date.date_part('dayofyear', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.029015}, "macro.dbt_date.from_unixtimestamp": {"unique_id": "macro.dbt_date.from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "from_unixtimestamp", "macro_sql": "{%- macro from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {{ adapter.dispatch('from_unixtimestamp', 'dbt_date') (epochs, format) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__from_unixtimestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.0312278}, "macro.dbt_date.default__from_unixtimestamp": {"unique_id": "macro.dbt_date.default__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "default__from_unixtimestamp", "macro_sql": "\n\n{%- macro default__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp({{ epochs }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.031831}, "macro.dbt_date.postgres__from_unixtimestamp": {"unique_id": "macro.dbt_date.postgres__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "postgres__from_unixtimestamp", "macro_sql": "\n\n{%- macro postgres__from_unixtimestamp(epochs, format=\"seconds\") -%}\n    {%- if format != \"seconds\" -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    cast(to_timestamp({{ epochs }}) at time zone 'UTC' as timestamp)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.032342}, "macro.dbt_date.snowflake__from_unixtimestamp": {"unique_id": "macro.dbt_date.snowflake__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "snowflake__from_unixtimestamp", "macro_sql": "\n\n{%- macro snowflake__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n    {%- set scale = 0 -%}\n    {%- elif format == \"milliseconds\" -%}\n    {%- set scale = 3 -%}\n    {%- elif format == \"microseconds\" -%}\n    {%- set scale = 6 -%}\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n    to_timestamp_ntz({{ epochs }}, {{ scale }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.033289}, "macro.dbt_date.bigquery__from_unixtimestamp": {"unique_id": "macro.dbt_date.bigquery__from_unixtimestamp", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/from_unixtimestamp.sql", "original_file_path": "macros/calendar_date/from_unixtimestamp.sql", "name": "bigquery__from_unixtimestamp", "macro_sql": "\n\n{%- macro bigquery__from_unixtimestamp(epochs, format) -%}\n    {%- if format == \"seconds\" -%}\n        timestamp_seconds({{ epochs }})\n    {%- elif format == \"milliseconds\" -%}\n        timestamp_millis({{ epochs }})\n    {%- elif format == \"microseconds\" -%}\n        timestamp_micros({{ epochs }})\n    {%- else -%}\n    {{ exceptions.raise_compiler_error(\n        \"value \" ~ format ~ \" for `format` for from_unixtimestamp is not supported.\"\n        )\n    }}\n    {% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.034038}, "macro.dbt_date.n_months_ago": {"unique_id": "macro.dbt_date.n_months_ago", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_months_ago.sql", "original_file_path": "macros/calendar_date/n_months_ago.sql", "name": "n_months_ago", "macro_sql": "{%- macro n_months_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.0349782}, "macro.dbt_date.date_part": {"unique_id": "macro.dbt_date.date_part", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part', 'dbt_date') (datepart, date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.035711}, "macro.dbt_date.default__date_part": {"unique_id": "macro.dbt_date.default__date_part", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.035975}, "macro.dbt_date.bigquery__date_part": {"unique_id": "macro.dbt_date.bigquery__date_part", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/date_part.sql", "original_file_path": "macros/calendar_date/date_part.sql", "name": "bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.036232}, "macro.dbt_date.n_weeks_away": {"unique_id": "macro.dbt_date.n_weeks_away", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_weeks_away.sql", "original_file_path": "macros/calendar_date/n_weeks_away.sql", "name": "n_weeks_away", "macro_sql": "{%- macro n_weeks_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.037066}, "macro.dbt_date.day_of_month": {"unique_id": "macro.dbt_date.day_of_month", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "day_of_month", "macro_sql": "{%- macro day_of_month(date) -%}\n{{ dbt_date.date_part('day', date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.037608}, "macro.dbt_date.redshift__day_of_month": {"unique_id": "macro.dbt_date.redshift__day_of_month", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_month.sql", "original_file_path": "macros/calendar_date/day_of_month.sql", "name": "redshift__day_of_month", "macro_sql": "\n\n{%- macro redshift__day_of_month(date) -%}\ncast({{ dbt_date.date_part('day', date) }} as {{ dbt_utils.type_bigint() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.037974}, "macro.dbt_date.yesterday": {"unique_id": "macro.dbt_date.yesterday", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/yesterday.sql", "original_file_path": "macros/calendar_date/yesterday.sql", "name": "yesterday", "macro_sql": "{%- macro yesterday(date=None, tz=None) -%}\n{{ dbt_date.n_days_ago(1, date, tz) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.n_days_ago"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.038521}, "macro.dbt_date.day_of_week": {"unique_id": "macro.dbt_date.day_of_week", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "day_of_week", "macro_sql": "{%- macro day_of_week(date, isoweek=true) -%}\n{{ adapter.dispatch('day_of_week', 'dbt_date') (date, isoweek) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__day_of_week"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.041305}, "macro.dbt_date.default__day_of_week": {"unique_id": "macro.dbt_date.default__day_of_week", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "default__day_of_week", "macro_sql": "\n\n{%- macro default__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else {{ dow }}\n    end\n    {%- else -%}\n    {{ dow }} + 1\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.0419369}, "macro.dbt_date.snowflake__day_of_week": {"unique_id": "macro.dbt_date.snowflake__day_of_week", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "snowflake__day_of_week", "macro_sql": "\n\n{%- macro snowflake__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'dayofweekiso' -%}\n        {{ dbt_date.date_part(dow_part, date) }}\n    {%- else -%}\n        {%- set dow_part = 'dayofweek' -%}\n        case\n            when {{ dbt_date.date_part(dow_part, date) }} = 7 then 1\n            else {{ dbt_date.date_part(dow_part, date) }} + 1\n        end\n    {%- endif -%}\n\n\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.0431051}, "macro.dbt_date.bigquery__day_of_week": {"unique_id": "macro.dbt_date.bigquery__day_of_week", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "bigquery__day_of_week", "macro_sql": "\n\n{%- macro bigquery__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (1) to Monday (2)\n        when {{ dow }} = 1 then 7\n        else {{ dow }} - 1\n    end\n    {%- else -%}\n    {{ dow }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.043744}, "macro.dbt_date.postgres__day_of_week": {"unique_id": "macro.dbt_date.postgres__day_of_week", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "postgres__day_of_week", "macro_sql": "\n\n\n{%- macro postgres__day_of_week(date, isoweek) -%}\n\n    {%- if isoweek -%}\n        {%- set dow_part = 'isodow' -%}\n        -- Monday(1) to Sunday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} as {{ dbt_utils.type_int() }})\n    {%- else -%}\n        {%- set dow_part = 'dow' -%}\n        -- Sunday(1) to Saturday (7)\n        cast({{ dbt_date.date_part(dow_part, date) }} + 1 as {{ dbt_utils.type_int() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.044576}, "macro.dbt_date.redshift__day_of_week": {"unique_id": "macro.dbt_date.redshift__day_of_week", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/day_of_week.sql", "original_file_path": "macros/calendar_date/day_of_week.sql", "name": "redshift__day_of_week", "macro_sql": "\n\n\n{%- macro redshift__day_of_week(date, isoweek) -%}\n\n    {%- set dow = dbt_date.date_part('dayofweek', date) -%}\n\n    {%- if isoweek -%}\n    case\n        -- Shift start of week from Sunday (0) to Monday (1)\n        when {{ dow }} = 0 then 7\n        else cast({{ dow }} as {{ dbt_utils.type_bigint() }})\n    end\n    {%- else -%}\n    cast({{ dow }} + 1 as {{ dbt_utils.type_bigint() }})\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.045391}, "macro.dbt_date.iso_week_end": {"unique_id": "macro.dbt_date.iso_week_end", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "iso_week_end", "macro_sql": "{%- macro iso_week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.046408}, "macro.dbt_date._iso_week_end": {"unique_id": "macro.dbt_date._iso_week_end", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "_iso_week_end", "macro_sql": "{%- macro _iso_week_end(date, week_type) -%}\n{%- set dt = dbt_date.iso_week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.iso_week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.046819}, "macro.dbt_date.default__iso_week_end": {"unique_id": "macro.dbt_date.default__iso_week_end", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "default__iso_week_end", "macro_sql": "\n\n{%- macro default__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.0470881}, "macro.dbt_date.snowflake__iso_week_end": {"unique_id": "macro.dbt_date.snowflake__iso_week_end", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_end.sql", "original_file_path": "macros/calendar_date/iso_week_end.sql", "name": "snowflake__iso_week_end", "macro_sql": "\n\n{%- macro snowflake__iso_week_end(date) -%}\n{{ dbt_date._iso_week_end(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.04735}, "macro.dbt_date.n_weeks_ago": {"unique_id": "macro.dbt_date.n_weeks_ago", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_weeks_ago.sql", "original_file_path": "macros/calendar_date/n_weeks_ago.sql", "name": "n_weeks_ago", "macro_sql": "{%- macro n_weeks_ago(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('week', \n    dbt_utils.dateadd('week', -1 * n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.048204}, "macro.dbt_date.month_name": {"unique_id": "macro.dbt_date.month_name", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "month_name", "macro_sql": "{%- macro month_name(date, short=True) -%}\n    {{ adapter.dispatch('month_name', 'dbt_date') (date, short) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.snowflake__month_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.049153}, "macro.dbt_date.default__month_name": {"unique_id": "macro.dbt_date.default__month_name", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "default__month_name", "macro_sql": "\n\n{%- macro default__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MONTH' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.049552}, "macro.dbt_date.bigquery__month_name": {"unique_id": "macro.dbt_date.bigquery__month_name", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "bigquery__month_name", "macro_sql": "\n\n{%- macro bigquery__month_name(date, short) -%}\n{%- set f = '%b' if short else '%B' -%}\n    format_date('{{ f }}', cast({{ date }} as date))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.049941}, "macro.dbt_date.snowflake__month_name": {"unique_id": "macro.dbt_date.snowflake__month_name", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "snowflake__month_name", "macro_sql": "\n\n{%- macro snowflake__month_name(date, short) -%}\n{%- set f = 'MON' if short else 'MMMM' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.050325}, "macro.dbt_date.postgres__month_name": {"unique_id": "macro.dbt_date.postgres__month_name", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/month_name.sql", "original_file_path": "macros/calendar_date/month_name.sql", "name": "postgres__month_name", "macro_sql": "\n\n{%- macro postgres__month_name(date, short) -%}\n{# FM = Fill mode, which suppresses padding blanks #}\n{%- set f = 'FMMon' if short else 'FMMonth' -%}\n    to_char({{ date }}, '{{ f }}')\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.050745}, "macro.dbt_date.last_month_name": {"unique_id": "macro.dbt_date.last_month_name", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_name.sql", "original_file_path": "macros/calendar_date/last_month_name.sql", "name": "last_month_name", "macro_sql": "{%- macro last_month_name(short=True, tz=None) -%}\n{{ dbt_date.month_name(dbt_date.last_month(1, tz), short=short) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.month_name", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.051392}, "macro.dbt_date.week_of_year": {"unique_id": "macro.dbt_date.week_of_year", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "week_of_year", "macro_sql": "{%- macro week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.default__week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.052293}, "macro.dbt_date.default__week_of_year": {"unique_id": "macro.dbt_date.default__week_of_year", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "default__week_of_year", "macro_sql": "{%- macro default__week_of_year(date) -%}\ncast({{ dbt_date.date_part('week', date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.052653}, "macro.dbt_date.postgres__week_of_year": {"unique_id": "macro.dbt_date.postgres__week_of_year", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_of_year.sql", "original_file_path": "macros/calendar_date/week_of_year.sql", "name": "postgres__week_of_year", "macro_sql": "\n\n{%- macro postgres__week_of_year(date) -%}\n{# postgresql 'week' returns isoweek. Use to_char instead.\n   WW = the first week starts on the first day of the year #}\ncast(to_char({{ date }}, 'WW') as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.052979}, "macro.dbt_date.convert_timezone": {"unique_id": "macro.dbt_date.convert_timezone", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "convert_timezone", "macro_sql": "{%- macro convert_timezone(column, target_tz=None, source_tz=None) -%}\n{%- set source_tz = \"UTC\" if not source_tz else source_tz -%}\n{%- set target_tz = var(\"dbt_date:time_zone\") if not target_tz else target_tz -%}\n{{ adapter.dispatch('convert_timezone', 'dbt_date') (column, target_tz, source_tz) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.05511}, "macro.dbt_date.default__convert_timezone": {"unique_id": "macro.dbt_date.default__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "default__convert_timezone", "macro_sql": "{% macro default__convert_timezone(column, target_tz, source_tz) -%}\n{%- if not source_tz -%}\ncast(convert_timezone('{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast(convert_timezone('{{ source_tz }}', '{{ target_tz }}', {{ column }}) as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.055778}, "macro.dbt_date.bigquery__convert_timezone": {"unique_id": "macro.dbt_date.bigquery__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "bigquery__convert_timezone", "macro_sql": "{%- macro bigquery__convert_timezone(column, target_tz, source_tz=None) -%}\ntimestamp(datetime({{ column }}, '{{ target_tz}}'))\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.056148}, "macro.dbt_date.spark__convert_timezone": {"unique_id": "macro.dbt_date.spark__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "spark__convert_timezone", "macro_sql": "{%- macro spark__convert_timezone(column, target_tz, source_tz) -%}\nfrom_utc_timestamp(\n        to_utc_timestamp({{ column }}, '{{ source_tz }}'),\n        '{{ target_tz }}'\n        )\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.056469}, "macro.dbt_date.postgres__convert_timezone": {"unique_id": "macro.dbt_date.postgres__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "postgres__convert_timezone", "macro_sql": "{% macro postgres__convert_timezone(column, target_tz, source_tz) -%}\n{%- if source_tz -%}\ncast({{ column }} at time zone '{{ source_tz }}' at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- else -%}\ncast({{ column }} at time zone '{{ target_tz }}' as {{ dbt_utils.type_timestamp() }})\n{%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.057226}, "macro.dbt_date.redshift__convert_timezone": {"unique_id": "macro.dbt_date.redshift__convert_timezone", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/convert_timezone.sql", "original_file_path": "macros/calendar_date/convert_timezone.sql", "name": "redshift__convert_timezone", "macro_sql": "{%- macro redshift__convert_timezone(column, target_tz, source_tz) -%}\n{{ return(dbt_date.default__convert_timezone(column, target_tz, source_tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.default__convert_timezone"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.0576031}, "macro.dbt_date.n_months_away": {"unique_id": "macro.dbt_date.n_months_away", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/n_months_away.sql", "original_file_path": "macros/calendar_date/n_months_away.sql", "name": "n_months_away", "macro_sql": "{%- macro n_months_away(n, tz=None) -%}\n{%- set n = n|int -%}\n{{ dbt_utils.date_trunc('month', \n    dbt_utils.dateadd('month', n, \n        dbt_date.today(tz)\n        )\n    ) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_utils.dateadd", "macro.dbt_date.today"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.0584562}, "macro.dbt_date.iso_week_of_year": {"unique_id": "macro.dbt_date.iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "iso_week_of_year", "macro_sql": "{%- macro iso_week_of_year(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('iso_week_of_year', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.059526}, "macro.dbt_date._iso_week_of_year": {"unique_id": "macro.dbt_date._iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "_iso_week_of_year", "macro_sql": "{%- macro _iso_week_of_year(date, week_type) -%}\ncast({{ dbt_date.date_part(week_type, date) }} as {{ dbt_utils.type_int() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.059904}, "macro.dbt_date.default__iso_week_of_year": {"unique_id": "macro.dbt_date.default__iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "default__iso_week_of_year", "macro_sql": "\n\n{%- macro default__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'isoweek') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.060184}, "macro.dbt_date.snowflake__iso_week_of_year": {"unique_id": "macro.dbt_date.snowflake__iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "snowflake__iso_week_of_year", "macro_sql": "\n\n{%- macro snowflake__iso_week_of_year(date) -%}\n{{ dbt_date._iso_week_of_year(date, 'weekiso') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.0604851}, "macro.dbt_date.postgres__iso_week_of_year": {"unique_id": "macro.dbt_date.postgres__iso_week_of_year", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/iso_week_of_year.sql", "original_file_path": "macros/calendar_date/iso_week_of_year.sql", "name": "postgres__iso_week_of_year", "macro_sql": "\n\n{%- macro postgres__iso_week_of_year(date) -%}\n-- postgresql week is isoweek, the first week of a year containing January 4 of that year.\n{{ dbt_date._iso_week_of_year(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date._iso_week_of_year"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.060769}, "macro.dbt_date.week_end": {"unique_id": "macro.dbt_date.week_end", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "week_end", "macro_sql": "{%- macro week_end(date=None, tz=None) -%}\n{%-set dt = date if date else dbt_date.today(tz) -%}\n{{ adapter.dispatch('week_end', 'dbt_date') (dt) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.today", "macro.dbt_date.snowflake__week_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.061791}, "macro.dbt_date.default__week_end": {"unique_id": "macro.dbt_date.default__week_end", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "default__week_end", "macro_sql": "{%- macro default__week_end(date) -%}\n{{ dbt_utils.last_day(date, 'week') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.06206}, "macro.dbt_date.snowflake__week_end": {"unique_id": "macro.dbt_date.snowflake__week_end", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "snowflake__week_end", "macro_sql": "\n\n{%- macro snowflake__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.062444}, "macro.dbt_date.postgres__week_end": {"unique_id": "macro.dbt_date.postgres__week_end", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/week_end.sql", "original_file_path": "macros/calendar_date/week_end.sql", "name": "postgres__week_end", "macro_sql": "\n\n{%- macro postgres__week_end(date) -%}\n{%- set dt = dbt_date.week_start(date) -%}\n{{ dbt_date.n_days_away(6, dt) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.week_start", "macro.dbt_date.n_days_away"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.062828}, "macro.dbt_date.next_month_number": {"unique_id": "macro.dbt_date.next_month_number", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/next_month_number.sql", "original_file_path": "macros/calendar_date/next_month_number.sql", "name": "next_month_number", "macro_sql": "{%- macro next_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.next_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.next_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.0634189}, "macro.dbt_date.last_month_number": {"unique_id": "macro.dbt_date.last_month_number", "package_name": "dbt_date", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_date", "path": "macros/calendar_date/last_month_number.sql", "original_file_path": "macros/calendar_date/last_month_number.sql", "name": "last_month_number", "macro_sql": "{%- macro last_month_number(tz=None) -%}\n{{ dbt_date.date_part('month', dbt_date.last_month(1, tz)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_date.date_part", "macro.dbt_date.last_month"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.064066}, "macro.dbt_external_tables.bigquery__create_external_table": {"unique_id": "macro.dbt_external_tables.bigquery__create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/bigquery/create_external_table.sql", "original_file_path": "macros/plugins/bigquery/create_external_table.sql", "name": "bigquery__create_external_table", "macro_sql": "{% macro bigquery__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n    \n    {%- set uris = [] -%}\n    {%- if options is mapping and options.get('uris', none) -%}\n        {%- set uris = external.options.get('uris') -%}\n    {%- else -%}\n        {%- set uris = [external.location] -%}\n    {%- endif -%}\n\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n        {%- if columns -%}(\n            {% for column in columns %}\n                {{column.name}} {{column.data_type}} {{- ',' if not loop.last -}}\n            {%- endfor -%}\n        )\n        {% endif %}\n        {% if options and options.get('hive_partition_uri_prefix', none) %}\n        with partition columns {%- if partitions %} (\n            {%- for partition in partitions %}\n                {{partition.name}} {{partition.data_type}}{{',' if not loop.last}}\n            {%- endfor -%}\n        ) {% endif -%}\n        {% endif %}\n        options (\n            uris = [{%- for uri in uris -%} '{{uri}}' {{- \",\" if not loop.last}} {%- endfor -%}]\n            {%- if options is mapping -%}\n            {%- for key, value in options.items() if key != 'uris' %}\n                {%- if value is string -%}\n                , {{key}} = '{{value}}'\n                {%- else -%}\n                , {{key}} = {{value}}\n                {%- endif -%}\n            {%- endfor -%}\n            {%- endif -%}\n        )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.069035}, "macro.dbt_external_tables.bigquery__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.bigquery__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/bigquery/get_external_build_plan.sql", "original_file_path": "macros/plugins/bigquery/get_external_build_plan.sql", "name": "bigquery__get_external_build_plan", "macro_sql": "{% macro bigquery__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [dbt_external_tables.create_external_table(source_node)] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.070806}, "macro.dbt_external_tables.snowflake__create_external_table": {"unique_id": "macro.dbt_external_tables.snowflake__create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/create_external_table.sql", "original_file_path": "macros/plugins/snowflake/create_external_table.sql", "name": "snowflake__create_external_table", "macro_sql": "{% macro snowflake__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) -%}\n\n{# https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html #}\n{# This assumes you have already created an external stage #}\n    create or replace external table {{source(source_node.source_name, source_node.name)}}\n    {%- if columns or partitions -%}\n    (\n        {%- if partitions -%}{%- for partition in partitions %}\n            {{partition.name}} {{partition.data_type}} as {{partition.expression}}{{- ',' if not loop.last or columns|length > 0 -}}\n        {%- endfor -%}{%- endif -%}\n        {%- for column in columns %}\n            {%- set column_quoted = adapter.quote(column.name) if column.quote else column.name %}\n            {%- set col_expression -%}\n                {%- set col_id = 'value:c' ~ loop.index if is_csv else 'value:' ~ column.name -%}\n                (case when is_null_value({{col_id}}) or lower({{col_id}}) = 'null' then null else {{col_id}} end)\n            {%- endset %}\n            {{column_quoted}} {{column.data_type}} as ({{col_expression}}::{{column.data_type}})\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {%- endif -%}\n    {% if partitions %} partition by ({{partitions|map(attribute='name')|join(', ')}}) {% endif %}\n    location = {{external.location}} {# stage #}\n    {% if external.auto_refresh in (true, false) -%}\n      auto_refresh = {{external.auto_refresh}}\n    {%- endif %}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if external.integration -%} integration = '{{external.integration}}' {%- endif %}\n    file_format = {{external.file_format}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.075372}, "macro.dbt_external_tables.snowflake__refresh_external_table": {"unique_id": "macro.dbt_external_tables.snowflake__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/refresh_external_table.sql", "original_file_path": "macros/plugins/snowflake/refresh_external_table.sql", "name": "snowflake__refresh_external_table", "macro_sql": "{% macro snowflake__refresh_external_table(source_node) %}\n\n    {% set external = source_node.external %}\n    {% set snowpipe = source_node.external.get('snowpipe', none) %}\n    \n    {% set auto_refresh = external.get('auto_refresh', false) %}\n    {% set partitions = external.get('partitions', none) %}\n    \n    {% set manual_refresh = (partitions and not auto_refresh) %}\n    \n    {% if manual_refresh %}\n\n        {% set ddl %}\n        begin;\n        alter external table {{source(source_node.source_name, source_node.name)}} refresh;\n        commit;\n        {% endset %}\n        \n        {% do return([ddl]) %}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.077397}, "macro.dbt_external_tables.snowflake__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.snowflake__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/get_external_build_plan.sql", "original_file_path": "macros/plugins/snowflake/get_external_build_plan.sql", "name": "snowflake__get_external_build_plan", "macro_sql": "{% macro snowflake__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n    \n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if source_node.external.get('snowpipe', none) is not none %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [\n                dbt_external_tables.snowflake_create_empty_table(source_node),\n                dbt_external_tables.snowflake_get_copy_sql(source_node, explicit_transaction=true),\n                dbt_external_tables.snowflake_create_snowpipe(source_node)\n            ] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.snowflake_refresh_snowpipe(source_node) %}\n        {% endif %}\n            \n    {% else %}\n    \n        {% if create_or_replace %}\n            {% set build_plan = build_plan + [dbt_external_tables.create_external_table(source_node)] %}\n        {% else %}\n            {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n        {% endif %}\n        \n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_create_empty_table", "macro.dbt_external_tables.snowflake_get_copy_sql", "macro.dbt_external_tables.snowflake_create_snowpipe", "macro.dbt_external_tables.snowflake_refresh_snowpipe", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.080867}, "macro.dbt_external_tables.snowflake_create_snowpipe": {"unique_id": "macro.dbt_external_tables.snowflake_create_snowpipe", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_snowpipe.sql", "name": "snowflake_create_snowpipe", "macro_sql": "{% macro snowflake_create_snowpipe(source_node) %}\n\n    {%- set external = source_node.external -%}\n    {%- set snowpipe = external.snowpipe -%}\n\n{# https://docs.snowflake.com/en/sql-reference/sql/create-pipe.html #}\n    create or replace pipe {{source(source_node.source_name, source_node.name)}}\n        {% if snowpipe.auto_ingest -%} auto_ingest = {{snowpipe.auto_ingest}} {%- endif %}\n        {% if snowpipe.aws_sns_topic -%} aws_sns_topic = '{{snowpipe.aws_sns_topic}}' {%- endif %}\n        {% if snowpipe.integration -%} integration = '{{snowpipe.integration}}' {%- endif %}\n        as {{ dbt_external_tables.snowflake_get_copy_sql(source_node) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake_get_copy_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.082446}, "macro.dbt_external_tables.snowflake_create_empty_table": {"unique_id": "macro.dbt_external_tables.snowflake_create_empty_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/create_empty_table.sql", "name": "snowflake_create_empty_table", "macro_sql": "{% macro snowflake_create_empty_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() %}\n\n    create or replace table {{source(source_node.source_name, source_node.name)}} (\n        {% if columns|length == 0 %}\n            value variant,\n        {% else -%}\n        {%- for column in columns -%}\n            {{column.name}} {{column.data_type}},\n        {% endfor -%}\n        {% endif %}\n            metadata_filename varchar,\n            metadata_file_row_number bigint,\n            _dbt_copied_at timestamp\n    );\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.083749}, "macro.dbt_external_tables.snowflake_refresh_snowpipe": {"unique_id": "macro.dbt_external_tables.snowflake_refresh_snowpipe", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/refresh_snowpipe.sql", "name": "snowflake_refresh_snowpipe", "macro_sql": "{% macro snowflake_refresh_snowpipe(source_node) %}\n\n    {% set snowpipe = source_node.external.snowpipe %}\n    {% set auto_ingest = snowpipe.get('auto_ingest', false) if snowpipe is mapping %}\n    \n    {% if auto_ingest is true %}\n    \n        {% do return([]) %}\n    \n    {% else %}\n    \n        {% set ddl %}\n        alter pipe {{source(source_node.source_name, source_node.name)}} refresh\n        {% endset %}\n        \n        {{ return([ddl]) }}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.085354}, "macro.dbt_external_tables.snowflake_get_copy_sql": {"unique_id": "macro.dbt_external_tables.snowflake_get_copy_sql", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "original_file_path": "macros/plugins/snowflake/snowpipe/get_copy_sql.sql", "name": "snowflake_get_copy_sql", "macro_sql": "{% macro snowflake_get_copy_sql(source_node, explicit_transaction=false) %}\n{# This assumes you have already created an external stage #}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set is_csv = dbt_external_tables.is_csv(external.file_format) %}\n    {%- set copy_options = external.snowpipe.get('copy_options', none) -%}\n   \n    {%- if explicit_transaction -%} begin; {%- endif %}\n    \n    copy into {{source(source_node.source_name, source_node.name)}}\n    from ( \n        select\n        {% if columns|length == 0 %}\n            $1::variant as value,\n        {% else -%}\n        {%- for column in columns -%}\n            {%- set col_expression -%}\n                {%- if is_csv -%}nullif(${{loop.index}},''){# special case: get columns by ordinal position #}\n                {%- else -%}nullif($1:{{column.name}},''){# standard behavior: get columns by name #}\n                {%- endif -%}\n            {%- endset -%}\n            {{col_expression}}::{{column.data_type}} as {{column.name}},\n        {% endfor -%}\n        {% endif %}\n            metadata$filename::varchar as metadata_filename,\n            metadata$file_row_number::bigint as metadata_file_row_number,\n            current_timestamp::timestamp as _dbt_copied_at\n        from {{external.location}} {# stage #}\n    )\n    file_format = {{external.file_format}}\n    {% if external.pattern -%} pattern = '{{external.pattern}}' {%- endif %}\n    {% if copy_options %} {{copy_options}} {% endif %};\n    \n    {% if explicit_transaction -%} commit; {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.is_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.0883682}, "macro.dbt_external_tables.is_csv": {"unique_id": "macro.dbt_external_tables.is_csv", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/snowflake/helpers/is_csv.sql", "original_file_path": "macros/plugins/snowflake/helpers/is_csv.sql", "name": "is_csv", "macro_sql": "{% macro is_csv(file_format) %}\n\n{# From https://docs.snowflake.net/manuals/sql-reference/sql/create-external-table.html:\n\nImportant: The external table does not inherit the file format, if any, in the \nstage definition. You must explicitly specify any file format options for the \nexternal table using the FILE_FORMAT parameter.\n\nNote: FORMAT_NAME and TYPE are mutually exclusive; to avoid unintended behavior, \nyou should only specify one or the other when creating an external table.\n\n#}\n\n    {% set ff_ltrimmed = file_format|lower|replace(' ','') %}\n\n    {% if 'type=' in ff_ltrimmed %}\n    \n        {% if 'type=csv' in ff_ltrimmed %}\n\n            {{return(true)}}\n\n        {% else %}\n\n            {{return(false)}}\n            \n        {% endif %}\n        \n    {% else %}\n    \n        {% set ff_standardized = ff_ltrimmed\n            | replace('(','') | replace(')','')\n            | replace('format_name=','') %}\n        {% set fqn = ff_standardized.split('.') %}\n        \n        {% if fqn | length == 3 %}\n            {% set ff_database, ff_schema, ff_identifier = fqn[0], fqn[1], fqn[2] %}\n        {% elif fqn | length == 2 %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, fqn[0], fqn[1] %}\n        {% else %}\n            {% set ff_database, ff_schema, ff_identifier = target.database, target.schema, fqn[0] %}\n        {% endif %}\n    \n        {% call statement('get_file_format', fetch_result = True) %}\n            show file formats in {{ff_database}}.{{ff_schema}}\n        {% endcall %}\n        \n        {% set ffs = load_result('get_file_format').table %}\n        \n        {% for ff in ffs %}\n            \n            {% if ff['name']|lower == ff_identifier and ff['type']|lower == 'csv' %}\n            \n                {{return(true)}}\n            \n            {% endif %}\n        \n        {% endfor %}\n        \n        {{return(false)}}        \n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.093465}, "macro.dbt_external_tables.redshift__create_external_table": {"unique_id": "macro.dbt_external_tables.redshift__create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/create_external_table.sql", "original_file_path": "macros/plugins/redshift/create_external_table.sql", "name": "redshift__create_external_table", "macro_sql": "{% macro redshift__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n\n{# https://docs.aws.amazon.com/redshift/latest/dg/r_CREATE_EXTERNAL_TABLE.html #}\n{# This assumes you have already created an external schema #}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {{adapter.quote(column.name)}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{adapter.quote(partition.name)}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} table properties {{external.table_properties}} {%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.0964239}, "macro.dbt_external_tables.redshift__refresh_external_table": {"unique_id": "macro.dbt_external_tables.redshift__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/refresh_external_table.sql", "original_file_path": "macros/plugins/redshift/refresh_external_table.sql", "name": "redshift__refresh_external_table", "macro_sql": "{% macro redshift__refresh_external_table(source_node) %}\n\n    {%- set partitions = source_node.external.get('partitions',[]) -%}\n\n    {%- if partitions -%}\n    \n        {%- set part_len = partitions|length -%}\n    \n        {%- set get_partitions_sql -%}\n        \n        select * from\n        \n        {%- for partition in partitions %} (\n        \n            {%- set part_num = loop.index -%}\n            \n            {%- if partition.vals.macro -%}\n                {%- set vals = dbt_external_tables.render_from_context(partition.vals.macro, **partition.vals.args) -%}\n            {%- elif partition.vals is string -%}\n                {%- set vals = [partition.vals] -%}\n            {%- else -%}\n                {%- set vals = partition.vals -%}\n            {%- endif -%}\n        \n            {%- for val in vals %}\n            \n                select\n                    '\"{{ partition.name }}\"' as name_{{ part_num }},\n                    '\"{{ val }}\"' as val_{{ part_num }},\n                    '\"{{ dbt_external_tables.render_from_context(partition.path_macro, partition.name, val) }}\"' as path_{{ part_num }}\n                \n                {{ 'union all' if not loop.last else ') ' }}\n            \n            {%- endfor -%}\n            \n            {{ 'cross join' if not loop.last }}\n            \n        {%- endfor -%}\n        \n        {%- endset -%}\n        \n        {%- set finals = [] -%}\n        \n        {%- if execute -%}\n            {%- set results = run_query(get_partitions_sql) -%}\n            {%- for row in results -%}\n                \n                {%- set partition_parts = [] -%}\n                {%- set path_parts = [] -%}\n                \n                {%- for i in range(0, part_len) -%}\n                    {%- do partition_parts.append({\n                        'name': row[i * 3][1:-1],\n                        'value': row[i * 3 + 1][1:-1]\n                    }) -%}\n                    {%- do path_parts.append(row[i * 3 + 2][1:-1]) -%}\n                {%- endfor -%}\n                \n                {%- set construct = {\n                    'partition_by': partition_parts,\n                    'path': path_parts | join('/')\n                }  -%}\n                \n                {% do finals.append(construct) %}\n            {%- endfor -%}\n        {%- endif -%}\n    \n        {%- set ddl = dbt_external_tables.redshift_alter_table_add_partitions(source_node, finals) -%}\n        {{ return(ddl) }}\n    \n    {% else %}\n    \n        {% do return([]) %}\n    \n    {% endif %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.render_from_context", "macro.dbt.run_query", "macro.dbt_external_tables.redshift_alter_table_add_partitions"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.104645}, "macro.dbt_external_tables.redshift__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.redshift__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/get_external_build_plan.sql", "original_file_path": "macros/plugins/redshift/get_external_build_plan.sql", "name": "redshift__get_external_build_plan", "macro_sql": "{% macro redshift__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n    \n    {% set create_or_replace = (var('ext_full_refresh', false) or not redshift_is_ext_tbl(source_node)) %}\n    \n    {% if create_or_replace %}\n\n        {% set build_plan = [\n                dbt_external_tables.dropif(source_node),\n                dbt_external_tables.create_external_table(source_node)\n            ] + dbt_external_tables.refresh_external_table(source_node) \n        %}\n        \n    {% else %}\n    \n        {% set build_plan = dbt_external_tables.refresh_external_table(source_node) %}\n        \n    {% endif %}\n    \n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.redshift_is_ext_tbl", "macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.106442}, "macro.dbt_external_tables.render_from_context": {"unique_id": "macro.dbt_external_tables.render_from_context", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/render_macro.sql", "original_file_path": "macros/plugins/redshift/helpers/render_macro.sql", "name": "render_from_context", "macro_sql": "{% macro render_from_context(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called by macro '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  \n    {{ return(package_context[name](*varargs, **kwargs)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.108588}, "macro.dbt_external_tables.redshift__dropif": {"unique_id": "macro.dbt_external_tables.redshift__dropif", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/dropif.sql", "original_file_path": "macros/plugins/redshift/helpers/dropif.sql", "name": "redshift__dropif", "macro_sql": "{% macro redshift__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}} cascade\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.109313}, "macro.dbt_external_tables.redshift_alter_table_add_partitions": {"unique_id": "macro.dbt_external_tables.redshift_alter_table_add_partitions", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/add_partitions.sql", "original_file_path": "macros/plugins/redshift/helpers/add_partitions.sql", "name": "redshift_alter_table_add_partitions", "macro_sql": "{% macro redshift_alter_table_add_partitions(source_node, partitions) %}\n\n  {{ log(\"Generating ADD PARTITION statement for partition set between \" \n         ~ partitions[0]['path'] ~ \" and \" ~ (partitions|last)['path']) }}\n\n  {% set ddl = [] %}\n  \n  {% if partitions|length > 0 %}\n  \n    {% set alter_table_add %}\n        alter table {{source(source_node.source_name, source_node.name)}} add if not exists \n    {% endset %}\n  \n    {%- set alters -%}\n\n      {{ alter_table_add }}\n\n    {%- for partition in partitions -%}\n\n      {%- if loop.index0 != 0 and loop.index0 % 100 == 0 -%}\n\n        ; {{ alter_table_add }}\n\n      {%- endif -%}\n\n        partition ({%- for part in partition.partition_by -%}{{ part.name }}='{{ part.value }}'{{', ' if not loop.last}}{%- endfor -%})\n        location '{{ source_node.external.location }}/{{ partition.path }}/'\n\n    {% endfor -%}\n    \n    {%- endset -%}\n    \n    {% set ddl = ddl + alters.split(';') %}\n\n  {% else %}\n\n    {{ log(\"No partitions to be added\") }}\n\n  {% endif %}\n  \n  {% do return(ddl) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.1124868}, "macro.dbt_external_tables.redshift__exit_transaction": {"unique_id": "macro.dbt_external_tables.redshift__exit_transaction", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/transaction.sql", "original_file_path": "macros/plugins/redshift/helpers/transaction.sql", "name": "redshift__exit_transaction", "macro_sql": "{% macro redshift__exit_transaction() %}\n    {{ return('begin; commit;') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.112969}, "macro.dbt_external_tables.year_month_day": {"unique_id": "macro.dbt_external_tables.year_month_day", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "name": "year_month_day", "macro_sql": "{% macro year_month_day(name, value) %}\n    {% set path = value.replace('-','/') %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.1137369}, "macro.dbt_external_tables.key_value": {"unique_id": "macro.dbt_external_tables.key_value", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "name": "key_value", "macro_sql": "{% macro key_value(name, value) %}\n    {% set path = name ~ '=' ~ value %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.114125}, "macro.dbt_external_tables.value_only": {"unique_id": "macro.dbt_external_tables.value_only", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/paths.sql", "original_file_path": "macros/plugins/redshift/helpers/paths.sql", "name": "value_only", "macro_sql": "{% macro value_only(name, value) %}\n    {% set path = value %}\n    {{return(path)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.114463}, "macro.dbt_external_tables.redshift_is_ext_tbl": {"unique_id": "macro.dbt_external_tables.redshift_is_ext_tbl", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "original_file_path": "macros/plugins/redshift/helpers/is_ext_tbl.sql", "name": "redshift_is_ext_tbl", "macro_sql": "{% macro redshift_is_ext_tbl(node) %}\n\n    {% set existing_relation = load_relation(node) %}\n    \n    {#  external tables don't appear in information_schema.tables,\n        so dbt doesn't cache them #}\n    {% if existing_relation is none %}\n\n        {% set find_ext_tbl %}\n        \n            select count(*) from svv_external_tables\n            where schemaname = '{{node.schema}}'\n            and tablename = '{{node.identifier}}'\n        \n        {% endset %}\n        \n        {% if execute %}\n            {% set result = run_query(find_ext_tbl)[0][0] %}\n        {% else %}\n            {% set result = 0 %}\n        {% endif %}\n\n        {% set is_ext_tbl = (result > 0) %}\n        {% do return(is_ext_tbl) %}\n        \n    {% else %}\n    \n        {% do return(false) %}\n        \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.1164281}, "macro.dbt_external_tables.sqlserver__create_external_table": {"unique_id": "macro.dbt_external_tables.sqlserver__create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/sqlserver/create_external_table.sql", "original_file_path": "macros/plugins/sqlserver/create_external_table.sql", "name": "sqlserver__create_external_table", "macro_sql": "{% macro sqlserver__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n\n    {% if external.ansi_nulls is true -%} SET ANSI_NULLS ON; {%- endif %}\n    {% if external.quoted_identifier is true -%} SET QUOTED_IDENTIFIER ON; {%- endif %}\n\n    create external table {{source(source_node.source_name, source_node.name)}} (\n        {% for column in columns %}\n            {# TODO set nullity based on schema tests?? #}\n            {%- set nullity = 'NOT NULL' if 'not_null' in columns.tests else 'NULL'-%}\n            {{adapter.quote(column.name)}} {{column.data_type}} {{nullity}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    )\n    WITH (\n        {# remove keys that are None (i.e. not defined for a given source) #}\n        {%- for key, value in external.items() if value is not none and key not in ['ansi_nulls', 'quoted_identifier'] -%}\n            {{key}} = \n                {%- if key in [\"location\", \"schema_name\", \"object_name\"] -%}\n                    '{{value}}'\n                {% elif key in [\"data_source\",\"file_format\"] -%}\n                    [{{value}}]\n                {% else -%}\n                    {{value}}\n                {%- endif -%}\n            {{- ',' if not loop.last -}}\n            {%- endfor -%}\n    )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.119457}, "macro.dbt_external_tables.sqlserver__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.sqlserver__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/sqlserver/get_external_build_plan.sql", "original_file_path": "macros/plugins/sqlserver/get_external_build_plan.sql", "name": "sqlserver__get_external_build_plan", "macro_sql": "{% macro sqlserver__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = source_node.database,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [ \n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.121366}, "macro.dbt_external_tables.sqlserver__dropif": {"unique_id": "macro.dbt_external_tables.sqlserver__dropif", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/sqlserver/helpers/dropif.sql", "original_file_path": "macros/plugins/sqlserver/helpers/dropif.sql", "name": "sqlserver__dropif", "macro_sql": "{% macro sqlserver__dropif(node) %}\n    \n    {% set ddl %}\n      if object_id ('{{source(node.source_name, node.name)}}') is not null\n        begin\n        drop external table {{source(node.source_name, node.name)}}\n        end\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.122271}, "macro.dbt_external_tables.spark__create_external_table": {"unique_id": "macro.dbt_external_tables.spark__create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/create_external_table.sql", "original_file_path": "macros/plugins/spark/create_external_table.sql", "name": "spark__create_external_table", "macro_sql": "{% macro spark__create_external_table(source_node) %}\n\n    {%- set columns = source_node.columns.values() -%}\n    {%- set external = source_node.external -%}\n    {%- set partitions = external.partitions -%}\n    {%- set options = external.options -%}\n\n{# https://spark.apache.org/docs/latest/sql-data-sources-hive-tables.html #}\n    create table {{source(source_node.source_name, source_node.name)}} \n    {%- if columns|length > 0 %} (\n        {% for column in columns %}\n            {{column.name}} {{column.data_type}}\n            {{- ',' if not loop.last -}}\n        {% endfor %}\n    ) {% endif -%}\n    {% if external.using %} using {{external.using}} {%- endif %}\n    {% if options -%} options (\n        {%- for key, value in options.items() -%}\n            '{{ key }}' = '{{value}}' {{- ', \\n' if not loop.last -}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if partitions -%} partitioned by (\n        {%- for partition in partitions -%}\n            {{partition.name}} {{partition.data_type}}{{', ' if not loop.last}}\n        {%- endfor -%}\n    ) {%- endif %}\n    {% if external.row_format -%} row format {{external.row_format}} {%- endif %}\n    {% if external.file_format -%} stored as {{external.file_format}} {%- endif %}\n    {% if external.location -%} location '{{external.location}}' {%- endif %}\n    {% if external.table_properties -%} tblproperties {{ external.table_properties }} {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.126341}, "macro.dbt_external_tables.spark__refresh_external_table": {"unique_id": "macro.dbt_external_tables.spark__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/refresh_external_table.sql", "original_file_path": "macros/plugins/spark/refresh_external_table.sql", "name": "spark__refresh_external_table", "macro_sql": "{% macro spark__refresh_external_table(source_node) %}\n    \n    {% set refresh %}\n        refresh table {{source(source_node.source_name, source_node.name)}}\n    {% endset %}\n    \n    {% do return([refresh]) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.127197}, "macro.dbt_external_tables.spark__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.spark__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/get_external_build_plan.sql", "original_file_path": "macros/plugins/spark/get_external_build_plan.sql", "name": "spark__get_external_build_plan", "macro_sql": "{% macro spark__get_external_build_plan(source_node) %}\n\n    {% set build_plan = [] %}\n\n    {% set old_relation = adapter.get_relation(\n        database = none,\n        schema = source_node.schema,\n        identifier = source_node.identifier\n    ) %}\n\n    {% set create_or_replace = (old_relation is none or var('ext_full_refresh', false)) %}\n\n    {% if create_or_replace %}\n        {% set build_plan = build_plan + [\n            dbt_external_tables.dropif(source_node), \n            dbt_external_tables.create_external_table(source_node)\n        ] %}\n    {% else %}\n        {% set build_plan = build_plan + dbt_external_tables.refresh_external_table(source_node) %}\n    {% endif %}\n\n    {% set recover_partitions = spark__recover_partitions(source_node) %}\n    {% if recover_partitions|length > 0 %}\n    {% set build_plan = build_plan + [\n        recover_partitions\n    ] %}\n    {% endif %}\n\n    {% do return(build_plan) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.dropif", "macro.dbt_external_tables.create_external_table", "macro.dbt_external_tables.refresh_external_table", "macro.dbt_external_tables.spark__recover_partitions"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.12961}, "macro.dbt_external_tables.spark__recover_partitions": {"unique_id": "macro.dbt_external_tables.spark__recover_partitions", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/helpers/recover_partitions.sql", "original_file_path": "macros/plugins/spark/helpers/recover_partitions.sql", "name": "spark__recover_partitions", "macro_sql": "{% macro spark__recover_partitions(source_node) %}\n    {# https://docs.databricks.com/sql/language-manual/sql-ref-syntax-ddl-alter-table.html #}\n\n    {% set ddl %}\n    {%- if source_node.external.partitions and source_node.external.using and source_node.external.using|lower != 'delta' -%}\n        ALTER TABLE {{ source(source_node.source_name, source_node.name) }} RECOVER PARTITIONS\n    {%- endif -%}\n    {% endset %}\n\n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.130691}, "macro.dbt_external_tables.spark__dropif": {"unique_id": "macro.dbt_external_tables.spark__dropif", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/plugins/spark/helpers/dropif.sql", "original_file_path": "macros/plugins/spark/helpers/dropif.sql", "name": "spark__dropif", "macro_sql": "{% macro spark__dropif(node) %}\n    \n    {% set ddl %}\n        drop table if exists {{source(node.source_name, node.name)}}\n    {% endset %}\n    \n    {{return(ddl)}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.131445}, "macro.dbt_external_tables.create_external_table": {"unique_id": "macro.dbt_external_tables.create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "name": "create_external_table", "macro_sql": "{% macro create_external_table(source_node) %}\n    {{ adapter.dispatch('create_external_table', 'dbt_external_tables')(source_node) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__create_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.1320388}, "macro.dbt_external_tables.default__create_external_table": {"unique_id": "macro.dbt_external_tables.default__create_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/common/create_external_table.sql", "original_file_path": "macros/common/create_external_table.sql", "name": "default__create_external_table", "macro_sql": "{% macro default__create_external_table(source_node) %}\n    {{ exceptions.raise_compiler_error(\"External table creation is not implemented for the default adapter\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.132304}, "macro.dbt_external_tables.refresh_external_table": {"unique_id": "macro.dbt_external_tables.refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "name": "refresh_external_table", "macro_sql": "{% macro refresh_external_table(source_node) %}\n    {{ return(adapter.dispatch('refresh_external_table', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__refresh_external_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.1329448}, "macro.dbt_external_tables.default__refresh_external_table": {"unique_id": "macro.dbt_external_tables.default__refresh_external_table", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/common/refresh_external_table.sql", "original_file_path": "macros/common/refresh_external_table.sql", "name": "default__refresh_external_table", "macro_sql": "{% macro default__refresh_external_table(source_node) %}\n    {% do return([]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.1332102}, "macro.dbt_external_tables.get_external_build_plan": {"unique_id": "macro.dbt_external_tables.get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "name": "get_external_build_plan", "macro_sql": "{% macro get_external_build_plan(source_node) %}\n    {{ return(adapter.dispatch('get_external_build_plan', 'dbt_external_tables')(source_node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.snowflake__get_external_build_plan"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.133834}, "macro.dbt_external_tables.default__get_external_build_plan": {"unique_id": "macro.dbt_external_tables.default__get_external_build_plan", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/common/get_external_build_plan.sql", "original_file_path": "macros/common/get_external_build_plan.sql", "name": "default__get_external_build_plan", "macro_sql": "{% macro default__get_external_build_plan(source_node) %}\n    {{ exceptions.raise_compiler_error(\"Staging external sources is not implemented for the default adapter\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.134089}, "macro.dbt_external_tables.stage_external_sources": {"unique_id": "macro.dbt_external_tables.stage_external_sources", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/common/stage_external_sources.sql", "original_file_path": "macros/common/stage_external_sources.sql", "name": "stage_external_sources", "macro_sql": "{% macro stage_external_sources(select=none) %}\n\n    {% set sources_to_stage = [] %}\n    \n    {% set source_nodes = graph.sources.values() if graph.sources else [] %}\n    \n    {% for node in source_nodes %}\n        {% if node.external %}\n            \n            {% if select %}\n            \n                {% for src in select.split(' ') %}\n                \n                    {% if '.' in src %}\n                        {% set src_s = src.split('.') %}\n                        {% if src_s[0] == node.source_name and src_s[1] == node.name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% else %}\n                        {% if src == node.source_name %}\n                            {% do sources_to_stage.append(node) %}\n                        {% endif %}\n                    {% endif %}\n                    \n                {% endfor %}\n                        \n            {% else %}\n            \n                {% do sources_to_stage.append(node) %}\n                \n            {% endif %}\n        {% endif %}\n        \n    {% endfor %}\n    \n    {% if sources_to_stage|length == 0 %}\n        {% do log('No external sources selected', info = true) %}\n    {% endif %}\n            \n    {% for node in sources_to_stage %}\n\n        {% set loop_label = loop.index ~ ' of ' ~ loop.length %}\n\n        {% do log(loop_label ~ ' START external source ' ~ node.schema ~ '.' ~ node.identifier, info = true) -%}\n        \n        {% set run_queue = dbt_external_tables.get_external_build_plan(node) %}\n        \n        {% do log(loop_label ~ ' SKIP', info = true) if run_queue == [] %}\n        {% set width = flags.PRINTER_WIDTH %}\n        \n        {% for q in run_queue %}\n        \n            {% set q_msg = q|replace('\\n','')|replace('begin;','')|trim %}\n            {% set q_log = q_msg[:width] ~ '...  ' if q_msg|length > width else q_msg %}\n        \n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ q_log, info = true) %}\n            {% set exit_txn = dbt_external_tables.exit_transaction() %}\n        \n            {% call statement('runner', fetch_result = True, auto_begin = False) %}\n                {{ exit_txn }} {{ q }}\n            {% endcall %}\n            \n            {% set runner = load_result('runner') %}\n            {% set log_msg = runner['response'] if 'response' in runner.keys() else runner['status'] %}\n            {% do log(loop_label ~ ' (' ~ loop.index ~ ') ' ~ log_msg, info = true) %}\n            \n        {% endfor %}\n        \n    {% endfor %}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.get_external_build_plan", "macro.dbt_external_tables.exit_transaction", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.143629}, "macro.dbt_external_tables.dropif": {"unique_id": "macro.dbt_external_tables.dropif", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "name": "dropif", "macro_sql": "{% macro dropif(node) %}\n    {{ adapter.dispatch('dropif', 'dbt_external_tables')(node) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.default__dropif"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.1444092}, "macro.dbt_external_tables.default__dropif": {"unique_id": "macro.dbt_external_tables.default__dropif", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/dropif.sql", "original_file_path": "macros/common/helpers/dropif.sql", "name": "default__dropif", "macro_sql": "{% macro default__dropif() %}\n    {{ exceptions.raise_compiler_error(\n        \"Dropping external tables is not implemented for the default adapter\"\n    ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.144672}, "macro.dbt_external_tables.exit_transaction": {"unique_id": "macro.dbt_external_tables.exit_transaction", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "name": "exit_transaction", "macro_sql": "{% macro exit_transaction() %}\n    {{ return(adapter.dispatch('exit_transaction', 'dbt_external_tables')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_external_tables.default__exit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.145269}, "macro.dbt_external_tables.default__exit_transaction": {"unique_id": "macro.dbt_external_tables.default__exit_transaction", "package_name": "dbt_external_tables", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_external_tables", "path": "macros/common/helpers/transaction.sql", "original_file_path": "macros/common/helpers/transaction.sql", "name": "default__exit_transaction", "macro_sql": "{% macro default__exit_transaction() %}\n    {{ return('') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.145503}, "macro.dbt_expectations.type_timestamp": {"unique_id": "macro.dbt_expectations.type_timestamp", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_expectations')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.146283}, "macro.dbt_expectations.default__type_timestamp": {"unique_id": "macro.dbt_expectations.default__type_timestamp", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() -%}\n    timestamp\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.146435}, "macro.dbt_expectations.snowflake__type_timestamp": {"unique_id": "macro.dbt_expectations.snowflake__type_timestamp", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.146584}, "macro.dbt_expectations.postgres__type_timestamp": {"unique_id": "macro.dbt_expectations.postgres__type_timestamp", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.1467369}, "macro.dbt_expectations.type_datetime": {"unique_id": "macro.dbt_expectations.type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "type_datetime", "macro_sql": "{% macro type_datetime() -%}\n  {{ return(adapter.dispatch('type_datetime', 'dbt_expectations')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__type_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.147053}, "macro.dbt_expectations.default__type_datetime": {"unique_id": "macro.dbt_expectations.default__type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "default__type_datetime", "macro_sql": "{% macro default__type_datetime() -%}\n    datetime\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.14721}, "macro.dbt_expectations.snowflake__type_datetime": {"unique_id": "macro.dbt_expectations.snowflake__type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "snowflake__type_datetime", "macro_sql": "{% macro snowflake__type_datetime() -%}\n    timestamp_ntz\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.14735}, "macro.dbt_expectations.postgres__type_datetime": {"unique_id": "macro.dbt_expectations.postgres__type_datetime", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/utils/datatypes.sql", "original_file_path": "macros/utils/datatypes.sql", "name": "postgres__type_datetime", "macro_sql": "{% macro postgres__type_datetime() -%}\n    timestamp without time zone\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.1474922}, "macro.dbt_expectations.regexp_instr": {"unique_id": "macro.dbt_expectations.regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "regexp_instr", "macro_sql": "{% macro regexp_instr(source_value, regexp, position=1, occurrence=1) %}\n\n    {{ adapter.dispatch('regexp_instr', 'dbt_expectations')(\n        source_value, regexp, position, occurrence\n    ) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__regexp_instr"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.14864}, "macro.dbt_expectations.default__regexp_instr": {"unique_id": "macro.dbt_expectations.default__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "default__regexp_instr", "macro_sql": "{% macro default__regexp_instr(source_value, regexp, position, occurrence) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.1491141}, "macro.dbt_expectations.redshift__regexp_instr": {"unique_id": "macro.dbt_expectations.redshift__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "redshift__regexp_instr", "macro_sql": "{% macro redshift__regexp_instr(source_value, regexp, position, occurrence) %}\nregexp_instr({{ source_value }}, '{{ regexp }}', {{ position }}, {{ occurrence }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.1494882}, "macro.dbt_expectations.postgres__regexp_instr": {"unique_id": "macro.dbt_expectations.postgres__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "postgres__regexp_instr", "macro_sql": "{% macro postgres__regexp_instr(source_value, regexp, position, occurrence) %}\narray_length((select regexp_matches({{ source_value }}, '{{ regexp }}')), 1)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.149788}, "macro.dbt_expectations.spark__regexp_instr": {"unique_id": "macro.dbt_expectations.spark__regexp_instr", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/regex/regexp_instr.sql", "original_file_path": "macros/regex/regexp_instr.sql", "name": "spark__regexp_instr", "macro_sql": "{% macro spark__regexp_instr(source_value, regexp, position, occurrence) %}\ncase when {{ source_value }} rlike '{{ regexp }}' then 1 else 0 end\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.150076}, "macro.dbt_expectations.log_natural": {"unique_id": "macro.dbt_expectations.log_natural", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "log_natural", "macro_sql": "{% macro log_natural(x) -%}\n    {{ adapter.dispatch('log_natural', 'dbt_expectations') (x) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__log_natural"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.150739}, "macro.dbt_expectations.default__log_natural": {"unique_id": "macro.dbt_expectations.default__log_natural", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "default__log_natural", "macro_sql": "{% macro default__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.150943}, "macro.dbt_expectations.bigquery__log_natural": {"unique_id": "macro.dbt_expectations.bigquery__log_natural", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "bigquery__log_natural", "macro_sql": "{% macro bigquery__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.151144}, "macro.dbt_expectations.snowflake__log_natural": {"unique_id": "macro.dbt_expectations.snowflake__log_natural", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/math/log_natural.sql", "original_file_path": "macros/math/log_natural.sql", "name": "snowflake__log_natural", "macro_sql": "{% macro snowflake__log_natural(x) %}\n\n    ln({{ x }})\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.151444}, "macro.dbt_expectations.rand": {"unique_id": "macro.dbt_expectations.rand", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "rand", "macro_sql": "{% macro rand() -%}\n    {{ adapter.dispatch('rand', 'dbt_expectations') () }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.snowflake__rand"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.1521149}, "macro.dbt_expectations.default__rand": {"unique_id": "macro.dbt_expectations.default__rand", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "default__rand", "macro_sql": "{% macro default__rand() %}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.152265}, "macro.dbt_expectations.bigquery__rand": {"unique_id": "macro.dbt_expectations.bigquery__rand", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "bigquery__rand", "macro_sql": "{% macro bigquery__rand() %}\n\n    rand()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.152412}, "macro.dbt_expectations.snowflake__rand": {"unique_id": "macro.dbt_expectations.snowflake__rand", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "snowflake__rand", "macro_sql": "{% macro snowflake__rand(seed) %}\n\n    uniform(0::float, 1::float, random())\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.15257}, "macro.dbt_expectations.postgres__rand": {"unique_id": "macro.dbt_expectations.postgres__rand", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "postgres__rand", "macro_sql": "{% macro postgres__rand() %}\n\n    random()\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.152715}, "macro.dbt_expectations.redshift__rand": {"unique_id": "macro.dbt_expectations.redshift__rand", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/math/rand.sql", "original_file_path": "macros/math/rand.sql", "name": "redshift__rand", "macro_sql": "{% macro redshift__rand() %}\n\n    random()\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.152884}, "macro.dbt_expectations.median": {"unique_id": "macro.dbt_expectations.median", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/math/median.sql", "original_file_path": "macros/math/median.sql", "name": "median", "macro_sql": "{% macro median(field) %}\n{{ dbt_expectations.percentile_cont(field, 0.5) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.153451}, "macro.dbt_expectations.percentile_cont": {"unique_id": "macro.dbt_expectations.percentile_cont", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "percentile_cont", "macro_sql": "{% macro percentile_cont(field, quantile, partition=None) %}\n  {{ adapter.dispatch('quantile', 'dbt_expectations') (field, quantile, partition) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__quantile"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.154491}, "macro.dbt_expectations.default__quantile": {"unique_id": "macro.dbt_expectations.default__quantile", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "default__quantile", "macro_sql": "{% macro default__quantile(field, quantile, partition)  -%}\n    percentile_cont({{ quantile }}) within group (order by {{ field }})\n    {%- if partition %}over(partition by {{ partition }}){% endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.154915}, "macro.dbt_expectations.bigquery__quantile": {"unique_id": "macro.dbt_expectations.bigquery__quantile", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/math/percentile_cont.sql", "original_file_path": "macros/math/percentile_cont.sql", "name": "bigquery__quantile", "macro_sql": "{% macro bigquery__quantile(field, quantile, partition) %}\n    percentile_cont({{ field }}, {{ quantile }})\n    over({%- if partition %}partition by {{ partition }}{% endif -%})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.1553211}, "macro.dbt_expectations.test_expression_between": {"unique_id": "macro.dbt_expectations.test_expression_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "name": "test_expression_between", "macro_sql": "{% test expression_between(model,\n                                 expression,\n                                 min_value=None,\n                                 max_value=None,\n                                 group_by_columns=None,\n                                 row_condition=None,\n                                 strictly=False\n                                 ) %}\n\n    {{ dbt_expectations.expression_between(model, expression, min_value, max_value, group_by_columns, row_condition, strictly) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.157202}, "macro.dbt_expectations.expression_between": {"unique_id": "macro.dbt_expectations.expression_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_between.sql", "original_file_path": "macros/schema_tests/_generalized/expression_between.sql", "name": "expression_between", "macro_sql": "{% macro expression_between(model,\n                            expression,\n                            min_value,\n                            max_value,\n                            group_by_columns,\n                            row_condition,\n                            strictly\n                            ) %}\n\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n\n{%- set strict_operator = \"\" if strictly else \"=\" -%}\n\n{% set expression_min_max %}\n( 1=1\n{%- if min_value is not none %} and {{ expression | trim }} >{{ strict_operator }} {{ min_value }}{% endif %}\n{%- if max_value is not none %} and {{ expression | trim }} <{{ strict_operator }} {{ max_value }}{% endif %}\n)\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression_min_max,\n                                        group_by_columns=group_by_columns,\n                                        row_condition=row_condition)\n                                        }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.15874}, "macro.dbt_expectations.test_expression_is_true": {"unique_id": "macro.dbt_expectations.test_expression_is_true", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n\n    {{ dbt_expectations.expression_is_true(model, expression, test_condition, group_by_columns, row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.160523}, "macro.dbt_expectations.expression_is_true": {"unique_id": "macro.dbt_expectations.expression_is_true", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "expression_is_true", "macro_sql": "{% macro expression_is_true(model,\n                                 expression,\n                                 test_condition=\"= true\",\n                                 group_by_columns=None,\n                                 row_condition=None\n                                 ) %}\n    {{ adapter.dispatch('expression_is_true', 'dbt_expectations') (model, expression, test_condition, group_by_columns, row_condition) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.16111}, "macro.dbt_expectations.default__expression_is_true": {"unique_id": "macro.dbt_expectations.default__expression_is_true", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/expression_is_true.sql", "original_file_path": "macros/schema_tests/_generalized/expression_is_true.sql", "name": "default__expression_is_true", "macro_sql": "{% macro default__expression_is_true(model, expression, test_condition, group_by_columns, row_condition) -%}\nwith grouped_expression as (\n    select\n        {% if group_by_columns %}\n        {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ dbt_expectations.truth_expression(expression) }}\n    from {{ model }}\n     {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by_columns %}\n    group by\n    {% for group_by_column in group_by_columns -%}\n        {{ group_by_column }}{% if not loop.last %},{% endif %}\n    {% endfor %}\n    {% endif %}\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        grouped_expression\n    where\n        not(expression {{ test_condition }})\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.162326}, "macro.dbt_expectations.get_select": {"unique_id": "macro.dbt_expectations.get_select", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "get_select", "macro_sql": "{% macro get_select(model, expression, row_condition, group_by) -%}\n    {{ adapter.dispatch('get_select', 'dbt_expectations') (model, expression, row_condition, group_by) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__get_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.169452}, "macro.dbt_expectations.default__get_select": {"unique_id": "macro.dbt_expectations.default__get_select", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "default__get_select", "macro_sql": "\n\n{%- macro default__get_select(model, expression, row_condition, group_by) %}\n    select\n        {% if group_by %}\n        {% for g in group_by -%}\n            {{ g }} as col_{{ loop.index }},\n        {% endfor -%}\n        {% endif %}\n        {{ expression }} as expression\n    from\n        {{ model }}\n    {%- if row_condition %}\n    where\n        {{ row_condition }}\n    {% endif %}\n    {% if group_by %}\n    group by\n        {% for g in group_by -%}\n            {{ loop.index }}{% if not loop.last %},{% endif %}\n        {% endfor %}\n    {% endif %}\n{% endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.170725}, "macro.dbt_expectations.test_equal_expression": {"unique_id": "macro.dbt_expectations.test_equal_expression", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "test_equal_expression", "macro_sql": "{% test equal_expression(model, expression,\n                                compare_model=None,\n                                compare_expression=None,\n                                group_by=None,\n                                compare_group_by=None,\n                                row_condition=None,\n                                compare_row_condition=None,\n                                tolerance=0.0,\n                                tolerance_percent=None\n                                ) -%}\n\n    {{ adapter.dispatch('test_equal_expression', 'dbt_expectations') (\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.171635}, "macro.dbt_expectations.default__test_equal_expression": {"unique_id": "macro.dbt_expectations.default__test_equal_expression", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/equal_expression.sql", "original_file_path": "macros/schema_tests/_generalized/equal_expression.sql", "name": "default__test_equal_expression", "macro_sql": "\n\n{%- macro default__test_equal_expression(\n                                model,\n                                expression,\n                                compare_model,\n                                compare_expression,\n                                group_by,\n                                compare_group_by,\n                                row_condition,\n                                compare_row_condition,\n                                tolerance,\n                                tolerance_percent) -%}\n\n    {%- set compare_model = model if not compare_model else compare_model -%}\n    {%- set compare_expression = expression if not compare_expression else compare_expression -%}\n    {%- set compare_row_condition = row_condition if not compare_row_condition else compare_row_condition -%}\n    {%- set compare_group_by = group_by if not compare_group_by else compare_group_by -%}\n\n    {%- set n_cols = (group_by|length) if group_by else 0 %}\n    with a as (\n        {{ dbt_expectations.get_select(model, expression, row_condition, group_by) }}\n    ),\n    b as (\n        {{ dbt_expectations.get_select(compare_model, compare_expression, compare_row_condition, compare_group_by) }}\n    ),\n    final as (\n\n        select\n            {% for i in range(1, n_cols + 1) -%}\n            coalesce(a.col_{{ i }}, b.col_{{ i }}) as col_{{ i }},\n            {% endfor %}\n            a.expression,\n            b.expression as compare_expression,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0)) as expression_difference,\n            abs(coalesce(a.expression, 0) - coalesce(b.expression, 0))/\n                nullif(a.expression * 1.0, 0) as expression_difference_percent\n        from\n        {% if n_cols > 0 %}\n            a\n            full outer join\n            b on\n            {% for i in range(1, n_cols + 1) -%}\n                a.col_{{ i }} = b.col_{{ i }} {% if not loop.last %}and{% endif %}\n            {% endfor -%}\n        {% else %}\n            a cross join b\n        {% endif %}\n    )\n    -- DEBUG:\n    -- select * from final\n    select\n        *\n    from final\n    where\n        {% if tolerance_percent %}\n        expression_difference_percent > {{ tolerance_percent }}\n        {% else %}\n        expression_difference > {{ tolerance }}\n        {% endif %}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.get_select"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.17412}, "macro.dbt_expectations.truth_expression": {"unique_id": "macro.dbt_expectations.truth_expression", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "name": "truth_expression", "macro_sql": "{% macro truth_expression(expression) %}\n    {{ adapter.dispatch('truth_expression', 'dbt_expectations') (expression) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__truth_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.174796}, "macro.dbt_expectations.default__truth_expression": {"unique_id": "macro.dbt_expectations.default__truth_expression", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/_generalized/_truth_expression.sql", "original_file_path": "macros/schema_tests/_generalized/_truth_expression.sql", "name": "default__truth_expression", "macro_sql": "{% macro default__truth_expression(expression) %}\n  {{ expression }} as expression\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.175004}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern.sql", "name": "test_expect_column_values_to_match_like_pattern", "macro_sql": "{% test expect_column_values_to_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.1761239}, "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_like_pattern_list.sql", "name": "test_expect_column_values_to_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=True) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.178045}, "macro.dbt_expectations.test_expect_column_values_to_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex.sql", "name": "test_expect_column_values_to_match_regex", "macro_sql": "{% test expect_column_values_to_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} > 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.179368}, "macro.dbt_expectations.test_expect_column_value_lengths_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_equal.sql", "name": "test_expect_column_value_lengths_to_equal", "macro_sql": "{% test expect_column_value_lengths_to_equal(model, column_name,\n                                                    value,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_utils.length(column_name) ~ \" = \" ~ value %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.180429}, "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_value_lengths_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_value_lengths_to_be_between.sql", "name": "test_expect_column_value_lengths_to_be_between", "macro_sql": "{% test expect_column_value_lengths_to_be_between(model, column_name,\n                                                         min_value=None,\n                                                         max_value=None,\n                                                         row_condition=None,\n                                                         strictly=False\n                                                      ) %}\n{% set expression %}\n{{ dbt_utils.length(column_name) }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.length", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.1819}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex.sql", "name": "test_expect_column_values_to_not_match_regex", "macro_sql": "{% test expect_column_values_to_not_match_regex(model, column_name,\n                                                    regex,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} = 0\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.183053}, "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_regex_list", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_regex_list.sql", "name": "test_expect_column_values_to_not_match_regex_list", "macro_sql": "{% test expect_column_values_to_not_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n{% for regex in regex_list %}\n{{ dbt_expectations.regexp_instr(column_name, regex) }} = 0\n{%- if not loop.last %}\n{{ \" and \" if match_on == \"all\" else \" or \"}}\n{% endif -%}\n{% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.185204}, "macro.dbt_expectations.test_expect_column_values_to_match_regex_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_match_regex_list", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_match_regex_list.sql", "name": "test_expect_column_values_to_match_regex_list", "macro_sql": "{% test expect_column_values_to_match_regex_list(model, column_name,\n                                                    regex_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for regex in regex_list %}\n    {{ dbt_expectations.regexp_instr(column_name, regex) }} > 0\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.regexp_instr", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.1873012}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern_list", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern_list.sql", "name": "test_expect_column_values_to_not_match_like_pattern_list", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern_list(model, column_name,\n                                                    like_pattern_list,\n                                                    match_on=\"any\",\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression %}\n    {% for like_pattern in like_pattern_list %}\n    {{ dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) }}\n    {%- if not loop.last %}\n    {{ \" and \" if match_on == \"all\" else \" or \"}}\n    {% endif -%}\n    {% endfor %}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.189156}, "macro.dbt_expectations._get_like_pattern_expression": {"unique_id": "macro.dbt_expectations._get_like_pattern_expression", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "original_file_path": "macros/schema_tests/string_matching/_get_like_pattern_expression.sql", "name": "_get_like_pattern_expression", "macro_sql": "{% macro _get_like_pattern_expression(column_name, like_pattern, positive) %}\n{{ column_name }} {{ \"not\" if not positive else \"\" }} like '{{ like_pattern }}'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.189816}, "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_match_like_pattern", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "original_file_path": "macros/schema_tests/string_matching/expect_column_values_to_not_match_like_pattern.sql", "name": "test_expect_column_values_to_not_match_like_pattern", "macro_sql": "{% test expect_column_values_to_not_match_like_pattern(model, column_name,\n                                                    like_pattern,\n                                                    row_condition=None\n                                                    ) %}\n\n{% set expression = dbt_expectations._get_like_pattern_expression(column_name, like_pattern, positive=False) %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_like_pattern_expression", "macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.190867}, "macro.dbt_expectations.test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "name": "test_expect_row_values_to_have_recent_data", "macro_sql": "{% test expect_row_values_to_have_recent_data(model,\n                                                column_name,\n                                                datepart,\n                                                interval,\n                                                row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                        column_name,\n                                                                                        datepart,\n                                                                                        interval,\n                                                                                        row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.192676}, "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_row_values_to_have_recent_data.sql", "name": "default__test_expect_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_row_values_to_have_recent_data(model, column_name, datepart, interval, row_condition) %}\n{%- set default_start_date = '1970-01-01' -%}\nwith max_recency as (\n\n    select max(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})) as max_timestamp\n    from\n        {{ model }}\n    where\n        cast({{ column_name }} as {{ dbt_utils.type_timestamp() }}) <= {{ dbt_date.now() }}\n        {% if row_condition %}\n        and {{ row_condition }}\n        {% endif %}\n)\nselect\n    *\nfrom\n    max_recency\nwhere\n    -- if the row_condition excludes all row, we need to compare against a default date\n    -- to avoid false negatives\n    coalesce(max_timestamp, cast('{{ default_start_date }}' as {{ dbt_utils.type_timestamp() }}))\n        <\n        cast({{ dbt_utils.dateadd(datepart, interval * -1, dbt_date.now()) }} as {{ dbt_utils.type_timestamp() }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp", "macro.dbt_date.now", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.193921}, "macro.dbt_expectations.test_expect_table_columns_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_contain_set", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_contain_set.sql", "name": "test_expect_table_columns_to_contain_set", "macro_sql": "{%- test expect_table_columns_to_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        input_columns i\n        left join\n        relation_columns r on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        r.relation_column is null\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.196479}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table.sql", "name": "test_expect_table_row_count_to_equal_other_table", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table(model, compare_model, factor=1, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_equal_expression(model, \"count(*)\",\n    compare_model=compare_model,\n    compare_expression=\"count(*) * \" + factor|string,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.1974971}, "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_not_contain_set", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_not_contain_set.sql", "name": "test_expect_table_columns_to_not_contain_set", "macro_sql": "{%- test expect_table_columns_to_not_contain_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    -- catch any column in input list that is in the list of table columns\n    select *\n    from\n        input_columns i\n        inner join\n        relation_columns r on r.relation_column = i.input_column\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.199819}, "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "name": "test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% test expect_grouped_row_values_to_have_recent_data(model,\n                                                        group_by,\n                                                        timestamp_column,\n                                                        datepart,\n                                                        interval,\n                                                        row_condition=None) %}\n\n {{ adapter.dispatch('test_expect_grouped_row_values_to_have_recent_data', 'dbt_expectations') (model,\n                                                                                                group_by,\n                                                                                                timestamp_column,\n                                                                                                datepart,\n                                                                                                interval,\n                                                                                                row_condition) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.2024598}, "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data": {"unique_id": "macro.dbt_expectations.default__test_expect_grouped_row_values_to_have_recent_data", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "original_file_path": "macros/schema_tests/table_shape/expect_grouped_row_values_to_have_recent_data.sql", "name": "default__test_expect_grouped_row_values_to_have_recent_data", "macro_sql": "{% macro default__test_expect_grouped_row_values_to_have_recent_data(model,\n                                                                        group_by,\n                                                                        timestamp_column,\n                                                                        datepart,\n                                                                        interval,\n                                                                        row_condition) %}\nwith latest_grouped_timestamps as (\n\n    select\n        {%- for g in group_by %}\n        {{ g }},\n        {%- endfor %}\n        max(1) as join_key,\n        max({{ timestamp_column }}) as latest_timestamp_column\n    from\n        {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    {{ dbt_utils.group_by(group_by | length )}}\n\n),\ntotal_row_counts as (\n\n    select\n        max(1) as join_key,\n        count(*) as row_count\n    from\n        latest_grouped_timestamps\n\n),\noutdated_grouped_timestamps as (\n\n    select *\n    from\n        latest_grouped_timestamps\n    where\n        latest_timestamp_column < {{ dbt_utils.dateadd(datepart, interval * -1, dbt_date.now()) }}\n\n),\nvalidation_errors as (\n\n    select\n        r.row_count,\n        t.*\n    from\n        total_row_counts r\n        left join\n        outdated_grouped_timestamps t\n        on r.join_key = t.join_key\n    where\n        -- fail if either no rows were returned due to row_condition,\n        -- or the recency test returned failed rows\n        r.row_count = 0\n        or\n        t.join_key is not null\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.group_by", "macro.dbt_utils.dateadd", "macro.dbt_date.now"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.2034829}, "macro.dbt_expectations.test_expect_column_to_exist": {"unique_id": "macro.dbt_expectations.test_expect_column_to_exist", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "original_file_path": "macros/schema_tests/table_shape/expect_column_to_exist.sql", "name": "test_expect_column_to_exist", "macro_sql": "{%- test expect_column_to_exist(model, column_name, column_index=None, transform=\"upper\") -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | map(transform) | join -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n\n    {%- set matching_column_index = relation_column_names.index(column_name) if column_name in relation_column_names else -1 %}\n\n    {%- if column_index -%}\n\n        {%- set column_index_0 = column_index - 1 if column_index > 0 else 0 -%}\n\n        {%- set column_index_matches = true if matching_column_index == column_index_0 else false %}\n\n    {%- else -%}\n\n        {%- set column_index_matches = true -%}\n\n    {%- endif %}\n\n    with test_data as (\n\n        select\n            cast('{{ column_name }}' as {{ dbt_utils.type_string() }}) as column_name,\n            {{ matching_column_index }} as matching_column_index,\n            {{ column_index_matches }} as column_index_matches\n\n    )\n    select *\n    from test_data\n    where\n        not(matching_column_index >= 0 and column_index_matches)\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.205704}, "macro.dbt_expectations.test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "name": "test_expect_table_row_count_to_equal", "macro_sql": "{%- test expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) -%}\n    {{ adapter.dispatch('test_expect_table_row_count_to_equal',\n                        'dbt_expectations') (model,\n                                                                        value,\n                                                                        group_by,\n                                                                        row_condition\n                                                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_table_row_count_to_equal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.2076979}, "macro.dbt_expectations.default__test_expect_table_row_count_to_equal": {"unique_id": "macro.dbt_expectations.default__test_expect_table_row_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal.sql", "name": "default__test_expect_table_row_count_to_equal", "macro_sql": "\n\n\n\n{%- macro default__test_expect_table_row_count_to_equal(model,\n                                                value,\n                                                group_by,\n                                                row_condition\n                                                ) -%}\n{% set expression %}\ncount(*) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.208299}, "macro.dbt_expectations.test_expect_table_row_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_be_between.sql", "name": "test_expect_table_row_count_to_be_between", "macro_sql": "{%- test expect_table_row_count_to_be_between(model,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n{% set expression %}\ncount(*)\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.2096372}, "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor": {"unique_id": "macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table_times_factor", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_row_count_to_equal_other_table_times_factor.sql", "name": "test_expect_table_row_count_to_equal_other_table_times_factor", "macro_sql": "{%- test expect_table_row_count_to_equal_other_table_times_factor(model, compare_model, factor, row_condition=None, compare_row_condition=None) -%}\n{{ dbt_expectations.test_expect_table_row_count_to_equal_other_table(model, compare_model,\n    factor=factor,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_table_row_count_to_equal_other_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.210384}, "macro.dbt_expectations.test_expect_table_columns_to_match_set": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_set", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_set.sql", "name": "test_expect_table_columns_to_match_set", "macro_sql": "{%- test expect_table_columns_to_match_set(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column\n    where\n        -- catch any column in input list that is not in the list of table columns\n        -- or any table column that is not in the input list\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.2127}, "macro.dbt_expectations._get_column_list": {"unique_id": "macro.dbt_expectations._get_column_list", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/_get_column_list.sql", "original_file_path": "macros/schema_tests/table_shape/_get_column_list.sql", "name": "_get_column_list", "macro_sql": "{%- macro _get_column_list(model, transform=\"upper\") -%}\n{%- set relation_columns = adapter.get_columns_in_relation(model) -%}\n{%- set relation_column_names = relation_columns | map(attribute=\"name\") | map(transform) | list -%}\n{%- do return(relation_column_names) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.2136378}, "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list": {"unique_id": "macro.dbt_expectations.test_expect_table_columns_to_match_ordered_list", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_columns_to_match_ordered_list.sql", "name": "test_expect_table_columns_to_match_ordered_list", "macro_sql": "{%- test expect_table_columns_to_match_ordered_list(model, column_list, transform=\"upper\") -%}\n{%- if execute -%}\n    {%- set column_list = column_list | map(transform) | list -%}\n    {%- set relation_column_names = dbt_expectations._get_column_list(model, transform) -%}\n    {%- set matching_columns = dbt_expectations._list_intersect(column_list, relation_column_names) -%}\n    with relation_columns as (\n\n        {% for col_name in relation_column_names %}\n        select\n            {{ loop.index }} as relation_column_idx,\n            cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as relation_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    input_columns as (\n\n        {% for col_name in column_list %}\n        select\n            {{ loop.index }} as input_column_idx,\n            cast('{{ col_name }}' as {{ dbt_utils.type_string() }}) as input_column\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    )\n    select *\n    from\n        relation_columns r\n        full outer join\n        input_columns i on r.relation_column = i.input_column and r.relation_column_idx = i.input_column_idx\n    where\n        -- catch any column in input list that is not in the sequence of table columns\n        -- or any table column that is not in the input sequence\n        r.relation_column is null or\n        i.input_column is null\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations._get_column_list", "macro.dbt_expectations._list_intersect", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.216216}, "macro.dbt_expectations._list_intersect": {"unique_id": "macro.dbt_expectations._list_intersect", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/_list_intersect.sql", "original_file_path": "macros/schema_tests/table_shape/_list_intersect.sql", "name": "_list_intersect", "macro_sql": "{%- macro _list_intersect(list1, list2) -%}\n{%- set matching_items = [] -%}\n{%- for itm in list1 -%}\n    {%- if itm in list2 -%}\n        {%- do matching_items.append(itm) -%}\n    {%- endif -%}\n{%- endfor -%}\n{%- do return(matching_items) -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.2171872}, "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal_other_table.sql", "name": "test_expect_table_column_count_to_equal_other_table", "macro_sql": "{%- test expect_table_column_count_to_equal_other_table(model, compare_model) -%}\n{%- if execute -%}\n{%- set number_columns = (adapter.get_columns_in_relation(model) | length) -%}\n{%- set compare_number_columns = (adapter.get_columns_in_relation(compare_model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_columns }} as number_columns,\n        {{ compare_number_columns }} as compare_number_columns\n\n)\nselect *\nfrom test_data\nwhere\n    number_columns != compare_number_columns\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.218202}, "macro.dbt_expectations.test_expect_table_column_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_equal.sql", "name": "test_expect_table_column_count_to_equal", "macro_sql": "{%- test expect_table_column_count_to_equal(model, value) -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ value }} as value\n\n)\nselect *\nfrom test_data\nwhere\n    number_actual_columns != value\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.219018}, "macro.dbt_expectations.test_expect_table_column_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_table_column_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "original_file_path": "macros/schema_tests/table_shape/expect_table_column_count_to_be_between.sql", "name": "test_expect_table_column_count_to_be_between", "macro_sql": "{%- test expect_table_column_count_to_be_between(model,\n                                                        min_value=None,\n                                                        max_value=None\n                                                        ) -%}\n{%- if min_value is none and max_value is none -%}\n{{ exceptions.raise_compiler_error(\n    \"You have to provide either a min_value, max_value or both.\"\n) }}\n{%- endif -%}\n{%- if execute -%}\n{%- set number_actual_columns = (adapter.get_columns_in_relation(model) | length) -%}\n\n{%- set expression %}\n( 1=1\n{%- if min_value %} and number_actual_columns >= min_value{% endif %}\n{%- if max_value %} and number_actual_columns <= max_value{% endif %}\n)\n{% endset -%}\n\nwith test_data as (\n\n    select\n        {{ number_actual_columns }} as number_actual_columns,\n        {{ min_value if min_value else 0 }} as min_value,\n        {{ max_value if max_value else 0 }} as max_value\n\n)\nselect *\nfrom test_data\nwhere\n    not {{ expression }}\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.220913}, "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_in_set.sql", "name": "test_expect_column_values_to_not_be_in_set", "macro_sql": "{% test expect_column_values_to_not_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt_utils.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that match the set\n    select\n        v.value_field\n    from\n        all_values v\n        join\n        set_values s on v.value_field = s.value_field\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.2225852}, "macro.dbt_expectations.test_expect_column_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_set.sql", "name": "test_expect_column_values_to_be_in_set", "macro_sql": "{% test expect_column_values_to_be_in_set(model, column_name,\n                                                   value_set,\n                                                   quote_values=True,\n                                                   row_condition=None\n                                                   ) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        cast('{{ value }}' as {{ dbt_utils.type_string() }})\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.224331}, "macro.dbt_expectations.test_expect_column_values_to_be_increasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_increasing", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_increasing.sql", "name": "test_expect_column_values_to_be_increasing", "macro_sql": "{% test expect_column_values_to_be_increasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \">\" if strictly else \">=\" -%}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.22718}, "macro.dbt_expectations.test_expect_column_values_to_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_null", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_null.sql", "name": "test_expect_column_values_to_be_null", "macro_sql": "{% test expect_column_values_to_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.2281358}, "macro.dbt_expectations.test_expect_column_values_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_unique", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_unique.sql", "name": "test_expect_column_values_to_be_unique", "macro_sql": "{% test expect_column_values_to_be_unique(model, column_name, row_condition=None) %}\n{{ dbt_expectations.test_expect_compound_columns_to_be_unique(model, [column_name], row_condition=row_condition) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_compound_columns_to_be_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.228755}, "macro.dbt_expectations.test_expect_column_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_between.sql", "name": "test_expect_column_values_to_be_between", "macro_sql": "{% test expect_column_values_to_be_between(model, column_name,\n                                                   min_value=None,\n                                                   max_value=None,\n                                                   row_condition=None,\n                                                   strictly=False\n                                                   ) %}\n\n{% set expression %}\n{{ column_name }}\n{% endset %}\n\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=None,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.230195}, "macro.dbt_expectations.test_expect_column_values_to_be_decreasing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_decreasing", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_decreasing.sql", "name": "test_expect_column_values_to_be_decreasing", "macro_sql": "{% test expect_column_values_to_be_decreasing(model, column_name,\n                                                   sort_column=None,\n                                                   strictly=True,\n                                                   row_condition=None,\n                                                   group_by=None) %}\n\n{%- set sort_column = column_name if not sort_column else sort_column -%}\n{%- set operator = \"<\" if strictly else \"<=\" %}\nwith all_values as (\n\n    select\n        {{ sort_column }} as sort_column,\n        {%- if group_by -%}\n        {{ group_by | join(\", \") }},\n        {%- endif %}\n        {{ column_name }} as value_field\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nadd_lag_values as (\n\n    select\n        sort_column,\n        value_field,\n        lag(value_field) over\n            {%- if not group_by -%}\n                (order by sort_column)\n            {%- else -%}\n                (partition by {{ group_by | join(\", \") }} order by sort_column)\n            {%- endif  %} as value_field_lag\n    from\n        all_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        add_lag_values\n    where\n        value_field_lag is not null\n        and\n        not (value_field {{ operator }} value_field_lag)\n\n)\nselect *\nfrom validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.232351}, "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_in_type_list", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_in_type_list.sql", "name": "test_expect_column_values_to_be_in_type_list", "macro_sql": "{%- test expect_column_values_to_be_in_type_list(model, column_name, column_type_list) -%}\n{%- if execute -%}\n\n    {%- set column_name = column_name | upper -%}\n    {%- set columns_in_relation = adapter.get_columns_in_relation(model) -%}\n    {%- set column_type_list = column_type_list| map(\"upper\") | list -%}\n    with relation_columns as (\n\n        {% for column in columns_in_relation %}\n        select\n            cast('{{ column.name | upper }}' as {{ dbt_utils.type_string() }}) as relation_column,\n            cast('{{ column.dtype | upper }}' as {{ dbt_utils.type_string() }}) as relation_column_type\n        {% if not loop.last %}union all{% endif %}\n        {% endfor %}\n    ),\n    test_data as (\n\n        select\n            *\n        from\n            relation_columns\n        where\n            relation_column = '{{ column_name }}'\n            and\n            relation_column_type not in ('{{ column_type_list | join(\"', '\") }}')\n\n    )\n    select *\n    from test_data\n\n{%- endif -%}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.234386}, "macro.dbt_expectations.test_expect_column_values_to_be_of_type": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_of_type", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_be_of_type.sql", "name": "test_expect_column_values_to_be_of_type", "macro_sql": "{%- test expect_column_values_to_be_of_type(model, column_name, column_type) -%}\n{{ dbt_expectations.test_expect_column_values_to_be_in_type_list(model, column_name, [column_type]) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_be_in_type_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.234967}, "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_have_consistent_casing", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_have_consistent_casing.sql", "name": "test_expect_column_values_to_have_consistent_casing", "macro_sql": "{% test expect_column_values_to_have_consistent_casing(model, column_name, display_inconsistent_columns=False) %}\n\nwith test_data as (\n\n    select\n        distinct {{ column_name }} as distinct_values\n    from\n        {{ model }}\n\n ),\n {% if display_inconsistent_columns %}\n validation_errors as (\n\n    select\n        lower(distinct_values) as inconsistent_columns,\n        count(distinct_values) as set_count_case_insensitive\n    from\n        test_data\n    group by 1\n    having\n        count(distinct_values) > 1\n\n )\n select * from validation_errors\n {% else %}\n validation_errors as (\n\n    select\n        count(1) as set_count,\n        count(distinct lower(distinct_values)) as set_count_case_insensitive\n    from\n        test_data\n\n )\n select *\n from\n    validation_errors\n where\n    set_count != set_count_case_insensitive\n {% endif %}\n {%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.2358}, "macro.dbt_expectations.test_expect_column_values_to_not_be_null": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_not_be_null", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "original_file_path": "macros/schema_tests/column_values_basic/expect_column_values_to_not_be_null.sql", "name": "test_expect_column_values_to_not_be_null", "macro_sql": "{% test expect_column_values_to_not_be_null(model, column_name, row_condition=None) %}\n\n{% set expression = column_name ~ \" is not null\" %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.236703}, "macro.dbt_expectations.test_expect_column_min_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_min_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_min_to_be_between.sql", "name": "test_expect_column_min_to_be_between", "macro_sql": "{% test expect_column_min_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\nmin({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.238157}, "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_unique_value_count_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_unique_value_count_to_be_between.sql", "name": "test_expect_column_unique_value_count_to_be_between", "macro_sql": "{% test expect_column_unique_value_count_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.2396522}, "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_quantile_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_quantile_values_to_be_between.sql", "name": "test_expect_column_quantile_values_to_be_between", "macro_sql": "{% test expect_column_quantile_values_to_be_between(model, column_name,\n                                                            quantile,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n\n{% set expression %}\n{{ dbt_expectations.percentile_cont(column_name, quantile) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.percentile_cont", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.241197}, "macro.dbt_expectations.test_expect_column_median_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_median_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_median_to_be_between.sql", "name": "test_expect_column_median_to_be_between", "macro_sql": "{% test expect_column_median_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n\n{% set expression %}\n{{ dbt_expectations.median(column_name) }}\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.median", "macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.242711}, "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_proportion_of_unique_values_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_proportion_of_unique_values_to_be_between.sql", "name": "test_expect_column_proportion_of_unique_values_to_be_between", "macro_sql": "{% test expect_column_proportion_of_unique_values_to_be_between(model, column_name,\n                                                            min_value=None,\n                                                            max_value=None,\n                                                            group_by=None,\n                                                            row_condition=None,\n                                                            strictly=False\n                                                            ) %}\n{% set expression %}\ncount(distinct {{ column_name }})/count({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.244289}, "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_equal_set", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_equal_set.sql", "name": "test_expect_column_distinct_values_to_equal_set", "macro_sql": "{% test expect_column_distinct_values_to_equal_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as column_value\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n\n    select\n        *\n    from\n        all_values v\n        full outer join\n        unique_set_values s on v.column_value = s.value_field\n    where\n        v.column_value is null or\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.2459588}, "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "name": "test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% test expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values=False,\n                                                            data_type=\"decimal\",\n                                                            row_condition=None\n                                                            ) -%}\n    {{ adapter.dispatch('test_expect_column_most_common_value_to_be_in_set', 'dbt_expectations') (model, column_name, value_set, top_n, quote_values, data_type, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.248512}, "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set": {"unique_id": "macro.dbt_expectations.default__test_expect_column_most_common_value_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_most_common_value_to_be_in_set.sql", "name": "default__test_expect_column_most_common_value_to_be_in_set", "macro_sql": "{% macro default__test_expect_column_most_common_value_to_be_in_set(model, column_name,\n                                                            value_set,\n                                                            top_n,\n                                                            quote_values,\n                                                            data_type,\n                                                            row_condition\n                                                            ) %}\n\nwith value_counts as (\n\n    select\n        {% if quote_values -%}\n        {{ column_name }}\n        {%- else -%}\n        cast({{ column_name }} as {{ data_type }})\n        {%- endif %} as value_field,\n        count(*) as value_count\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n    group by {% if quote_values -%}\n                {{ column_name }}\n            {%- else -%}\n                cast({{ column_name }} as {{ data_type }})\n            {%- endif %}\n\n),\nvalue_counts_ranked as (\n\n    select\n        *,\n        row_number() over(order by value_count desc) as value_count_rank\n    from\n        value_counts\n\n),\nvalue_count_top_n as (\n\n    select\n        value_field\n    from\n        value_counts_ranked\n    where\n        value_count_rank = {{ top_n }}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        cast({{ value }} as {{ data_type }})\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        value_field\n    from\n        value_count_top_n\n    where\n        value_field not in (select value_field from unique_set_values)\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.250657}, "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_contain_set", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_contain_set.sql", "name": "test_expect_column_distinct_values_to_contain_set", "macro_sql": "{% test expect_column_distinct_values_to_contain_set(model, column_name,\n                                                            value_set,\n                                                            quote_values=True,\n                                                            row_condition=None\n                                                            ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values in set that are not in the list of values from the model\n    select\n        s.value_field\n    from\n        unique_set_values s\n        left join\n        all_values v on s.value_field = v.value_field\n    where\n        v.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.252502}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal.sql", "name": "test_expect_column_distinct_count_to_equal", "macro_sql": "{% test expect_column_distinct_count_to_equal(model,\n                                                    column_name,\n                                                    value,\n                                                    quote_values=False,\n                                                    group_by=None,\n                                                    row_condition=None\n                                                    ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) = {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.2537549}, "macro.dbt_expectations.test_expect_column_sum_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_sum_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_sum_to_be_between.sql", "name": "test_expect_column_sum_to_be_between", "macro_sql": "{% test expect_column_sum_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nsum({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.25528}, "macro.dbt_expectations.test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "name": "test_expect_column_stdev_to_be_between", "macro_sql": "{% test expect_column_stdev_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) -%}\n    {{ adapter.dispatch('test_expect_column_stdev_to_be_between', 'dbt_expectations') (\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_stdev_to_be_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.257576}, "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between": {"unique_id": "macro.dbt_expectations.default__test_expect_column_stdev_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_stdev_to_be_between.sql", "name": "default__test_expect_column_stdev_to_be_between", "macro_sql": "{% macro default__test_expect_column_stdev_to_be_between(\n                                                    model, column_name,\n                                                    min_value,\n                                                    max_value,\n                                                    group_by,\n                                                    row_condition,\n                                                    strictly\n                                                    ) %}\n\n{% set expression %}\nstddev({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.258337}, "macro.dbt_expectations.test_expect_column_mean_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_mean_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_mean_to_be_between.sql", "name": "test_expect_column_mean_to_be_between", "macro_sql": "{% test expect_column_mean_to_be_between(model, column_name,\n                                                    min_value=None,\n                                                    max_value=None,\n                                                    group_by=None,\n                                                    row_condition=None,\n                                                    strictly=False\n                                                    ) %}\n{% set expression %}\navg({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.2598531}, "macro.dbt_expectations.test_expect_column_max_to_be_between": {"unique_id": "macro.dbt_expectations.test_expect_column_max_to_be_between", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_max_to_be_between.sql", "name": "test_expect_column_max_to_be_between", "macro_sql": "{% test expect_column_max_to_be_between(model, column_name,\n                                                min_value=None,\n                                                max_value=None,\n                                                group_by=None,\n                                                row_condition=None,\n                                                strictly=False\n                                                ) %}\n{% set expression %}\nmax({{ column_name }})\n{% endset %}\n{{ dbt_expectations.expression_between(model,\n                                        expression=expression,\n                                        min_value=min_value,\n                                        max_value=max_value,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition,\n                                        strictly=strictly\n                                        ) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.261417}, "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_be_greater_than", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_be_greater_than.sql", "name": "test_expect_column_distinct_count_to_be_greater_than", "macro_sql": "{% test expect_column_distinct_count_to_be_greater_than(model,\n                                                                column_name,\n                                                                value,\n                                                                quote_values=False,\n                                                                group_by=None,\n                                                                row_condition=None\n                                                                ) %}\n{% set expression %}\ncount(distinct {{ column_name }}) > {{ value }}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition)\n                                        }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.262666}, "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_values_to_be_in_set.sql", "name": "test_expect_column_distinct_values_to_be_in_set", "macro_sql": "{% test expect_column_distinct_values_to_be_in_set(model, column_name,\n                                                    value_set,\n                                                    quote_values=False,\n                                                    row_condition=None\n                                                    ) %}\n\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n\n),\nset_values as (\n\n    {% for value in value_set -%}\n    select\n        {% if quote_values -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif %} as value_field\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n\n),\nunique_set_values as (\n\n    select distinct value_field\n    from\n        set_values\n\n),\nvalidation_errors as (\n    -- values from the model that are not in the set\n    select\n        v.value_field\n    from\n        all_values v\n        left join\n        unique_set_values s on v.value_field = s.value_field\n    where\n        s.value_field is null\n\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.264317}, "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table": {"unique_id": "macro.dbt_expectations.test_expect_column_distinct_count_to_equal_other_table", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "original_file_path": "macros/schema_tests/aggregate_functions/expect_column_distinct_count_to_equal_other_table.sql", "name": "test_expect_column_distinct_count_to_equal_other_table", "macro_sql": "{% test expect_column_distinct_count_to_equal_other_table(model,\n                                                                compare_model,\n                                                                column_name,\n                                                                compare_column_name,\n                                                                row_condition=None,\n                                                                compare_row_condition=None\n                                                                ) %}\n{%- set expression -%}\ncount(distinct {{ column_name }})\n{%- endset -%}\n{%- set compare_expression -%}\n{%- if compare_column_name -%}\ncount(distinct {{ compare_column_name }})\n{%- else -%}\n{{ expression }}\n{%- endif -%}\n{%- endset -%}\n{{ dbt_expectations.test_equal_expression(\n    model,\n    expression=expression,\n    compare_model=compare_model,\n    compare_expression=compare_expression,\n    row_condition=row_condition,\n    compare_row_condition=compare_row_condition\n) }}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.test_equal_expression"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.2658062}, "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart": {"unique_id": "macro.dbt_expectations.test_expect_row_values_to_have_data_for_every_n_datepart", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "original_file_path": "macros/schema_tests/distributional/expect_row_values_to_have_data_for_every_n_datepart.sql", "name": "test_expect_row_values_to_have_data_for_every_n_datepart", "macro_sql": "{%- test expect_row_values_to_have_data_for_every_n_datepart(model,\n                                                            date_col,\n                                                            date_part=\"day\",\n                                                            interval=None,\n                                                            row_condition=None,\n                                                            exclusion_condition=None,\n                                                            test_start_date=None,\n                                                            test_end_date=None) -%}\n{% if not execute %}\n    {{ return('') }}\n{% endif %}\n\n{% if not test_start_date or not test_end_date %}\n    {% set sql %}\n\n        select\n            min({{ date_col }}) as start_{{ date_part }},\n            max({{ date_col }}) as end_{{ date_part }}\n        from {{ model }}\n        {% if row_condition %}\n        where {{ row_condition }}\n        {% endif %}\n\n    {% endset %}\n\n    {%- set dr = run_query(sql) -%}\n    {%- set db_start_date = dr.columns[0].values()[0].strftime('%Y-%m-%d') -%}\n    {%- set db_end_date = dr.columns[1].values()[0].strftime('%Y-%m-%d') -%}\n\n{% endif %}\n\n{% if not test_start_date %}\n{% set start_date = db_start_date %}\n{% else %}\n{% set start_date = test_start_date %}\n{% endif %}\n\n\n{% if not test_end_date %}\n{% set end_date = db_end_date %}\n{% else %}\n{% set end_date = test_end_date %}\n{% endif %}\nwith base_dates as (\n\n    {{ dbt_date.get_base_dates(start_date=start_date, end_date=end_date, datepart=date_part) }}\n    {% if interval %}\n    {# \n        Filter the date spine created above down to the interval granularity using a modulo operation.\n        The number of date_parts after the start_date divided by the integer interval will produce no remainder for the desired intervals, \n        e.g. for 2-day interval from a starting Jan 1, 2020:\n            params: start_date = '2020-01-01', date_part = 'day', interval = 2\n            date spine created above: [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-04, 2020-01-05, ...]\n            The first parameter to the `mod` function would be the number of days between the start_date and the spine date, i.e. [0, 1, 2, 3, 4 ...]\n            The second parameter to the `mod` function would be the integer interval, i.e. 2\n            This modulo operation produces the following remainders: [0, 1, 0, 1, 0, ...]\n            Filtering the spine only where this remainder == 0 will return a spine with every other day as desired, i.e. [2020-01-01, 2020-01-03, 2020-01-05, ...]\n    #}\n    where mod(\n            cast({{ dbt_utils.datediff(\"'\" ~ start_date ~ \"'\", 'date_' ~ date_part, date_part) }} as {{ dbt_utils.type_int() }}),\n            cast({{interval}} as {{ dbt_utils.type_int() }})\n        ) = 0\n    {% endif %}\n\n),\nmodel_data as (\n\n    select\n    {% if not interval %}\n\n        cast({{ dbt_utils.date_trunc(date_part, date_col) }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n\n    {% else %}\n        {# \n            Use a modulo operator to determine the number of intervals that a date_col is away from the interval-date spine \n            and subtracts that amount to effectively slice each date_col record into its corresponding spine bucket,\n            e.g. given a date_col of with records [2020-01-01, 2020-01-02, 2020-01-03, 2020-01-11, 2020-01-12]\n                if we want to slice these dates into their 2-day buckets starting Jan 1, 2020 (start_date = '2020-01-01', date_part='day', interval=2),\n                the modulo operation described above will produce these remainders: [0, 1, 0, 0, 1]\n                subtracting that number of days from the observations will produce records [2020-01-01, 2020-01-01, 2020-01-03, 2020-01-11, 2020-01-11],\n                all of which align with records from the interval-date spine\n        #}\n        {{dbt_utils.dateadd(\n            date_part, \n            \"mod(\n                cast(\" ~ dbt_utils.datediff(\"'\" ~ start_date ~ \"'\", date_col, date_part) ~ \" as \" ~ dbt_utils.type_int() ~ \" ),\n                cast(\" ~ interval ~ \" as  \" ~ dbt_utils.type_int() ~ \" )\n            ) * (-1)\", \n            \"cast( \" ~ dbt_utils.date_trunc(date_part, date_col) ~ \" as  \" ~ dbt_expectations.type_datetime() ~ \")\"\n        )}} as date_{{ date_part }},\n            \n    {% endif %}\n    \n        count(*) as row_cnt\n    from\n        {{ model }} f\n    {% if row_condition %}\n    where {{ row_condition }}\n    {% endif %}\n    group by\n        date_{{date_part}}\n\n),\n\nfinal as (\n\n    select\n        cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) as date_{{ date_part }},\n        case when f.date_{{ date_part }} is null then true else false end as is_missing,\n        coalesce(f.row_cnt, 0) as row_cnt\n    from\n        base_dates d\n        left join\n        model_data f on cast(d.date_{{ date_part }} as {{ dbt_expectations.type_datetime() }}) = f.date_{{ date_part }}\n)\nselect\n    *\nfrom final\nwhere row_cnt = 0\n{% if exclusion_condition %}\n  and {{ exclusion_condition }}\n{% endif %}\n{%- endtest -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt_date.get_base_dates", "macro.dbt_utils.datediff", "macro.dbt_utils.type_int", "macro.dbt_utils.date_trunc", "macro.dbt_expectations.type_datetime", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.273206}, "macro.dbt_expectations._get_metric_expression": {"unique_id": "macro.dbt_expectations._get_metric_expression", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "_get_metric_expression", "macro_sql": "{%- macro _get_metric_expression(metric_column, take_logs) -%}\n\n{%- if take_logs %}\n{%- set expr = \"nullif(\" ~ metric_column ~ \", 0)\" -%}\ncoalesce({{ dbt_expectations.log_natural(expr) }}, 0)\n{%- else -%}\ncoalesce({{ metric_column }}, 0)\n{%- endif %}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.log_natural"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.278412}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  period='day',\n                                  lookback_periods=1,\n                                  trend_periods=7,\n                                  test_periods=14,\n                                  sigma_threshold=3,\n                                  sigma_threshold_upper=None,\n                                  sigma_threshold_lower=None,\n                                  take_diffs=true,\n                                  take_logs=true\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_moving_stdevs', 'dbt_expectations') (model,\n                                  column_name,\n                                  date_column_name,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.279419}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_moving_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_moving_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_moving_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_moving_stdevs(model,\n                                  column_name,\n                                  date_column_name,\n                                  period,\n                                  lookback_periods,\n                                  trend_periods,\n                                  test_periods,\n                                  sigma_threshold,\n                                  sigma_threshold_upper,\n                                  sigma_threshold_lower,\n                                  take_diffs,\n                                  take_logs\n                                ) %}\n\n{%- set sigma_threshold_upper = sigma_threshold_upper if sigma_threshold_upper else sigma_threshold -%}\n{%- set sigma_threshold_lower = sigma_threshold_lower if sigma_threshold_lower else -1 * sigma_threshold -%}\n\nwith metric_values as (\n\n    with grouped_metric_values as (\n\n        select\n            {{ dbt_utils.date_trunc(period, date_column_name) }} as metric_period,\n            sum({{ column_name }}) as agg_metric_value\n        from\n            {{ model }}\n        group by\n            1\n\n    ),\n    {%- if take_diffs %}\n    grouped_metric_values_with_priors as (\n\n        select\n            *,\n            lag(agg_metric_value, {{ lookback_periods }}) over(order by metric_period) as prior_agg_metric_value\n    from\n        grouped_metric_values d\n\n    )\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n        -\n        {{ dbt_expectations._get_metric_expression(\"prior_agg_metric_value\", take_logs) }}\n        as metric_test_value\n    from\n        grouped_metric_values_with_priors d\n\n    {%- else %}\n\n    select\n        *,\n        {{ dbt_expectations._get_metric_expression(\"agg_metric_value\", take_logs) }}\n    from\n        grouped_metric_values\n\n    {%- endif %}\n\n),\nmetric_moving_calcs as (\n\n    select\n        *,\n        avg(metric_test_value)\n            over(order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_average,\n        stddev(metric_test_value)\n            over(order by metric_period rows\n                    between {{ trend_periods }} preceding and 1 preceding) as metric_test_rolling_stddev\n    from\n        metric_values\n\n),\nmetric_sigma as (\n\n    select\n        *,\n        (metric_test_value - metric_test_rolling_average) as metric_test_delta,\n        (metric_test_value - metric_test_rolling_average)/nullif(metric_test_rolling_stddev, 0) as metric_test_sigma\n    from\n        metric_moving_calcs\n\n)\nselect\n    *\nfrom\n    metric_sigma\nwhere\n\n    metric_period >= cast(\n            {{ dbt_utils.dateadd(period, -test_periods, dbt_utils.date_trunc(period, dbt_date.now())) }}\n            as {{ dbt_utils.type_timestamp() }})\n    and\n    metric_period < {{ dbt_utils.date_trunc(period, dbt_date.now()) }}\n    and\n\n    not (\n        metric_test_sigma >= {{ sigma_threshold_lower }} and\n        metric_test_sigma <= {{ sigma_threshold_upper }}\n    )\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.date_trunc", "macro.dbt_expectations._get_metric_expression", "macro.dbt_utils.dateadd", "macro.dbt_date.now", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.281854}, "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "name": "test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% test expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by=None,\n                                  sigma_threshold=3\n                                ) -%}\n    {{ adapter.dispatch('test_expect_column_values_to_be_within_n_stdevs', 'dbt_expectations') (model, column_name, group_by, sigma_threshold) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.2836869}, "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs": {"unique_id": "macro.dbt_expectations.default__test_expect_column_values_to_be_within_n_stdevs", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "original_file_path": "macros/schema_tests/distributional/expect_column_values_to_be_within_n_stdevs.sql", "name": "default__test_expect_column_values_to_be_within_n_stdevs", "macro_sql": "{% macro default__test_expect_column_values_to_be_within_n_stdevs(model,\n                                  column_name,\n                                  group_by,\n                                  sigma_threshold\n                                ) %}\nwith metric_values as (\n\n    {% if group_by -%}\n    select\n        {{ group_by }} as metric_date,\n        sum({{ column_name }}) as {{ column_name }}\n    from\n        {{ model }}\n    group by\n        1\n    {%- else -%}\n    select\n        {{ column_name }} as {{ column_name }}\n    from\n        {{ model }}\n    {%- endif %}\n\n),\nmetric_values_with_statistics as (\n\n    select\n        *,\n        avg({{ column_name }}) over() as {{ column_name }}_average,\n        stddev({{ column_name }}) over() as {{ column_name }}_stddev\n    from\n        metric_values\n\n),\nmetric_values_z_scores as (\n\n    select\n        *,\n        ({{ column_name }} - {{ column_name }}_average)/{{ column_name }}_stddev as {{ column_name }}_sigma\n    from\n        metric_values_with_statistics\n\n)\nselect\n    *\nfrom\n    metric_values_z_scores\nwhere\n    abs({{ column_name }}_sigma) > {{ sigma_threshold }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.2848058}, "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "name": "test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% test expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns=False,\n                                                    ignore_row_if=\"all_values_are_missing\",\n                                                    row_condition=None\n                                                    )  -%}\n    {{ adapter.dispatch('test_expect_select_column_values_to_be_unique_within_record', 'dbt_expectations') (model, column_list, quote_columns, ignore_row_if, row_condition) }}\n{%- endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.287951}, "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record": {"unique_id": "macro.dbt_expectations.default__test_expect_select_column_values_to_be_unique_within_record", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "original_file_path": "macros/schema_tests/multi-column/expect_select_column_values_to_be_unique_within_record.sql", "name": "default__test_expect_select_column_values_to_be_unique_within_record", "macro_sql": "{% macro default__test_expect_select_column_values_to_be_unique_within_record(model,\n                                                    column_list,\n                                                    quote_columns,\n                                                    ignore_row_if,\n                                                    row_condition\n                                                    ) %}\n\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\nwith column_values as (\n\n    select\n        row_number() over(order by 1) as row_index,\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where 1=1\n    {% if row_condition %}\n        and {{ row_condition }}\n    {% endif %}\n    {% if ignore_row_if == \"all_values_are_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} and {% endif %}\n            {%- endfor %}\n        )\n    {% elif ignore_row_if == \"any_value_is_missing\" %}\n        and\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} or {% endif %}\n            {%- endfor %}\n        )\n    {% endif %}\n\n),\nunpivot_columns as (\n\n    {% for column in columns %}\n    select row_index, '{{ column }}' as column_name, {{ column }} as column_value from column_values\n    {% if not loop.last %}union all{% endif %}\n    {% endfor %}\n),\nvalidation_errors as (\n\n    select\n        row_index,\n        count(distinct column_value) as column_values\n    from unpivot_columns\n    group by 1\n    having count(distinct column_value) < {{ columns | length }}\n\n)\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.290567}, "macro.dbt_expectations.test_expect_compound_columns_to_be_unique": {"unique_id": "macro.dbt_expectations.test_expect_compound_columns_to_be_unique", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "original_file_path": "macros/schema_tests/multi-column/expect_compound_columns_to_be_unique.sql", "name": "test_expect_compound_columns_to_be_unique", "macro_sql": "{% test expect_compound_columns_to_be_unique(model,\n                                                column_list,\n                                                quote_columns=False,\n                                                ignore_row_if=\"all_values_are_missing\",\n                                                row_condition=None\n                                                ) %}\n{% if not column_list %}\n    {{ exceptions.raise_compiler_error(\n        \"`column_list` must be specified as a list of columns. Got: '\" ~ column_list ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not quote_columns %}\n    {%- set columns=column_list %}\n{% elif quote_columns %}\n    {%- set columns=[] %}\n        {% for column in column_list -%}\n            {% set columns = columns.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for expect_compound_columns_to_be_unique test must be one of [True, False] Got: '\" ~ quote_columns ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set row_condition_ext -%}\n\n{%- if row_condition  %}\n    {{ row_condition }} and\n{% endif -%}\n\n{%- if ignore_row_if == \"all_values_are_missing\" %}\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} and {% endif %}\n            {% endfor %}\n        )\n{%- elif ignore_row_if == \"any_value_is_missing\" %}\n        (\n            {% for column in columns -%}\n            {{ column }} is not null{% if not loop.last %} or {% endif %}\n            {% endfor %}\n        )\n{%- endif -%}\n{%- endset -%}\n\nwith validation_errors as (\n\n    select\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    from {{ model }}\n    where\n        1=1\n    {%- if row_condition_ext %}\n        and {{ row_condition_ext }}\n    {% endif %}\n    group by\n        {% for column in columns -%}\n        {{ column }}{% if not loop.last %},{% endif %}\n        {%- endfor %}\n    having count(*) > 1\n\n)\nselect * from validation_errors\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.295585}, "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal": {"unique_id": "macro.dbt_expectations.test_expect_multicolumn_sum_to_equal", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_multicolumn_sum_to_equal.sql", "name": "test_expect_multicolumn_sum_to_equal", "macro_sql": "{% test expect_multicolumn_sum_to_equal(model,\n                                                column_list,\n                                                sum_total,\n                                                group_by=None,\n                                                row_condition=None\n                                                ) %}\n\n{% set expression %}\n{% for column in column_list %}\nsum({{ column }}){% if not loop.last %} + {% endif %}\n{% endfor %} = {{ sum_total }}\n{% endset %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=group_by,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.297323}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_equal", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_equal.sql", "name": "test_expect_column_pair_values_to_be_equal", "macro_sql": "{% test expect_column_pair_values_to_be_equal(model,\n                                                        column_A,\n                                                        column_B,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set operator = \"=\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.2985349}, "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_A_to_be_greater_than_B", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_A_to_be_greater_than_B.sql", "name": "test_expect_column_pair_values_A_to_be_greater_than_B", "macro_sql": "{% test expect_column_pair_values_A_to_be_greater_than_B(model,\n                                                                column_A,\n                                                                column_B,\n                                                                or_equal=False,\n                                                                row_condition=None\n                                                                ) %}\n\n{% set operator = \">=\" if or_equal else \">\" %}\n{% set expression = column_A ~ \" \" ~ operator ~ \" \" ~ column_B %}\n\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.299823}, "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set": {"unique_id": "macro.dbt_expectations.test_expect_column_pair_values_to_be_in_set", "package_name": "dbt_expectations", "root_path": "/Users/atbmacbookpro/ethereum-models/dbt_packages/dbt_expectations", "path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "original_file_path": "macros/schema_tests/multi-column/expect_column_pair_values_to_be_in_set.sql", "name": "test_expect_column_pair_values_to_be_in_set", "macro_sql": "{% test expect_column_pair_values_to_be_in_set(model,\n                                                        column_A,\n                                                        column_B,\n                                                        value_pairs_set,\n                                                        row_condition=None\n                                                        ) %}\n\n{% set expression %}\n{% for pair in value_pairs_set %}\n{%- if (pair | length) == 2 %}\n({{ column_A }} = {{ pair[0] }} and {{ column_B }} = {{ pair[1] }}){% if not loop.last %} or {% endif %}\n{% else %}\n{{ exceptions.raise_compiler_error(\n        \"`value_pairs_set` argument for expect_column_pair_values_to_be_in_set test cannot have more than 2 item per element.\n        Got: '\" ~ pair ~ \"'.'\"\n    ) }}\n{% endif %}\n{% endfor %}\n{% endset %}\n{{ dbt_expectations.expression_is_true(model,\n                                        expression=expression,\n                                        group_by_columns=None,\n                                        row_condition=row_condition\n                                        )\n                                        }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_expectations.expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654351201.302282}}, "docs": {"ethereum_models.eth_receipts_root": {"unique_id": "ethereum_models.eth_receipts_root", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/blocks/eth_receipts_root.md", "original_file_path": "models/doc_descriptions/blocks/eth_receipts_root.md", "name": "eth_receipts_root", "block_contents": "The root of the state trie."}, "ethereum_models.eth_uncle_blocks": {"unique_id": "ethereum_models.eth_uncle_blocks", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/blocks/eth_uncle_blocks.md", "original_file_path": "models/doc_descriptions/blocks/eth_uncle_blocks.md", "name": "eth_uncle_blocks", "block_contents": "Uncle blocks occur when two blocks are mined and broadcasted at the same time, with the same block number. The block validated across the most nodes will be added to the primary chain, and the other one becomes an uncle block. Miners do receive rewards for uncle blocks."}, "ethereum_models.eth_blocks_table_doc": {"unique_id": "ethereum_models.eth_blocks_table_doc", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/blocks/eth_blocks_table_doc.md", "original_file_path": "models/doc_descriptions/blocks/eth_blocks_table_doc.md", "name": "eth_blocks_table_doc", "block_contents": "This table contains block level data for the Ethereum Blockchain. This table can be used to analyze trends at a block level, for example gas fees vs. total transactions over time. For more information, please see [Etherscan Resources](https://etherscan.io/directory/Learning_Resources/Ethereum) or [The Ethereum Organization](https://ethereum.org/en/developers/docs/blocks/)"}, "ethereum_models.eth_size": {"unique_id": "ethereum_models.eth_size", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/blocks/eth_size.md", "original_file_path": "models/doc_descriptions/blocks/eth_size.md", "name": "eth_size", "block_contents": "Block size, which is determined by a given block's gas limit."}, "ethereum_models.eth_total_difficulty": {"unique_id": "ethereum_models.eth_total_difficulty", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/blocks/eth_total_difficulty.md", "original_file_path": "models/doc_descriptions/blocks/eth_total_difficulty.md", "name": "eth_total_difficulty", "block_contents": "Total difficulty of the chain at a given block."}, "ethereum_models.eth_gas_limit": {"unique_id": "ethereum_models.eth_gas_limit", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/blocks/eth_gas_limit.md", "original_file_path": "models/doc_descriptions/blocks/eth_gas_limit.md", "name": "eth_gas_limit", "block_contents": "Total gas limit provided by all transactions in the block."}, "ethereum_models.eth_blockchain": {"unique_id": "ethereum_models.eth_blockchain", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/blocks/eth_blockchain.md", "original_file_path": "models/doc_descriptions/blocks/eth_blockchain.md", "name": "eth_blockchain", "block_contents": "The blockchain on which transactions are being confirmed."}, "ethereum_models.eth_sha3_uncles": {"unique_id": "ethereum_models.eth_sha3_uncles", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/blocks/eth_sha3_uncles.md", "original_file_path": "models/doc_descriptions/blocks/eth_sha3_uncles.md", "name": "eth_sha3_uncles", "block_contents": "The mechanism which Ethereum Javascript RLP encodes an empty string."}, "ethereum_models.eth_tx_count": {"unique_id": "ethereum_models.eth_tx_count", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/blocks/eth_tx_count.md", "original_file_path": "models/doc_descriptions/blocks/eth_tx_count.md", "name": "eth_tx_count", "block_contents": "Total number of transactions within a block."}, "ethereum_models.eth_parent_hash": {"unique_id": "ethereum_models.eth_parent_hash", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/blocks/eth_parent_hash.md", "original_file_path": "models/doc_descriptions/blocks/eth_parent_hash.md", "name": "eth_parent_hash", "block_contents": "The hash of the block from which a given block is generated. Also known as the parent block."}, "ethereum_models.eth_block_header_json": {"unique_id": "ethereum_models.eth_block_header_json", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/blocks/eth_block_header_json.md", "original_file_path": "models/doc_descriptions/blocks/eth_block_header_json.md", "name": "eth_block_header_json", "block_contents": "This JSON column contains the block header details."}, "ethereum_models.eth_difficulty": {"unique_id": "ethereum_models.eth_difficulty", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/blocks/eth_difficulty.md", "original_file_path": "models/doc_descriptions/blocks/eth_difficulty.md", "name": "eth_difficulty", "block_contents": "The effort required to mine the block."}, "ethereum_models.eth_gas_used": {"unique_id": "ethereum_models.eth_gas_used", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/blocks/eth_gas_used.md", "original_file_path": "models/doc_descriptions/blocks/eth_gas_used.md", "name": "eth_gas_used", "block_contents": "Total gas used in the block."}, "ethereum_models.eth_miner": {"unique_id": "ethereum_models.eth_miner", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/blocks/eth_miner.md", "original_file_path": "models/doc_descriptions/blocks/eth_miner.md", "name": "eth_miner", "block_contents": "Miner who successfully added a given block to the blockchain."}, "ethereum_models.eth_extra_data": {"unique_id": "ethereum_models.eth_extra_data", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/blocks/eth_extra_data.md", "original_file_path": "models/doc_descriptions/blocks/eth_extra_data.md", "name": "eth_extra_data", "block_contents": "Any data included by the miner for a given block."}, "ethereum_models.eth_blocks_hash": {"unique_id": "ethereum_models.eth_blocks_hash", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/blocks/eth_blocks_hash.md", "original_file_path": "models/doc_descriptions/blocks/eth_blocks_hash.md", "name": "eth_blocks_hash", "block_contents": "The hash of the block header for a given block."}, "ethereum_models.eth_network": {"unique_id": "ethereum_models.eth_network", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/blocks/eth_network.md", "original_file_path": "models/doc_descriptions/blocks/eth_network.md", "name": "eth_network", "block_contents": "The network on the blockchain used by a transaction."}, "ethereum_models.eth_blocks_nonce": {"unique_id": "ethereum_models.eth_blocks_nonce", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/blocks/eth_blocks_nonce.md", "original_file_path": "models/doc_descriptions/blocks/eth_blocks_nonce.md", "name": "eth_blocks_nonce", "block_contents": "Block nonce is a value used during mining to demonstrate proof of work for a given block."}, "ethereum_models.eth_logs_tx_hash": {"unique_id": "ethereum_models.eth_logs_tx_hash", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/event_logs/eth_logs_tx_hash.md", "original_file_path": "models/doc_descriptions/event_logs/eth_logs_tx_hash.md", "name": "eth_logs_tx_hash", "block_contents": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed. This field will not be unique in this table, as a given transaction can include multiple events."}, "ethereum_models.eth_event_inputs": {"unique_id": "ethereum_models.eth_event_inputs", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/event_logs/eth_event_inputs.md", "original_file_path": "models/doc_descriptions/event_logs/eth_event_inputs.md", "name": "eth_event_inputs", "block_contents": "The decoded event inputs for a given event."}, "ethereum_models.eth_logs_data": {"unique_id": "ethereum_models.eth_logs_data", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/event_logs/eth_logs_data.md", "original_file_path": "models/doc_descriptions/event_logs/eth_logs_data.md", "name": "eth_logs_data", "block_contents": "The un-decoded event data."}, "ethereum_models.eth_event_name": {"unique_id": "ethereum_models.eth_event_name", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/event_logs/eth_event_name.md", "original_file_path": "models/doc_descriptions/event_logs/eth_event_name.md", "name": "eth_event_name", "block_contents": "The decoded event name for a given event."}, "ethereum_models.eth_event_removed": {"unique_id": "ethereum_models.eth_event_removed", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/event_logs/eth_event_removed.md", "original_file_path": "models/doc_descriptions/event_logs/eth_event_removed.md", "name": "eth_event_removed", "block_contents": "Whether the event has been removed from the transaction."}, "ethereum_models.eth_logs_table_doc": {"unique_id": "ethereum_models.eth_logs_table_doc", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/event_logs/eth_logs_table_doc.md", "original_file_path": "models/doc_descriptions/event_logs/eth_logs_table_doc.md", "name": "eth_logs_table_doc", "block_contents": "This table contains flattened event logs from transactions on the Ethereum Blockchain. Transactions may have multiple events, which are denoted by the event index for a transaction hash. Therefore, this table is unique on the combination of transaction hash and event index. Event names are decoded in this table where possible. The event inputs column will contain the log details in JSON format. Specific fields can be pulled from this column using the following sample format: ```event_inputs:<FILED_NAME>::<DATA TYPE> as <FIELD_NAME>```."}, "ethereum_models.eth_log_id_events": {"unique_id": "ethereum_models.eth_log_id_events", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/event_logs/eth_log_id_events.md", "original_file_path": "models/doc_descriptions/event_logs/eth_log_id_events.md", "name": "eth_log_id_events", "block_contents": "This is the primary key for this table. This is a concatenation of the transaction hash and the event index at which the event occurred. This field can be used within other event based tables such as ```fact_transfers``` & ```ez_token_transfers```."}, "ethereum_models.eth_logs_contract_address": {"unique_id": "ethereum_models.eth_logs_contract_address", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/event_logs/eth_logs_contract_address.md", "original_file_path": "models/doc_descriptions/event_logs/eth_logs_contract_address.md", "name": "eth_logs_contract_address", "block_contents": "The address interacted with for a given event."}, "ethereum_models.eth_event_index": {"unique_id": "ethereum_models.eth_event_index", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/event_logs/eth_event_index.md", "original_file_path": "models/doc_descriptions/event_logs/eth_event_index.md", "name": "eth_event_index", "block_contents": "Event number within a transaction."}, "ethereum_models.eth_logs_contract_name": {"unique_id": "ethereum_models.eth_logs_contract_name", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/event_logs/eth_logs_contract_name.md", "original_file_path": "models/doc_descriptions/event_logs/eth_logs_contract_name.md", "name": "eth_logs_contract_name", "block_contents": "The name of the contract or token, where possible."}, "ethereum_models.eth_topics": {"unique_id": "ethereum_models.eth_topics", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/event_logs/eth_topics.md", "original_file_path": "models/doc_descriptions/event_logs/eth_topics.md", "name": "eth_topics", "block_contents": "The un-decoded event input topics."}, "ethereum_models.eth_traces_blocktime": {"unique_id": "ethereum_models.eth_traces_blocktime", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/traces/eth_traces_blocktime.md", "original_file_path": "models/doc_descriptions/traces/eth_traces_blocktime.md", "name": "eth_traces_blocktime", "block_contents": "The block timestamp of this transaction."}, "ethereum_models.eth_traces_gas": {"unique_id": "ethereum_models.eth_traces_gas", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/traces/eth_traces_gas.md", "original_file_path": "models/doc_descriptions/traces/eth_traces_gas.md", "name": "eth_traces_gas", "block_contents": "The gas supplied for this trace."}, "ethereum_models.eth_traces_type": {"unique_id": "ethereum_models.eth_traces_type", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/traces/eth_traces_type.md", "original_file_path": "models/doc_descriptions/traces/eth_traces_type.md", "name": "eth_traces_type", "block_contents": "The type of internal transaction. Common trace types are `CALL`, `DELEGATECALL`, and `STATICCALL`."}, "ethereum_models.eth_traces_call_data": {"unique_id": "ethereum_models.eth_traces_call_data", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/traces/eth_traces_call_data.md", "original_file_path": "models/doc_descriptions/traces/eth_traces_call_data.md", "name": "eth_traces_call_data", "block_contents": "The raw JSON data for this trace."}, "ethereum_models.eth_traces_identifier": {"unique_id": "ethereum_models.eth_traces_identifier", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/traces/eth_traces_identifier.md", "original_file_path": "models/doc_descriptions/traces/eth_traces_identifier.md", "name": "eth_traces_identifier", "block_contents": "This field represents the position and type of the trace within the transaction."}, "ethereum_models.eth_traces_block_no": {"unique_id": "ethereum_models.eth_traces_block_no", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/traces/eth_traces_block_no.md", "original_file_path": "models/doc_descriptions/traces/eth_traces_block_no.md", "name": "eth_traces_block_no", "block_contents": "The block number of this transaction."}, "ethereum_models.eth_traces_input": {"unique_id": "ethereum_models.eth_traces_input", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/traces/eth_traces_input.md", "original_file_path": "models/doc_descriptions/traces/eth_traces_input.md", "name": "eth_traces_input", "block_contents": "The input data for this trace."}, "ethereum_models.eth_traces_sub": {"unique_id": "ethereum_models.eth_traces_sub", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/traces/eth_traces_sub.md", "original_file_path": "models/doc_descriptions/traces/eth_traces_sub.md", "name": "eth_traces_sub", "block_contents": "The amount of nested sub traces for this trace."}, "ethereum_models.eth_traces_from": {"unique_id": "ethereum_models.eth_traces_from", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/traces/eth_traces_from.md", "original_file_path": "models/doc_descriptions/traces/eth_traces_from.md", "name": "eth_traces_from", "block_contents": "The sending address of this trace. This is not necessarily the from address of the transaction."}, "ethereum_models.eth_traces_table_doc": {"unique_id": "ethereum_models.eth_traces_table_doc", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/traces/eth_traces_table_doc.md", "original_file_path": "models/doc_descriptions/traces/eth_traces_table_doc.md", "name": "eth_traces_table_doc", "block_contents": "This table contains flattened trace data for internal contract calls on the Ethereum blockchain. Hex encoded fields can be decoded to integers by using `TO_NUMBER(<FIELD>, 'XXXXXXXXXXXX')`, with the number of Xs being the max length of the encoded field. You must also remove the `0x` from your field to use the `TO_NUMBER()` function, if applicable."}, "ethereum_models.eth_traces_eth_value": {"unique_id": "ethereum_models.eth_traces_eth_value", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/traces/eth_traces_eth_value.md", "original_file_path": "models/doc_descriptions/traces/eth_traces_eth_value.md", "name": "eth_traces_eth_value", "block_contents": "The amount of ETH transferred in this trace."}, "ethereum_models.eth_traces_output": {"unique_id": "ethereum_models.eth_traces_output", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/traces/eth_traces_output.md", "original_file_path": "models/doc_descriptions/traces/eth_traces_output.md", "name": "eth_traces_output", "block_contents": "The output data for this trace."}, "ethereum_models.eth_traces_tx_hash": {"unique_id": "ethereum_models.eth_traces_tx_hash", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/traces/eth_traces_tx_hash.md", "original_file_path": "models/doc_descriptions/traces/eth_traces_tx_hash.md", "name": "eth_traces_tx_hash", "block_contents": "The transaction hash for the trace. Please note, this is not necessarily unique in this table as transactions frequently have multiple traces."}, "ethereum_models.eth_traces_to": {"unique_id": "ethereum_models.eth_traces_to", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/traces/eth_traces_to.md", "original_file_path": "models/doc_descriptions/traces/eth_traces_to.md", "name": "eth_traces_to", "block_contents": "The receiving address of this trace. This is not necessarily the to address of the transaction."}, "ethereum_models.eth_traces_gas_used": {"unique_id": "ethereum_models.eth_traces_gas_used", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/traces/eth_traces_gas_used.md", "original_file_path": "models/doc_descriptions/traces/eth_traces_gas_used.md", "name": "eth_traces_gas_used", "block_contents": "The gas used for this trace."}, "ethereum_models.eth_prices_hour": {"unique_id": "ethereum_models.eth_prices_hour", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/prices/eth_prices_hour.md", "original_file_path": "models/doc_descriptions/prices/eth_prices_hour.md", "name": "eth_prices_hour", "block_contents": "Hour at which the token price was recorded."}, "ethereum_models.eth_prices_imputed": {"unique_id": "ethereum_models.eth_prices_imputed", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/prices/eth_prices_imputed.md", "original_file_path": "models/doc_descriptions/prices/eth_prices_imputed.md", "name": "eth_prices_imputed", "block_contents": "This column indicates whether or not the price has been pulled forward from the previous hour. Sometimes hourly prices are missed from our data source, and in that case we carry forward the last recorded hourly price until we record a new price."}, "ethereum_models.eth_prices_address": {"unique_id": "ethereum_models.eth_prices_address", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/prices/eth_prices_address.md", "original_file_path": "models/doc_descriptions/prices/eth_prices_address.md", "name": "eth_prices_address", "block_contents": "The unique Ethereum address for a given token."}, "ethereum_models.eth_prices_price": {"unique_id": "ethereum_models.eth_prices_price", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/prices/eth_prices_price.md", "original_file_path": "models/doc_descriptions/prices/eth_prices_price.md", "name": "eth_prices_price", "block_contents": "The token price for a given hour."}, "ethereum_models.eth_prices_symbol": {"unique_id": "ethereum_models.eth_prices_symbol", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/prices/eth_prices_symbol.md", "original_file_path": "models/doc_descriptions/prices/eth_prices_symbol.md", "name": "eth_prices_symbol", "block_contents": "The token's symbol."}, "ethereum_models.eth_prices_table_doc": {"unique_id": "ethereum_models.eth_prices_table_doc", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/prices/eth_prices_table_doc.md", "original_file_path": "models/doc_descriptions/prices/eth_prices_table_doc.md", "name": "eth_prices_table_doc", "block_contents": "This table contains hourly prices for tokens on the Ethereum Blockchain. \nThe sources of this data are [CoinMarketCap](https://coinmarketcap.com/) and [CoinGecko](https://www.coingecko.com/)."}, "ethereum_models.eth_prices_decimals": {"unique_id": "ethereum_models.eth_prices_decimals", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/prices/eth_prices_decimals.md", "original_file_path": "models/doc_descriptions/prices/eth_prices_decimals.md", "name": "eth_prices_decimals", "block_contents": "The number of decimals for token contract."}, "ethereum_models.eth_nft_blocktime": {"unique_id": "ethereum_models.eth_nft_blocktime", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_blocktime.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_blocktime.md", "name": "eth_nft_blocktime", "block_contents": "The block timestamp at which the NFT event occurred."}, "ethereum_models.eth_nft_price_usd": {"unique_id": "ethereum_models.eth_nft_price_usd", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_price_usd.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_price_usd.md", "name": "eth_nft_price_usd", "block_contents": "The amount of the NFT event in US dollars. This will be null for tokens without a decimal adjustment or hourly price."}, "ethereum_models.eth_nft_tx_fee_usd": {"unique_id": "ethereum_models.eth_nft_tx_fee_usd", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_tx_fee_usd.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_tx_fee_usd.md", "name": "eth_nft_tx_fee_usd", "block_contents": "The gas fee for this transaction in US dollars."}, "ethereum_models.eth_nft_address": {"unique_id": "ethereum_models.eth_nft_address", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_address.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_address.md", "name": "eth_nft_address", "block_contents": "The contract address of the NFT."}, "ethereum_models.eth_nft_mints_symbol": {"unique_id": "ethereum_models.eth_nft_mints_symbol", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_mints_symbol.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_mints_symbol.md", "name": "eth_nft_mints_symbol", "block_contents": "The symbol of the token supplied to mint the NFT, if applicable. This field may not handle all edge cases."}, "ethereum_models.eth_nft_creator_fee_usd": {"unique_id": "ethereum_models.eth_nft_creator_fee_usd", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_creator_fee_usd.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_creator_fee_usd.md", "name": "eth_nft_creator_fee_usd", "block_contents": "The amount of fees paid to the NFT collection as royalty payments for this NFT event in US dollars. For Opensea, this is the difference between the total fees paid and a 2.5% Opensea platform fee."}, "ethereum_models.eth_nft_origin_from": {"unique_id": "ethereum_models.eth_nft_origin_from", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_origin_from.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_origin_from.md", "name": "eth_nft_origin_from", "block_contents": "The from address of this transaction. In most cases, this is the NFT buyer. However, for some more complex transactions, it may not be the NFT buyer."}, "ethereum_models.eth_nft_to_address": {"unique_id": "ethereum_models.eth_nft_to_address", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_to_address.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_to_address.md", "name": "eth_nft_to_address", "block_contents": "The receiving address of the NFT in the transaction."}, "ethereum_models.eth_nft_erc1155": {"unique_id": "ethereum_models.eth_nft_erc1155", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_erc1155.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_erc1155.md", "name": "eth_nft_erc1155", "block_contents": "If the NFT is an ERC-1155 contract, this field may be one or greater, representing the number of tokens."}, "ethereum_models.eth_nft_origin_to": {"unique_id": "ethereum_models.eth_nft_origin_to", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_origin_to.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_origin_to.md", "name": "eth_nft_origin_to", "block_contents": "The to address of this transaction. In most cases, this is the exchange contract. However, for some more complex NFT events, such as aggregate buys with tools such as Gem and Genie, this may not be the exchange address."}, "ethereum_models.eth_nft_block_no": {"unique_id": "ethereum_models.eth_nft_block_no", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_block_no.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_block_no.md", "name": "eth_nft_block_no", "block_contents": "The block number at which the NFT event occurred."}, "ethereum_models.eth_nft_metadata": {"unique_id": "ethereum_models.eth_nft_metadata", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_metadata.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_metadata.md", "name": "eth_nft_metadata", "block_contents": "The token metadata for this NFT. This may be blank for many NFTs. We are working to expand this field."}, "ethereum_models.eth_nft_seller_address": {"unique_id": "ethereum_models.eth_nft_seller_address", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_seller_address.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_seller_address.md", "name": "eth_nft_seller_address", "block_contents": "The address of the seller of the NFT in the transaction."}, "ethereum_models.eth_nft_price": {"unique_id": "ethereum_models.eth_nft_price", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_price.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_price.md", "name": "eth_nft_price", "block_contents": "The amount of the NFT event in the currency in which the transaction occurred, decimal adjusted where possible."}, "ethereum_models.eth_nft_project_name": {"unique_id": "ethereum_models.eth_nft_project_name", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_project_name.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_project_name.md", "name": "eth_nft_project_name", "block_contents": "The name of the NFT project. This field, along with metadata, will be filled in over time."}, "ethereum_models.eth_nft_events_table_doc": {"unique_id": "ethereum_models.eth_nft_events_table_doc", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_events_table_doc.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_events_table_doc.md", "name": "eth_nft_events_table_doc", "block_contents": "This table contains NFT events on the Ethereum blockchain. It currently supports sales on Opensea, LooksRare, Rarible, x2y2, and NFTX. More data and exchanges will be added over time."}, "ethereum_models.eth_nft_platform_address": {"unique_id": "ethereum_models.eth_nft_platform_address", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_platform_address.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_platform_address.md", "name": "eth_nft_platform_address", "block_contents": "The address of the exchange used for the transaction."}, "ethereum_models.eth_nft_from_address": {"unique_id": "ethereum_models.eth_nft_from_address", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_from_address.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_from_address.md", "name": "eth_nft_from_address", "block_contents": "The sending address of the NFT in the transaction."}, "ethereum_models.eth_nft_transfer_doc": {"unique_id": "ethereum_models.eth_nft_transfer_doc", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_transfer_doc.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_transfer_doc.md", "name": "eth_nft_transfer_doc", "block_contents": "This table contains NFT transfer events on the Ethereum blockchain."}, "ethereum_models.eth_nft_total_fees": {"unique_id": "ethereum_models.eth_nft_total_fees", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_total_fees.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_total_fees.md", "name": "eth_nft_total_fees", "block_contents": "The total amount of fees paid relating to the NFT purchase in the transaction currency. This includes royalty payments to creators and platform fees. Please note, this does not include the gas fee."}, "ethereum_models.eth_nft_mint_doc": {"unique_id": "ethereum_models.eth_nft_mint_doc", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_mint_doc.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_mint_doc.md", "name": "eth_nft_mint_doc", "block_contents": "This table contains NFT mint events, defined as an NFT transfers from a burn address to an address, on the ethereum blockchain."}, "ethereum_models.eth_nft_origin_sig": {"unique_id": "ethereum_models.eth_nft_origin_sig", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_origin_sig.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_origin_sig.md", "name": "eth_nft_origin_sig", "block_contents": "The function signature of this transaction."}, "ethereum_models.eth_nft_mints_token_address": {"unique_id": "ethereum_models.eth_nft_mints_token_address", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_mints_token_address.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_mints_token_address.md", "name": "eth_nft_mints_token_address", "block_contents": "The contract address of the token supplied to mint the NFT, if applicable. This field may not handle all edge cases."}, "ethereum_models.eth_nft_mints_token_price_usd": {"unique_id": "ethereum_models.eth_nft_mints_token_price_usd", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_mints_token_price_usd.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_mints_token_price_usd.md", "name": "eth_nft_mints_token_price_usd", "block_contents": "The amount of tokens supplied in US dollars within the same transaction to mint the NFT. This field may not handle all edge cases."}, "ethereum_models.eth_nft_mint_price_usd": {"unique_id": "ethereum_models.eth_nft_mint_price_usd", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_mint_price_usd.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_mint_price_usd.md", "name": "eth_nft_mint_price_usd", "block_contents": "The price paid in US dollars to mint the NFT(s)."}, "ethereum_models.eth_nft_platform_fee_usd": {"unique_id": "ethereum_models.eth_nft_platform_fee_usd", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_platform_fee_usd.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_platform_fee_usd.md", "name": "eth_nft_platform_fee_usd", "block_contents": "The amount of fees paid to the platform for this NFT event in US dollars. For Opensea, we assume a 2.5% fee on all marketplace purchases, per their docs. Private sales do not have platform or creator fees on Opensea."}, "ethereum_models.eth_nft_tx_fee": {"unique_id": "ethereum_models.eth_nft_tx_fee", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_tx_fee.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_tx_fee.md", "name": "eth_nft_tx_fee", "block_contents": "The gas fee for this transaction in ETH."}, "ethereum_models.eth_nft_buyer_address": {"unique_id": "ethereum_models.eth_nft_buyer_address", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_buyer_address.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_buyer_address.md", "name": "eth_nft_buyer_address", "block_contents": "The address of the buyer of the NFT in the transaction."}, "ethereum_models.eth_nft_tx_hash": {"unique_id": "ethereum_models.eth_nft_tx_hash", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_tx_hash.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_tx_hash.md", "name": "eth_nft_tx_hash", "block_contents": "The transaction hash for the NFT event. This is not necessarily unique in this table as a transaction may contain multiple NFT events."}, "ethereum_models.eth_nft_creator_fee": {"unique_id": "ethereum_models.eth_nft_creator_fee", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_creator_fee.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_creator_fee.md", "name": "eth_nft_creator_fee", "block_contents": "The decimal adjusted amount of fees paid to the NFT collection as royalty payments for this NFT event in the transaction's currency. For Opensea, this is the difference between the total fees paid and a 2.5% Opensea platform fee."}, "ethereum_models.eth_nft_mint_count": {"unique_id": "ethereum_models.eth_nft_mint_count", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_mint_count.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_mint_count.md", "name": "eth_nft_mint_count", "block_contents": "The number of NFTs minted in this event."}, "ethereum_models.eth_nft_total_fees_usd": {"unique_id": "ethereum_models.eth_nft_total_fees_usd", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_total_fees_usd.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_total_fees_usd.md", "name": "eth_nft_total_fees_usd", "block_contents": "The total amount of fees paid relating to the NFT purchase in US dollars. This includes royalty payments to creators and platform fees. Please note, this does not include the gas fee."}, "ethereum_models.eth_nft_platform_name": {"unique_id": "ethereum_models.eth_nft_platform_name", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_platform_name.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_platform_name.md", "name": "eth_nft_platform_name", "block_contents": "The name of the exchange used for the trade. Currently, the exchanges supported are `opensea`, `looksrare`, `rarible`, `x2y2`, and `nftx`. More exchanges will be added over time."}, "ethereum_models.eth_nft_currency_symbol": {"unique_id": "ethereum_models.eth_nft_currency_symbol", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_currency_symbol.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_currency_symbol.md", "name": "eth_nft_currency_symbol", "block_contents": "The token symbol for this NFT event."}, "ethereum_models.eth_nft_mints_token_price": {"unique_id": "ethereum_models.eth_nft_mints_token_price", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_mints_token_price.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_mints_token_price.md", "name": "eth_nft_mints_token_price", "block_contents": "The decimal adjusted amount of tokens supplied within the same transaction to mint the NFT. This field may not handle all edge cases."}, "ethereum_models.eth_nft_mint_price": {"unique_id": "ethereum_models.eth_nft_mint_price", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_mint_price.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_mint_price.md", "name": "eth_nft_mint_price", "block_contents": "The price paid in ETH to mint the NFT(s)."}, "ethereum_models.eth_nft_currency_address": {"unique_id": "ethereum_models.eth_nft_currency_address", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_currency_address.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_currency_address.md", "name": "eth_nft_currency_address", "block_contents": "The token contract address for this NFT event. This will be `ETH` for native ETH transactions."}, "ethereum_models.eth_nft_tokenid": {"unique_id": "ethereum_models.eth_nft_tokenid", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_tokenid.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_tokenid.md", "name": "eth_nft_tokenid", "block_contents": "The token ID for this NFT contract."}, "ethereum_models.eth_nft_platform_fee": {"unique_id": "ethereum_models.eth_nft_platform_fee", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_platform_fee.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_platform_fee.md", "name": "eth_nft_platform_fee", "block_contents": "The decimal adjusted amount of fees paid to the platform for this NFT event in the transaction's currency. For Opensea, we assume a 2.5% fee on all marketplace purchases, per their docs. Private sales do not have platform or creator fees on Opensea."}, "ethereum_models.__overview__": {"unique_id": "ethereum_models.__overview__", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/general/__overview__.md", "original_file_path": "models/doc_descriptions/general/__overview__.md", "name": "__overview__", "block_contents": "# Welcome to the Flipside Crypto Ethereum Models Documentation!\n\n## **What is Flipside?**\n\n[Flipside Crypto](https://flipsidecrypto.xyz/earn) provides Community Enabled Crypto Analytics, allowing our users to create and share data insights on the crypto projects they care most about.\n\n**Flipside Crypto puts pre-modeled and labeled blockchain data in the hands of communities.**\n\nThrough dashboard and visualization tools, as well as auto-generated API endpoints, data analysts can easily create queries that answer any question via a tool called [Velocity](https://app.flipsidecrypto.com/velocity?nav=Discover).\n\n**Community members earn bounties for answering questions with data.**\n\nBounties provide incentive and direction, so crypto projects can quickly source the data insights they need in order to grow.\n\n**Flipside works directly with leading crypto projects to reward on-demand analytics through structured bounty programs.**\n\nQuestions sourced directly from the community provide insight into what communities care about as well as analytics needed to drive ecosystem engagement and growth.\n\n## **What does this documentation cover?**\nThe documentation included here details the design of the Ethereum tables and views available via [Flipside Crypto.](https://flipsidecrypto.xyz/earn) For more information on how these models are built, please see [the github repository.](https://github.com/FlipsideCrypto/ethereum-models)\n\n### **Quick Links to Table Documentation**\n\n- [dim_contracts](https://flipsidecrypto.github.io/ethereum-models/#!/model/model.ethereum_models.core__dim_contracts)\n- [dim_labels](https://flipsidecrypto.github.io/ethereum-models/#!/model/model.ethereum_models.core__dim_labels)\n- [fact_blocks](https://flipsidecrypto.github.io/ethereum-models/#!/model/model.ethereum_models.core__fact_blocks)\n- [fact_event_logs](https://flipsidecrypto.github.io/ethereum-models/#!/model/model.ethereum_models.core__fact_event_logs)\n- [fact_traces](https://flipsidecrypto.github.io/ethereum-models/#!/model/model.ethereum_models.core__fact_traces)\n- [fact_hourly_token_prices](https://flipsidecrypto.github.io/ethereum-models/#!/model/model.ethereum_models.core__fact_hourly_token_prices)\n- [fact_token_transfers](https://flipsidecrypto.github.io/ethereum-models/#!/model/model.ethereum_models.core__fact_token_transfers)\n- [fact_transactions](https://flipsidecrypto.github.io/ethereum-models/#!/model/model.ethereum_models.core__fact_transactions)\n- [ez_token_transfers](https://flipsidecrypto.github.io/ethereum-models/#!/model/model.ethereum_models.core__ez_token_transfers)\n- [ez_nft_transfers](https://flipsidecrypto.github.io/ethereum-models/#!/model/model.ethereum_models.core__ez_nft_transfers)\n- [ez_nft_sales](https://flipsidecrypto.github.io/ethereum-models/#!/model/model.ethereum_models.core__ez_nft_sales)\n- [ez_nft_mints](https://flipsidecrypto.github.io/ethereum-models/#!/model/model.ethereum_models.core__ez_nft_mints)\n- [ez_dez_swaps](https://flipsidecrypto.github.io/ethereum-models/#!/model/model.ethereum_models.core__ez_dex_swaps)\n\n\n\n## **Data Model Overview**\n\nThe Ethereum models are built a few different ways, but the core fact table are built using three layers of sql models: **bronze, silver, and gold (or core).**\n\n- Bronze: Data is loaded in from the source as a view\n- Silver: All necessary parsing, filtering, de-duping, and other transformations are done here\n- Gold (or core): Final views and tables that are available in Velocity\n\nThe dimension tables are sourced from a variety of on-chain and off-chain sources.\n\nConvenience views (denoted ez_) are a combination of different fact and dimension tables. \n\nA user-defined-function (UDF) is available to decode hex encoded values to integers in this database. You can call this UDF by using `js_hex_to_int(FIELD)`.\n\n\n## **Using dbt docs**\n### Navigation\n\nYou can use the ```Project``` and ```Database``` navigation tabs on the left side of the window to explore the models in the project.\n\n### Database Tab\n\nThis view shows relations (tables and views) grouped into database schemas. Note that ephemeral models are *not* shown in this interface, as they do not exist in the database.\n\n### Graph Exploration\n\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the Expand button at the top-right of this lineage pane, you'll be able to see all of the models that are used to build, or are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the ```--models``` and ```--exclude``` model selection syntax to filter the models in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n\n### **More information**\n- [Flipside](https://flipsidecrypto.xyz/earn)\n- [Velocity](https://app.flipsidecrypto.com/velocity?nav=Discover)\n- [Tutorials](https://docs.flipsidecrypto.com/our-data/tutorials)\n- [Github](https://github.com/FlipsideCrypto/ethereum-models)\n- [Query Editor Shortcuts](https://docs.flipsidecrypto.com/velocity/query-editor-shortcuts)\n- [What is dbt?](https://docs.getdbt.com/docs/introduction)"}, "ethereum_models.eth_block_number": {"unique_id": "ethereum_models.eth_block_number", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/general/eth_block_number.md", "original_file_path": "models/doc_descriptions/general/eth_block_number.md", "name": "eth_block_number", "block_contents": "Also known as block height. The block number, which indicates the length of the blockchain, increases after the addition of each new block."}, "ethereum_models.eth_to_address": {"unique_id": "ethereum_models.eth_to_address", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/general/eth_to_address.md", "original_file_path": "models/doc_descriptions/general/eth_to_address.md", "name": "eth_to_address", "block_contents": "The receiving address of this transaction. This can be a contract address."}, "ethereum_models.eth_block_timestamp": {"unique_id": "ethereum_models.eth_block_timestamp", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/general/eth_block_timestamp.md", "original_file_path": "models/doc_descriptions/general/eth_block_timestamp.md", "name": "eth_block_timestamp", "block_contents": "The date and time at which the block was produced."}, "ethereum_models.eth_decimals": {"unique_id": "ethereum_models.eth_decimals", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/general/eth_decimals.md", "original_file_path": "models/doc_descriptions/general/eth_decimals.md", "name": "eth_decimals", "block_contents": "The number of decimal places this contract needs adjusted where token values exist. For example, use the decimal field to correctly transform raw amounts in ```fact_token_transfers```."}, "ethereum_models.eth_ingested_at": {"unique_id": "ethereum_models.eth_ingested_at", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/general/eth_ingested_at.md", "original_file_path": "models/doc_descriptions/general/eth_ingested_at.md", "name": "eth_ingested_at", "block_contents": "Internal column."}, "ethereum_models.eth_from_address": {"unique_id": "ethereum_models.eth_from_address", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/general/eth_from_address.md", "original_file_path": "models/doc_descriptions/general/eth_from_address.md", "name": "eth_from_address", "block_contents": "The sending address of this transaction."}, "ethereum_models.eth_token_convention": {"unique_id": "ethereum_models.eth_token_convention", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/contracts/eth_token_convention.md", "original_file_path": "models/doc_descriptions/contracts/eth_token_convention.md", "name": "eth_token_convention", "block_contents": "The token standard utilized by this contract."}, "ethereum_models.eth_contracts_table_doc": {"unique_id": "ethereum_models.eth_contracts_table_doc", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/contracts/eth_contracts_table_doc.md", "original_file_path": "models/doc_descriptions/contracts/eth_contracts_table_doc.md", "name": "eth_contracts_table_doc", "block_contents": "This table contains contract details for contracts deployed on the Ethereum blockchain."}, "ethereum_models.eth_contracts_symbol": {"unique_id": "ethereum_models.eth_contracts_symbol", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/contracts/eth_contracts_symbol.md", "original_file_path": "models/doc_descriptions/contracts/eth_contracts_symbol.md", "name": "eth_contracts_symbol", "block_contents": "The symbol used to represent this contract. Please note this is not necessarily unique."}, "ethereum_models.eth_contracts_block_time": {"unique_id": "ethereum_models.eth_contracts_block_time", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/contracts/eth_contracts_block_time.md", "original_file_path": "models/doc_descriptions/contracts/eth_contracts_block_time.md", "name": "eth_contracts_block_time", "block_contents": "The block timestamp at which the contract was read and details recorded."}, "ethereum_models.eth_contracts_metadata": {"unique_id": "ethereum_models.eth_contracts_metadata", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/contracts/eth_contracts_metadata.md", "original_file_path": "models/doc_descriptions/contracts/eth_contracts_metadata.md", "name": "eth_contracts_metadata", "block_contents": "This JSON column contains other relevant details for each contract."}, "ethereum_models.eth_contracts_block_number": {"unique_id": "ethereum_models.eth_contracts_block_number", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/contracts/eth_contracts_block_number.md", "original_file_path": "models/doc_descriptions/contracts/eth_contracts_block_number.md", "name": "eth_contracts_block_number", "block_contents": "The block number at which the contract was read and details recorded."}, "ethereum_models.eth_system_created_at": {"unique_id": "ethereum_models.eth_system_created_at", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/contracts/eth_system_created_at.md", "original_file_path": "models/doc_descriptions/contracts/eth_system_created_at.md", "name": "eth_system_created_at", "block_contents": "Internal column."}, "ethereum_models.eth_contracts_name": {"unique_id": "ethereum_models.eth_contracts_name", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/contracts/eth_contracts_name.md", "original_file_path": "models/doc_descriptions/contracts/eth_contracts_name.md", "name": "eth_contracts_name", "block_contents": "The name of the deployed contract. Please note this is not necessarily unique."}, "ethereum_models.eth_creator_address": {"unique_id": "ethereum_models.eth_creator_address", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/contracts/eth_creator_address.md", "original_file_path": "models/doc_descriptions/contracts/eth_creator_address.md", "name": "eth_creator_address", "block_contents": "The address of the contract creator."}, "ethereum_models.eth_logic_address": {"unique_id": "ethereum_models.eth_logic_address", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/contracts/eth_logic_address.md", "original_file_path": "models/doc_descriptions/contracts/eth_logic_address.md", "name": "eth_logic_address", "block_contents": "The logic address, where applicable."}, "ethereum_models.eth_contracts_contract_address": {"unique_id": "ethereum_models.eth_contracts_contract_address", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/contracts/eth_contracts_contract_address.md", "original_file_path": "models/doc_descriptions/contracts/eth_contracts_contract_address.md", "name": "eth_contracts_contract_address", "block_contents": "The unique Ethereum address of the deployed contract."}, "ethereum_models.eth_text_signature": {"unique_id": "ethereum_models.eth_text_signature", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/signatures/eth_text_signature.md", "original_file_path": "models/doc_descriptions/signatures/eth_text_signature.md", "name": "eth_text_signature", "block_contents": "The human-readable format for this function or event."}, "ethereum_models.eth_function_id": {"unique_id": "ethereum_models.eth_function_id", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/signatures/eth_function_id.md", "original_file_path": "models/doc_descriptions/signatures/eth_function_id.md", "name": "eth_function_id", "block_contents": "The ID for this function or event signature."}, "ethereum_models.eth_bytes_signature": {"unique_id": "ethereum_models.eth_bytes_signature", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/signatures/eth_bytes_signature.md", "original_file_path": "models/doc_descriptions/signatures/eth_bytes_signature.md", "name": "eth_bytes_signature", "block_contents": "The byte signature for this function."}, "ethereum_models.eth_hex_signature": {"unique_id": "ethereum_models.eth_hex_signature", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/signatures/eth_hex_signature.md", "original_file_path": "models/doc_descriptions/signatures/eth_hex_signature.md", "name": "eth_hex_signature", "block_contents": "The hex signature for this event."}, "ethereum_models.eth_event_sig_table_doc": {"unique_id": "ethereum_models.eth_event_sig_table_doc", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/signatures/eth_event_sig_table_doc.md", "original_file_path": "models/doc_descriptions/signatures/eth_event_sig_table_doc.md", "name": "eth_event_sig_table_doc", "block_contents": "This table contains event signatures used to decode Ethereum event data into a human-readable format. For more details see (https://www.4byte.directory/)."}, "ethereum_models.eth_function_sig_table_doc": {"unique_id": "ethereum_models.eth_function_sig_table_doc", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/signatures/eth_function_sig_table_doc.md", "original_file_path": "models/doc_descriptions/signatures/eth_function_sig_table_doc.md", "name": "eth_function_sig_table_doc", "block_contents": "This table contains function signatures used to decode Ethereum call data into a human-readable format. For more details see (https://www.4byte.directory/)."}, "ethereum_models.eth_label_subtype": {"unique_id": "ethereum_models.eth_label_subtype", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/labels/eth_label_subtype.md", "original_file_path": "models/doc_descriptions/labels/eth_label_subtype.md", "name": "eth_label_subtype", "block_contents": "A sub-category nested within label type providing further detail."}, "ethereum_models.eth_label_address": {"unique_id": "ethereum_models.eth_label_address", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/labels/eth_label_address.md", "original_file_path": "models/doc_descriptions/labels/eth_label_address.md", "name": "eth_label_address", "block_contents": "Address that the label is for. This is the field that should be used to join other tables with labels."}, "ethereum_models.eth_label": {"unique_id": "ethereum_models.eth_label", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/labels/eth_label.md", "original_file_path": "models/doc_descriptions/labels/eth_label.md", "name": "eth_label", "block_contents": "The label for this address."}, "ethereum_models.eth_label_address_name": {"unique_id": "ethereum_models.eth_label_address_name", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/labels/eth_label_address_name.md", "original_file_path": "models/doc_descriptions/labels/eth_label_address_name.md", "name": "eth_label_address_name", "block_contents": "The most granular label for this address."}, "ethereum_models.eth_label_blockchain": {"unique_id": "ethereum_models.eth_label_blockchain", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/labels/eth_label_blockchain.md", "original_file_path": "models/doc_descriptions/labels/eth_label_blockchain.md", "name": "eth_label_blockchain", "block_contents": "The name of the blockchain."}, "ethereum_models.eth_label_type": {"unique_id": "ethereum_models.eth_label_type", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/labels/eth_label_type.md", "original_file_path": "models/doc_descriptions/labels/eth_label_type.md", "name": "eth_label_type", "block_contents": "A high-level category describing the addresses main function or ownership."}, "ethereum_models.eth_label_creator": {"unique_id": "ethereum_models.eth_label_creator", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/labels/eth_label_creator.md", "original_file_path": "models/doc_descriptions/labels/eth_label_creator.md", "name": "eth_label_creator", "block_contents": "The name of the creator of the label."}, "ethereum_models.eth_labels_table": {"unique_id": "ethereum_models.eth_labels_table", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/labels/eth_labels_table_doc.md", "original_file_path": "models/doc_descriptions/labels/eth_labels_table_doc.md", "name": "eth_labels_table", "block_contents": "This table contains labels for addresses on the Ethereum Blockchain."}, "ethereum_models.eth_transfer_amount_usd": {"unique_id": "ethereum_models.eth_transfer_amount_usd", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/transfers/eth_transfer_amount_usd.md", "original_file_path": "models/doc_descriptions/transfers/eth_transfer_amount_usd.md", "name": "eth_transfer_amount_usd", "block_contents": "The amount in US dollars for this transfer at the time of the transfer. Tokens without a decimal adjustment or price will be nulled out here."}, "ethereum_models.eth_transfer_amount": {"unique_id": "ethereum_models.eth_transfer_amount", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/transfers/eth_transfer_amount.md", "original_file_path": "models/doc_descriptions/transfers/eth_transfer_amount.md", "name": "eth_transfer_amount", "block_contents": "The decimal transformed amount for this token. Tokens without a decimal adjustment will be nulled out here."}, "ethereum_models.eth_transfer_tx_hash": {"unique_id": "ethereum_models.eth_transfer_tx_hash", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/transfers/eth_transfer_tx_hash.md", "original_file_path": "models/doc_descriptions/transfers/eth_transfer_tx_hash.md", "name": "eth_transfer_tx_hash", "block_contents": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed. This will not be unique in this table as a transaction could include multiple transfer events."}, "ethereum_models.eth_eth_amount": {"unique_id": "ethereum_models.eth_eth_amount", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/transfers/eth_eth_amount.md", "original_file_path": "models/doc_descriptions/transfers/eth_eth_amount.md", "name": "eth_eth_amount", "block_contents": "ETH value transferred."}, "ethereum_models.eth_transfer_from_address": {"unique_id": "ethereum_models.eth_transfer_from_address", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/transfers/eth_transfer_from_address.md", "original_file_path": "models/doc_descriptions/transfers/eth_transfer_from_address.md", "name": "eth_transfer_from_address", "block_contents": "The sending address of this transfer."}, "ethereum_models.eth_transfer_raw_amount": {"unique_id": "ethereum_models.eth_transfer_raw_amount", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/transfers/eth_transfer_raw_amount.md", "original_file_path": "models/doc_descriptions/transfers/eth_transfer_raw_amount.md", "name": "eth_transfer_raw_amount", "block_contents": "The amount of tokens transferred. This value is not decimal adjusted."}, "ethereum_models.eth_log_id_transfers": {"unique_id": "ethereum_models.eth_log_id_transfers", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/transfers/eth_log_id_transfers.md", "original_file_path": "models/doc_descriptions/transfers/eth_log_id_transfers.md", "name": "eth_log_id_transfers", "block_contents": "This is the primary key for this table. This is a concatenation of the transaction hash and the event index at which the transfer event occurred. This field can be used to find more details on the event within the ```fact_event_logs``` table."}, "ethereum_models.eth_transfer_table_doc": {"unique_id": "ethereum_models.eth_transfer_table_doc", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/transfers/eth_transfer_table_doc.md", "original_file_path": "models/doc_descriptions/transfers/eth_transfer_table_doc.md", "name": "eth_transfer_table_doc", "block_contents": "This table contains events on the Ethereum Blockchain with an event name of 'Transfer'. The contract address is the token transferred, and the raw amount field is the amount of tokens transferred. Please note this amount is not decimal adjusted. Decimal adjustments for a token address can be found in ```dim_contracts```. This table will not contain transfers of native ETH."}, "ethereum_models.eth_transfer_contract_address": {"unique_id": "ethereum_models.eth_transfer_contract_address", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/transfers/eth_transfer_contract_address.md", "original_file_path": "models/doc_descriptions/transfers/eth_transfer_contract_address.md", "name": "eth_transfer_contract_address", "block_contents": "Contract address of the token being transferred."}, "ethereum_models.eth_eth_amount_usd": {"unique_id": "ethereum_models.eth_eth_amount_usd", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/transfers/eth_eth_amount_usd.md", "original_file_path": "models/doc_descriptions/transfers/eth_eth_amount_usd.md", "name": "eth_eth_amount_usd", "block_contents": "ETH value transferred, in USD."}, "ethereum_models.eth_transfer_to_address": {"unique_id": "ethereum_models.eth_transfer_to_address", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/transfers/eth_transfer_to_address.md", "original_file_path": "models/doc_descriptions/transfers/eth_transfer_to_address.md", "name": "eth_transfer_to_address", "block_contents": "The receiving address of this transfer. This can be a contract address."}, "ethereum_models.eth_ez_eth_transfers_table_doc": {"unique_id": "ethereum_models.eth_ez_eth_transfers_table_doc", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/transfers/eth_ez_eth_transfers_table_doc.md", "original_file_path": "models/doc_descriptions/transfers/eth_ez_eth_transfers_table_doc.md", "name": "eth_ez_eth_transfers_table_doc", "block_contents": "This table contains all native ETH transfers, including equivalent USD amounts. The origin addresses correspond to the to and from addresses from the `fact_transactions` table. The `identifier` and `tx_hash` columns relate this table back to `fact_traces`, which contains more details on the transfers."}, "ethereum_models.eth_origin_from": {"unique_id": "ethereum_models.eth_origin_from", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/transfers/eth_origin_from.md", "original_file_path": "models/doc_descriptions/transfers/eth_origin_from.md", "name": "eth_origin_from", "block_contents": "The from address at the transaction level."}, "ethereum_models.eth_transfer_has_price": {"unique_id": "ethereum_models.eth_transfer_has_price", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/transfers/eth_transfer_has_price.md", "original_file_path": "models/doc_descriptions/transfers/eth_transfer_has_price.md", "name": "eth_transfer_has_price", "block_contents": "Whether or not our prices model contains this hourly token price."}, "ethereum_models.eth_origin_to": {"unique_id": "ethereum_models.eth_origin_to", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/transfers/eth_origin_to.md", "original_file_path": "models/doc_descriptions/transfers/eth_origin_to.md", "name": "eth_origin_to", "block_contents": "The to address at the transaction level."}, "ethereum_models.eth_transfer_has_decimal": {"unique_id": "ethereum_models.eth_transfer_has_decimal", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/transfers/eth_transfer_has_decimal.md", "original_file_path": "models/doc_descriptions/transfers/eth_transfer_has_decimal.md", "name": "eth_transfer_has_decimal", "block_contents": "Whether or not our contracts model contains the necessary decimal adjustment for this token."}, "ethereum_models.eth_transfer_token_price": {"unique_id": "ethereum_models.eth_transfer_token_price", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/transfers/eth_transfer_token_price.md", "original_file_path": "models/doc_descriptions/transfers/eth_transfer_token_price.md", "name": "eth_transfer_token_price", "block_contents": "The price, if available, for this token at the transfer time."}, "ethereum_models.eth_ez_transfer_table_doc": {"unique_id": "ethereum_models.eth_ez_transfer_table_doc", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/transfers/eth_ez_transfer_table_doc.md", "original_file_path": "models/doc_descriptions/transfers/eth_ez_transfer_table_doc.md", "name": "eth_ez_transfer_table_doc", "block_contents": "This table will contain all events in the ```fact_token_transfers table```, along with joined columns such as token price, symbol, and decimals where possible that allow for easier analysis of token transfer events. Please note Native ETH transfers are not included here."}, "ethereum_models.eth_tx_gas_limit": {"unique_id": "ethereum_models.eth_tx_gas_limit", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/transactions/eth_tx_gas_limit.md", "original_file_path": "models/doc_descriptions/transactions/eth_tx_gas_limit.md", "name": "eth_tx_gas_limit", "block_contents": "Maximum amount of gas allocated for the transaction."}, "ethereum_models.eth_tx_table_doc": {"unique_id": "ethereum_models.eth_tx_table_doc", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/transactions/eth_tx_table_doc.md", "original_file_path": "models/doc_descriptions/transactions/eth_tx_table_doc.md", "name": "eth_tx_table_doc", "block_contents": "This table contains transaction level data for the Ethereum Blockchain. Each transaction will have a unique transaction hash, along with transactions fees and an ETH value transferred when applicable. Transactions may be native ETH transfers or interactions with contract addresses. For more information, please see [The Ethereum Organization - Transactions](https://ethereum.org/en/developers/docs/transactions/)"}, "ethereum_models.eth_tx_input_data": {"unique_id": "ethereum_models.eth_tx_input_data", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/transactions/eth_tx_input_data.md", "original_file_path": "models/doc_descriptions/transactions/eth_tx_input_data.md", "name": "eth_tx_input_data", "block_contents": "This column contains additional data for this transaction, and is commonly used as part of a contract interaction or as a message to the recipient."}, "ethereum_models.eth_value": {"unique_id": "ethereum_models.eth_value", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/transactions/eth_value.md", "original_file_path": "models/doc_descriptions/transactions/eth_value.md", "name": "eth_value", "block_contents": "The value transacted in Ether."}, "ethereum_models.eth_tx_block_hash": {"unique_id": "ethereum_models.eth_tx_block_hash", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/transactions/eth_tx_block_hash.md", "original_file_path": "models/doc_descriptions/transactions/eth_tx_block_hash.md", "name": "eth_tx_block_hash", "block_contents": "Block hash is a unique 66-character identifier that is generate when a block is produced."}, "ethereum_models.eth_tx_gas_used": {"unique_id": "ethereum_models.eth_tx_gas_used", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/transactions/eth_tx_gas_used.md", "original_file_path": "models/doc_descriptions/transactions/eth_tx_gas_used.md", "name": "eth_tx_gas_used", "block_contents": "Gas used by transaction."}, "ethereum_models.eth_tx_fee": {"unique_id": "ethereum_models.eth_tx_fee", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/transactions/eth_tx_fee.md", "original_file_path": "models/doc_descriptions/transactions/eth_tx_fee.md", "name": "eth_tx_fee", "block_contents": "Amount paid to validate the transaction in Ether."}, "ethereum_models.eth_cumulative_gas_used": {"unique_id": "ethereum_models.eth_cumulative_gas_used", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/transactions/eth_cumulative_gas_used.md", "original_file_path": "models/doc_descriptions/transactions/eth_cumulative_gas_used.md", "name": "eth_cumulative_gas_used", "block_contents": "The total amount of gas used when this transaction was executed in the block."}, "ethereum_models.eth_tx_position": {"unique_id": "ethereum_models.eth_tx_position", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/transactions/eth_tx_position.md", "original_file_path": "models/doc_descriptions/transactions/eth_tx_position.md", "name": "eth_tx_position", "block_contents": "The position of the transaction within the block."}, "ethereum_models.eth_tx_hash": {"unique_id": "ethereum_models.eth_tx_hash", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/transactions/eth_tx_hash.md", "original_file_path": "models/doc_descriptions/transactions/eth_tx_hash.md", "name": "eth_tx_hash", "block_contents": "Transaction hash is a unique 66-character identifier that is generated when a transaction is executed."}, "ethereum_models.eth_tx_gas_price": {"unique_id": "ethereum_models.eth_tx_gas_price", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/transactions/eth_tx_gas_price.md", "original_file_path": "models/doc_descriptions/transactions/eth_tx_gas_price.md", "name": "eth_tx_gas_price", "block_contents": "Cost per unit of gas in Gwei."}, "ethereum_models.eth_tx_nonce": {"unique_id": "ethereum_models.eth_tx_nonce", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/transactions/eth_tx_nonce.md", "original_file_path": "models/doc_descriptions/transactions/eth_tx_nonce.md", "name": "eth_tx_nonce", "block_contents": "The number of transactions sent from a given address."}, "ethereum_models.eth_tx_origin_sig": {"unique_id": "ethereum_models.eth_tx_origin_sig", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/transactions/eth_tx_origin_sig.md", "original_file_path": "models/doc_descriptions/transactions/eth_tx_origin_sig.md", "name": "eth_tx_origin_sig", "block_contents": "The function signature of the contract call."}, "ethereum_models.eth_tx_json": {"unique_id": "ethereum_models.eth_tx_json", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/transactions/eth_tx_json.md", "original_file_path": "models/doc_descriptions/transactions/eth_tx_json.md", "name": "eth_tx_json", "block_contents": "This JSON column contains the transaction details, including event logs."}, "ethereum_models.eth_tx_status": {"unique_id": "ethereum_models.eth_tx_status", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/transactions/eth_tx_status.md", "original_file_path": "models/doc_descriptions/transactions/eth_tx_status.md", "name": "eth_tx_status", "block_contents": "Status of the transaction."}, "ethereum_models.eth_ez_sushi_swaps_table_doc": {"unique_id": "ethereum_models.eth_ez_sushi_swaps_table_doc", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/sushi/eth_sushi_sushi_swaps_table_doc.md", "original_file_path": "models/doc_descriptions/sushi/eth_sushi_sushi_swaps_table_doc.md", "name": "eth_ez_sushi_swaps_table_doc", "block_contents": "This table will contain all swap events done on the Sushiswap platform in the ```fact_event_logs table```, joined along with the addresses of both tokens in the swap and the decimal adjusted prices."}, "ethereum_models.eth_dex_pool_address": {"unique_id": "ethereum_models.eth_dex_pool_address", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/dex/eth_dex_pool_address.md", "original_file_path": "models/doc_descriptions/dex/eth_dex_pool_address.md", "name": "eth_dex_pool_address", "block_contents": "The contract address for the liquidity pool."}, "ethereum_models.eth_dex_swaps_symbol_out": {"unique_id": "ethereum_models.eth_dex_swaps_symbol_out", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/dex/eth_dex_swaps_symbol_out.md", "original_file_path": "models/doc_descriptions/dex/eth_dex_swaps_symbol_out.md", "name": "eth_dex_swaps_symbol_out", "block_contents": "The symbol of the token being swapped to."}, "ethereum_models.eth_dex_creation_tx": {"unique_id": "ethereum_models.eth_dex_creation_tx", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/dex/eth_dex_creation_tx.md", "original_file_path": "models/doc_descriptions/dex/eth_dex_creation_tx.md", "name": "eth_dex_creation_tx", "block_contents": "The transaction where this contract was created, where possible."}, "ethereum_models.eth_dex_swaps_amount_in": {"unique_id": "ethereum_models.eth_dex_swaps_amount_in", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/dex/eth_dex_swaps_amount_in.md", "original_file_path": "models/doc_descriptions/dex/eth_dex_swaps_amount_in.md", "name": "eth_dex_swaps_amount_in", "block_contents": "The amount of tokens put into the swap."}, "ethereum_models.eth_dex_swaps_amount_in_usd": {"unique_id": "ethereum_models.eth_dex_swaps_amount_in_usd", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/dex/eth_dex_swaps_amount_in_usd.md", "original_file_path": "models/doc_descriptions/dex/eth_dex_swaps_amount_in_usd.md", "name": "eth_dex_swaps_amount_in_usd", "block_contents": "The amount of tokens put into the swap converted to USD using the price of the token."}, "ethereum_models.eth_dex_swaps_tx_to": {"unique_id": "ethereum_models.eth_dex_swaps_tx_to", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/dex/eth_dex_swaps_tx_to.md", "original_file_path": "models/doc_descriptions/dex/eth_dex_swaps_tx_to.md", "name": "eth_dex_swaps_tx_to", "block_contents": "The tx_to is the address who receives the swapped token. This corresponds to the \"to\" field in the swap function."}, "ethereum_models.eth_dex_swaps_token_in": {"unique_id": "ethereum_models.eth_dex_swaps_token_in", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/dex/eth_dex_swaps_token_In.md", "original_file_path": "models/doc_descriptions/dex/eth_dex_swaps_token_In.md", "name": "eth_dex_swaps_token_in", "block_contents": "The address of the token sent for swap."}, "ethereum_models.eth_dex_lp_table_doc": {"unique_id": "ethereum_models.eth_dex_lp_table_doc", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/dex/eth_dex_lp_table_doc.md", "original_file_path": "models/doc_descriptions/dex/eth_dex_lp_table_doc.md", "name": "eth_dex_lp_table_doc", "block_contents": "This table contains details on different Liquidity Pools on the Ethereum blockchain, including the tokens within each pool as well as platform and contract creation info where possible."}, "ethereum_models.eth_dex_platform": {"unique_id": "ethereum_models.eth_dex_platform", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/dex/eth_dex_platform.md", "original_file_path": "models/doc_descriptions/dex/eth_dex_platform.md", "name": "eth_dex_platform", "block_contents": "This field denotes which application the liquidity pool belongs to."}, "ethereum_models.eth_dex_pool_name": {"unique_id": "ethereum_models.eth_dex_pool_name", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/dex/eth_dex_pool_name.md", "original_file_path": "models/doc_descriptions/dex/eth_dex_pool_name.md", "name": "eth_dex_pool_name", "block_contents": "The name of the liquidity pool, where possible."}, "ethereum_models.eth_dex_tokens": {"unique_id": "ethereum_models.eth_dex_tokens", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/dex/eth_dex_tokens.md", "original_file_path": "models/doc_descriptions/dex/eth_dex_tokens.md", "name": "eth_dex_tokens", "block_contents": "This field contains the tokens within the liquidity pool as a JSON objects."}, "ethereum_models.eth_dex_factory_address": {"unique_id": "ethereum_models.eth_dex_factory_address", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/dex/eth_dex_factory_address.md", "original_file_path": "models/doc_descriptions/dex/eth_dex_factory_address.md", "name": "eth_dex_factory_address", "block_contents": "The address that created or deployed this pool, where possible."}, "ethereum_models.eth_dex_swaps_token_out": {"unique_id": "ethereum_models.eth_dex_swaps_token_out", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/dex/eth_dex_swaps_token_out.md", "original_file_path": "models/doc_descriptions/dex/eth_dex_swaps_token_out.md", "name": "eth_dex_swaps_token_out", "block_contents": "The address of the token being swapped to."}, "ethereum_models.eth_dex_creation_time": {"unique_id": "ethereum_models.eth_dex_creation_time", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/dex/eth_dex_creation_time.md", "original_file_path": "models/doc_descriptions/dex/eth_dex_creation_time.md", "name": "eth_dex_creation_time", "block_contents": "When this pool was created, where possible."}, "ethereum_models.eth_ez_dex_swaps_table_doc": {"unique_id": "ethereum_models.eth_ez_dex_swaps_table_doc", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/dex/eth_ez_dex_swaps_table_doc.md", "original_file_path": "models/doc_descriptions/dex/eth_ez_dex_swaps_table_doc.md", "name": "eth_ez_dex_swaps_table_doc", "block_contents": "This table currently contains swap events from the ```fact_event_logs``` table for Uniswap V2 and SushiSwap, along with other helpful columns including an amount USD where possible. Other dexes coming soon!"}, "ethereum_models.eth_dex_swaps_amount_out_usd": {"unique_id": "ethereum_models.eth_dex_swaps_amount_out_usd", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/dex/eth_dex_swaps_amount_out_usd.md", "original_file_path": "models/doc_descriptions/dex/eth_dex_swaps_amount_out_usd.md", "name": "eth_dex_swaps_amount_out_usd", "block_contents": "The amount of tokens taken out of or received from the swap converted to USD using the price of the token."}, "ethereum_models.eth_dex_token1": {"unique_id": "ethereum_models.eth_dex_token1", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/dex/eth_dex_token1.md", "original_file_path": "models/doc_descriptions/dex/eth_dex_token1.md", "name": "eth_dex_token1", "block_contents": "Token 1 is the second token in the pair, and will show up second within the event logs for relevant transactions."}, "ethereum_models.eth_dex_swaps_amount_out": {"unique_id": "ethereum_models.eth_dex_swaps_amount_out", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/dex/eth_dex_swaps_amount_out.md", "original_file_path": "models/doc_descriptions/dex/eth_dex_swaps_amount_out.md", "name": "eth_dex_swaps_amount_out", "block_contents": "The amount of tokens taken out of or received from the swap."}, "ethereum_models.eth_dex_swaps_symbol_in": {"unique_id": "ethereum_models.eth_dex_swaps_symbol_in", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/dex/eth_dex_swaps_symbol_in.md", "original_file_path": "models/doc_descriptions/dex/eth_dex_swaps_symbol_in.md", "name": "eth_dex_swaps_symbol_in", "block_contents": "The symbol of the token sent for swap."}, "ethereum_models.eth_dex_swaps_sender": {"unique_id": "ethereum_models.eth_dex_swaps_sender", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/dex/eth_dex_swaps_sender.md", "original_file_path": "models/doc_descriptions/dex/eth_dex_swaps_sender.md", "name": "eth_dex_swaps_sender", "block_contents": "The Router is the Sender in the swap function."}, "ethereum_models.eth_dex_token0": {"unique_id": "ethereum_models.eth_dex_token0", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/dex/eth_dex_token0.md", "original_file_path": "models/doc_descriptions/dex/eth_dex_token0.md", "name": "eth_dex_token0", "block_contents": "Token 0 is the first token in the pair, and will show up first within the event logs for relevant transactions."}, "dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/usr/local/Cellar/dbt-snowflake/1.0.0_2/libexec/lib/python3.9/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}, "ethereum_models.eth_nft_event_type": {"unique_id": "ethereum_models.eth_nft_event_type", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "doc_descriptions/nft/eth_nft_event_type.md", "original_file_path": "models/doc_descriptions/nft/eth_nft_event_type.md", "name": "eth_nft_event_type", "block_contents": "The type of NFT event in this transaction, either `sale`,  `bid_won` or `redeem`."}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {"test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_TX_TO__0_xX_0_9a_fA_F_.d5e1f336c2": [{"raw_sql": "{{ dbt_expectations.test_expect_column_values_to_match_regex(**_dbt_generic_test_kwargs) }}{{ config(enabled=False,alias=\"dbt_expectations_expect_column_5f8fab1b9b8c9bb179ca9e2c737c271a\") }}", "test_metadata": {"name": "expect_column_values_to_match_regex", "kwargs": {"regex": "0[xX][0-9a-fA-F]+", "column_name": "TX_TO", "model": "{{ get_where_subquery(ref('core__ez_dex_swaps')) }}"}, "namespace": "dbt_expectations"}, "resource_type": "test", "depends_on": {"macros": ["macro.dbt_expectations.test_expect_column_values_to_match_regex", "macro.dbt.get_where_subquery"], "nodes": []}, "config": {"enabled": false, "alias": "dbt_expectations_expect_column_5f8fab1b9b8c9bb179ca9e2c737c271a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "ETHEREUM_DEV", "schema": "dbt_expectations_expect_column_values_to_match_regex_core", "fqn": ["ethereum_models", "gold", "dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_TX_TO__0_xX_0_9a_fA_F_"], "unique_id": "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_TX_TO__0_xX_0_9a_fA_F_.d5e1f336c2", "package_name": "ethereum_models", "root_path": "/Users/atbmacbookpro/ethereum-models", "path": "dbt_expectations_expect_column_5f8fab1b9b8c9bb179ca9e2c737c271a.sql", "original_file_path": "models/gold/core__ez_dex_swaps.yml", "name": "dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_TX_TO__0_xX_0_9a_fA_F_", "alias": "ez_dex_swaps_TX_TO", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["core__ez_dex_swaps"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"enabled": false, "alias": "dbt_expectations_expect_column_5f8fab1b9b8c9bb179ca9e2c737c271a"}, "created_at": 1654351204.368751, "column_name": "TX_TO", "file_key_name": "models.core__ez_dex_swaps"}]}, "parent_map": {"model.ethereum_models.bronze__contracts_backfill": ["source.ethereum_models.flipside_silver.ethereum_contracts_backfill"], "model.ethereum_models.bronze__contracts": ["source.ethereum_models.bronze.prod_ethereum_sink_407559501"], "model.ethereum_models.bronze__blocks": ["source.ethereum_models.prod.ethereum_blocks"], "model.ethereum_models.bronze__transactions": ["source.ethereum_models.prod.ethereum_txs"], "model.ethereum_models.silver__transactions": ["model.ethereum_models.bronze__transactions"], "model.ethereum_models.silver__contracts_extended": ["model.ethereum_models.bronze__contracts", "model.ethereum_models.bronze__contracts_backfill", "source.ethereum_models.flipside_silver.ethereum_contracts"], "model.ethereum_models.silver__transfers": ["model.ethereum_models.silver__logs"], "model.ethereum_models.silver__nft_metadata_api_requests": ["seed.ethereum_models.silver__seed_nft_metadata_upload", "source.ethereum_models.ethereum_external.nft_metadata_api"], "model.ethereum_models.silver__logs": ["model.ethereum_models.bronze__transactions"], "model.ethereum_models.silver__blocks": ["model.ethereum_models.bronze__blocks"], "model.ethereum_models.silver__contracts": ["source.ethereum_models.flipside_gold_ethereum.contracts"], "model.ethereum_models.silver__eth_transfers": ["model.ethereum_models.silver__traces"], "model.ethereum_models.silver__nft_transfers": ["model.ethereum_models.core__dim_labels", "model.ethereum_models.silver__logs", "source.ethereum_models.ethereum_silver.token_meta_backup", "source.ethereum_models.flipside_gold_ethereum.nft_metadata"], "model.ethereum_models.silver__traces": ["model.ethereum_models.bronze__blocks", "model.ethereum_models.bronze__transactions"], "model.ethereum_models.silver_nft__looksrare_sales": ["model.ethereum_models.core__fact_hourly_token_prices", "model.ethereum_models.silver__contracts", "model.ethereum_models.silver__logs", "model.ethereum_models.silver__logs", "model.ethereum_models.silver__nft_transfers", "model.ethereum_models.silver__transactions", "model.ethereum_models.silver__transfers"], "model.ethereum_models.silver_nft__rarible_sales": ["model.ethereum_models.core__ez_token_transfers", "model.ethereum_models.core__fact_hourly_token_prices", "model.ethereum_models.silver__eth_transfers", "model.ethereum_models.silver__logs", "model.ethereum_models.silver__logs", "model.ethereum_models.silver__nft_transfers", "model.ethereum_models.silver__nft_transfers", "model.ethereum_models.silver__transactions"], "model.ethereum_models.silver_nft__metadata": ["source.ethereum_models.flipside_gold_ethereum.nft_metadata"], "model.ethereum_models.silver_nft__opensea_sales": ["model.ethereum_models.core__fact_hourly_token_prices", "model.ethereum_models.silver__contracts", "model.ethereum_models.silver__eth_transfers", "model.ethereum_models.silver__logs", "model.ethereum_models.silver__nft_transfers", "model.ethereum_models.silver__transactions", "model.ethereum_models.silver__transfers"], "model.ethereum_models.silver_dex__v2_swaps": ["model.ethereum_models.core__fact_hourly_token_prices", "model.ethereum_models.silver__logs", "model.ethereum_models.silver_dex__pools"], "model.ethereum_models.silver_dex__pools": ["model.ethereum_models.core__dim_contracts", "model.ethereum_models.silver__logs", "model.ethereum_models.silver__logs", "source.ethereum_models.flipside_gold_ethereum.dex_liquidity_pools"], "model.ethereum_models.core__fact_transactions": ["model.ethereum_models.silver__transactions"], "model.ethereum_models.core__dim_dex_liquidity_pools": ["source.ethereum_models.flipside_gold_ethereum.dex_liquidity_pools"], "model.ethereum_models.core__dim_contracts_extended": ["model.ethereum_models.silver__contracts_extended"], "model.ethereum_models.core__ez_token_transfers": ["model.ethereum_models.core__dim_contracts", "model.ethereum_models.core__fact_hourly_token_prices", "model.ethereum_models.silver__transfers"], "model.ethereum_models.core__ez_eth_transfers": ["model.ethereum_models.silver__traces", "model.ethereum_models.silver__transactions", "source.ethereum_models.ethereum_share.token_prices_hourly"], "model.ethereum_models.core__fact_token_transfers": ["model.ethereum_models.silver__transfers"], "model.ethereum_models.core__dim_function_signatures": ["source.ethereum_models.ethereum_silver.signatures_backfill"], "model.ethereum_models.core__ez_dex_swaps": ["model.ethereum_models.silver_dex__v2_swaps"], "model.ethereum_models.core__fact_hourly_token_prices": ["source.ethereum_models.flipside_gold_ethereum.token_prices_hourly"], "model.ethereum_models.core__fact_traces": ["model.ethereum_models.silver__traces"], "model.ethereum_models.core__dim_event_signatures": ["source.ethereum_models.ethereum_silver.event_signatures_backfill"], "model.ethereum_models.core__fact_blocks": ["model.ethereum_models.silver__blocks"], "model.ethereum_models.core__dim_dates": [], "model.ethereum_models.core__fact_event_logs": ["model.ethereum_models.silver__logs"], "model.ethereum_models.core__dim_contracts": ["model.ethereum_models.silver__contracts"], "model.ethereum_models.core__dim_labels": ["source.ethereum_models.flipside_gold_ethereum.labels"], "model.ethereum_models.core__sv_dim_labels": ["source.ethereum_models.ethereum_share.labels"], "model.ethereum_models.core__sv_fact_blocks": ["model.ethereum_models.core__fact_blocks"], "model.ethereum_models.core__sv_fact_traces": ["model.ethereum_models.core__fact_traces"], "model.ethereum_models.core__sv_ez_eth_transfers": ["model.ethereum_models.core__ez_eth_transfers"], "model.ethereum_models.core__sv_dim_function_signatures": ["model.ethereum_models.core__dim_function_signatures"], "model.ethereum_models.core__sv_fact_transactions": ["model.ethereum_models.core__fact_transactions"], "model.ethereum_models.core__sv_fact_event_logs": ["model.ethereum_models.core__fact_event_logs"], "model.ethereum_models.core__sv_fact_token_transfers": ["model.ethereum_models.core__fact_token_transfers"], "model.ethereum_models.core__sv_dim_dex_liquidity_pools": ["source.ethereum_models.ethereum_share.dex_liquidity_pools"], "model.ethereum_models.core__sv_dim_contracts": ["model.ethereum_models.core__dim_contracts"], "model.ethereum_models.core__sv_fact_hourly_token_prices": ["source.ethereum_models.ethereum_share.token_prices_hourly"], "model.ethereum_models.core__sv_dim_event_signatures": ["model.ethereum_models.core__dim_event_signatures"], "model.ethereum_models.sushi__ez_swaps": ["model.ethereum_models.silver_dex__v2_swaps"], "model.ethereum_models.sushi__dim_distributor_reward_schedule": ["source.ethereum_models.sushi_external.sushi_rewards_schedule"], "test.ethereum_models.silver__transactions__tx-gap": ["model.ethereum_models.silver__blocks", "model.ethereum_models.silver__blocks", "model.ethereum_models.silver__transactions"], "seed.ethereum_models.silver__seed_nft_metadata_upload": [], "seed.ethereum_models.silver__event_signatures_backfill": [], "seed.ethereum_models.silver__signatures_backfill": [], "operation.ethereum_models.ethereum_models-on-run-start-0": [], "operation.ethereum_models.ethereum_models-on-run-start-1": [], "operation.ethereum_models.ethereum_models-on-run-start-2": [], "operation.ethereum_models.ethereum_models-on-run-start-3": [], "test.ethereum_models.not_null_silver__logs_BLOCK_NUMBER.f98b235d4c": ["model.ethereum_models.silver__logs"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_NUMBER__NUMBER.73461cc432": ["model.ethereum_models.silver__logs"], "test.ethereum_models.not_null_silver__logs_BLOCK_TIMESTAMP.ca6209335c": ["model.ethereum_models.silver__logs"], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__logs_BLOCK_TIMESTAMP__day__1.79d0ca0413": ["model.ethereum_models.silver__logs"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c39585c6f3": ["model.ethereum_models.silver__logs"], "test.ethereum_models.not_null_silver__logs_TX_HASH.18b09ee14d": ["model.ethereum_models.silver__logs"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_TX_HASH__0_xX_0_9a_fA_F_.0eee0960b6": ["model.ethereum_models.silver__logs"], "test.ethereum_models.not_null_silver__logs_EVENT_INDEX.b97eeb39d7": ["model.ethereum_models.silver__logs"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INDEX__NUMBER__FLOAT.d0df352178": ["model.ethereum_models.silver__logs"], "test.ethereum_models.not_null_silver__logs_CONTRACT_ADDRESS.b78d8c86eb": ["model.ethereum_models.silver__logs"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.28bc84b2ae": ["model.ethereum_models.silver__logs"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_NAME__STRING__VARCHAR.7af2bc20cd": ["model.ethereum_models.silver__logs"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INPUTS__OBJECT.a903a96237": ["model.ethereum_models.silver__logs"], "test.ethereum_models.not_null_silver__logs_TOPICS.f042e94d85": ["model.ethereum_models.silver__logs"], "test.ethereum_models.not_null_silver__logs_DATA.c5fac5c4a4": ["model.ethereum_models.silver__logs"], "test.ethereum_models.not_null_silver__logs_EVENT_REMOVED.4f302d08e0": ["model.ethereum_models.silver__logs"], "test.ethereum_models.not_null_silver__logs__LOG_ID.8c3f196b2a": ["model.ethereum_models.silver__logs"], "test.ethereum_models.not_null_silver__logs_ORIGIN_FUNCTION_SIGNATURE.ed647f3e17": ["model.ethereum_models.silver__logs"], "test.ethereum_models.not_null_silver__logs_ORIGIN_FROM_ADDRESS.1759538d91": ["model.ethereum_models.silver__logs"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.a59d6ffc6a": ["model.ethereum_models.silver__logs"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.869407dadd": ["model.ethereum_models.silver__logs"], "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__logs__LOG_ID.780efa90bd": ["model.ethereum_models.silver__logs"], "test.ethereum_models.sequence_gaps_silver__logs_EVENT_INDEX__BLOCK_NUMBER__TX_HASH.8b3582ee4a": ["model.ethereum_models.silver__logs"], "test.ethereum_models.not_null_silver__blocks_BLOCK_NUMBER.3ed5bd5a97": ["model.ethereum_models.silver__blocks"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_NUMBER__NUMBER__FLOAT.5e6997665c": ["model.ethereum_models.silver__blocks"], "test.ethereum_models.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead": ["model.ethereum_models.silver__blocks"], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1.3844f6e7d3": ["model.ethereum_models.silver__blocks"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751": ["model.ethereum_models.silver__blocks"], "test.ethereum_models.not_null_silver__blocks_NETWORK.65d2a5d7b1": ["model.ethereum_models.silver__blocks"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NETWORK__STRING__VARCHAR.31e2a1e5bd": ["model.ethereum_models.silver__blocks"], "test.ethereum_models.not_null_silver__blocks_BLOCKCHAIN.c3e6e8be96": ["model.ethereum_models.silver__blocks"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCKCHAIN__STRING__VARCHAR.01a66b1dcd": ["model.ethereum_models.silver__blocks"], "test.ethereum_models.not_null_silver__blocks_TX_COUNT.34525b51e6": ["model.ethereum_models.silver__blocks"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT.9486c781f5": ["model.ethereum_models.silver__blocks"], "test.ethereum_models.not_null_silver__blocks_DIFFICULTY.dfd6bb7310": ["model.ethereum_models.silver__blocks"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_DIFFICULTY__NUMBER__FLOAT.4b5343dd2c": ["model.ethereum_models.silver__blocks"], "test.ethereum_models.not_null_silver__blocks_TOTAL_DIFFICULTY.64edc4b2a9": ["model.ethereum_models.silver__blocks"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TOTAL_DIFFICULTY__NUMBER__FLOAT.4a0213cf40": ["model.ethereum_models.silver__blocks"], "test.ethereum_models.not_null_silver__blocks_EXTRA_DATA.7b7824f6ea": ["model.ethereum_models.silver__blocks"], "test.ethereum_models.not_null_silver__blocks_GAS_LIMIT.a66366ccf7": ["model.ethereum_models.silver__blocks"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_LIMIT__NUMBER__FLOAT.c009cca74d": ["model.ethereum_models.silver__blocks"], "test.ethereum_models.not_null_silver__blocks_GAS_USED.637b37099a": ["model.ethereum_models.silver__blocks"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_USED__NUMBER__FLOAT.bde7aa758f": ["model.ethereum_models.silver__blocks"], "test.ethereum_models.not_null_silver__blocks_HASH.bc44a39f94": ["model.ethereum_models.silver__blocks"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_HASH__0_xX_0_9a_fA_F_.923a822bca": ["model.ethereum_models.silver__blocks"], "test.ethereum_models.not_null_silver__blocks_PARENT_HASH.a17a399346": ["model.ethereum_models.silver__blocks"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_PARENT_HASH__0_xX_0_9a_fA_F_.164fb6eb16": ["model.ethereum_models.silver__blocks"], "test.ethereum_models.not_null_silver__blocks_MINER.c17f6cbb87": ["model.ethereum_models.silver__blocks"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_MINER__0_xX_0_9a_fA_F_.7e8cc9ca0b": ["model.ethereum_models.silver__blocks"], "test.ethereum_models.not_null_silver__blocks_NONCE.10c0698884": ["model.ethereum_models.silver__blocks"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_NONCE__0_xX_0_9a_fA_F_.0f55c64955": ["model.ethereum_models.silver__blocks"], "test.ethereum_models.not_null_silver__blocks_RECEIPTS_ROOT.cd3163505f": ["model.ethereum_models.silver__blocks"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_RECEIPTS_ROOT__0_xX_0_9a_fA_F_.6964f6dc30": ["model.ethereum_models.silver__blocks"], "test.ethereum_models.not_null_silver__blocks_SHA3_UNCLES.e7c903103e": ["model.ethereum_models.silver__blocks"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_SHA3_UNCLES__0_xX_0_9a_fA_F_.c74b2fa922": ["model.ethereum_models.silver__blocks"], "test.ethereum_models.not_null_silver__blocks_SIZE.f1fa8f466b": ["model.ethereum_models.silver__blocks"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_SIZE__NUMBER.7f2a8fc982": ["model.ethereum_models.silver__blocks"], "test.ethereum_models.not_null_silver__blocks_BLOCK_HEADER_JSON.98268f8f2b": ["model.ethereum_models.silver__blocks"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HEADER_JSON__OBJECT.1be6a88f28": ["model.ethereum_models.silver__blocks"], "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_NUMBER.58d43342ca": ["model.ethereum_models.silver__blocks"], "test.ethereum_models.sequence_gaps_silver__blocks_BLOCK_NUMBER.4a1c166840": ["model.ethereum_models.silver__blocks"], "test.ethereum_models.not_null_silver__transactions_BLOCK_NUMBER.574ebe21b0": ["model.ethereum_models.silver__transactions"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_NUMBER__NUMBER__FLOAT.c48e941615": ["model.ethereum_models.silver__transactions"], "test.ethereum_models.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d": ["model.ethereum_models.silver__transactions"], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__1.cf074498fc": ["model.ethereum_models.silver__transactions"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bc42693f6e": ["model.ethereum_models.silver__transactions"], "test.ethereum_models.not_null_silver__transactions_TX_HASH.8a2cc32062": ["model.ethereum_models.silver__transactions"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TX_HASH__0_xX_0_9a_fA_F_.558497d3b6": ["model.ethereum_models.silver__transactions"], "test.ethereum_models.not_null_silver__transactions_NONCE.3eac435cf9": ["model.ethereum_models.silver__transactions"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_NONCE__NUMBER__FLOAT.e9f3267e00": ["model.ethereum_models.silver__transactions"], "test.ethereum_models.not_null_silver__transactions_POSITION.6be7c293c7": ["model.ethereum_models.silver__transactions"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_POSITION__NUMBER.5d920e939f": ["model.ethereum_models.silver__transactions"], "test.ethereum_models.not_null_silver__transactions_FROM_ADDRESS.002109da43": ["model.ethereum_models.silver__transactions"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_FROM_ADDRESS__0_xX_0_9a_fA_F_.48157e7169": ["model.ethereum_models.silver__transactions"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TO_ADDRESS__0_xX_0_9a_fA_F_.6729f77190": ["model.ethereum_models.silver__transactions"], "test.ethereum_models.not_null_silver__transactions_ETH_VALUE.1b920ed67c": ["model.ethereum_models.silver__transactions"], "test.ethereum_models.not_null_silver__transactions_BLOCK_HASH.2c918b73f5": ["model.ethereum_models.silver__transactions"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_BLOCK_HASH__0_xX_0_9a_fA_F_.6a7999ad31": ["model.ethereum_models.silver__transactions"], "test.ethereum_models.not_null_silver__transactions_GAS_PRICE.9ee195e584": ["model.ethereum_models.silver__transactions"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_PRICE__NUMBER__FLOAT.7ff329f632": ["model.ethereum_models.silver__transactions"], "test.ethereum_models.not_null_silver__transactions_GAS_LIMIT.b5ac619228": ["model.ethereum_models.silver__transactions"], "test.ethereum_models.not_null_silver__transactions_INPUT_DATA.3cc998f5b1": ["model.ethereum_models.silver__transactions"], "test.ethereum_models.not_null_silver__transactions_STATUS.42a484ef7a": ["model.ethereum_models.silver__transactions"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver__transactions_STATUS__SUCCESS__FAIL.f4150c7e34": ["model.ethereum_models.silver__transactions"], "test.ethereum_models.not_null_silver__transactions_GAS_USED.1c943486c0": ["model.ethereum_models.silver__transactions"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT.5308f986d3": ["model.ethereum_models.silver__transactions"], "test.ethereum_models.not_null_silver__transactions_CUMULATIVE_GAS_USED.2ff9788f8f": ["model.ethereum_models.silver__transactions"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_CUMULATIVE_GAS_USED__NUMBER__FLOAT.68061c4689": ["model.ethereum_models.silver__transactions"], "test.ethereum_models.not_null_silver__transactions_TX_FEE.f2f0cdc085": ["model.ethereum_models.silver__transactions"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_FEE__NUMBER__FLOAT.c56121a801": ["model.ethereum_models.silver__transactions"], "test.ethereum_models.not_null_silver__transactions_EFFECTIVE_GAS_PRICE.fac733dec7": ["model.ethereum_models.silver__transactions"], "test.ethereum_models.not_null_silver__transactions_TX_JSON.c989b71e6a": ["model.ethereum_models.silver__transactions"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_JSON__OBJECT.f6596e98ec": ["model.ethereum_models.silver__transactions"], "test.ethereum_models.not_null_silver__transactions_INGESTED_AT.98e6b66449": ["model.ethereum_models.silver__transactions"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_INGESTED_AT__TIMESTAMP_NTZ.c716636b55": ["model.ethereum_models.silver__transactions"], "test.ethereum_models.not_null_silver__transactions_ORIGIN_FUNCTION_SIGNATURE.6ba6212d68": ["model.ethereum_models.silver__transactions"], "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__transactions_TX_HASH.c217683bc6": ["model.ethereum_models.silver__transactions"], "test.ethereum_models.sequence_gaps_silver__transactions_POSITION__BLOCK_NUMBER.bb18e3a49e": ["model.ethereum_models.silver__transactions"], "test.ethereum_models.not_null_silver__transfers_BLOCK_NUMBER.d11bbde531": ["model.ethereum_models.silver__transfers"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_NUMBER__NUMBER__FLOAT.45ecdb8c94": ["model.ethereum_models.silver__transfers"], "test.ethereum_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c": ["model.ethereum_models.silver__transfers"], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__1.aef2ec1111": ["model.ethereum_models.silver__transfers"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.4ccf9184cd": ["model.ethereum_models.silver__transfers"], "test.ethereum_models.not_null_silver__transfers_TX_HASH.9444c39bdc": ["model.ethereum_models.silver__transfers"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TX_HASH__0_xX_0_9a_fA_F_.f25b6d0ca1": ["model.ethereum_models.silver__transfers"], "test.ethereum_models.not_null_silver__transfers_CONTRACT_ADDRESS.df8cd401ef": ["model.ethereum_models.silver__transfers"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.8e89d13bed": ["model.ethereum_models.silver__transfers"], "test.ethereum_models.not_null_silver__transfers_FROM_ADDRESS.cc15ca835c": ["model.ethereum_models.silver__transfers"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_FROM_ADDRESS__0_xX_0_9a_fA_F_.0479073084": ["model.ethereum_models.silver__transfers"], "test.ethereum_models.not_null_silver__transfers_TO_ADDRESS.2ea6a02b7c": ["model.ethereum_models.silver__transfers"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TO_ADDRESS__0_xX_0_9a_fA_F_.f65ff6bdb6": ["model.ethereum_models.silver__transfers"], "test.ethereum_models.not_null_silver__transfers_RAW_AMOUNT.c53823d6c7": ["model.ethereum_models.silver__transfers"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_RAW_AMOUNT__NUMBER__FLOAT.eb70e6172e": ["model.ethereum_models.silver__transfers"], "test.ethereum_models.not_null_silver__transfers__LOG_ID.29bb073a40": ["model.ethereum_models.silver__transfers"], "test.ethereum_models.not_null_silver__transfers_ORIGIN_FUNCTION_SIGNATURE.c1c149f732": ["model.ethereum_models.silver__transfers"], "test.ethereum_models.not_null_silver__transfers_ORIGIN_FROM_ADDRESS.30ffa7f127": ["model.ethereum_models.silver__transfers"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.fb311c6cec": ["model.ethereum_models.silver__transfers"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.81fe3d170a": ["model.ethereum_models.silver__transfers"], "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__transfers__LOG_ID.3ebab76726": ["model.ethereum_models.silver__transfers"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_SYSTEM_CREATED_AT__TIMESTAMP_NTZ.b181fa0cf2": ["model.ethereum_models.silver__contracts_extended"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_BLOCK_NUMBER__NUMBER__FLOAT.130c12438a": ["model.ethereum_models.silver__contracts_extended"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.873512a62c": ["model.ethereum_models.silver__contracts_extended"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__contracts_extended_CREATOR_ADDRESS__0_xX_0_9a_fA_F_.e7f86e2060": ["model.ethereum_models.silver__contracts_extended"], "test.ethereum_models.not_null_silver__contracts_extended_CONTRACT_ADDRESS.955f4c68be": ["model.ethereum_models.silver__contracts_extended"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__contracts_extended_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.4020521dbd": ["model.ethereum_models.silver__contracts_extended"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__contracts_extended_LOGIC_ADDRESS__0_xX_0_9a_fA_F_.1a0dc10ba5": ["model.ethereum_models.silver__contracts_extended"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_TOKEN_CONVENTION__STRING__VARCHAR.8a2cf81ede": ["model.ethereum_models.silver__contracts_extended"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver__contracts_extended_TOKEN_CONVENTION__erc20__erc721__erc1155.e1f3bc8eca": ["model.ethereum_models.silver__contracts_extended"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_NAME__STRING__VARCHAR.b69b37b6ff": ["model.ethereum_models.silver__contracts_extended"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_SYMBOL__STRING__VARCHAR.346c9f22dc": ["model.ethereum_models.silver__contracts_extended"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_DECIMALS__NUMBER__FLOAT.1f393edf99": ["model.ethereum_models.silver__contracts_extended"], "test.ethereum_models.not_null_silver__contracts_extended_CONTRACT_METADATA.6fbefddf5b": ["model.ethereum_models.silver__contracts_extended"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_CONTRACT_METADATA__OBJECT.0780253d9f": ["model.ethereum_models.silver__contracts_extended"], "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__contracts_extended_CONTRACT_ADDRESS.868e0ffdc1": ["model.ethereum_models.silver__contracts_extended"], "test.ethereum_models.not_null_silver__nft_transfers_BLOCK_NUMBER.5e11b6866e": ["model.ethereum_models.silver__nft_transfers"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_transfers_BLOCK_NUMBER__NUMBER__FLOAT.6e27938ffc": ["model.ethereum_models.silver__nft_transfers"], "test.ethereum_models.not_null_silver__nft_transfers_BLOCK_TIMESTAMP.376ac811e0": ["model.ethereum_models.silver__nft_transfers"], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_transfers_BLOCK_TIMESTAMP__day__1.acbf7aedfe": ["model.ethereum_models.silver__nft_transfers"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.dfd77585a5": ["model.ethereum_models.silver__nft_transfers"], "test.ethereum_models.not_null_silver__nft_transfers_TX_HASH.494be13b6d": ["model.ethereum_models.silver__nft_transfers"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__nft_transfers_TX_HASH__0_xX_0_9a_fA_F_.6e7cff5a71": ["model.ethereum_models.silver__nft_transfers"], "test.ethereum_models.not_null_silver__nft_transfers_CONTRACT_ADDRESS.616fbb7bba": ["model.ethereum_models.silver__nft_transfers"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__nft_transfers_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.c796a1205e": ["model.ethereum_models.silver__nft_transfers"], "test.ethereum_models.not_null_silver__nft_transfers_FROM_ADDRESS.b6f4942bc7": ["model.ethereum_models.silver__nft_transfers"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__nft_transfers_FROM_ADDRESS__0_xX_0_9a_fA_F_.19a7a2c3f7": ["model.ethereum_models.silver__nft_transfers"], "test.ethereum_models.not_null_silver__nft_transfers_TO_ADDRESS.be19f60243": ["model.ethereum_models.silver__nft_transfers"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__nft_transfers_TO_ADDRESS__0_xX_0_9a_fA_F_.0ab08ee86e": ["model.ethereum_models.silver__nft_transfers"], "test.ethereum_models.not_null_silver__nft_transfers_TOKENID.0ac214daa4": ["model.ethereum_models.silver__nft_transfers"], "test.ethereum_models.not_null_silver__nft_transfers__LOG_ID.50d81077a3": ["model.ethereum_models.silver__nft_transfers"], "test.ethereum_models.not_null_silver__nft_transfers_INGESTED_AT.52de2ea95d": ["model.ethereum_models.silver__nft_transfers"], "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__nft_transfers__LOG_ID.39058c5bc1": ["model.ethereum_models.silver__nft_transfers"], "test.ethereum_models.not_null_silver__eth_transfers_BLOCK_NUMBER.fb2e040913": ["model.ethereum_models.silver__eth_transfers"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__eth_transfers_BLOCK_NUMBER__NUMBER__FLOAT.ed2b9f67f3": ["model.ethereum_models.silver__eth_transfers"], "test.ethereum_models.not_null_silver__eth_transfers_BLOCK_TIMESTAMP.0a766e4f24": ["model.ethereum_models.silver__eth_transfers"], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__eth_transfers_BLOCK_TIMESTAMP__day__1.aede4cd522": ["model.ethereum_models.silver__eth_transfers"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__eth_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.77005357a9": ["model.ethereum_models.silver__eth_transfers"], "test.ethereum_models.not_null_silver__eth_transfers_TX_HASH.17f57d6018": ["model.ethereum_models.silver__eth_transfers"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__eth_transfers_TX_HASH__0_xX_0_9a_fA_F_.6aa1eca6e4": ["model.ethereum_models.silver__eth_transfers"], "test.ethereum_models.not_null_silver__eth_transfers_FROM_ADDRESS.aeb58eefc2": ["model.ethereum_models.silver__eth_transfers"], "test.ethereum_models.not_null_silver__eth_transfers_TO_ADDRESS.f2b33456f2": ["model.ethereum_models.silver__eth_transfers"], "test.ethereum_models.not_null_silver__eth_transfers_ETH_VALUE.5a36354513": ["model.ethereum_models.silver__eth_transfers"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__eth_transfers_ETH_VALUE__NUMBER__FLOAT.6f192002f4": ["model.ethereum_models.silver__eth_transfers"], "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__eth_transfers__CALL_ID.bd08623ad0": ["model.ethereum_models.silver__eth_transfers"], "test.ethereum_models.not_null_silver__contracts_address.79fc23bbae": ["model.ethereum_models.silver__contracts"], "test.ethereum_models.not_null_silver__contracts_contract_metadata.aa94997b8d": ["model.ethereum_models.silver__contracts"], "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__contracts_address.5d43822bf3": ["model.ethereum_models.silver__contracts"], "test.ethereum_models.not_null_silver__traces_BLOCK_NUMBER.9dcd1525b2": ["model.ethereum_models.silver__traces"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_NUMBER__NUMBER__FLOAT.ccd2c156a6": ["model.ethereum_models.silver__traces"], "test.ethereum_models.not_null_silver__traces_BLOCK_TIMESTAMP.4053e07c73": ["model.ethereum_models.silver__traces"], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__traces_BLOCK_TIMESTAMP__day__1.0589c5d87f": ["model.ethereum_models.silver__traces"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.3ffecd9044": ["model.ethereum_models.silver__traces"], "test.ethereum_models.not_null_silver__traces_TX_HASH.ccbdeb5e91": ["model.ethereum_models.silver__traces"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_TX_HASH__0_xX_0_9a_fA_F_.14f576932b": ["model.ethereum_models.silver__traces"], "test.ethereum_models.not_null_silver__traces_FROM_ADDRESS.285ef0c05b": ["model.ethereum_models.silver__traces"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_FROM_ADDRESS__0_xX_0_9a_fA_F_.b404693575": ["model.ethereum_models.silver__traces"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_TO_ADDRESS__0_xX_0_9a_fA_F_.3af876962e": ["model.ethereum_models.silver__traces"], "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__traces__CALL_ID.2854a11c5a": ["model.ethereum_models.silver__traces"], "test.ethereum_models.not_null_silver_nft__rarible_sales_BLOCK_NUMBER.1ed5891cea": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_BLOCK_NUMBER__NUMBER__FLOAT.99c2666d8e": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.not_null_silver_nft__rarible_sales_BLOCK_TIMESTAMP.eeb49fcea0": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__rarible_sales_BLOCK_TIMESTAMP__day__1.1e82baebd7": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.a9e554785e": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.not_null_silver_nft__rarible_sales_TX_HASH.d6af452d33": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_TX_HASH__0_xX_0_9a_fA_F_.fc5de21e39": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.not_null_silver_nft__rarible_sales_PLATFORM_ADDRESS.5b6afa36ec": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_.85379defc5": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.not_null_silver_nft__rarible_sales_PLATFORM_NAME.c5e4d3de5e": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__rarible_sales_PLATFORM_NAME__rarible.0e2c579390": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.not_null_silver_nft__rarible_sales_SELLER_ADDRESS.74cc9082ac": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_SELLER_ADDRESS__0_xX_0_9a_fA_F_.9abb06ee02": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.not_null_silver_nft__rarible_sales_BUYER_ADDRESS.24df303e2d": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_BUYER_ADDRESS__0_xX_0_9a_fA_F_.9c266c2ce3": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.not_null_silver_nft__rarible_sales_NFT_ADDRESS.eee841b924": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_.8f93e087d0": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.not_null_silver_nft__rarible_sales_TOKENID.be34a7193c": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.not_null_silver_nft__rarible_sales_CURRENCY_ADDRESS.73c9b4e081": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.not_null_silver_nft__rarible_sales_PRICE.4299cf265e": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_PRICE__NUMBER__FLOAT.3c63c16af8": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_PRICE_USD__NUMBER__FLOAT.064d20c674": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.not_null_silver_nft__rarible_sales_TOTAL_FEES.2f0a1dde86": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_TOTAL_FEES__NUMBER__FLOAT.08041bbe52": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.not_null_silver_nft__rarible_sales_PLATFORM_FEE.5fb832c6d6": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_PLATFORM_FEE__NUMBER__FLOAT.58d99c50c3": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.not_null_silver_nft__rarible_sales_CREATOR_FEE.de434ed2a1": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_CREATOR_FEE__NUMBER__FLOAT.7bf7ddd040": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_TOTAL_FEES_USD__NUMBER__FLOAT.f3b00b2c4e": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_PLATFORM_FEE_USD__NUMBER__FLOAT.3b6e77f076": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_CREATOR_FEE_USD__NUMBER__FLOAT.a8e4c5c16a": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.not_null_silver_nft__rarible_sales_TX_FEE.52480cc33b": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_TX_FEE__NUMBER__FLOAT.d3339c69ea": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.not_null_silver_nft__rarible_sales_TX_FEE_USD.dec61f8fd8": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_TX_FEE_USD__NUMBER__FLOAT.dc6bddc005": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.not_null_silver_nft__rarible_sales_nft_uni_id.e4d5266587": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.not_null_silver_nft__rarible_sales_INGESTED_AT.774efdbea6": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__rarible_sales_INGESTED_AT__day__1.143ec4351d": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_INGESTED_AT__TIMESTAMP_NTZ.1edcc84be4": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.not_null_silver_nft__rarible_sales_ORIGIN_FROM_ADDRESS.c72d1e4948": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.7dfb847fac": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.not_null_silver_nft__rarible_sales_ORIGIN_TO_ADDRESS.f8579d7685": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.d4f38a6f88": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.not_null_silver_nft__rarible_sales_ORIGIN_FUNCTION_SIGNATURE.9f47ed4489": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.936e776427": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver_nft__rarible_sales_nft_uni_id.9eb1c12e50": ["model.ethereum_models.silver_nft__rarible_sales"], "test.ethereum_models.not_null_silver_nft__looksrare_sales_BLOCK_NUMBER.eff4fa805e": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_BLOCK_NUMBER__NUMBER__FLOAT.26f855064c": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.not_null_silver_nft__looksrare_sales_BLOCK_TIMESTAMP.7479fcd544": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__looksrare_sales_BLOCK_TIMESTAMP__day__1.7d41164578": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.203ba5aff8": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.not_null_silver_nft__looksrare_sales_TX_HASH.06f84140a7": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_TX_HASH__0_xX_0_9a_fA_F_.9d158c2558": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.not_null_silver_nft__looksrare_sales_PLATFORM_ADDRESS.66c756648f": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_.bf6b7ad056": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.not_null_silver_nft__looksrare_sales_PLATFORM_NAME.51a5122ae1": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__looksrare_sales_PLATFORM_NAME__looksrare.9cbd647a62": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.not_null_silver_nft__looksrare_sales_NFT_FROM_ADDRESS.b41cc15db9": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_NFT_FROM_ADDRESS__0_xX_0_9a_fA_F_.0bd668142b": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.not_null_silver_nft__looksrare_sales_NFT_TO_ADDRESS.d7d647030e": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_NFT_TO_ADDRESS__0_xX_0_9a_fA_F_.666276b920": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.not_null_silver_nft__looksrare_sales_NFT_ADDRESS.7f102bd39e": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_.d80fae9d88": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.not_null_silver_nft__looksrare_sales_TOKENID.a69b7a7b4d": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.not_null_silver_nft__looksrare_sales_CURRENCY_ADDRESS.07b9dcb4b5": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.not_null_silver_nft__looksrare_sales_PRICE.c86ff5ae80": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_PRICE__NUMBER__FLOAT.d68c2faeac": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_PRICE_USD__NUMBER__FLOAT.d87e60eece": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.not_null_silver_nft__looksrare_sales_TOTAL_FEES.9a38d0c63e": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_TOTAL_FEES__NUMBER__FLOAT.27da09c426": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.not_null_silver_nft__looksrare_sales_PLATFORM_FEE.24b3ac449d": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_PLATFORM_FEE__NUMBER__FLOAT.63ef886134": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.not_null_silver_nft__looksrare_sales_CREATOR_FEE.1517fe04d7": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_CREATOR_FEE__NUMBER__FLOAT.76daf9d67e": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_TOTAL_FEES_USD__NUMBER__FLOAT.af0751ca96": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_PLATFORM_FEE_USD__NUMBER__FLOAT.b478b2adcf": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_CREATOR_FEE_USD__NUMBER__FLOAT.fe3338dc89": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.not_null_silver_nft__looksrare_sales_TX_FEE.080a2177c8": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_TX_FEE__NUMBER__FLOAT.22bf944f15": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.not_null_silver_nft__looksrare_sales_TX_FEE_USD.9a60a8a1c4": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_TX_FEE_USD__NUMBER__FLOAT.68c28c8147": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.not_null_silver_nft__looksrare_sales__LOG_ID.8ab49a30e1": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.not_null_silver_nft__looksrare_sales_INGESTED_AT.2f4f068926": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__looksrare_sales_INGESTED_AT__day__1.ddf637c9e2": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_INGESTED_AT__TIMESTAMP_NTZ.27ad6ac99d": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.not_null_silver_nft__looksrare_sales_ORIGIN_FROM_ADDRESS.79187e68b6": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.7d533b46b8": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.not_null_silver_nft__looksrare_sales_ORIGIN_TO_ADDRESS.bda1344132": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.18b6e532b8": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.not_null_silver_nft__looksrare_sales_ORIGIN_FUNCTION_SIGNATURE.ae8e49763c": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.c912f2f9cc": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.not_null_silver_nft__looksrare_sales_EVENT_TYPE.c68afd2d19": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__looksrare_sales_EVENT_TYPE__bid_won__sale.1a3346fb31": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver_nft__looksrare_sales__log_id.6e1700c569": ["model.ethereum_models.silver_nft__looksrare_sales"], "test.ethereum_models.not_null_silver_nft__opensea_sales_BLOCK_NUMBER.ff6ffccdd3": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_BLOCK_NUMBER__NUMBER__FLOAT.d9ca2a1202": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.not_null_silver_nft__opensea_sales_BLOCK_TIMESTAMP.0b00ab83f0": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__opensea_sales_BLOCK_TIMESTAMP__day__1.6d7e629b07": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.49514f88c4": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.not_null_silver_nft__opensea_sales_TX_HASH.b9b888ff7c": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_TX_HASH__0_xX_0_9a_fA_F_.28436a215a": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.not_null_silver_nft__opensea_sales_PLATFORM_ADDRESS.2f2598fc00": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_.8d2dbabd48": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.not_null_silver_nft__opensea_sales_PLATFORM_NAME.ac234a5988": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__opensea_sales_PLATFORM_NAME__opensea.5aba577130": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.not_null_silver_nft__opensea_sales_NFT_FROM_ADDRESS.14581c0a44": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_NFT_FROM_ADDRESS__0_xX_0_9a_fA_F_.7121ee0cb0": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.not_null_silver_nft__opensea_sales_NFT_TO_ADDRESS.9d57a88f98": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_NFT_TO_ADDRESS__0_xX_0_9a_fA_F_.95d93d45fe": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.not_null_silver_nft__opensea_sales_NFT_ADDRESS.ccbdc863a6": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_.a8e11493ed": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.not_null_silver_nft__opensea_sales_TOKENID.0a6564219f": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.not_null_silver_nft__opensea_sales_CURRENCY_ADDRESS.67d7f68c0d": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.not_null_silver_nft__opensea_sales_PRICE.12d98fda92": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_PRICE__NUMBER__FLOAT.49af08b6d6": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_PRICE_USD__NUMBER__FLOAT.70feea7df8": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.not_null_silver_nft__opensea_sales_TOTAL_FEES.290020e9ec": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_TOTAL_FEES__NUMBER__FLOAT.fc5ea050bf": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.not_null_silver_nft__opensea_sales_PLATFORM_FEE.b66c03b059": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_PLATFORM_FEE__NUMBER__FLOAT.c169a6334f": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.not_null_silver_nft__opensea_sales_CREATOR_FEE.d7b66bbb1c": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_CREATOR_FEE__NUMBER__FLOAT.dc96f9c75e": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_TOTAL_FEES_USD__NUMBER__FLOAT.8afb1a5920": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_PLATFORM_FEE_USD__NUMBER__FLOAT.5c66b8d9e6": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_CREATOR_FEE_USD__NUMBER__FLOAT.12994666a6": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.not_null_silver_nft__opensea_sales_TX_FEE.632153a569": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_TX_FEE__NUMBER__FLOAT.615a8e437b": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.not_null_silver_nft__opensea_sales_TX_FEE_USD.6f3f5c7484": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_TX_FEE_USD__NUMBER__FLOAT.fd8e71b5e3": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.not_null_silver_nft__opensea_sales__LOG_ID.18b5b8bc41": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.not_null_silver_nft__opensea_sales_INGESTED_AT.8ad208bea8": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__opensea_sales_INGESTED_AT__day__1.62a375743f": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_INGESTED_AT__TIMESTAMP_NTZ.df0515f572": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.not_null_silver_nft__opensea_sales_ORIGIN_FROM_ADDRESS.c11d976102": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.89dc1db5d1": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.not_null_silver_nft__opensea_sales_ORIGIN_TO_ADDRESS.8a06fa835e": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.136e4cd9dc": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.not_null_silver_nft__opensea_sales_ORIGIN_FUNCTION_SIGNATURE.b2c2a50da7": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.64a1b8490e": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.not_null_silver_nft__opensea_sales_EVENT_TYPE.15a116ebe0": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__opensea_sales_EVENT_TYPE__bid_won__sale.ac2374f4eb": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver_nft__opensea_sales__log_id.77cdbe7222": ["model.ethereum_models.silver_nft__opensea_sales"], "test.ethereum_models.not_null_silver_dex__v2_swaps_BLOCK_NUMBER.36b3cfcc65": ["model.ethereum_models.silver_dex__v2_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_BLOCK_NUMBER__NUMBER__FLOAT.d06b454912": ["model.ethereum_models.silver_dex__v2_swaps"], "test.ethereum_models.not_null_silver_dex__v2_swaps_BLOCK_TIMESTAMP.567573ecfd": ["model.ethereum_models.silver_dex__v2_swaps"], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_dex__v2_swaps_BLOCK_TIMESTAMP__day__1.0bd7deb591": ["model.ethereum_models.silver_dex__v2_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c46321a153": ["model.ethereum_models.silver_dex__v2_swaps"], "test.ethereum_models.not_null_silver_dex__v2_swaps_TX_HASH.d5c22e2447": ["model.ethereum_models.silver_dex__v2_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_TX_HASH__0_xX_0_9a_fA_F_.c48f9b7af0": ["model.ethereum_models.silver_dex__v2_swaps"], "test.ethereum_models.not_null_silver_dex__v2_swaps_CONTRACT_ADDRESS.ba47556f4f": ["model.ethereum_models.silver_dex__v2_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.9044abb286": ["model.ethereum_models.silver_dex__v2_swaps"], "test.ethereum_models.not_null_silver_dex__v2_swaps_EVENT_NAME.66b664caa4": ["model.ethereum_models.silver_dex__v2_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_EVENT_NAME__STRING__VARCHAR.906c317369": ["model.ethereum_models.silver_dex__v2_swaps"], "test.ethereum_models.not_null_silver_dex__v2_swaps_AMOUNT_IN.7362af5d9f": ["model.ethereum_models.silver_dex__v2_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_AMOUNT_IN__NUMBER__FLOAT.752b8442d3": ["model.ethereum_models.silver_dex__v2_swaps"], "test.ethereum_models.not_null_silver_dex__v2_swaps_AMOUNT_OUT.4c690879c1": ["model.ethereum_models.silver_dex__v2_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_AMOUNT_OUT__NUMBER__FLOAT.27fcd6e1cd": ["model.ethereum_models.silver_dex__v2_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_AMOUNT_IN_USD__NUMBER__FLOAT.9271e7fe2b": ["model.ethereum_models.silver_dex__v2_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT.a9986bca1a": ["model.ethereum_models.silver_dex__v2_swaps"], "test.ethereum_models.not_null_silver_dex__v2_swaps_TOKEN_IN.e41b5ca91a": ["model.ethereum_models.silver_dex__v2_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_TOKEN_IN__0_xX_0_9a_fA_F_.3e32dc1d9b": ["model.ethereum_models.silver_dex__v2_swaps"], "test.ethereum_models.not_null_silver_dex__v2_swaps_TOKEN_OUT.baa114db6e": ["model.ethereum_models.silver_dex__v2_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_.11c94debef": ["model.ethereum_models.silver_dex__v2_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_SYMBOL_IN__STRING__VARCHAR.0fafbb5667": ["model.ethereum_models.silver_dex__v2_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_SYMBOL_OUT__STRING__VARCHAR.459b1e10ed": ["model.ethereum_models.silver_dex__v2_swaps"], "test.ethereum_models.not_null_silver_dex__v2_swaps_SENDER.679f0122aa": ["model.ethereum_models.silver_dex__v2_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_SENDER__0_xX_0_9a_fA_F_.d1fb465aee": ["model.ethereum_models.silver_dex__v2_swaps"], "test.ethereum_models.not_null_silver_dex__v2_swaps_TX_TO.4391a065dd": ["model.ethereum_models.silver_dex__v2_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_TX_TO__0_xX_0_9a_fA_F_.34807c7eba": ["model.ethereum_models.silver_dex__v2_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_PLATFORM__STRING__VARCHAR.863f80b5ff": ["model.ethereum_models.silver_dex__v2_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_EVENT_INDEX__NUMBER__FLOAT.b6d6b46e86": ["model.ethereum_models.silver_dex__v2_swaps"], "test.ethereum_models.not_null_silver_dex__v2_swaps__LOG_ID.459aa805b5": ["model.ethereum_models.silver_dex__v2_swaps"], "test.ethereum_models.not_null_silver_dex__v2_swaps_ORIGIN_FUNCTION_SIGNATURE.30b61017af": ["model.ethereum_models.silver_dex__v2_swaps"], "test.ethereum_models.not_null_silver_dex__v2_swaps_ORIGIN_FROM_ADDRESS.43bc581e8d": ["model.ethereum_models.silver_dex__v2_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.515968e4c3": ["model.ethereum_models.silver_dex__v2_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.650cdd680a": ["model.ethereum_models.silver_dex__v2_swaps"], "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver_dex__v2_swaps__LOG_ID.0563845eec": ["model.ethereum_models.silver_dex__v2_swaps"], "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver_dex__pools_POOL_ADDRESS.83afc7f284": ["model.ethereum_models.silver_dex__pools"], "test.ethereum_models.not_null_core__ez_dex_swaps_BLOCK_NUMBER.3b2b1633f1": ["model.ethereum_models.core__ez_dex_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_BLOCK_NUMBER__NUMBER__FLOAT.fe4c8e9e74": ["model.ethereum_models.core__ez_dex_swaps"], "test.ethereum_models.not_null_core__ez_dex_swaps_BLOCK_TIMESTAMP.929581fe29": ["model.ethereum_models.core__ez_dex_swaps"], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_dex_swaps_BLOCK_TIMESTAMP__day__1.8f881aae37": ["model.ethereum_models.core__ez_dex_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.53f946e5f7": ["model.ethereum_models.core__ez_dex_swaps"], "test.ethereum_models.not_null_core__ez_dex_swaps_TX_HASH.20543d789e": ["model.ethereum_models.core__ez_dex_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_TX_HASH__0_xX_0_9a_fA_F_.d4d2dd8d38": ["model.ethereum_models.core__ez_dex_swaps"], "test.ethereum_models.not_null_core__ez_dex_swaps_CONTRACT_ADDRESS.af7c3bd430": ["model.ethereum_models.core__ez_dex_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.d7efe8e576": ["model.ethereum_models.core__ez_dex_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_EVENT_NAME__STRING__VARCHAR.fa12481d21": ["model.ethereum_models.core__ez_dex_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_AMOUNT_IN__NUMBER__FLOAT.cf58ec2f14": ["model.ethereum_models.core__ez_dex_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_AMOUNT_OUT__NUMBER__FLOAT.1953480d73": ["model.ethereum_models.core__ez_dex_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_AMOUNT_IN_USD__NUMBER__FLOAT.b565b7ded2": ["model.ethereum_models.core__ez_dex_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT.d321ebbe3c": ["model.ethereum_models.core__ez_dex_swaps"], "test.ethereum_models.not_null_core__ez_dex_swaps_TOKEN_IN.dcf4834d74": ["model.ethereum_models.core__ez_dex_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_TOKEN_IN__0_xX_0_9a_fA_F_.f4139933b0": ["model.ethereum_models.core__ez_dex_swaps"], "test.ethereum_models.not_null_core__ez_dex_swaps_TOKEN_OUT.a17febc2f5": ["model.ethereum_models.core__ez_dex_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_.942a1810b7": ["model.ethereum_models.core__ez_dex_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_SYMBOL_IN__STRING__VARCHAR.98d21a7e6b": ["model.ethereum_models.core__ez_dex_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_SYMBOL_OUT__STRING__VARCHAR.94e5ffc1f8": ["model.ethereum_models.core__ez_dex_swaps"], "test.ethereum_models.not_null_core__ez_dex_swaps_SENDER.09a5f2a1d3": ["model.ethereum_models.core__ez_dex_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_SENDER__0_xX_0_9a_fA_F_.fcc46d5e93": ["model.ethereum_models.core__ez_dex_swaps"], "test.ethereum_models.not_null_core__ez_dex_swaps_TX_TO.91ff48bd55": ["model.ethereum_models.core__ez_dex_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_PLATFORM__STRING__VARCHAR.045b7f587a": ["model.ethereum_models.core__ez_dex_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_EVENT_INDEX__NUMBER__FLOAT.eeb957bb0a": ["model.ethereum_models.core__ez_dex_swaps"], "test.ethereum_models.not_null_core__ez_dex_swaps__LOG_ID.54305ad02d": ["model.ethereum_models.core__ez_dex_swaps"], "test.ethereum_models.not_null_core__ez_dex_swaps_ORIGIN_FUNCTION_SIGNATURE.26fd2bdff6": ["model.ethereum_models.core__ez_dex_swaps"], "test.ethereum_models.not_null_core__ez_dex_swaps_ORIGIN_FROM_ADDRESS.9574e82f5a": ["model.ethereum_models.core__ez_dex_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.08cb184de7": ["model.ethereum_models.core__ez_dex_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.f94db051a4": ["model.ethereum_models.core__ez_dex_swaps"], "test.ethereum_models.dbt_utils_unique_combination_of_columns_core__ez_dex_swaps__LOG_ID.e945fa690a": ["model.ethereum_models.core__ez_dex_swaps"], "test.ethereum_models.not_null_core__ez_token_transfers_BLOCK_NUMBER.f76d8950d3": ["model.ethereum_models.core__ez_token_transfers"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_BLOCK_NUMBER__NUMBER__FLOAT.5677fb7a33": ["model.ethereum_models.core__ez_token_transfers"], "test.ethereum_models.not_null_core__ez_token_transfers_BLOCK_TIMESTAMP.ac73bae239": ["model.ethereum_models.core__ez_token_transfers"], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_token_transfers_BLOCK_TIMESTAMP__day__1.1d56697ce2": ["model.ethereum_models.core__ez_token_transfers"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.74e36526fa": ["model.ethereum_models.core__ez_token_transfers"], "test.ethereum_models.not_null_core__ez_token_transfers_TX_HASH.8d54870f53": ["model.ethereum_models.core__ez_token_transfers"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_token_transfers_TX_HASH__0_xX_0_9a_fA_F_.2ed20e4304": ["model.ethereum_models.core__ez_token_transfers"], "test.ethereum_models.not_null_core__ez_token_transfers_CONTRACT_ADDRESS.006c65a449": ["model.ethereum_models.core__ez_token_transfers"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_token_transfers_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.6c5f384aea": ["model.ethereum_models.core__ez_token_transfers"], "test.ethereum_models.not_null_core__ez_token_transfers_FROM_ADDRESS.1eeb23e280": ["model.ethereum_models.core__ez_token_transfers"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_token_transfers_FROM_ADDRESS__0_xX_0_9a_fA_F_.9fadb81646": ["model.ethereum_models.core__ez_token_transfers"], "test.ethereum_models.not_null_core__ez_token_transfers_TO_ADDRESS.1645d36f89": ["model.ethereum_models.core__ez_token_transfers"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_token_transfers_TO_ADDRESS__0_xX_0_9a_fA_F_.1da4143081": ["model.ethereum_models.core__ez_token_transfers"], "test.ethereum_models.not_null_core__ez_token_transfers_RAW_AMOUNT.a3646396ec": ["model.ethereum_models.core__ez_token_transfers"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_RAW_AMOUNT__NUMBER__FLOAT.f16ebc3c1c": ["model.ethereum_models.core__ez_token_transfers"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_DECIMALS__NUMBER__FLOAT.bf814784ea": ["model.ethereum_models.core__ez_token_transfers"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_SYMBOL__STRING__VARCHAR.2fe518e35d": ["model.ethereum_models.core__ez_token_transfers"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_TOKEN_PRICE__NUMBER__FLOAT.c860fdba6e": ["model.ethereum_models.core__ez_token_transfers"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_AMOUNT__NUMBER__FLOAT.ef74453dc7": ["model.ethereum_models.core__ez_token_transfers"], "test.ethereum_models.not_null_core__ez_token_transfers_AMOUNT_USD.399f4c1d66": ["model.ethereum_models.core__ez_token_transfers"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_AMOUNT_USD__NUMBER__FLOAT.41b94e4dfd": ["model.ethereum_models.core__ez_token_transfers"], "test.ethereum_models.not_null_core__ez_token_transfers_HAS_PRICE.9b0670c203": ["model.ethereum_models.core__ez_token_transfers"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_core__ez_token_transfers_HAS_PRICE__true__false.c77e1cdb74": ["model.ethereum_models.core__ez_token_transfers"], "test.ethereum_models.not_null_core__ez_token_transfers_HAS_DECIMAL.05d2a91a21": ["model.ethereum_models.core__ez_token_transfers"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_core__ez_token_transfers_HAS_DECIMAL__true__false.77a32ba9f8": ["model.ethereum_models.core__ez_token_transfers"], "test.ethereum_models.not_null_core__ez_token_transfers__LOG_ID.0ec836c5f8": ["model.ethereum_models.core__ez_token_transfers"], "test.ethereum_models.not_null_core__ez_token_transfers_INGESTED_AT.15d2e566e7": ["model.ethereum_models.core__ez_token_transfers"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_INGESTED_AT__TIMESTAMP_NTZ.a0e512a16d": ["model.ethereum_models.core__ez_token_transfers"], "test.ethereum_models.not_null_core__ez_token_transfers_ORIGIN_FUNCTION_SIGNATURE.817f71c121": ["model.ethereum_models.core__ez_token_transfers"], "test.ethereum_models.not_null_core__ez_token_transfers_ORIGIN_FROM_ADDRESS.9fe38480be": ["model.ethereum_models.core__ez_token_transfers"], "test.ethereum_models.dbt_utils_unique_combination_of_columns_core__ez_token_transfers__LOG_ID.e8a3ff1d6e": ["model.ethereum_models.core__ez_token_transfers"], "test.ethereum_models.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7": ["model.ethereum_models.core__dim_labels"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_BLOCKCHAIN__ethereum.d8a6eb03b5": ["model.ethereum_models.core__dim_labels"], "test.ethereum_models.not_null_core__dim_labels_CREATOR.0c77d5749c": ["model.ethereum_models.core__dim_labels"], "test.ethereum_models.not_null_core__dim_labels_ADDRESS.ddf35f62af": ["model.ethereum_models.core__dim_labels"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__dim_labels_ADDRESS__0_xX_0_9a_fA_F_.52c2534d6a": ["model.ethereum_models.core__dim_labels"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_ADDRESS_NAME__STRING__VARCHAR.7747aa45d1": ["model.ethereum_models.core__dim_labels"], "test.ethereum_models.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed": ["model.ethereum_models.core__dim_labels"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin__project.145ec1d947": ["model.ethereum_models.core__dim_labels"], "test.ethereum_models.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c": ["model.ethereum_models.core__dim_labels"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_LABEL_SUBTYPE__STRING__VARCHAR.80b827b7f5": ["model.ethereum_models.core__dim_labels"], "test.ethereum_models.not_null_core__dim_labels_LABEL.05696d692d": ["model.ethereum_models.core__dim_labels"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_LABEL__STRING__VARCHAR.541a605c84": ["model.ethereum_models.core__dim_labels"], "test.ethereum_models.dbt_utils_unique_combination_of_columns_core__dim_labels_BLOCKCHAIN__CREATOR__ADDRESS.de325ffec9": ["model.ethereum_models.core__dim_labels"], "test.ethereum_models.not_null_sushi__ez_swaps_BLOCK_NUMBER.4da3b3d654": ["model.ethereum_models.sushi__ez_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_NUMBER__NUMBER__FLOAT.7b69aae0de": ["model.ethereum_models.sushi__ez_swaps"], "test.ethereum_models.not_null_sushi__ez_swaps_BLOCK_TIMESTAMP.64d0de4b09": ["model.ethereum_models.sushi__ez_swaps"], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_swaps_BLOCK_TIMESTAMP__day__1.ccd4b95299": ["model.ethereum_models.sushi__ez_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c09d40c178": ["model.ethereum_models.sushi__ez_swaps"], "test.ethereum_models.not_null_sushi__ez_swaps_TX_HASH.5c71b07498": ["model.ethereum_models.sushi__ez_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_HASH__0_xX_0_9a_fA_F_.15d478c09c": ["model.ethereum_models.sushi__ez_swaps"], "test.ethereum_models.not_null_sushi__ez_swaps_CONTRACT_ADDRESS.f4cd976e06": ["model.ethereum_models.sushi__ez_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.d6ed59e98b": ["model.ethereum_models.sushi__ez_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_EVENT_NAME__STRING__VARCHAR.9c08c6c888": ["model.ethereum_models.sushi__ez_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN__NUMBER__FLOAT.ce483aa368": ["model.ethereum_models.sushi__ez_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT__NUMBER__FLOAT.6028b5385f": ["model.ethereum_models.sushi__ez_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN_USD__NUMBER__FLOAT.9a8b1e0480": ["model.ethereum_models.sushi__ez_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT.a061b70981": ["model.ethereum_models.sushi__ez_swaps"], "test.ethereum_models.not_null_sushi__ez_swaps_TOKEN_IN.8093c41dbe": ["model.ethereum_models.sushi__ez_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_IN__0_xX_0_9a_fA_F_.ae96a38071": ["model.ethereum_models.sushi__ez_swaps"], "test.ethereum_models.not_null_sushi__ez_swaps_TOKEN_OUT.68f3f9aac2": ["model.ethereum_models.sushi__ez_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_.a99f33851e": ["model.ethereum_models.sushi__ez_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_IN__STRING__VARCHAR.b1aea9c82f": ["model.ethereum_models.sushi__ez_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_OUT__STRING__VARCHAR.9fa7d6e04c": ["model.ethereum_models.sushi__ez_swaps"], "test.ethereum_models.not_null_sushi__ez_swaps_SENDER.b76baa207c": ["model.ethereum_models.sushi__ez_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_SENDER__0_xX_0_9a_fA_F_.b8de01d1db": ["model.ethereum_models.sushi__ez_swaps"], "test.ethereum_models.not_null_sushi__ez_swaps_TX_TO.1c512c542a": ["model.ethereum_models.sushi__ez_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_TO__0_xX_0_9a_fA_F_.81a6e2ad45": ["model.ethereum_models.sushi__ez_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_PLATFORM__STRING__VARCHAR.55fbd4c7c1": ["model.ethereum_models.sushi__ez_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_EVENT_INDEX__NUMBER__FLOAT.311b76dea2": ["model.ethereum_models.sushi__ez_swaps"], "test.ethereum_models.not_null_sushi__ez_swaps__LOG_ID.3bc8eb295f": ["model.ethereum_models.sushi__ez_swaps"], "test.ethereum_models.not_null_sushi__ez_swaps_ORIGIN_FUNCTION_SIGNATURE.681d6adb74": ["model.ethereum_models.sushi__ez_swaps"], "test.ethereum_models.not_null_sushi__ez_swaps_ORIGIN_FROM_ADDRESS.128c7fd237": ["model.ethereum_models.sushi__ez_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.d35c7fe495": ["model.ethereum_models.sushi__ez_swaps"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.dd5a907c68": ["model.ethereum_models.sushi__ez_swaps"], "test.ethereum_models.dbt_utils_unique_combination_of_columns_sushi__ez_swaps__LOG_ID.cebe0de5a1": ["model.ethereum_models.sushi__ez_swaps"], "model.ethereum_models.silver_nft__x2y2_sales": ["model.ethereum_models.core__ez_token_transfers", "model.ethereum_models.core__fact_hourly_token_prices", "model.ethereum_models.silver__logs", "model.ethereum_models.silver__nft_transfers", "model.ethereum_models.silver__nft_transfers", "model.ethereum_models.silver__traces", "model.ethereum_models.silver__transactions"], "test.ethereum_models.not_null_silver_nft__x2y2_sales_BLOCK_NUMBER.4f007c8c44": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_BLOCK_NUMBER__NUMBER__FLOAT.2cc39910e2": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.not_null_silver_nft__x2y2_sales_BLOCK_TIMESTAMP.14d5ad71f9": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__x2y2_sales_BLOCK_TIMESTAMP__day__1.c8150df2c0": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bdc6444f67": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.not_null_silver_nft__x2y2_sales_TX_HASH.d621a10c0f": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_TX_HASH__0_xX_0_9a_fA_F_.2b5b006991": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.not_null_silver_nft__x2y2_sales_PLATFORM_ADDRESS.daded37cb8": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_.ccafb39a75": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.not_null_silver_nft__x2y2_sales_PLATFORM_NAME.810306ba1c": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__x2y2_sales_PLATFORM_NAME__x2y2.cfc6a32585": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.not_null_silver_nft__x2y2_sales_SELLER_ADDRESS.cb600d47fc": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_SELLER_ADDRESS__0_xX_0_9a_fA_F_.9df0803116": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.not_null_silver_nft__x2y2_sales_BUYER_ADDRESS.2591f8ab2f": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_BUYER_ADDRESS__0_xX_0_9a_fA_F_.d9fa031635": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.not_null_silver_nft__x2y2_sales_NFT_ADDRESS.20f944d1ac": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_.9425f12c11": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.not_null_silver_nft__x2y2_sales_TOKENID.5f96ea498c": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.not_null_silver_nft__x2y2_sales_CURRENCY_ADDRESS.a3da81cf6f": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.not_null_silver_nft__x2y2_sales_PRICE.3af510cd06": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_PRICE__NUMBER__FLOAT.bfa6fec79d": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_PRICE_USD__NUMBER__FLOAT.c971c47c2d": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.not_null_silver_nft__x2y2_sales_TOTAL_FEES.f91a4c9d1b": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_TOTAL_FEES__NUMBER__FLOAT.9407bd9f47": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.not_null_silver_nft__x2y2_sales_PLATFORM_FEE.2c7a3e610f": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_PLATFORM_FEE__NUMBER__FLOAT.8eb2d43fb2": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.not_null_silver_nft__x2y2_sales_CREATOR_FEE.26da310e90": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_CREATOR_FEE__NUMBER__FLOAT.54e1aca021": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_TOTAL_FEES_USD__NUMBER__FLOAT.eb14207648": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_PLATFORM_FEE_USD__NUMBER__FLOAT.9bf179fde9": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_CREATOR_FEE_USD__NUMBER__FLOAT.2ac3fcffcf": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.not_null_silver_nft__x2y2_sales_TX_FEE.9408e64b38": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_TX_FEE__NUMBER__FLOAT.60877f1f13": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.not_null_silver_nft__x2y2_sales_TX_FEE_USD.767e895763": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_TX_FEE_USD__NUMBER__FLOAT.f08cf2a35b": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.not_null_silver_nft__x2y2_sales__LOG_ID.f0d0dc9fe6": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.not_null_silver_nft__x2y2_sales_INGESTED_AT.46520403cc": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__x2y2_sales_INGESTED_AT__day__1.92056ec4c5": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_INGESTED_AT__TIMESTAMP_NTZ.d78ceb4a04": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.not_null_silver_nft__x2y2_sales_ORIGIN_FROM_ADDRESS.124398d0de": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.850781869b": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.not_null_silver_nft__x2y2_sales_ORIGIN_TO_ADDRESS.c2a9b80698": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.79abf2b6f6": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.not_null_silver_nft__x2y2_sales_ORIGIN_FUNCTION_SIGNATURE.aefb1b395b": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.4495a35fb1": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.not_null_silver_nft__x2y2_sales_EVENT_TYPE.7650a16b69": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__x2y2_sales_EVENT_TYPE__bid_won__sale.9cbf01638e": ["model.ethereum_models.silver_nft__x2y2_sales"], "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver_nft__x2y2_sales__log_id.d1e345a564": ["model.ethereum_models.silver_nft__x2y2_sales"], "model.ethereum_models.silver_nft__nftx_sales": ["model.ethereum_models.core__fact_hourly_token_prices", "model.ethereum_models.core__fact_hourly_token_prices", "model.ethereum_models.silver__logs", "model.ethereum_models.silver__logs", "model.ethereum_models.silver__nft_transfers", "model.ethereum_models.silver__nft_transfers", "model.ethereum_models.silver__transactions", "model.ethereum_models.silver__transfers", "model.ethereum_models.silver_dex__v2_swaps"], "model.ethereum_models.core__sv_ez_nft_sales": ["model.ethereum_models.core__ez_nft_sales"], "model.ethereum_models.core__ez_nft_sales": ["model.ethereum_models.silver_nft__looksrare_sales", "model.ethereum_models.silver_nft__nftx_sales", "model.ethereum_models.silver_nft__opensea_sales", "model.ethereum_models.silver_nft__rarible_sales", "model.ethereum_models.silver_nft__x2y2_sales"], "model.ethereum_models.core__sv_ez_nft_transfers": ["model.ethereum_models.core__ez_nft_transfers"], "model.ethereum_models.core__ez_nft_transfers": ["model.ethereum_models.silver__nft_transfers"], "model.ethereum_models.core__ez_nft_mints": ["model.ethereum_models.core__dim_contracts", "model.ethereum_models.core__fact_hourly_token_prices", "model.ethereum_models.silver__nft_transfers", "model.ethereum_models.silver__transactions", "model.ethereum_models.silver__transfers"], "test.ethereum_models.not_null_silver_nft__nftx_sales_BLOCK_NUMBER.a6c03abb23": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_BLOCK_NUMBER__NUMBER__FLOAT.80b0b9ff84": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.not_null_silver_nft__nftx_sales_BLOCK_TIMESTAMP.407a253fab": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__nftx_sales_BLOCK_TIMESTAMP__day__1.d23cd81f40": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.7b707ae4c6": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.not_null_silver_nft__nftx_sales_TX_HASH.28602c9645": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_TX_HASH__0_xX_0_9a_fA_F_.abb6961580": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.not_null_silver_nft__nftx_sales_PLATFORM_ADDRESS.02cd3a8016": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_.e2b6cae481": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.not_null_silver_nft__nftx_sales_PLATFORM_NAME.2123aa582d": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__nftx_sales_PLATFORM_NAME__nftx.ff46a06e13": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.not_null_silver_nft__nftx_sales_BUYER_ADDRESS.e587ace7b8": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_BUYER_ADDRESS__0_xX_0_9a_fA_F_.d151539a20": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.not_null_silver_nft__nftx_sales_SELLER_ADDRESS.32ef90769b": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_SELLER_ADDRESS__0_xX_0_9a_fA_F_.6d628e9bd9": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.not_null_silver_nft__nftx_sales_NFT_ADDRESS.c32a41c9cb": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_.0358077c70": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.not_null_silver_nft__nftx_sales_TOKENID.96b5b44a8a": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.not_null_silver_nft__nftx_sales_CURRENCY_ADDRESS.844deec13f": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.not_null_silver_nft__nftx_sales_PRICE.901075a57c": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_PRICE__NUMBER__FLOAT.6816632f7b": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.not_null_silver_nft__nftx_sales_PRICE_USD.18e5bb8d71": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_PRICE_USD__NUMBER__FLOAT.6e269cbf60": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.not_null_silver_nft__nftx_sales_TOTAL_FEES.303da7e4ef": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_TOTAL_FEES__NUMBER__FLOAT.eacc4622d3": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.not_null_silver_nft__nftx_sales_PLATFORM_FEE.ec0fdca684": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_PLATFORM_FEE__NUMBER__FLOAT.d6469ce959": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.not_null_silver_nft__nftx_sales_CREATOR_FEE.802daae741": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_CREATOR_FEE__NUMBER__FLOAT.f8b97ce082": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_TOTAL_FEES_USD__NUMBER__FLOAT.5df9ab741c": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_PLATFORM_FEE_USD__NUMBER__FLOAT.6a7b2bb1f3": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_CREATOR_FEE_USD__NUMBER__FLOAT.dca5d94515": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.not_null_silver_nft__nftx_sales_TX_FEE.470c08a79d": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_TX_FEE__NUMBER__FLOAT.2f867b06d9": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.not_null_silver_nft__nftx_sales_TX_FEE_USD.ed0ec2916c": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_TX_FEE_USD__NUMBER__FLOAT.1d23057903": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.not_null_silver_nft__nftx_sales__LOG_ID.565ff32394": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.not_null_silver_nft__nftx_sales_INGESTED_AT.fe4e1c0fe1": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__nftx_sales_INGESTED_AT__day__1.f965487553": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_INGESTED_AT__TIMESTAMP_NTZ.9784903dde": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.not_null_silver_nft__nftx_sales_ORIGIN_FROM_ADDRESS.862af0b4d2": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.a779792f16": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.db9436489d": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.not_null_silver_nft__nftx_sales_ORIGIN_FUNCTION_SIGNATURE.1b424dab06": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.94f67071fd": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.not_null_silver_nft__nftx_sales_EVENT_TYPE.45e0aa2632": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__nftx_sales_EVENT_TYPE__bid_won__sale__redeem.9874ccb68c": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver_nft__nftx_sales__log_id.dec5fb0811": ["model.ethereum_models.silver_nft__nftx_sales"], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_nft_mints_BLOCK_TIMESTAMP__day__1.d4b6d94a29": ["model.ethereum_models.core__ez_nft_mints"], "test.ethereum_models.dbt_utils_unique_combination_of_columns_core__ez_nft_mints__LOG_ID.7c541378be": ["model.ethereum_models.core__ez_nft_mints"], "source.ethereum_models.prod.ethereum_blocks": [], "source.ethereum_models.prod.ethereum_txs": [], "source.ethereum_models.flipside_gold_ethereum.contracts": [], "source.ethereum_models.flipside_gold_ethereum.labels": [], "source.ethereum_models.flipside_gold_ethereum.token_prices_hourly": [], "source.ethereum_models.flipside_gold_ethereum.dex_liquidity_pools": [], "source.ethereum_models.flipside_gold_ethereum.nft_metadata": [], "source.ethereum_models.flipside_silver_ethereum.contracts": [], "source.ethereum_models.flipside_silver_ethereum.reads": [], "source.ethereum_models.flipside_silver.ethereum_contracts_backfill": [], "source.ethereum_models.flipside_silver.ethereum_contracts": [], "source.ethereum_models.bronze.prod_ethereum_sink_407559501": [], "source.ethereum_models.ethereum_silver.token_meta_backup": [], "source.ethereum_models.ethereum_silver.signatures_backfill": [], "source.ethereum_models.ethereum_silver.event_signatures_backfill": [], "source.ethereum_models.ethereum_share.token_prices_hourly": [], "source.ethereum_models.ethereum_share.dex_liquidity_pools": [], "source.ethereum_models.ethereum_share.labels": [], "source.ethereum_models.ethereum_external.nft_metadata_api": [], "source.ethereum_models.sushi_external.sushi_rewards_schedule": []}, "child_map": {"model.ethereum_models.bronze__contracts_backfill": ["model.ethereum_models.silver__contracts_extended"], "model.ethereum_models.bronze__contracts": ["model.ethereum_models.silver__contracts_extended"], "model.ethereum_models.bronze__blocks": ["model.ethereum_models.silver__blocks", "model.ethereum_models.silver__traces"], "model.ethereum_models.bronze__transactions": ["model.ethereum_models.silver__logs", "model.ethereum_models.silver__traces", "model.ethereum_models.silver__transactions"], "model.ethereum_models.silver__transactions": ["model.ethereum_models.core__ez_eth_transfers", "model.ethereum_models.core__ez_nft_mints", "model.ethereum_models.core__fact_transactions", "model.ethereum_models.silver_nft__looksrare_sales", "model.ethereum_models.silver_nft__nftx_sales", "model.ethereum_models.silver_nft__opensea_sales", "model.ethereum_models.silver_nft__rarible_sales", "model.ethereum_models.silver_nft__x2y2_sales", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver__transactions_STATUS__SUCCESS__FAIL.f4150c7e34", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_NUMBER__NUMBER__FLOAT.c48e941615", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bc42693f6e", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_CUMULATIVE_GAS_USED__NUMBER__FLOAT.68061c4689", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_PRICE__NUMBER__FLOAT.7ff329f632", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT.5308f986d3", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_INGESTED_AT__TIMESTAMP_NTZ.c716636b55", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_NONCE__NUMBER__FLOAT.e9f3267e00", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_POSITION__NUMBER.5d920e939f", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_FEE__NUMBER__FLOAT.c56121a801", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_JSON__OBJECT.f6596e98ec", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_BLOCK_HASH__0_xX_0_9a_fA_F_.6a7999ad31", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_FROM_ADDRESS__0_xX_0_9a_fA_F_.48157e7169", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TO_ADDRESS__0_xX_0_9a_fA_F_.6729f77190", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TX_HASH__0_xX_0_9a_fA_F_.558497d3b6", "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__1.cf074498fc", "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__transactions_TX_HASH.c217683bc6", "test.ethereum_models.not_null_silver__transactions_BLOCK_HASH.2c918b73f5", "test.ethereum_models.not_null_silver__transactions_BLOCK_NUMBER.574ebe21b0", "test.ethereum_models.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d", "test.ethereum_models.not_null_silver__transactions_CUMULATIVE_GAS_USED.2ff9788f8f", "test.ethereum_models.not_null_silver__transactions_EFFECTIVE_GAS_PRICE.fac733dec7", "test.ethereum_models.not_null_silver__transactions_ETH_VALUE.1b920ed67c", "test.ethereum_models.not_null_silver__transactions_FROM_ADDRESS.002109da43", "test.ethereum_models.not_null_silver__transactions_GAS_LIMIT.b5ac619228", "test.ethereum_models.not_null_silver__transactions_GAS_PRICE.9ee195e584", "test.ethereum_models.not_null_silver__transactions_GAS_USED.1c943486c0", "test.ethereum_models.not_null_silver__transactions_INGESTED_AT.98e6b66449", "test.ethereum_models.not_null_silver__transactions_INPUT_DATA.3cc998f5b1", "test.ethereum_models.not_null_silver__transactions_NONCE.3eac435cf9", "test.ethereum_models.not_null_silver__transactions_ORIGIN_FUNCTION_SIGNATURE.6ba6212d68", "test.ethereum_models.not_null_silver__transactions_POSITION.6be7c293c7", "test.ethereum_models.not_null_silver__transactions_STATUS.42a484ef7a", "test.ethereum_models.not_null_silver__transactions_TX_FEE.f2f0cdc085", "test.ethereum_models.not_null_silver__transactions_TX_HASH.8a2cc32062", "test.ethereum_models.not_null_silver__transactions_TX_JSON.c989b71e6a", "test.ethereum_models.sequence_gaps_silver__transactions_POSITION__BLOCK_NUMBER.bb18e3a49e", "test.ethereum_models.silver__transactions__tx-gap"], "model.ethereum_models.silver__contracts_extended": ["model.ethereum_models.core__dim_contracts_extended", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver__contracts_extended_TOKEN_CONVENTION__erc20__erc721__erc1155.e1f3bc8eca", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_BLOCK_NUMBER__NUMBER__FLOAT.130c12438a", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.873512a62c", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_CONTRACT_METADATA__OBJECT.0780253d9f", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_DECIMALS__NUMBER__FLOAT.1f393edf99", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_NAME__STRING__VARCHAR.b69b37b6ff", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_SYMBOL__STRING__VARCHAR.346c9f22dc", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_SYSTEM_CREATED_AT__TIMESTAMP_NTZ.b181fa0cf2", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_TOKEN_CONVENTION__STRING__VARCHAR.8a2cf81ede", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__contracts_extended_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.4020521dbd", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__contracts_extended_CREATOR_ADDRESS__0_xX_0_9a_fA_F_.e7f86e2060", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__contracts_extended_LOGIC_ADDRESS__0_xX_0_9a_fA_F_.1a0dc10ba5", "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__contracts_extended_CONTRACT_ADDRESS.868e0ffdc1", "test.ethereum_models.not_null_silver__contracts_extended_CONTRACT_ADDRESS.955f4c68be", "test.ethereum_models.not_null_silver__contracts_extended_CONTRACT_METADATA.6fbefddf5b"], "model.ethereum_models.silver__transfers": ["model.ethereum_models.core__ez_nft_mints", "model.ethereum_models.core__ez_token_transfers", "model.ethereum_models.core__fact_token_transfers", "model.ethereum_models.silver_nft__looksrare_sales", "model.ethereum_models.silver_nft__nftx_sales", "model.ethereum_models.silver_nft__opensea_sales", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_NUMBER__NUMBER__FLOAT.45ecdb8c94", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.4ccf9184cd", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_RAW_AMOUNT__NUMBER__FLOAT.eb70e6172e", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.8e89d13bed", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_FROM_ADDRESS__0_xX_0_9a_fA_F_.0479073084", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.fb311c6cec", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.81fe3d170a", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TO_ADDRESS__0_xX_0_9a_fA_F_.f65ff6bdb6", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TX_HASH__0_xX_0_9a_fA_F_.f25b6d0ca1", "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__1.aef2ec1111", "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__transfers__LOG_ID.3ebab76726", "test.ethereum_models.not_null_silver__transfers_BLOCK_NUMBER.d11bbde531", "test.ethereum_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c", "test.ethereum_models.not_null_silver__transfers_CONTRACT_ADDRESS.df8cd401ef", "test.ethereum_models.not_null_silver__transfers_FROM_ADDRESS.cc15ca835c", "test.ethereum_models.not_null_silver__transfers_ORIGIN_FROM_ADDRESS.30ffa7f127", "test.ethereum_models.not_null_silver__transfers_ORIGIN_FUNCTION_SIGNATURE.c1c149f732", "test.ethereum_models.not_null_silver__transfers_RAW_AMOUNT.c53823d6c7", "test.ethereum_models.not_null_silver__transfers_TO_ADDRESS.2ea6a02b7c", "test.ethereum_models.not_null_silver__transfers_TX_HASH.9444c39bdc", "test.ethereum_models.not_null_silver__transfers__LOG_ID.29bb073a40"], "model.ethereum_models.silver__nft_metadata_api_requests": [], "model.ethereum_models.silver__logs": ["model.ethereum_models.core__fact_event_logs", "model.ethereum_models.silver__nft_transfers", "model.ethereum_models.silver__transfers", "model.ethereum_models.silver_dex__pools", "model.ethereum_models.silver_dex__pools", "model.ethereum_models.silver_dex__v2_swaps", "model.ethereum_models.silver_nft__looksrare_sales", "model.ethereum_models.silver_nft__looksrare_sales", "model.ethereum_models.silver_nft__nftx_sales", "model.ethereum_models.silver_nft__nftx_sales", "model.ethereum_models.silver_nft__opensea_sales", "model.ethereum_models.silver_nft__rarible_sales", "model.ethereum_models.silver_nft__rarible_sales", "model.ethereum_models.silver_nft__x2y2_sales", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_NUMBER__NUMBER.73461cc432", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c39585c6f3", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INDEX__NUMBER__FLOAT.d0df352178", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INPUTS__OBJECT.a903a96237", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_NAME__STRING__VARCHAR.7af2bc20cd", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.28bc84b2ae", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.a59d6ffc6a", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.869407dadd", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_TX_HASH__0_xX_0_9a_fA_F_.0eee0960b6", "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__logs_BLOCK_TIMESTAMP__day__1.79d0ca0413", "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__logs__LOG_ID.780efa90bd", "test.ethereum_models.not_null_silver__logs_BLOCK_NUMBER.f98b235d4c", "test.ethereum_models.not_null_silver__logs_BLOCK_TIMESTAMP.ca6209335c", "test.ethereum_models.not_null_silver__logs_CONTRACT_ADDRESS.b78d8c86eb", "test.ethereum_models.not_null_silver__logs_DATA.c5fac5c4a4", "test.ethereum_models.not_null_silver__logs_EVENT_INDEX.b97eeb39d7", "test.ethereum_models.not_null_silver__logs_EVENT_REMOVED.4f302d08e0", "test.ethereum_models.not_null_silver__logs_ORIGIN_FROM_ADDRESS.1759538d91", "test.ethereum_models.not_null_silver__logs_ORIGIN_FUNCTION_SIGNATURE.ed647f3e17", "test.ethereum_models.not_null_silver__logs_TOPICS.f042e94d85", "test.ethereum_models.not_null_silver__logs_TX_HASH.18b09ee14d", "test.ethereum_models.not_null_silver__logs__LOG_ID.8c3f196b2a", "test.ethereum_models.sequence_gaps_silver__logs_EVENT_INDEX__BLOCK_NUMBER__TX_HASH.8b3582ee4a"], "model.ethereum_models.silver__blocks": ["model.ethereum_models.core__fact_blocks", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCKCHAIN__STRING__VARCHAR.01a66b1dcd", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HEADER_JSON__OBJECT.1be6a88f28", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_NUMBER__NUMBER__FLOAT.5e6997665c", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_DIFFICULTY__NUMBER__FLOAT.4b5343dd2c", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_LIMIT__NUMBER__FLOAT.c009cca74d", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_USED__NUMBER__FLOAT.bde7aa758f", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NETWORK__STRING__VARCHAR.31e2a1e5bd", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_SIZE__NUMBER.7f2a8fc982", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TOTAL_DIFFICULTY__NUMBER__FLOAT.4a0213cf40", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT.9486c781f5", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_HASH__0_xX_0_9a_fA_F_.923a822bca", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_MINER__0_xX_0_9a_fA_F_.7e8cc9ca0b", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_NONCE__0_xX_0_9a_fA_F_.0f55c64955", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_PARENT_HASH__0_xX_0_9a_fA_F_.164fb6eb16", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_RECEIPTS_ROOT__0_xX_0_9a_fA_F_.6964f6dc30", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_SHA3_UNCLES__0_xX_0_9a_fA_F_.c74b2fa922", "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1.3844f6e7d3", "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_NUMBER.58d43342ca", "test.ethereum_models.not_null_silver__blocks_BLOCKCHAIN.c3e6e8be96", "test.ethereum_models.not_null_silver__blocks_BLOCK_HEADER_JSON.98268f8f2b", "test.ethereum_models.not_null_silver__blocks_BLOCK_NUMBER.3ed5bd5a97", "test.ethereum_models.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead", "test.ethereum_models.not_null_silver__blocks_DIFFICULTY.dfd6bb7310", "test.ethereum_models.not_null_silver__blocks_EXTRA_DATA.7b7824f6ea", "test.ethereum_models.not_null_silver__blocks_GAS_LIMIT.a66366ccf7", "test.ethereum_models.not_null_silver__blocks_GAS_USED.637b37099a", "test.ethereum_models.not_null_silver__blocks_HASH.bc44a39f94", "test.ethereum_models.not_null_silver__blocks_MINER.c17f6cbb87", "test.ethereum_models.not_null_silver__blocks_NETWORK.65d2a5d7b1", "test.ethereum_models.not_null_silver__blocks_NONCE.10c0698884", "test.ethereum_models.not_null_silver__blocks_PARENT_HASH.a17a399346", "test.ethereum_models.not_null_silver__blocks_RECEIPTS_ROOT.cd3163505f", "test.ethereum_models.not_null_silver__blocks_SHA3_UNCLES.e7c903103e", "test.ethereum_models.not_null_silver__blocks_SIZE.f1fa8f466b", "test.ethereum_models.not_null_silver__blocks_TOTAL_DIFFICULTY.64edc4b2a9", "test.ethereum_models.not_null_silver__blocks_TX_COUNT.34525b51e6", "test.ethereum_models.sequence_gaps_silver__blocks_BLOCK_NUMBER.4a1c166840", "test.ethereum_models.silver__transactions__tx-gap", "test.ethereum_models.silver__transactions__tx-gap"], "model.ethereum_models.silver__contracts": ["model.ethereum_models.core__dim_contracts", "model.ethereum_models.silver_nft__looksrare_sales", "model.ethereum_models.silver_nft__opensea_sales", "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__contracts_address.5d43822bf3", "test.ethereum_models.not_null_silver__contracts_address.79fc23bbae", "test.ethereum_models.not_null_silver__contracts_contract_metadata.aa94997b8d"], "model.ethereum_models.silver__eth_transfers": ["model.ethereum_models.silver_nft__opensea_sales", "model.ethereum_models.silver_nft__rarible_sales", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__eth_transfers_BLOCK_NUMBER__NUMBER__FLOAT.ed2b9f67f3", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__eth_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.77005357a9", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__eth_transfers_ETH_VALUE__NUMBER__FLOAT.6f192002f4", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__eth_transfers_TX_HASH__0_xX_0_9a_fA_F_.6aa1eca6e4", "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__eth_transfers_BLOCK_TIMESTAMP__day__1.aede4cd522", "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__eth_transfers__CALL_ID.bd08623ad0", "test.ethereum_models.not_null_silver__eth_transfers_BLOCK_NUMBER.fb2e040913", "test.ethereum_models.not_null_silver__eth_transfers_BLOCK_TIMESTAMP.0a766e4f24", "test.ethereum_models.not_null_silver__eth_transfers_ETH_VALUE.5a36354513", "test.ethereum_models.not_null_silver__eth_transfers_FROM_ADDRESS.aeb58eefc2", "test.ethereum_models.not_null_silver__eth_transfers_TO_ADDRESS.f2b33456f2", "test.ethereum_models.not_null_silver__eth_transfers_TX_HASH.17f57d6018"], "model.ethereum_models.silver__nft_transfers": ["model.ethereum_models.core__ez_nft_mints", "model.ethereum_models.core__ez_nft_transfers", "model.ethereum_models.silver_nft__looksrare_sales", "model.ethereum_models.silver_nft__nftx_sales", "model.ethereum_models.silver_nft__nftx_sales", "model.ethereum_models.silver_nft__opensea_sales", "model.ethereum_models.silver_nft__rarible_sales", "model.ethereum_models.silver_nft__rarible_sales", "model.ethereum_models.silver_nft__x2y2_sales", "model.ethereum_models.silver_nft__x2y2_sales", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_transfers_BLOCK_NUMBER__NUMBER__FLOAT.6e27938ffc", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.dfd77585a5", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__nft_transfers_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.c796a1205e", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__nft_transfers_FROM_ADDRESS__0_xX_0_9a_fA_F_.19a7a2c3f7", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__nft_transfers_TO_ADDRESS__0_xX_0_9a_fA_F_.0ab08ee86e", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__nft_transfers_TX_HASH__0_xX_0_9a_fA_F_.6e7cff5a71", "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_transfers_BLOCK_TIMESTAMP__day__1.acbf7aedfe", "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__nft_transfers__LOG_ID.39058c5bc1", "test.ethereum_models.not_null_silver__nft_transfers_BLOCK_NUMBER.5e11b6866e", "test.ethereum_models.not_null_silver__nft_transfers_BLOCK_TIMESTAMP.376ac811e0", "test.ethereum_models.not_null_silver__nft_transfers_CONTRACT_ADDRESS.616fbb7bba", "test.ethereum_models.not_null_silver__nft_transfers_FROM_ADDRESS.b6f4942bc7", "test.ethereum_models.not_null_silver__nft_transfers_INGESTED_AT.52de2ea95d", "test.ethereum_models.not_null_silver__nft_transfers_TOKENID.0ac214daa4", "test.ethereum_models.not_null_silver__nft_transfers_TO_ADDRESS.be19f60243", "test.ethereum_models.not_null_silver__nft_transfers_TX_HASH.494be13b6d", "test.ethereum_models.not_null_silver__nft_transfers__LOG_ID.50d81077a3"], "model.ethereum_models.silver__traces": ["model.ethereum_models.core__ez_eth_transfers", "model.ethereum_models.core__fact_traces", "model.ethereum_models.silver__eth_transfers", "model.ethereum_models.silver_nft__x2y2_sales", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_NUMBER__NUMBER__FLOAT.ccd2c156a6", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.3ffecd9044", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_FROM_ADDRESS__0_xX_0_9a_fA_F_.b404693575", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_TO_ADDRESS__0_xX_0_9a_fA_F_.3af876962e", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_TX_HASH__0_xX_0_9a_fA_F_.14f576932b", "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__traces_BLOCK_TIMESTAMP__day__1.0589c5d87f", "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__traces__CALL_ID.2854a11c5a", "test.ethereum_models.not_null_silver__traces_BLOCK_NUMBER.9dcd1525b2", "test.ethereum_models.not_null_silver__traces_BLOCK_TIMESTAMP.4053e07c73", "test.ethereum_models.not_null_silver__traces_FROM_ADDRESS.285ef0c05b", "test.ethereum_models.not_null_silver__traces_TX_HASH.ccbdeb5e91"], "model.ethereum_models.silver_nft__looksrare_sales": ["model.ethereum_models.core__ez_nft_sales", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__looksrare_sales_EVENT_TYPE__bid_won__sale.1a3346fb31", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__looksrare_sales_PLATFORM_NAME__looksrare.9cbd647a62", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_BLOCK_NUMBER__NUMBER__FLOAT.26f855064c", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.203ba5aff8", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_CREATOR_FEE_USD__NUMBER__FLOAT.fe3338dc89", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_CREATOR_FEE__NUMBER__FLOAT.76daf9d67e", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_INGESTED_AT__TIMESTAMP_NTZ.27ad6ac99d", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_PLATFORM_FEE_USD__NUMBER__FLOAT.b478b2adcf", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_PLATFORM_FEE__NUMBER__FLOAT.63ef886134", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_PRICE_USD__NUMBER__FLOAT.d87e60eece", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_PRICE__NUMBER__FLOAT.d68c2faeac", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_TOTAL_FEES_USD__NUMBER__FLOAT.af0751ca96", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_TOTAL_FEES__NUMBER__FLOAT.27da09c426", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_TX_FEE_USD__NUMBER__FLOAT.68c28c8147", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_TX_FEE__NUMBER__FLOAT.22bf944f15", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_.d80fae9d88", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_NFT_FROM_ADDRESS__0_xX_0_9a_fA_F_.0bd668142b", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_NFT_TO_ADDRESS__0_xX_0_9a_fA_F_.666276b920", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.7d533b46b8", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.c912f2f9cc", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.18b6e532b8", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_.bf6b7ad056", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_TX_HASH__0_xX_0_9a_fA_F_.9d158c2558", "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__looksrare_sales_BLOCK_TIMESTAMP__day__1.7d41164578", "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__looksrare_sales_INGESTED_AT__day__1.ddf637c9e2", "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver_nft__looksrare_sales__log_id.6e1700c569", "test.ethereum_models.not_null_silver_nft__looksrare_sales_BLOCK_NUMBER.eff4fa805e", "test.ethereum_models.not_null_silver_nft__looksrare_sales_BLOCK_TIMESTAMP.7479fcd544", "test.ethereum_models.not_null_silver_nft__looksrare_sales_CREATOR_FEE.1517fe04d7", "test.ethereum_models.not_null_silver_nft__looksrare_sales_CURRENCY_ADDRESS.07b9dcb4b5", "test.ethereum_models.not_null_silver_nft__looksrare_sales_EVENT_TYPE.c68afd2d19", "test.ethereum_models.not_null_silver_nft__looksrare_sales_INGESTED_AT.2f4f068926", "test.ethereum_models.not_null_silver_nft__looksrare_sales_NFT_ADDRESS.7f102bd39e", "test.ethereum_models.not_null_silver_nft__looksrare_sales_NFT_FROM_ADDRESS.b41cc15db9", "test.ethereum_models.not_null_silver_nft__looksrare_sales_NFT_TO_ADDRESS.d7d647030e", "test.ethereum_models.not_null_silver_nft__looksrare_sales_ORIGIN_FROM_ADDRESS.79187e68b6", "test.ethereum_models.not_null_silver_nft__looksrare_sales_ORIGIN_FUNCTION_SIGNATURE.ae8e49763c", "test.ethereum_models.not_null_silver_nft__looksrare_sales_ORIGIN_TO_ADDRESS.bda1344132", "test.ethereum_models.not_null_silver_nft__looksrare_sales_PLATFORM_ADDRESS.66c756648f", "test.ethereum_models.not_null_silver_nft__looksrare_sales_PLATFORM_FEE.24b3ac449d", "test.ethereum_models.not_null_silver_nft__looksrare_sales_PLATFORM_NAME.51a5122ae1", "test.ethereum_models.not_null_silver_nft__looksrare_sales_PRICE.c86ff5ae80", "test.ethereum_models.not_null_silver_nft__looksrare_sales_TOKENID.a69b7a7b4d", "test.ethereum_models.not_null_silver_nft__looksrare_sales_TOTAL_FEES.9a38d0c63e", "test.ethereum_models.not_null_silver_nft__looksrare_sales_TX_FEE.080a2177c8", "test.ethereum_models.not_null_silver_nft__looksrare_sales_TX_FEE_USD.9a60a8a1c4", "test.ethereum_models.not_null_silver_nft__looksrare_sales_TX_HASH.06f84140a7", "test.ethereum_models.not_null_silver_nft__looksrare_sales__LOG_ID.8ab49a30e1"], "model.ethereum_models.silver_nft__rarible_sales": ["model.ethereum_models.core__ez_nft_sales", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__rarible_sales_PLATFORM_NAME__rarible.0e2c579390", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_BLOCK_NUMBER__NUMBER__FLOAT.99c2666d8e", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.a9e554785e", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_CREATOR_FEE_USD__NUMBER__FLOAT.a8e4c5c16a", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_CREATOR_FEE__NUMBER__FLOAT.7bf7ddd040", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_INGESTED_AT__TIMESTAMP_NTZ.1edcc84be4", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_PLATFORM_FEE_USD__NUMBER__FLOAT.3b6e77f076", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_PLATFORM_FEE__NUMBER__FLOAT.58d99c50c3", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_PRICE_USD__NUMBER__FLOAT.064d20c674", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_PRICE__NUMBER__FLOAT.3c63c16af8", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_TOTAL_FEES_USD__NUMBER__FLOAT.f3b00b2c4e", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_TOTAL_FEES__NUMBER__FLOAT.08041bbe52", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_TX_FEE_USD__NUMBER__FLOAT.dc6bddc005", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_TX_FEE__NUMBER__FLOAT.d3339c69ea", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_BUYER_ADDRESS__0_xX_0_9a_fA_F_.9c266c2ce3", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_.8f93e087d0", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.7dfb847fac", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.936e776427", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.d4f38a6f88", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_.85379defc5", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_SELLER_ADDRESS__0_xX_0_9a_fA_F_.9abb06ee02", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_TX_HASH__0_xX_0_9a_fA_F_.fc5de21e39", "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__rarible_sales_BLOCK_TIMESTAMP__day__1.1e82baebd7", "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__rarible_sales_INGESTED_AT__day__1.143ec4351d", "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver_nft__rarible_sales_nft_uni_id.9eb1c12e50", "test.ethereum_models.not_null_silver_nft__rarible_sales_BLOCK_NUMBER.1ed5891cea", "test.ethereum_models.not_null_silver_nft__rarible_sales_BLOCK_TIMESTAMP.eeb49fcea0", "test.ethereum_models.not_null_silver_nft__rarible_sales_BUYER_ADDRESS.24df303e2d", "test.ethereum_models.not_null_silver_nft__rarible_sales_CREATOR_FEE.de434ed2a1", "test.ethereum_models.not_null_silver_nft__rarible_sales_CURRENCY_ADDRESS.73c9b4e081", "test.ethereum_models.not_null_silver_nft__rarible_sales_INGESTED_AT.774efdbea6", "test.ethereum_models.not_null_silver_nft__rarible_sales_NFT_ADDRESS.eee841b924", "test.ethereum_models.not_null_silver_nft__rarible_sales_ORIGIN_FROM_ADDRESS.c72d1e4948", "test.ethereum_models.not_null_silver_nft__rarible_sales_ORIGIN_FUNCTION_SIGNATURE.9f47ed4489", "test.ethereum_models.not_null_silver_nft__rarible_sales_ORIGIN_TO_ADDRESS.f8579d7685", "test.ethereum_models.not_null_silver_nft__rarible_sales_PLATFORM_ADDRESS.5b6afa36ec", "test.ethereum_models.not_null_silver_nft__rarible_sales_PLATFORM_FEE.5fb832c6d6", "test.ethereum_models.not_null_silver_nft__rarible_sales_PLATFORM_NAME.c5e4d3de5e", "test.ethereum_models.not_null_silver_nft__rarible_sales_PRICE.4299cf265e", "test.ethereum_models.not_null_silver_nft__rarible_sales_SELLER_ADDRESS.74cc9082ac", "test.ethereum_models.not_null_silver_nft__rarible_sales_TOKENID.be34a7193c", "test.ethereum_models.not_null_silver_nft__rarible_sales_TOTAL_FEES.2f0a1dde86", "test.ethereum_models.not_null_silver_nft__rarible_sales_TX_FEE.52480cc33b", "test.ethereum_models.not_null_silver_nft__rarible_sales_TX_FEE_USD.dec61f8fd8", "test.ethereum_models.not_null_silver_nft__rarible_sales_TX_HASH.d6af452d33", "test.ethereum_models.not_null_silver_nft__rarible_sales_nft_uni_id.e4d5266587"], "model.ethereum_models.silver_nft__metadata": [], "model.ethereum_models.silver_nft__opensea_sales": ["model.ethereum_models.core__ez_nft_sales", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__opensea_sales_EVENT_TYPE__bid_won__sale.ac2374f4eb", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__opensea_sales_PLATFORM_NAME__opensea.5aba577130", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_BLOCK_NUMBER__NUMBER__FLOAT.d9ca2a1202", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.49514f88c4", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_CREATOR_FEE_USD__NUMBER__FLOAT.12994666a6", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_CREATOR_FEE__NUMBER__FLOAT.dc96f9c75e", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_INGESTED_AT__TIMESTAMP_NTZ.df0515f572", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_PLATFORM_FEE_USD__NUMBER__FLOAT.5c66b8d9e6", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_PLATFORM_FEE__NUMBER__FLOAT.c169a6334f", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_PRICE_USD__NUMBER__FLOAT.70feea7df8", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_PRICE__NUMBER__FLOAT.49af08b6d6", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_TOTAL_FEES_USD__NUMBER__FLOAT.8afb1a5920", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_TOTAL_FEES__NUMBER__FLOAT.fc5ea050bf", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_TX_FEE_USD__NUMBER__FLOAT.fd8e71b5e3", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_TX_FEE__NUMBER__FLOAT.615a8e437b", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_.a8e11493ed", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_NFT_FROM_ADDRESS__0_xX_0_9a_fA_F_.7121ee0cb0", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_NFT_TO_ADDRESS__0_xX_0_9a_fA_F_.95d93d45fe", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.89dc1db5d1", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.64a1b8490e", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.136e4cd9dc", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_.8d2dbabd48", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_TX_HASH__0_xX_0_9a_fA_F_.28436a215a", "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__opensea_sales_BLOCK_TIMESTAMP__day__1.6d7e629b07", "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__opensea_sales_INGESTED_AT__day__1.62a375743f", "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver_nft__opensea_sales__log_id.77cdbe7222", "test.ethereum_models.not_null_silver_nft__opensea_sales_BLOCK_NUMBER.ff6ffccdd3", "test.ethereum_models.not_null_silver_nft__opensea_sales_BLOCK_TIMESTAMP.0b00ab83f0", "test.ethereum_models.not_null_silver_nft__opensea_sales_CREATOR_FEE.d7b66bbb1c", "test.ethereum_models.not_null_silver_nft__opensea_sales_CURRENCY_ADDRESS.67d7f68c0d", "test.ethereum_models.not_null_silver_nft__opensea_sales_EVENT_TYPE.15a116ebe0", "test.ethereum_models.not_null_silver_nft__opensea_sales_INGESTED_AT.8ad208bea8", "test.ethereum_models.not_null_silver_nft__opensea_sales_NFT_ADDRESS.ccbdc863a6", "test.ethereum_models.not_null_silver_nft__opensea_sales_NFT_FROM_ADDRESS.14581c0a44", "test.ethereum_models.not_null_silver_nft__opensea_sales_NFT_TO_ADDRESS.9d57a88f98", "test.ethereum_models.not_null_silver_nft__opensea_sales_ORIGIN_FROM_ADDRESS.c11d976102", "test.ethereum_models.not_null_silver_nft__opensea_sales_ORIGIN_FUNCTION_SIGNATURE.b2c2a50da7", "test.ethereum_models.not_null_silver_nft__opensea_sales_ORIGIN_TO_ADDRESS.8a06fa835e", "test.ethereum_models.not_null_silver_nft__opensea_sales_PLATFORM_ADDRESS.2f2598fc00", "test.ethereum_models.not_null_silver_nft__opensea_sales_PLATFORM_FEE.b66c03b059", "test.ethereum_models.not_null_silver_nft__opensea_sales_PLATFORM_NAME.ac234a5988", "test.ethereum_models.not_null_silver_nft__opensea_sales_PRICE.12d98fda92", "test.ethereum_models.not_null_silver_nft__opensea_sales_TOKENID.0a6564219f", "test.ethereum_models.not_null_silver_nft__opensea_sales_TOTAL_FEES.290020e9ec", "test.ethereum_models.not_null_silver_nft__opensea_sales_TX_FEE.632153a569", "test.ethereum_models.not_null_silver_nft__opensea_sales_TX_FEE_USD.6f3f5c7484", "test.ethereum_models.not_null_silver_nft__opensea_sales_TX_HASH.b9b888ff7c", "test.ethereum_models.not_null_silver_nft__opensea_sales__LOG_ID.18b5b8bc41"], "model.ethereum_models.silver_dex__v2_swaps": ["model.ethereum_models.core__ez_dex_swaps", "model.ethereum_models.silver_nft__nftx_sales", "model.ethereum_models.sushi__ez_swaps", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_AMOUNT_IN_USD__NUMBER__FLOAT.9271e7fe2b", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_AMOUNT_IN__NUMBER__FLOAT.752b8442d3", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT.a9986bca1a", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_AMOUNT_OUT__NUMBER__FLOAT.27fcd6e1cd", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_BLOCK_NUMBER__NUMBER__FLOAT.d06b454912", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c46321a153", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_EVENT_INDEX__NUMBER__FLOAT.b6d6b46e86", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_EVENT_NAME__STRING__VARCHAR.906c317369", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_PLATFORM__STRING__VARCHAR.863f80b5ff", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_SYMBOL_IN__STRING__VARCHAR.0fafbb5667", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_SYMBOL_OUT__STRING__VARCHAR.459b1e10ed", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.9044abb286", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.515968e4c3", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.650cdd680a", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_SENDER__0_xX_0_9a_fA_F_.d1fb465aee", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_TOKEN_IN__0_xX_0_9a_fA_F_.3e32dc1d9b", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_.11c94debef", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_TX_HASH__0_xX_0_9a_fA_F_.c48f9b7af0", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_TX_TO__0_xX_0_9a_fA_F_.34807c7eba", "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_dex__v2_swaps_BLOCK_TIMESTAMP__day__1.0bd7deb591", "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver_dex__v2_swaps__LOG_ID.0563845eec", "test.ethereum_models.not_null_silver_dex__v2_swaps_AMOUNT_IN.7362af5d9f", "test.ethereum_models.not_null_silver_dex__v2_swaps_AMOUNT_OUT.4c690879c1", "test.ethereum_models.not_null_silver_dex__v2_swaps_BLOCK_NUMBER.36b3cfcc65", "test.ethereum_models.not_null_silver_dex__v2_swaps_BLOCK_TIMESTAMP.567573ecfd", "test.ethereum_models.not_null_silver_dex__v2_swaps_CONTRACT_ADDRESS.ba47556f4f", "test.ethereum_models.not_null_silver_dex__v2_swaps_EVENT_NAME.66b664caa4", "test.ethereum_models.not_null_silver_dex__v2_swaps_ORIGIN_FROM_ADDRESS.43bc581e8d", "test.ethereum_models.not_null_silver_dex__v2_swaps_ORIGIN_FUNCTION_SIGNATURE.30b61017af", "test.ethereum_models.not_null_silver_dex__v2_swaps_SENDER.679f0122aa", "test.ethereum_models.not_null_silver_dex__v2_swaps_TOKEN_IN.e41b5ca91a", "test.ethereum_models.not_null_silver_dex__v2_swaps_TOKEN_OUT.baa114db6e", "test.ethereum_models.not_null_silver_dex__v2_swaps_TX_HASH.d5c22e2447", "test.ethereum_models.not_null_silver_dex__v2_swaps_TX_TO.4391a065dd", "test.ethereum_models.not_null_silver_dex__v2_swaps__LOG_ID.459aa805b5"], "model.ethereum_models.silver_dex__pools": ["model.ethereum_models.silver_dex__v2_swaps", "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver_dex__pools_POOL_ADDRESS.83afc7f284"], "model.ethereum_models.core__fact_transactions": ["model.ethereum_models.core__sv_fact_transactions"], "model.ethereum_models.core__dim_dex_liquidity_pools": [], "model.ethereum_models.core__dim_contracts_extended": [], "model.ethereum_models.core__ez_token_transfers": ["model.ethereum_models.silver_nft__rarible_sales", "model.ethereum_models.silver_nft__x2y2_sales", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_core__ez_token_transfers_HAS_DECIMAL__true__false.77a32ba9f8", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_core__ez_token_transfers_HAS_PRICE__true__false.c77e1cdb74", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_AMOUNT_USD__NUMBER__FLOAT.41b94e4dfd", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_AMOUNT__NUMBER__FLOAT.ef74453dc7", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_BLOCK_NUMBER__NUMBER__FLOAT.5677fb7a33", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.74e36526fa", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_DECIMALS__NUMBER__FLOAT.bf814784ea", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_INGESTED_AT__TIMESTAMP_NTZ.a0e512a16d", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_RAW_AMOUNT__NUMBER__FLOAT.f16ebc3c1c", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_SYMBOL__STRING__VARCHAR.2fe518e35d", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_TOKEN_PRICE__NUMBER__FLOAT.c860fdba6e", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_token_transfers_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.6c5f384aea", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_token_transfers_FROM_ADDRESS__0_xX_0_9a_fA_F_.9fadb81646", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_token_transfers_TO_ADDRESS__0_xX_0_9a_fA_F_.1da4143081", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_token_transfers_TX_HASH__0_xX_0_9a_fA_F_.2ed20e4304", "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_token_transfers_BLOCK_TIMESTAMP__day__1.1d56697ce2", "test.ethereum_models.dbt_utils_unique_combination_of_columns_core__ez_token_transfers__LOG_ID.e8a3ff1d6e", "test.ethereum_models.not_null_core__ez_token_transfers_AMOUNT_USD.399f4c1d66", "test.ethereum_models.not_null_core__ez_token_transfers_BLOCK_NUMBER.f76d8950d3", "test.ethereum_models.not_null_core__ez_token_transfers_BLOCK_TIMESTAMP.ac73bae239", "test.ethereum_models.not_null_core__ez_token_transfers_CONTRACT_ADDRESS.006c65a449", "test.ethereum_models.not_null_core__ez_token_transfers_FROM_ADDRESS.1eeb23e280", "test.ethereum_models.not_null_core__ez_token_transfers_HAS_DECIMAL.05d2a91a21", "test.ethereum_models.not_null_core__ez_token_transfers_HAS_PRICE.9b0670c203", "test.ethereum_models.not_null_core__ez_token_transfers_INGESTED_AT.15d2e566e7", "test.ethereum_models.not_null_core__ez_token_transfers_ORIGIN_FROM_ADDRESS.9fe38480be", "test.ethereum_models.not_null_core__ez_token_transfers_ORIGIN_FUNCTION_SIGNATURE.817f71c121", "test.ethereum_models.not_null_core__ez_token_transfers_RAW_AMOUNT.a3646396ec", "test.ethereum_models.not_null_core__ez_token_transfers_TO_ADDRESS.1645d36f89", "test.ethereum_models.not_null_core__ez_token_transfers_TX_HASH.8d54870f53", "test.ethereum_models.not_null_core__ez_token_transfers__LOG_ID.0ec836c5f8"], "model.ethereum_models.core__ez_eth_transfers": ["model.ethereum_models.core__sv_ez_eth_transfers"], "model.ethereum_models.core__fact_token_transfers": ["model.ethereum_models.core__sv_fact_token_transfers"], "model.ethereum_models.core__dim_function_signatures": ["model.ethereum_models.core__sv_dim_function_signatures"], "model.ethereum_models.core__ez_dex_swaps": ["test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_AMOUNT_IN_USD__NUMBER__FLOAT.b565b7ded2", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_AMOUNT_IN__NUMBER__FLOAT.cf58ec2f14", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT.d321ebbe3c", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_AMOUNT_OUT__NUMBER__FLOAT.1953480d73", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_BLOCK_NUMBER__NUMBER__FLOAT.fe4c8e9e74", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.53f946e5f7", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_EVENT_INDEX__NUMBER__FLOAT.eeb957bb0a", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_EVENT_NAME__STRING__VARCHAR.fa12481d21", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_PLATFORM__STRING__VARCHAR.045b7f587a", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_SYMBOL_IN__STRING__VARCHAR.98d21a7e6b", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_SYMBOL_OUT__STRING__VARCHAR.94e5ffc1f8", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.d7efe8e576", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.08cb184de7", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.f94db051a4", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_SENDER__0_xX_0_9a_fA_F_.fcc46d5e93", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_TOKEN_IN__0_xX_0_9a_fA_F_.f4139933b0", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_.942a1810b7", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_TX_HASH__0_xX_0_9a_fA_F_.d4d2dd8d38", "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_dex_swaps_BLOCK_TIMESTAMP__day__1.8f881aae37", "test.ethereum_models.dbt_utils_unique_combination_of_columns_core__ez_dex_swaps__LOG_ID.e945fa690a", "test.ethereum_models.not_null_core__ez_dex_swaps_BLOCK_NUMBER.3b2b1633f1", "test.ethereum_models.not_null_core__ez_dex_swaps_BLOCK_TIMESTAMP.929581fe29", "test.ethereum_models.not_null_core__ez_dex_swaps_CONTRACT_ADDRESS.af7c3bd430", "test.ethereum_models.not_null_core__ez_dex_swaps_ORIGIN_FROM_ADDRESS.9574e82f5a", "test.ethereum_models.not_null_core__ez_dex_swaps_ORIGIN_FUNCTION_SIGNATURE.26fd2bdff6", "test.ethereum_models.not_null_core__ez_dex_swaps_SENDER.09a5f2a1d3", "test.ethereum_models.not_null_core__ez_dex_swaps_TOKEN_IN.dcf4834d74", "test.ethereum_models.not_null_core__ez_dex_swaps_TOKEN_OUT.a17febc2f5", "test.ethereum_models.not_null_core__ez_dex_swaps_TX_HASH.20543d789e", "test.ethereum_models.not_null_core__ez_dex_swaps_TX_TO.91ff48bd55", "test.ethereum_models.not_null_core__ez_dex_swaps__LOG_ID.54305ad02d"], "model.ethereum_models.core__fact_hourly_token_prices": ["model.ethereum_models.core__ez_nft_mints", "model.ethereum_models.core__ez_token_transfers", "model.ethereum_models.silver_dex__v2_swaps", "model.ethereum_models.silver_nft__looksrare_sales", "model.ethereum_models.silver_nft__nftx_sales", "model.ethereum_models.silver_nft__nftx_sales", "model.ethereum_models.silver_nft__opensea_sales", "model.ethereum_models.silver_nft__rarible_sales", "model.ethereum_models.silver_nft__x2y2_sales"], "model.ethereum_models.core__fact_traces": ["model.ethereum_models.core__sv_fact_traces"], "model.ethereum_models.core__dim_event_signatures": ["model.ethereum_models.core__sv_dim_event_signatures"], "model.ethereum_models.core__fact_blocks": ["model.ethereum_models.core__sv_fact_blocks"], "model.ethereum_models.core__dim_dates": [], "model.ethereum_models.core__fact_event_logs": ["model.ethereum_models.core__sv_fact_event_logs"], "model.ethereum_models.core__dim_contracts": ["model.ethereum_models.core__ez_nft_mints", "model.ethereum_models.core__ez_token_transfers", "model.ethereum_models.core__sv_dim_contracts", "model.ethereum_models.silver_dex__pools"], "model.ethereum_models.core__dim_labels": ["model.ethereum_models.silver__nft_transfers", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_BLOCKCHAIN__ethereum.d8a6eb03b5", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin__project.145ec1d947", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_ADDRESS_NAME__STRING__VARCHAR.7747aa45d1", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_LABEL_SUBTYPE__STRING__VARCHAR.80b827b7f5", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_LABEL__STRING__VARCHAR.541a605c84", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__dim_labels_ADDRESS__0_xX_0_9a_fA_F_.52c2534d6a", "test.ethereum_models.dbt_utils_unique_combination_of_columns_core__dim_labels_BLOCKCHAIN__CREATOR__ADDRESS.de325ffec9", "test.ethereum_models.not_null_core__dim_labels_ADDRESS.ddf35f62af", "test.ethereum_models.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7", "test.ethereum_models.not_null_core__dim_labels_CREATOR.0c77d5749c", "test.ethereum_models.not_null_core__dim_labels_LABEL.05696d692d", "test.ethereum_models.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c", "test.ethereum_models.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed"], "model.ethereum_models.core__sv_dim_labels": [], "model.ethereum_models.core__sv_fact_blocks": [], "model.ethereum_models.core__sv_fact_traces": [], "model.ethereum_models.core__sv_ez_eth_transfers": [], "model.ethereum_models.core__sv_dim_function_signatures": [], "model.ethereum_models.core__sv_fact_transactions": [], "model.ethereum_models.core__sv_fact_event_logs": [], "model.ethereum_models.core__sv_fact_token_transfers": [], "model.ethereum_models.core__sv_dim_dex_liquidity_pools": [], "model.ethereum_models.core__sv_dim_contracts": [], "model.ethereum_models.core__sv_fact_hourly_token_prices": [], "model.ethereum_models.core__sv_dim_event_signatures": [], "model.ethereum_models.sushi__ez_swaps": ["test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN_USD__NUMBER__FLOAT.9a8b1e0480", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN__NUMBER__FLOAT.ce483aa368", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT.a061b70981", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT__NUMBER__FLOAT.6028b5385f", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_NUMBER__NUMBER__FLOAT.7b69aae0de", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c09d40c178", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_EVENT_INDEX__NUMBER__FLOAT.311b76dea2", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_EVENT_NAME__STRING__VARCHAR.9c08c6c888", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_PLATFORM__STRING__VARCHAR.55fbd4c7c1", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_IN__STRING__VARCHAR.b1aea9c82f", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_OUT__STRING__VARCHAR.9fa7d6e04c", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.d6ed59e98b", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.d35c7fe495", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.dd5a907c68", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_SENDER__0_xX_0_9a_fA_F_.b8de01d1db", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_IN__0_xX_0_9a_fA_F_.ae96a38071", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_.a99f33851e", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_HASH__0_xX_0_9a_fA_F_.15d478c09c", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_TO__0_xX_0_9a_fA_F_.81a6e2ad45", "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_swaps_BLOCK_TIMESTAMP__day__1.ccd4b95299", "test.ethereum_models.dbt_utils_unique_combination_of_columns_sushi__ez_swaps__LOG_ID.cebe0de5a1", "test.ethereum_models.not_null_sushi__ez_swaps_BLOCK_NUMBER.4da3b3d654", "test.ethereum_models.not_null_sushi__ez_swaps_BLOCK_TIMESTAMP.64d0de4b09", "test.ethereum_models.not_null_sushi__ez_swaps_CONTRACT_ADDRESS.f4cd976e06", "test.ethereum_models.not_null_sushi__ez_swaps_ORIGIN_FROM_ADDRESS.128c7fd237", "test.ethereum_models.not_null_sushi__ez_swaps_ORIGIN_FUNCTION_SIGNATURE.681d6adb74", "test.ethereum_models.not_null_sushi__ez_swaps_SENDER.b76baa207c", "test.ethereum_models.not_null_sushi__ez_swaps_TOKEN_IN.8093c41dbe", "test.ethereum_models.not_null_sushi__ez_swaps_TOKEN_OUT.68f3f9aac2", "test.ethereum_models.not_null_sushi__ez_swaps_TX_HASH.5c71b07498", "test.ethereum_models.not_null_sushi__ez_swaps_TX_TO.1c512c542a", "test.ethereum_models.not_null_sushi__ez_swaps__LOG_ID.3bc8eb295f"], "model.ethereum_models.sushi__dim_distributor_reward_schedule": [], "test.ethereum_models.silver__transactions__tx-gap": [], "seed.ethereum_models.silver__seed_nft_metadata_upload": ["model.ethereum_models.silver__nft_metadata_api_requests"], "seed.ethereum_models.silver__event_signatures_backfill": [], "seed.ethereum_models.silver__signatures_backfill": [], "operation.ethereum_models.ethereum_models-on-run-start-0": [], "operation.ethereum_models.ethereum_models-on-run-start-1": [], "operation.ethereum_models.ethereum_models-on-run-start-2": [], "operation.ethereum_models.ethereum_models-on-run-start-3": [], "test.ethereum_models.not_null_silver__logs_BLOCK_NUMBER.f98b235d4c": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_NUMBER__NUMBER.73461cc432": [], "test.ethereum_models.not_null_silver__logs_BLOCK_TIMESTAMP.ca6209335c": [], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__logs_BLOCK_TIMESTAMP__day__1.79d0ca0413": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c39585c6f3": [], "test.ethereum_models.not_null_silver__logs_TX_HASH.18b09ee14d": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_TX_HASH__0_xX_0_9a_fA_F_.0eee0960b6": [], "test.ethereum_models.not_null_silver__logs_EVENT_INDEX.b97eeb39d7": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INDEX__NUMBER__FLOAT.d0df352178": [], "test.ethereum_models.not_null_silver__logs_CONTRACT_ADDRESS.b78d8c86eb": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.28bc84b2ae": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_NAME__STRING__VARCHAR.7af2bc20cd": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__logs_EVENT_INPUTS__OBJECT.a903a96237": [], "test.ethereum_models.not_null_silver__logs_TOPICS.f042e94d85": [], "test.ethereum_models.not_null_silver__logs_DATA.c5fac5c4a4": [], "test.ethereum_models.not_null_silver__logs_EVENT_REMOVED.4f302d08e0": [], "test.ethereum_models.not_null_silver__logs__LOG_ID.8c3f196b2a": [], "test.ethereum_models.not_null_silver__logs_ORIGIN_FUNCTION_SIGNATURE.ed647f3e17": [], "test.ethereum_models.not_null_silver__logs_ORIGIN_FROM_ADDRESS.1759538d91": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.a59d6ffc6a": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__logs_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.869407dadd": [], "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__logs__LOG_ID.780efa90bd": [], "test.ethereum_models.sequence_gaps_silver__logs_EVENT_INDEX__BLOCK_NUMBER__TX_HASH.8b3582ee4a": [], "test.ethereum_models.not_null_silver__blocks_BLOCK_NUMBER.3ed5bd5a97": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_NUMBER__NUMBER__FLOAT.5e6997665c": [], "test.ethereum_models.not_null_silver__blocks_BLOCK_TIMESTAMP.b65a1fcead": [], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__blocks_BLOCK_TIMESTAMP__day__1.3844f6e7d3": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.2a22373751": [], "test.ethereum_models.not_null_silver__blocks_NETWORK.65d2a5d7b1": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_NETWORK__STRING__VARCHAR.31e2a1e5bd": [], "test.ethereum_models.not_null_silver__blocks_BLOCKCHAIN.c3e6e8be96": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCKCHAIN__STRING__VARCHAR.01a66b1dcd": [], "test.ethereum_models.not_null_silver__blocks_TX_COUNT.34525b51e6": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TX_COUNT__NUMBER__FLOAT.9486c781f5": [], "test.ethereum_models.not_null_silver__blocks_DIFFICULTY.dfd6bb7310": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_DIFFICULTY__NUMBER__FLOAT.4b5343dd2c": [], "test.ethereum_models.not_null_silver__blocks_TOTAL_DIFFICULTY.64edc4b2a9": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_TOTAL_DIFFICULTY__NUMBER__FLOAT.4a0213cf40": [], "test.ethereum_models.not_null_silver__blocks_EXTRA_DATA.7b7824f6ea": [], "test.ethereum_models.not_null_silver__blocks_GAS_LIMIT.a66366ccf7": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_LIMIT__NUMBER__FLOAT.c009cca74d": [], "test.ethereum_models.not_null_silver__blocks_GAS_USED.637b37099a": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_GAS_USED__NUMBER__FLOAT.bde7aa758f": [], "test.ethereum_models.not_null_silver__blocks_HASH.bc44a39f94": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_HASH__0_xX_0_9a_fA_F_.923a822bca": [], "test.ethereum_models.not_null_silver__blocks_PARENT_HASH.a17a399346": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_PARENT_HASH__0_xX_0_9a_fA_F_.164fb6eb16": [], "test.ethereum_models.not_null_silver__blocks_MINER.c17f6cbb87": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_MINER__0_xX_0_9a_fA_F_.7e8cc9ca0b": [], "test.ethereum_models.not_null_silver__blocks_NONCE.10c0698884": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_NONCE__0_xX_0_9a_fA_F_.0f55c64955": [], "test.ethereum_models.not_null_silver__blocks_RECEIPTS_ROOT.cd3163505f": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_RECEIPTS_ROOT__0_xX_0_9a_fA_F_.6964f6dc30": [], "test.ethereum_models.not_null_silver__blocks_SHA3_UNCLES.e7c903103e": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__blocks_SHA3_UNCLES__0_xX_0_9a_fA_F_.c74b2fa922": [], "test.ethereum_models.not_null_silver__blocks_SIZE.f1fa8f466b": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_SIZE__NUMBER.7f2a8fc982": [], "test.ethereum_models.not_null_silver__blocks_BLOCK_HEADER_JSON.98268f8f2b": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__blocks_BLOCK_HEADER_JSON__OBJECT.1be6a88f28": [], "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__blocks_BLOCK_NUMBER.58d43342ca": [], "test.ethereum_models.sequence_gaps_silver__blocks_BLOCK_NUMBER.4a1c166840": [], "test.ethereum_models.not_null_silver__transactions_BLOCK_NUMBER.574ebe21b0": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_NUMBER__NUMBER__FLOAT.c48e941615": [], "test.ethereum_models.not_null_silver__transactions_BLOCK_TIMESTAMP.3ffe21fe8d": [], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transactions_BLOCK_TIMESTAMP__day__1.cf074498fc": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bc42693f6e": [], "test.ethereum_models.not_null_silver__transactions_TX_HASH.8a2cc32062": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TX_HASH__0_xX_0_9a_fA_F_.558497d3b6": [], "test.ethereum_models.not_null_silver__transactions_NONCE.3eac435cf9": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_NONCE__NUMBER__FLOAT.e9f3267e00": [], "test.ethereum_models.not_null_silver__transactions_POSITION.6be7c293c7": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_POSITION__NUMBER.5d920e939f": [], "test.ethereum_models.not_null_silver__transactions_FROM_ADDRESS.002109da43": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_FROM_ADDRESS__0_xX_0_9a_fA_F_.48157e7169": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_TO_ADDRESS__0_xX_0_9a_fA_F_.6729f77190": [], "test.ethereum_models.not_null_silver__transactions_ETH_VALUE.1b920ed67c": [], "test.ethereum_models.not_null_silver__transactions_BLOCK_HASH.2c918b73f5": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transactions_BLOCK_HASH__0_xX_0_9a_fA_F_.6a7999ad31": [], "test.ethereum_models.not_null_silver__transactions_GAS_PRICE.9ee195e584": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_PRICE__NUMBER__FLOAT.7ff329f632": [], "test.ethereum_models.not_null_silver__transactions_GAS_LIMIT.b5ac619228": [], "test.ethereum_models.not_null_silver__transactions_INPUT_DATA.3cc998f5b1": [], "test.ethereum_models.not_null_silver__transactions_STATUS.42a484ef7a": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver__transactions_STATUS__SUCCESS__FAIL.f4150c7e34": [], "test.ethereum_models.not_null_silver__transactions_GAS_USED.1c943486c0": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_GAS_USED__NUMBER__FLOAT.5308f986d3": [], "test.ethereum_models.not_null_silver__transactions_CUMULATIVE_GAS_USED.2ff9788f8f": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_CUMULATIVE_GAS_USED__NUMBER__FLOAT.68061c4689": [], "test.ethereum_models.not_null_silver__transactions_TX_FEE.f2f0cdc085": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_FEE__NUMBER__FLOAT.c56121a801": [], "test.ethereum_models.not_null_silver__transactions_EFFECTIVE_GAS_PRICE.fac733dec7": [], "test.ethereum_models.not_null_silver__transactions_TX_JSON.c989b71e6a": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_TX_JSON__OBJECT.f6596e98ec": [], "test.ethereum_models.not_null_silver__transactions_INGESTED_AT.98e6b66449": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transactions_INGESTED_AT__TIMESTAMP_NTZ.c716636b55": [], "test.ethereum_models.not_null_silver__transactions_ORIGIN_FUNCTION_SIGNATURE.6ba6212d68": [], "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__transactions_TX_HASH.c217683bc6": [], "test.ethereum_models.sequence_gaps_silver__transactions_POSITION__BLOCK_NUMBER.bb18e3a49e": [], "test.ethereum_models.not_null_silver__transfers_BLOCK_NUMBER.d11bbde531": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_NUMBER__NUMBER__FLOAT.45ecdb8c94": [], "test.ethereum_models.not_null_silver__transfers_BLOCK_TIMESTAMP.d599dc282c": [], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__transfers_BLOCK_TIMESTAMP__day__1.aef2ec1111": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.4ccf9184cd": [], "test.ethereum_models.not_null_silver__transfers_TX_HASH.9444c39bdc": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TX_HASH__0_xX_0_9a_fA_F_.f25b6d0ca1": [], "test.ethereum_models.not_null_silver__transfers_CONTRACT_ADDRESS.df8cd401ef": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.8e89d13bed": [], "test.ethereum_models.not_null_silver__transfers_FROM_ADDRESS.cc15ca835c": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_FROM_ADDRESS__0_xX_0_9a_fA_F_.0479073084": [], "test.ethereum_models.not_null_silver__transfers_TO_ADDRESS.2ea6a02b7c": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_TO_ADDRESS__0_xX_0_9a_fA_F_.f65ff6bdb6": [], "test.ethereum_models.not_null_silver__transfers_RAW_AMOUNT.c53823d6c7": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__transfers_RAW_AMOUNT__NUMBER__FLOAT.eb70e6172e": [], "test.ethereum_models.not_null_silver__transfers__LOG_ID.29bb073a40": [], "test.ethereum_models.not_null_silver__transfers_ORIGIN_FUNCTION_SIGNATURE.c1c149f732": [], "test.ethereum_models.not_null_silver__transfers_ORIGIN_FROM_ADDRESS.30ffa7f127": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.fb311c6cec": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__transfers_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.81fe3d170a": [], "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__transfers__LOG_ID.3ebab76726": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_SYSTEM_CREATED_AT__TIMESTAMP_NTZ.b181fa0cf2": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_BLOCK_NUMBER__NUMBER__FLOAT.130c12438a": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.873512a62c": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__contracts_extended_CREATOR_ADDRESS__0_xX_0_9a_fA_F_.e7f86e2060": [], "test.ethereum_models.not_null_silver__contracts_extended_CONTRACT_ADDRESS.955f4c68be": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__contracts_extended_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.4020521dbd": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__contracts_extended_LOGIC_ADDRESS__0_xX_0_9a_fA_F_.1a0dc10ba5": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_TOKEN_CONVENTION__STRING__VARCHAR.8a2cf81ede": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver__contracts_extended_TOKEN_CONVENTION__erc20__erc721__erc1155.e1f3bc8eca": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_NAME__STRING__VARCHAR.b69b37b6ff": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_SYMBOL__STRING__VARCHAR.346c9f22dc": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_DECIMALS__NUMBER__FLOAT.1f393edf99": [], "test.ethereum_models.not_null_silver__contracts_extended_CONTRACT_METADATA.6fbefddf5b": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__contracts_extended_CONTRACT_METADATA__OBJECT.0780253d9f": [], "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__contracts_extended_CONTRACT_ADDRESS.868e0ffdc1": [], "test.ethereum_models.not_null_silver__nft_transfers_BLOCK_NUMBER.5e11b6866e": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_transfers_BLOCK_NUMBER__NUMBER__FLOAT.6e27938ffc": [], "test.ethereum_models.not_null_silver__nft_transfers_BLOCK_TIMESTAMP.376ac811e0": [], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__nft_transfers_BLOCK_TIMESTAMP__day__1.acbf7aedfe": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__nft_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.dfd77585a5": [], "test.ethereum_models.not_null_silver__nft_transfers_TX_HASH.494be13b6d": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__nft_transfers_TX_HASH__0_xX_0_9a_fA_F_.6e7cff5a71": [], "test.ethereum_models.not_null_silver__nft_transfers_CONTRACT_ADDRESS.616fbb7bba": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__nft_transfers_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.c796a1205e": [], "test.ethereum_models.not_null_silver__nft_transfers_FROM_ADDRESS.b6f4942bc7": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__nft_transfers_FROM_ADDRESS__0_xX_0_9a_fA_F_.19a7a2c3f7": [], "test.ethereum_models.not_null_silver__nft_transfers_TO_ADDRESS.be19f60243": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__nft_transfers_TO_ADDRESS__0_xX_0_9a_fA_F_.0ab08ee86e": [], "test.ethereum_models.not_null_silver__nft_transfers_TOKENID.0ac214daa4": [], "test.ethereum_models.not_null_silver__nft_transfers__LOG_ID.50d81077a3": [], "test.ethereum_models.not_null_silver__nft_transfers_INGESTED_AT.52de2ea95d": [], "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__nft_transfers__LOG_ID.39058c5bc1": [], "test.ethereum_models.not_null_silver__eth_transfers_BLOCK_NUMBER.fb2e040913": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__eth_transfers_BLOCK_NUMBER__NUMBER__FLOAT.ed2b9f67f3": [], "test.ethereum_models.not_null_silver__eth_transfers_BLOCK_TIMESTAMP.0a766e4f24": [], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__eth_transfers_BLOCK_TIMESTAMP__day__1.aede4cd522": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__eth_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.77005357a9": [], "test.ethereum_models.not_null_silver__eth_transfers_TX_HASH.17f57d6018": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__eth_transfers_TX_HASH__0_xX_0_9a_fA_F_.6aa1eca6e4": [], "test.ethereum_models.not_null_silver__eth_transfers_FROM_ADDRESS.aeb58eefc2": [], "test.ethereum_models.not_null_silver__eth_transfers_TO_ADDRESS.f2b33456f2": [], "test.ethereum_models.not_null_silver__eth_transfers_ETH_VALUE.5a36354513": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__eth_transfers_ETH_VALUE__NUMBER__FLOAT.6f192002f4": [], "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__eth_transfers__CALL_ID.bd08623ad0": [], "test.ethereum_models.not_null_silver__contracts_address.79fc23bbae": [], "test.ethereum_models.not_null_silver__contracts_contract_metadata.aa94997b8d": [], "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__contracts_address.5d43822bf3": [], "test.ethereum_models.not_null_silver__traces_BLOCK_NUMBER.9dcd1525b2": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_NUMBER__NUMBER__FLOAT.ccd2c156a6": [], "test.ethereum_models.not_null_silver__traces_BLOCK_TIMESTAMP.4053e07c73": [], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver__traces_BLOCK_TIMESTAMP__day__1.0589c5d87f": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver__traces_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.3ffecd9044": [], "test.ethereum_models.not_null_silver__traces_TX_HASH.ccbdeb5e91": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_TX_HASH__0_xX_0_9a_fA_F_.14f576932b": [], "test.ethereum_models.not_null_silver__traces_FROM_ADDRESS.285ef0c05b": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_FROM_ADDRESS__0_xX_0_9a_fA_F_.b404693575": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver__traces_TO_ADDRESS__0_xX_0_9a_fA_F_.3af876962e": [], "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver__traces__CALL_ID.2854a11c5a": [], "test.ethereum_models.not_null_silver_nft__rarible_sales_BLOCK_NUMBER.1ed5891cea": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_BLOCK_NUMBER__NUMBER__FLOAT.99c2666d8e": [], "test.ethereum_models.not_null_silver_nft__rarible_sales_BLOCK_TIMESTAMP.eeb49fcea0": [], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__rarible_sales_BLOCK_TIMESTAMP__day__1.1e82baebd7": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.a9e554785e": [], "test.ethereum_models.not_null_silver_nft__rarible_sales_TX_HASH.d6af452d33": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_TX_HASH__0_xX_0_9a_fA_F_.fc5de21e39": [], "test.ethereum_models.not_null_silver_nft__rarible_sales_PLATFORM_ADDRESS.5b6afa36ec": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_.85379defc5": [], "test.ethereum_models.not_null_silver_nft__rarible_sales_PLATFORM_NAME.c5e4d3de5e": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__rarible_sales_PLATFORM_NAME__rarible.0e2c579390": [], "test.ethereum_models.not_null_silver_nft__rarible_sales_SELLER_ADDRESS.74cc9082ac": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_SELLER_ADDRESS__0_xX_0_9a_fA_F_.9abb06ee02": [], "test.ethereum_models.not_null_silver_nft__rarible_sales_BUYER_ADDRESS.24df303e2d": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_BUYER_ADDRESS__0_xX_0_9a_fA_F_.9c266c2ce3": [], "test.ethereum_models.not_null_silver_nft__rarible_sales_NFT_ADDRESS.eee841b924": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_.8f93e087d0": [], "test.ethereum_models.not_null_silver_nft__rarible_sales_TOKENID.be34a7193c": [], "test.ethereum_models.not_null_silver_nft__rarible_sales_CURRENCY_ADDRESS.73c9b4e081": [], "test.ethereum_models.not_null_silver_nft__rarible_sales_PRICE.4299cf265e": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_PRICE__NUMBER__FLOAT.3c63c16af8": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_PRICE_USD__NUMBER__FLOAT.064d20c674": [], "test.ethereum_models.not_null_silver_nft__rarible_sales_TOTAL_FEES.2f0a1dde86": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_TOTAL_FEES__NUMBER__FLOAT.08041bbe52": [], "test.ethereum_models.not_null_silver_nft__rarible_sales_PLATFORM_FEE.5fb832c6d6": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_PLATFORM_FEE__NUMBER__FLOAT.58d99c50c3": [], "test.ethereum_models.not_null_silver_nft__rarible_sales_CREATOR_FEE.de434ed2a1": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_CREATOR_FEE__NUMBER__FLOAT.7bf7ddd040": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_TOTAL_FEES_USD__NUMBER__FLOAT.f3b00b2c4e": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_PLATFORM_FEE_USD__NUMBER__FLOAT.3b6e77f076": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_CREATOR_FEE_USD__NUMBER__FLOAT.a8e4c5c16a": [], "test.ethereum_models.not_null_silver_nft__rarible_sales_TX_FEE.52480cc33b": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_TX_FEE__NUMBER__FLOAT.d3339c69ea": [], "test.ethereum_models.not_null_silver_nft__rarible_sales_TX_FEE_USD.dec61f8fd8": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_TX_FEE_USD__NUMBER__FLOAT.dc6bddc005": [], "test.ethereum_models.not_null_silver_nft__rarible_sales_nft_uni_id.e4d5266587": [], "test.ethereum_models.not_null_silver_nft__rarible_sales_INGESTED_AT.774efdbea6": [], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__rarible_sales_INGESTED_AT__day__1.143ec4351d": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__rarible_sales_INGESTED_AT__TIMESTAMP_NTZ.1edcc84be4": [], "test.ethereum_models.not_null_silver_nft__rarible_sales_ORIGIN_FROM_ADDRESS.c72d1e4948": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.7dfb847fac": [], "test.ethereum_models.not_null_silver_nft__rarible_sales_ORIGIN_TO_ADDRESS.f8579d7685": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.d4f38a6f88": [], "test.ethereum_models.not_null_silver_nft__rarible_sales_ORIGIN_FUNCTION_SIGNATURE.9f47ed4489": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__rarible_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.936e776427": [], "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver_nft__rarible_sales_nft_uni_id.9eb1c12e50": [], "test.ethereum_models.not_null_silver_nft__looksrare_sales_BLOCK_NUMBER.eff4fa805e": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_BLOCK_NUMBER__NUMBER__FLOAT.26f855064c": [], "test.ethereum_models.not_null_silver_nft__looksrare_sales_BLOCK_TIMESTAMP.7479fcd544": [], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__looksrare_sales_BLOCK_TIMESTAMP__day__1.7d41164578": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.203ba5aff8": [], "test.ethereum_models.not_null_silver_nft__looksrare_sales_TX_HASH.06f84140a7": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_TX_HASH__0_xX_0_9a_fA_F_.9d158c2558": [], "test.ethereum_models.not_null_silver_nft__looksrare_sales_PLATFORM_ADDRESS.66c756648f": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_.bf6b7ad056": [], "test.ethereum_models.not_null_silver_nft__looksrare_sales_PLATFORM_NAME.51a5122ae1": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__looksrare_sales_PLATFORM_NAME__looksrare.9cbd647a62": [], "test.ethereum_models.not_null_silver_nft__looksrare_sales_NFT_FROM_ADDRESS.b41cc15db9": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_NFT_FROM_ADDRESS__0_xX_0_9a_fA_F_.0bd668142b": [], "test.ethereum_models.not_null_silver_nft__looksrare_sales_NFT_TO_ADDRESS.d7d647030e": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_NFT_TO_ADDRESS__0_xX_0_9a_fA_F_.666276b920": [], "test.ethereum_models.not_null_silver_nft__looksrare_sales_NFT_ADDRESS.7f102bd39e": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_.d80fae9d88": [], "test.ethereum_models.not_null_silver_nft__looksrare_sales_TOKENID.a69b7a7b4d": [], "test.ethereum_models.not_null_silver_nft__looksrare_sales_CURRENCY_ADDRESS.07b9dcb4b5": [], "test.ethereum_models.not_null_silver_nft__looksrare_sales_PRICE.c86ff5ae80": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_PRICE__NUMBER__FLOAT.d68c2faeac": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_PRICE_USD__NUMBER__FLOAT.d87e60eece": [], "test.ethereum_models.not_null_silver_nft__looksrare_sales_TOTAL_FEES.9a38d0c63e": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_TOTAL_FEES__NUMBER__FLOAT.27da09c426": [], "test.ethereum_models.not_null_silver_nft__looksrare_sales_PLATFORM_FEE.24b3ac449d": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_PLATFORM_FEE__NUMBER__FLOAT.63ef886134": [], "test.ethereum_models.not_null_silver_nft__looksrare_sales_CREATOR_FEE.1517fe04d7": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_CREATOR_FEE__NUMBER__FLOAT.76daf9d67e": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_TOTAL_FEES_USD__NUMBER__FLOAT.af0751ca96": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_PLATFORM_FEE_USD__NUMBER__FLOAT.b478b2adcf": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_CREATOR_FEE_USD__NUMBER__FLOAT.fe3338dc89": [], "test.ethereum_models.not_null_silver_nft__looksrare_sales_TX_FEE.080a2177c8": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_TX_FEE__NUMBER__FLOAT.22bf944f15": [], "test.ethereum_models.not_null_silver_nft__looksrare_sales_TX_FEE_USD.9a60a8a1c4": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_TX_FEE_USD__NUMBER__FLOAT.68c28c8147": [], "test.ethereum_models.not_null_silver_nft__looksrare_sales__LOG_ID.8ab49a30e1": [], "test.ethereum_models.not_null_silver_nft__looksrare_sales_INGESTED_AT.2f4f068926": [], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__looksrare_sales_INGESTED_AT__day__1.ddf637c9e2": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__looksrare_sales_INGESTED_AT__TIMESTAMP_NTZ.27ad6ac99d": [], "test.ethereum_models.not_null_silver_nft__looksrare_sales_ORIGIN_FROM_ADDRESS.79187e68b6": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.7d533b46b8": [], "test.ethereum_models.not_null_silver_nft__looksrare_sales_ORIGIN_TO_ADDRESS.bda1344132": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.18b6e532b8": [], "test.ethereum_models.not_null_silver_nft__looksrare_sales_ORIGIN_FUNCTION_SIGNATURE.ae8e49763c": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__looksrare_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.c912f2f9cc": [], "test.ethereum_models.not_null_silver_nft__looksrare_sales_EVENT_TYPE.c68afd2d19": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__looksrare_sales_EVENT_TYPE__bid_won__sale.1a3346fb31": [], "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver_nft__looksrare_sales__log_id.6e1700c569": [], "test.ethereum_models.not_null_silver_nft__opensea_sales_BLOCK_NUMBER.ff6ffccdd3": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_BLOCK_NUMBER__NUMBER__FLOAT.d9ca2a1202": [], "test.ethereum_models.not_null_silver_nft__opensea_sales_BLOCK_TIMESTAMP.0b00ab83f0": [], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__opensea_sales_BLOCK_TIMESTAMP__day__1.6d7e629b07": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.49514f88c4": [], "test.ethereum_models.not_null_silver_nft__opensea_sales_TX_HASH.b9b888ff7c": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_TX_HASH__0_xX_0_9a_fA_F_.28436a215a": [], "test.ethereum_models.not_null_silver_nft__opensea_sales_PLATFORM_ADDRESS.2f2598fc00": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_.8d2dbabd48": [], "test.ethereum_models.not_null_silver_nft__opensea_sales_PLATFORM_NAME.ac234a5988": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__opensea_sales_PLATFORM_NAME__opensea.5aba577130": [], "test.ethereum_models.not_null_silver_nft__opensea_sales_NFT_FROM_ADDRESS.14581c0a44": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_NFT_FROM_ADDRESS__0_xX_0_9a_fA_F_.7121ee0cb0": [], "test.ethereum_models.not_null_silver_nft__opensea_sales_NFT_TO_ADDRESS.9d57a88f98": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_NFT_TO_ADDRESS__0_xX_0_9a_fA_F_.95d93d45fe": [], "test.ethereum_models.not_null_silver_nft__opensea_sales_NFT_ADDRESS.ccbdc863a6": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_.a8e11493ed": [], "test.ethereum_models.not_null_silver_nft__opensea_sales_TOKENID.0a6564219f": [], "test.ethereum_models.not_null_silver_nft__opensea_sales_CURRENCY_ADDRESS.67d7f68c0d": [], "test.ethereum_models.not_null_silver_nft__opensea_sales_PRICE.12d98fda92": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_PRICE__NUMBER__FLOAT.49af08b6d6": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_PRICE_USD__NUMBER__FLOAT.70feea7df8": [], "test.ethereum_models.not_null_silver_nft__opensea_sales_TOTAL_FEES.290020e9ec": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_TOTAL_FEES__NUMBER__FLOAT.fc5ea050bf": [], "test.ethereum_models.not_null_silver_nft__opensea_sales_PLATFORM_FEE.b66c03b059": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_PLATFORM_FEE__NUMBER__FLOAT.c169a6334f": [], "test.ethereum_models.not_null_silver_nft__opensea_sales_CREATOR_FEE.d7b66bbb1c": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_CREATOR_FEE__NUMBER__FLOAT.dc96f9c75e": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_TOTAL_FEES_USD__NUMBER__FLOAT.8afb1a5920": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_PLATFORM_FEE_USD__NUMBER__FLOAT.5c66b8d9e6": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_CREATOR_FEE_USD__NUMBER__FLOAT.12994666a6": [], "test.ethereum_models.not_null_silver_nft__opensea_sales_TX_FEE.632153a569": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_TX_FEE__NUMBER__FLOAT.615a8e437b": [], "test.ethereum_models.not_null_silver_nft__opensea_sales_TX_FEE_USD.6f3f5c7484": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_TX_FEE_USD__NUMBER__FLOAT.fd8e71b5e3": [], "test.ethereum_models.not_null_silver_nft__opensea_sales__LOG_ID.18b5b8bc41": [], "test.ethereum_models.not_null_silver_nft__opensea_sales_INGESTED_AT.8ad208bea8": [], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__opensea_sales_INGESTED_AT__day__1.62a375743f": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__opensea_sales_INGESTED_AT__TIMESTAMP_NTZ.df0515f572": [], "test.ethereum_models.not_null_silver_nft__opensea_sales_ORIGIN_FROM_ADDRESS.c11d976102": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.89dc1db5d1": [], "test.ethereum_models.not_null_silver_nft__opensea_sales_ORIGIN_TO_ADDRESS.8a06fa835e": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.136e4cd9dc": [], "test.ethereum_models.not_null_silver_nft__opensea_sales_ORIGIN_FUNCTION_SIGNATURE.b2c2a50da7": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__opensea_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.64a1b8490e": [], "test.ethereum_models.not_null_silver_nft__opensea_sales_EVENT_TYPE.15a116ebe0": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__opensea_sales_EVENT_TYPE__bid_won__sale.ac2374f4eb": [], "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver_nft__opensea_sales__log_id.77cdbe7222": [], "test.ethereum_models.not_null_silver_dex__v2_swaps_BLOCK_NUMBER.36b3cfcc65": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_BLOCK_NUMBER__NUMBER__FLOAT.d06b454912": [], "test.ethereum_models.not_null_silver_dex__v2_swaps_BLOCK_TIMESTAMP.567573ecfd": [], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_dex__v2_swaps_BLOCK_TIMESTAMP__day__1.0bd7deb591": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c46321a153": [], "test.ethereum_models.not_null_silver_dex__v2_swaps_TX_HASH.d5c22e2447": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_TX_HASH__0_xX_0_9a_fA_F_.c48f9b7af0": [], "test.ethereum_models.not_null_silver_dex__v2_swaps_CONTRACT_ADDRESS.ba47556f4f": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.9044abb286": [], "test.ethereum_models.not_null_silver_dex__v2_swaps_EVENT_NAME.66b664caa4": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_EVENT_NAME__STRING__VARCHAR.906c317369": [], "test.ethereum_models.not_null_silver_dex__v2_swaps_AMOUNT_IN.7362af5d9f": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_AMOUNT_IN__NUMBER__FLOAT.752b8442d3": [], "test.ethereum_models.not_null_silver_dex__v2_swaps_AMOUNT_OUT.4c690879c1": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_AMOUNT_OUT__NUMBER__FLOAT.27fcd6e1cd": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_AMOUNT_IN_USD__NUMBER__FLOAT.9271e7fe2b": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT.a9986bca1a": [], "test.ethereum_models.not_null_silver_dex__v2_swaps_TOKEN_IN.e41b5ca91a": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_TOKEN_IN__0_xX_0_9a_fA_F_.3e32dc1d9b": [], "test.ethereum_models.not_null_silver_dex__v2_swaps_TOKEN_OUT.baa114db6e": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_.11c94debef": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_SYMBOL_IN__STRING__VARCHAR.0fafbb5667": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_SYMBOL_OUT__STRING__VARCHAR.459b1e10ed": [], "test.ethereum_models.not_null_silver_dex__v2_swaps_SENDER.679f0122aa": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_SENDER__0_xX_0_9a_fA_F_.d1fb465aee": [], "test.ethereum_models.not_null_silver_dex__v2_swaps_TX_TO.4391a065dd": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_TX_TO__0_xX_0_9a_fA_F_.34807c7eba": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_PLATFORM__STRING__VARCHAR.863f80b5ff": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_dex__v2_swaps_EVENT_INDEX__NUMBER__FLOAT.b6d6b46e86": [], "test.ethereum_models.not_null_silver_dex__v2_swaps__LOG_ID.459aa805b5": [], "test.ethereum_models.not_null_silver_dex__v2_swaps_ORIGIN_FUNCTION_SIGNATURE.30b61017af": [], "test.ethereum_models.not_null_silver_dex__v2_swaps_ORIGIN_FROM_ADDRESS.43bc581e8d": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.515968e4c3": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_dex__v2_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.650cdd680a": [], "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver_dex__v2_swaps__LOG_ID.0563845eec": [], "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver_dex__pools_POOL_ADDRESS.83afc7f284": [], "test.ethereum_models.not_null_core__ez_dex_swaps_BLOCK_NUMBER.3b2b1633f1": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_BLOCK_NUMBER__NUMBER__FLOAT.fe4c8e9e74": [], "test.ethereum_models.not_null_core__ez_dex_swaps_BLOCK_TIMESTAMP.929581fe29": [], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_dex_swaps_BLOCK_TIMESTAMP__day__1.8f881aae37": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.53f946e5f7": [], "test.ethereum_models.not_null_core__ez_dex_swaps_TX_HASH.20543d789e": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_TX_HASH__0_xX_0_9a_fA_F_.d4d2dd8d38": [], "test.ethereum_models.not_null_core__ez_dex_swaps_CONTRACT_ADDRESS.af7c3bd430": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.d7efe8e576": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_EVENT_NAME__STRING__VARCHAR.fa12481d21": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_AMOUNT_IN__NUMBER__FLOAT.cf58ec2f14": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_AMOUNT_OUT__NUMBER__FLOAT.1953480d73": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_AMOUNT_IN_USD__NUMBER__FLOAT.b565b7ded2": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT.d321ebbe3c": [], "test.ethereum_models.not_null_core__ez_dex_swaps_TOKEN_IN.dcf4834d74": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_TOKEN_IN__0_xX_0_9a_fA_F_.f4139933b0": [], "test.ethereum_models.not_null_core__ez_dex_swaps_TOKEN_OUT.a17febc2f5": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_.942a1810b7": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_SYMBOL_IN__STRING__VARCHAR.98d21a7e6b": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_SYMBOL_OUT__STRING__VARCHAR.94e5ffc1f8": [], "test.ethereum_models.not_null_core__ez_dex_swaps_SENDER.09a5f2a1d3": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_SENDER__0_xX_0_9a_fA_F_.fcc46d5e93": [], "test.ethereum_models.not_null_core__ez_dex_swaps_TX_TO.91ff48bd55": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_PLATFORM__STRING__VARCHAR.045b7f587a": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_dex_swaps_EVENT_INDEX__NUMBER__FLOAT.eeb957bb0a": [], "test.ethereum_models.not_null_core__ez_dex_swaps__LOG_ID.54305ad02d": [], "test.ethereum_models.not_null_core__ez_dex_swaps_ORIGIN_FUNCTION_SIGNATURE.26fd2bdff6": [], "test.ethereum_models.not_null_core__ez_dex_swaps_ORIGIN_FROM_ADDRESS.9574e82f5a": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.08cb184de7": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_dex_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.f94db051a4": [], "test.ethereum_models.dbt_utils_unique_combination_of_columns_core__ez_dex_swaps__LOG_ID.e945fa690a": [], "test.ethereum_models.not_null_core__ez_token_transfers_BLOCK_NUMBER.f76d8950d3": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_BLOCK_NUMBER__NUMBER__FLOAT.5677fb7a33": [], "test.ethereum_models.not_null_core__ez_token_transfers_BLOCK_TIMESTAMP.ac73bae239": [], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_token_transfers_BLOCK_TIMESTAMP__day__1.1d56697ce2": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.74e36526fa": [], "test.ethereum_models.not_null_core__ez_token_transfers_TX_HASH.8d54870f53": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_token_transfers_TX_HASH__0_xX_0_9a_fA_F_.2ed20e4304": [], "test.ethereum_models.not_null_core__ez_token_transfers_CONTRACT_ADDRESS.006c65a449": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_token_transfers_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.6c5f384aea": [], "test.ethereum_models.not_null_core__ez_token_transfers_FROM_ADDRESS.1eeb23e280": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_token_transfers_FROM_ADDRESS__0_xX_0_9a_fA_F_.9fadb81646": [], "test.ethereum_models.not_null_core__ez_token_transfers_TO_ADDRESS.1645d36f89": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__ez_token_transfers_TO_ADDRESS__0_xX_0_9a_fA_F_.1da4143081": [], "test.ethereum_models.not_null_core__ez_token_transfers_RAW_AMOUNT.a3646396ec": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_RAW_AMOUNT__NUMBER__FLOAT.f16ebc3c1c": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_DECIMALS__NUMBER__FLOAT.bf814784ea": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_SYMBOL__STRING__VARCHAR.2fe518e35d": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_TOKEN_PRICE__NUMBER__FLOAT.c860fdba6e": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_AMOUNT__NUMBER__FLOAT.ef74453dc7": [], "test.ethereum_models.not_null_core__ez_token_transfers_AMOUNT_USD.399f4c1d66": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_AMOUNT_USD__NUMBER__FLOAT.41b94e4dfd": [], "test.ethereum_models.not_null_core__ez_token_transfers_HAS_PRICE.9b0670c203": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_core__ez_token_transfers_HAS_PRICE__true__false.c77e1cdb74": [], "test.ethereum_models.not_null_core__ez_token_transfers_HAS_DECIMAL.05d2a91a21": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_core__ez_token_transfers_HAS_DECIMAL__true__false.77a32ba9f8": [], "test.ethereum_models.not_null_core__ez_token_transfers__LOG_ID.0ec836c5f8": [], "test.ethereum_models.not_null_core__ez_token_transfers_INGESTED_AT.15d2e566e7": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__ez_token_transfers_INGESTED_AT__TIMESTAMP_NTZ.a0e512a16d": [], "test.ethereum_models.not_null_core__ez_token_transfers_ORIGIN_FUNCTION_SIGNATURE.817f71c121": [], "test.ethereum_models.not_null_core__ez_token_transfers_ORIGIN_FROM_ADDRESS.9fe38480be": [], "test.ethereum_models.dbt_utils_unique_combination_of_columns_core__ez_token_transfers__LOG_ID.e8a3ff1d6e": [], "test.ethereum_models.not_null_core__dim_labels_BLOCKCHAIN.a4e09054d7": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_BLOCKCHAIN__ethereum.d8a6eb03b5": [], "test.ethereum_models.not_null_core__dim_labels_CREATOR.0c77d5749c": [], "test.ethereum_models.not_null_core__dim_labels_ADDRESS.ddf35f62af": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_core__dim_labels_ADDRESS__0_xX_0_9a_fA_F_.52c2534d6a": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_ADDRESS_NAME__STRING__VARCHAR.7747aa45d1": [], "test.ethereum_models.not_null_core__dim_labels_LABEL_TYPE.65b0f6f1ed": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_core__dim_labels_LABEL_TYPE__flotsam__nft__defi__dex__cex__dapp__token__operator__layer2__chadmin__project.145ec1d947": [], "test.ethereum_models.not_null_core__dim_labels_LABEL_SUBTYPE.556a65235c": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_LABEL_SUBTYPE__STRING__VARCHAR.80b827b7f5": [], "test.ethereum_models.not_null_core__dim_labels_LABEL.05696d692d": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_core__dim_labels_LABEL__STRING__VARCHAR.541a605c84": [], "test.ethereum_models.dbt_utils_unique_combination_of_columns_core__dim_labels_BLOCKCHAIN__CREATOR__ADDRESS.de325ffec9": [], "test.ethereum_models.not_null_sushi__ez_swaps_BLOCK_NUMBER.4da3b3d654": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_NUMBER__NUMBER__FLOAT.7b69aae0de": [], "test.ethereum_models.not_null_sushi__ez_swaps_BLOCK_TIMESTAMP.64d0de4b09": [], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_sushi__ez_swaps_BLOCK_TIMESTAMP__day__1.ccd4b95299": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.c09d40c178": [], "test.ethereum_models.not_null_sushi__ez_swaps_TX_HASH.5c71b07498": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_HASH__0_xX_0_9a_fA_F_.15d478c09c": [], "test.ethereum_models.not_null_sushi__ez_swaps_CONTRACT_ADDRESS.f4cd976e06": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_CONTRACT_ADDRESS__0_xX_0_9a_fA_F_.d6ed59e98b": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_EVENT_NAME__STRING__VARCHAR.9c08c6c888": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN__NUMBER__FLOAT.ce483aa368": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT__NUMBER__FLOAT.6028b5385f": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_IN_USD__NUMBER__FLOAT.9a8b1e0480": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_AMOUNT_OUT_USD__NUMBER__FLOAT.a061b70981": [], "test.ethereum_models.not_null_sushi__ez_swaps_TOKEN_IN.8093c41dbe": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_IN__0_xX_0_9a_fA_F_.ae96a38071": [], "test.ethereum_models.not_null_sushi__ez_swaps_TOKEN_OUT.68f3f9aac2": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TOKEN_OUT__0_xX_0_9a_fA_F_.a99f33851e": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_IN__STRING__VARCHAR.b1aea9c82f": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_SYMBOL_OUT__STRING__VARCHAR.9fa7d6e04c": [], "test.ethereum_models.not_null_sushi__ez_swaps_SENDER.b76baa207c": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_SENDER__0_xX_0_9a_fA_F_.b8de01d1db": [], "test.ethereum_models.not_null_sushi__ez_swaps_TX_TO.1c512c542a": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_TX_TO__0_xX_0_9a_fA_F_.81a6e2ad45": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_PLATFORM__STRING__VARCHAR.55fbd4c7c1": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_sushi__ez_swaps_EVENT_INDEX__NUMBER__FLOAT.311b76dea2": [], "test.ethereum_models.not_null_sushi__ez_swaps__LOG_ID.3bc8eb295f": [], "test.ethereum_models.not_null_sushi__ez_swaps_ORIGIN_FUNCTION_SIGNATURE.681d6adb74": [], "test.ethereum_models.not_null_sushi__ez_swaps_ORIGIN_FROM_ADDRESS.128c7fd237": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.d35c7fe495": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_sushi__ez_swaps_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.dd5a907c68": [], "test.ethereum_models.dbt_utils_unique_combination_of_columns_sushi__ez_swaps__LOG_ID.cebe0de5a1": [], "model.ethereum_models.silver_nft__x2y2_sales": ["model.ethereum_models.core__ez_nft_sales", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__x2y2_sales_EVENT_TYPE__bid_won__sale.9cbf01638e", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__x2y2_sales_PLATFORM_NAME__x2y2.cfc6a32585", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_BLOCK_NUMBER__NUMBER__FLOAT.2cc39910e2", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bdc6444f67", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_CREATOR_FEE_USD__NUMBER__FLOAT.2ac3fcffcf", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_CREATOR_FEE__NUMBER__FLOAT.54e1aca021", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_INGESTED_AT__TIMESTAMP_NTZ.d78ceb4a04", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_PLATFORM_FEE_USD__NUMBER__FLOAT.9bf179fde9", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_PLATFORM_FEE__NUMBER__FLOAT.8eb2d43fb2", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_PRICE_USD__NUMBER__FLOAT.c971c47c2d", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_PRICE__NUMBER__FLOAT.bfa6fec79d", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_TOTAL_FEES_USD__NUMBER__FLOAT.eb14207648", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_TOTAL_FEES__NUMBER__FLOAT.9407bd9f47", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_TX_FEE_USD__NUMBER__FLOAT.f08cf2a35b", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_TX_FEE__NUMBER__FLOAT.60877f1f13", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_BUYER_ADDRESS__0_xX_0_9a_fA_F_.d9fa031635", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_.9425f12c11", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.850781869b", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.4495a35fb1", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.79abf2b6f6", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_.ccafb39a75", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_SELLER_ADDRESS__0_xX_0_9a_fA_F_.9df0803116", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_TX_HASH__0_xX_0_9a_fA_F_.2b5b006991", "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__x2y2_sales_BLOCK_TIMESTAMP__day__1.c8150df2c0", "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__x2y2_sales_INGESTED_AT__day__1.92056ec4c5", "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver_nft__x2y2_sales__log_id.d1e345a564", "test.ethereum_models.not_null_silver_nft__x2y2_sales_BLOCK_NUMBER.4f007c8c44", "test.ethereum_models.not_null_silver_nft__x2y2_sales_BLOCK_TIMESTAMP.14d5ad71f9", "test.ethereum_models.not_null_silver_nft__x2y2_sales_BUYER_ADDRESS.2591f8ab2f", "test.ethereum_models.not_null_silver_nft__x2y2_sales_CREATOR_FEE.26da310e90", "test.ethereum_models.not_null_silver_nft__x2y2_sales_CURRENCY_ADDRESS.a3da81cf6f", "test.ethereum_models.not_null_silver_nft__x2y2_sales_EVENT_TYPE.7650a16b69", "test.ethereum_models.not_null_silver_nft__x2y2_sales_INGESTED_AT.46520403cc", "test.ethereum_models.not_null_silver_nft__x2y2_sales_NFT_ADDRESS.20f944d1ac", "test.ethereum_models.not_null_silver_nft__x2y2_sales_ORIGIN_FROM_ADDRESS.124398d0de", "test.ethereum_models.not_null_silver_nft__x2y2_sales_ORIGIN_FUNCTION_SIGNATURE.aefb1b395b", "test.ethereum_models.not_null_silver_nft__x2y2_sales_ORIGIN_TO_ADDRESS.c2a9b80698", "test.ethereum_models.not_null_silver_nft__x2y2_sales_PLATFORM_ADDRESS.daded37cb8", "test.ethereum_models.not_null_silver_nft__x2y2_sales_PLATFORM_FEE.2c7a3e610f", "test.ethereum_models.not_null_silver_nft__x2y2_sales_PLATFORM_NAME.810306ba1c", "test.ethereum_models.not_null_silver_nft__x2y2_sales_PRICE.3af510cd06", "test.ethereum_models.not_null_silver_nft__x2y2_sales_SELLER_ADDRESS.cb600d47fc", "test.ethereum_models.not_null_silver_nft__x2y2_sales_TOKENID.5f96ea498c", "test.ethereum_models.not_null_silver_nft__x2y2_sales_TOTAL_FEES.f91a4c9d1b", "test.ethereum_models.not_null_silver_nft__x2y2_sales_TX_FEE.9408e64b38", "test.ethereum_models.not_null_silver_nft__x2y2_sales_TX_FEE_USD.767e895763", "test.ethereum_models.not_null_silver_nft__x2y2_sales_TX_HASH.d621a10c0f", "test.ethereum_models.not_null_silver_nft__x2y2_sales__LOG_ID.f0d0dc9fe6"], "test.ethereum_models.not_null_silver_nft__x2y2_sales_BLOCK_NUMBER.4f007c8c44": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_BLOCK_NUMBER__NUMBER__FLOAT.2cc39910e2": [], "test.ethereum_models.not_null_silver_nft__x2y2_sales_BLOCK_TIMESTAMP.14d5ad71f9": [], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__x2y2_sales_BLOCK_TIMESTAMP__day__1.c8150df2c0": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.bdc6444f67": [], "test.ethereum_models.not_null_silver_nft__x2y2_sales_TX_HASH.d621a10c0f": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_TX_HASH__0_xX_0_9a_fA_F_.2b5b006991": [], "test.ethereum_models.not_null_silver_nft__x2y2_sales_PLATFORM_ADDRESS.daded37cb8": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_.ccafb39a75": [], "test.ethereum_models.not_null_silver_nft__x2y2_sales_PLATFORM_NAME.810306ba1c": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__x2y2_sales_PLATFORM_NAME__x2y2.cfc6a32585": [], "test.ethereum_models.not_null_silver_nft__x2y2_sales_SELLER_ADDRESS.cb600d47fc": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_SELLER_ADDRESS__0_xX_0_9a_fA_F_.9df0803116": [], "test.ethereum_models.not_null_silver_nft__x2y2_sales_BUYER_ADDRESS.2591f8ab2f": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_BUYER_ADDRESS__0_xX_0_9a_fA_F_.d9fa031635": [], "test.ethereum_models.not_null_silver_nft__x2y2_sales_NFT_ADDRESS.20f944d1ac": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_.9425f12c11": [], "test.ethereum_models.not_null_silver_nft__x2y2_sales_TOKENID.5f96ea498c": [], "test.ethereum_models.not_null_silver_nft__x2y2_sales_CURRENCY_ADDRESS.a3da81cf6f": [], "test.ethereum_models.not_null_silver_nft__x2y2_sales_PRICE.3af510cd06": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_PRICE__NUMBER__FLOAT.bfa6fec79d": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_PRICE_USD__NUMBER__FLOAT.c971c47c2d": [], "test.ethereum_models.not_null_silver_nft__x2y2_sales_TOTAL_FEES.f91a4c9d1b": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_TOTAL_FEES__NUMBER__FLOAT.9407bd9f47": [], "test.ethereum_models.not_null_silver_nft__x2y2_sales_PLATFORM_FEE.2c7a3e610f": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_PLATFORM_FEE__NUMBER__FLOAT.8eb2d43fb2": [], "test.ethereum_models.not_null_silver_nft__x2y2_sales_CREATOR_FEE.26da310e90": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_CREATOR_FEE__NUMBER__FLOAT.54e1aca021": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_TOTAL_FEES_USD__NUMBER__FLOAT.eb14207648": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_PLATFORM_FEE_USD__NUMBER__FLOAT.9bf179fde9": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_CREATOR_FEE_USD__NUMBER__FLOAT.2ac3fcffcf": [], "test.ethereum_models.not_null_silver_nft__x2y2_sales_TX_FEE.9408e64b38": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_TX_FEE__NUMBER__FLOAT.60877f1f13": [], "test.ethereum_models.not_null_silver_nft__x2y2_sales_TX_FEE_USD.767e895763": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_TX_FEE_USD__NUMBER__FLOAT.f08cf2a35b": [], "test.ethereum_models.not_null_silver_nft__x2y2_sales__LOG_ID.f0d0dc9fe6": [], "test.ethereum_models.not_null_silver_nft__x2y2_sales_INGESTED_AT.46520403cc": [], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__x2y2_sales_INGESTED_AT__day__1.92056ec4c5": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__x2y2_sales_INGESTED_AT__TIMESTAMP_NTZ.d78ceb4a04": [], "test.ethereum_models.not_null_silver_nft__x2y2_sales_ORIGIN_FROM_ADDRESS.124398d0de": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.850781869b": [], "test.ethereum_models.not_null_silver_nft__x2y2_sales_ORIGIN_TO_ADDRESS.c2a9b80698": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.79abf2b6f6": [], "test.ethereum_models.not_null_silver_nft__x2y2_sales_ORIGIN_FUNCTION_SIGNATURE.aefb1b395b": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__x2y2_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.4495a35fb1": [], "test.ethereum_models.not_null_silver_nft__x2y2_sales_EVENT_TYPE.7650a16b69": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__x2y2_sales_EVENT_TYPE__bid_won__sale.9cbf01638e": [], "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver_nft__x2y2_sales__log_id.d1e345a564": [], "model.ethereum_models.silver_nft__nftx_sales": ["model.ethereum_models.core__ez_nft_sales", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__nftx_sales_EVENT_TYPE__bid_won__sale__redeem.9874ccb68c", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__nftx_sales_PLATFORM_NAME__nftx.ff46a06e13", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_BLOCK_NUMBER__NUMBER__FLOAT.80b0b9ff84", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.7b707ae4c6", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_CREATOR_FEE_USD__NUMBER__FLOAT.dca5d94515", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_CREATOR_FEE__NUMBER__FLOAT.f8b97ce082", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_INGESTED_AT__TIMESTAMP_NTZ.9784903dde", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_PLATFORM_FEE_USD__NUMBER__FLOAT.6a7b2bb1f3", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_PLATFORM_FEE__NUMBER__FLOAT.d6469ce959", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_PRICE_USD__NUMBER__FLOAT.6e269cbf60", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_PRICE__NUMBER__FLOAT.6816632f7b", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_TOTAL_FEES_USD__NUMBER__FLOAT.5df9ab741c", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_TOTAL_FEES__NUMBER__FLOAT.eacc4622d3", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_TX_FEE_USD__NUMBER__FLOAT.1d23057903", "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_TX_FEE__NUMBER__FLOAT.2f867b06d9", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_BUYER_ADDRESS__0_xX_0_9a_fA_F_.d151539a20", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_.0358077c70", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.a779792f16", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.94f67071fd", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.db9436489d", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_.e2b6cae481", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_SELLER_ADDRESS__0_xX_0_9a_fA_F_.6d628e9bd9", "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_TX_HASH__0_xX_0_9a_fA_F_.abb6961580", "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__nftx_sales_BLOCK_TIMESTAMP__day__1.d23cd81f40", "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__nftx_sales_INGESTED_AT__day__1.f965487553", "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver_nft__nftx_sales__log_id.dec5fb0811", "test.ethereum_models.not_null_silver_nft__nftx_sales_BLOCK_NUMBER.a6c03abb23", "test.ethereum_models.not_null_silver_nft__nftx_sales_BLOCK_TIMESTAMP.407a253fab", "test.ethereum_models.not_null_silver_nft__nftx_sales_BUYER_ADDRESS.e587ace7b8", "test.ethereum_models.not_null_silver_nft__nftx_sales_CREATOR_FEE.802daae741", "test.ethereum_models.not_null_silver_nft__nftx_sales_CURRENCY_ADDRESS.844deec13f", "test.ethereum_models.not_null_silver_nft__nftx_sales_EVENT_TYPE.45e0aa2632", "test.ethereum_models.not_null_silver_nft__nftx_sales_INGESTED_AT.fe4e1c0fe1", "test.ethereum_models.not_null_silver_nft__nftx_sales_NFT_ADDRESS.c32a41c9cb", "test.ethereum_models.not_null_silver_nft__nftx_sales_ORIGIN_FROM_ADDRESS.862af0b4d2", "test.ethereum_models.not_null_silver_nft__nftx_sales_ORIGIN_FUNCTION_SIGNATURE.1b424dab06", "test.ethereum_models.not_null_silver_nft__nftx_sales_PLATFORM_ADDRESS.02cd3a8016", "test.ethereum_models.not_null_silver_nft__nftx_sales_PLATFORM_FEE.ec0fdca684", "test.ethereum_models.not_null_silver_nft__nftx_sales_PLATFORM_NAME.2123aa582d", "test.ethereum_models.not_null_silver_nft__nftx_sales_PRICE.901075a57c", "test.ethereum_models.not_null_silver_nft__nftx_sales_PRICE_USD.18e5bb8d71", "test.ethereum_models.not_null_silver_nft__nftx_sales_SELLER_ADDRESS.32ef90769b", "test.ethereum_models.not_null_silver_nft__nftx_sales_TOKENID.96b5b44a8a", "test.ethereum_models.not_null_silver_nft__nftx_sales_TOTAL_FEES.303da7e4ef", "test.ethereum_models.not_null_silver_nft__nftx_sales_TX_FEE.470c08a79d", "test.ethereum_models.not_null_silver_nft__nftx_sales_TX_FEE_USD.ed0ec2916c", "test.ethereum_models.not_null_silver_nft__nftx_sales_TX_HASH.28602c9645", "test.ethereum_models.not_null_silver_nft__nftx_sales__LOG_ID.565ff32394"], "model.ethereum_models.core__sv_ez_nft_sales": [], "model.ethereum_models.core__ez_nft_sales": ["model.ethereum_models.core__sv_ez_nft_sales"], "model.ethereum_models.core__sv_ez_nft_transfers": [], "model.ethereum_models.core__ez_nft_transfers": ["model.ethereum_models.core__sv_ez_nft_transfers"], "model.ethereum_models.core__ez_nft_mints": ["test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_nft_mints_BLOCK_TIMESTAMP__day__1.d4b6d94a29", "test.ethereum_models.dbt_utils_unique_combination_of_columns_core__ez_nft_mints__LOG_ID.7c541378be"], "test.ethereum_models.not_null_silver_nft__nftx_sales_BLOCK_NUMBER.a6c03abb23": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_BLOCK_NUMBER__NUMBER__FLOAT.80b0b9ff84": [], "test.ethereum_models.not_null_silver_nft__nftx_sales_BLOCK_TIMESTAMP.407a253fab": [], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__nftx_sales_BLOCK_TIMESTAMP__day__1.d23cd81f40": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_BLOCK_TIMESTAMP__TIMESTAMP_NTZ.7b707ae4c6": [], "test.ethereum_models.not_null_silver_nft__nftx_sales_TX_HASH.28602c9645": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_TX_HASH__0_xX_0_9a_fA_F_.abb6961580": [], "test.ethereum_models.not_null_silver_nft__nftx_sales_PLATFORM_ADDRESS.02cd3a8016": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_PLATFORM_ADDRESS__0_xX_0_9a_fA_F_.e2b6cae481": [], "test.ethereum_models.not_null_silver_nft__nftx_sales_PLATFORM_NAME.2123aa582d": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__nftx_sales_PLATFORM_NAME__nftx.ff46a06e13": [], "test.ethereum_models.not_null_silver_nft__nftx_sales_BUYER_ADDRESS.e587ace7b8": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_BUYER_ADDRESS__0_xX_0_9a_fA_F_.d151539a20": [], "test.ethereum_models.not_null_silver_nft__nftx_sales_SELLER_ADDRESS.32ef90769b": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_SELLER_ADDRESS__0_xX_0_9a_fA_F_.6d628e9bd9": [], "test.ethereum_models.not_null_silver_nft__nftx_sales_NFT_ADDRESS.c32a41c9cb": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_NFT_ADDRESS__0_xX_0_9a_fA_F_.0358077c70": [], "test.ethereum_models.not_null_silver_nft__nftx_sales_TOKENID.96b5b44a8a": [], "test.ethereum_models.not_null_silver_nft__nftx_sales_CURRENCY_ADDRESS.844deec13f": [], "test.ethereum_models.not_null_silver_nft__nftx_sales_PRICE.901075a57c": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_PRICE__NUMBER__FLOAT.6816632f7b": [], "test.ethereum_models.not_null_silver_nft__nftx_sales_PRICE_USD.18e5bb8d71": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_PRICE_USD__NUMBER__FLOAT.6e269cbf60": [], "test.ethereum_models.not_null_silver_nft__nftx_sales_TOTAL_FEES.303da7e4ef": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_TOTAL_FEES__NUMBER__FLOAT.eacc4622d3": [], "test.ethereum_models.not_null_silver_nft__nftx_sales_PLATFORM_FEE.ec0fdca684": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_PLATFORM_FEE__NUMBER__FLOAT.d6469ce959": [], "test.ethereum_models.not_null_silver_nft__nftx_sales_CREATOR_FEE.802daae741": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_CREATOR_FEE__NUMBER__FLOAT.f8b97ce082": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_TOTAL_FEES_USD__NUMBER__FLOAT.5df9ab741c": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_PLATFORM_FEE_USD__NUMBER__FLOAT.6a7b2bb1f3": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_CREATOR_FEE_USD__NUMBER__FLOAT.dca5d94515": [], "test.ethereum_models.not_null_silver_nft__nftx_sales_TX_FEE.470c08a79d": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_TX_FEE__NUMBER__FLOAT.2f867b06d9": [], "test.ethereum_models.not_null_silver_nft__nftx_sales_TX_FEE_USD.ed0ec2916c": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_TX_FEE_USD__NUMBER__FLOAT.1d23057903": [], "test.ethereum_models.not_null_silver_nft__nftx_sales__LOG_ID.565ff32394": [], "test.ethereum_models.not_null_silver_nft__nftx_sales_INGESTED_AT.fe4e1c0fe1": [], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_silver_nft__nftx_sales_INGESTED_AT__day__1.f965487553": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_type_list_silver_nft__nftx_sales_INGESTED_AT__TIMESTAMP_NTZ.9784903dde": [], "test.ethereum_models.not_null_silver_nft__nftx_sales_ORIGIN_FROM_ADDRESS.862af0b4d2": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_ORIGIN_FROM_ADDRESS__0_xX_0_9a_fA_F_.a779792f16": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_ORIGIN_TO_ADDRESS__0_xX_0_9a_fA_F_.db9436489d": [], "test.ethereum_models.not_null_silver_nft__nftx_sales_ORIGIN_FUNCTION_SIGNATURE.1b424dab06": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_match_regex_silver_nft__nftx_sales_ORIGIN_FUNCTION_SIGNATURE__0_xX_0_9a_fA_F_.94f67071fd": [], "test.ethereum_models.not_null_silver_nft__nftx_sales_EVENT_TYPE.45e0aa2632": [], "test.ethereum_models.dbt_expectations_expect_column_values_to_be_in_set_silver_nft__nftx_sales_EVENT_TYPE__bid_won__sale__redeem.9874ccb68c": [], "test.ethereum_models.dbt_utils_unique_combination_of_columns_silver_nft__nftx_sales__log_id.dec5fb0811": [], "test.ethereum_models.dbt_expectations_expect_row_values_to_have_recent_data_core__ez_nft_mints_BLOCK_TIMESTAMP__day__1.d4b6d94a29": [], "test.ethereum_models.dbt_utils_unique_combination_of_columns_core__ez_nft_mints__LOG_ID.7c541378be": [], "source.ethereum_models.prod.ethereum_blocks": ["model.ethereum_models.bronze__blocks"], "source.ethereum_models.prod.ethereum_txs": ["model.ethereum_models.bronze__transactions"], "source.ethereum_models.flipside_gold_ethereum.contracts": ["model.ethereum_models.silver__contracts"], "source.ethereum_models.flipside_gold_ethereum.labels": ["model.ethereum_models.core__dim_labels"], "source.ethereum_models.flipside_gold_ethereum.token_prices_hourly": ["model.ethereum_models.core__fact_hourly_token_prices"], "source.ethereum_models.flipside_gold_ethereum.dex_liquidity_pools": ["model.ethereum_models.core__dim_dex_liquidity_pools", "model.ethereum_models.silver_dex__pools"], "source.ethereum_models.flipside_gold_ethereum.nft_metadata": ["model.ethereum_models.silver__nft_transfers", "model.ethereum_models.silver_nft__metadata"], "source.ethereum_models.flipside_silver_ethereum.contracts": [], "source.ethereum_models.flipside_silver_ethereum.reads": [], "source.ethereum_models.flipside_silver.ethereum_contracts_backfill": ["model.ethereum_models.bronze__contracts_backfill"], "source.ethereum_models.flipside_silver.ethereum_contracts": ["model.ethereum_models.silver__contracts_extended"], "source.ethereum_models.bronze.prod_ethereum_sink_407559501": ["model.ethereum_models.bronze__contracts"], "source.ethereum_models.ethereum_silver.token_meta_backup": ["model.ethereum_models.silver__nft_transfers"], "source.ethereum_models.ethereum_silver.signatures_backfill": ["model.ethereum_models.core__dim_function_signatures"], "source.ethereum_models.ethereum_silver.event_signatures_backfill": ["model.ethereum_models.core__dim_event_signatures"], "source.ethereum_models.ethereum_share.token_prices_hourly": ["model.ethereum_models.core__ez_eth_transfers", "model.ethereum_models.core__sv_fact_hourly_token_prices"], "source.ethereum_models.ethereum_share.dex_liquidity_pools": ["model.ethereum_models.core__sv_dim_dex_liquidity_pools"], "source.ethereum_models.ethereum_share.labels": ["model.ethereum_models.core__sv_dim_labels"], "source.ethereum_models.ethereum_external.nft_metadata_api": ["model.ethereum_models.silver__nft_metadata_api_requests"], "source.ethereum_models.sushi_external.sushi_rewards_schedule": ["model.ethereum_models.sushi__dim_distributor_reward_schedule"]}}